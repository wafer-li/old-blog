{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "Wafer Li's Notes",
  "home_page_url": "https://wafer.li/",
  "feed_url": "https://wafer.li/feed.json",
  "description": "Wafer Li 的知识库，请随便浏览",
  "author": {
    "name": "Wafer Li"
  },
  "items": [
    {
      "title": "关于我",
      "url": "https://wafer.li/about/",
      "id": "https://wafer.li/about/",
      "content_html": "<h1 id=\"关于我\"> 关于我</h1>\n<h2 id=\"图哪来的\"> 图哪来的</h2>\n<p><a href=\"https://waifulabs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">WaifuLabs</a></p>\n<h2 id=\"代码\"> 代码</h2>\n<p>Java、Kotlin 和 Scala；</p>\n<blockquote>\n<p><s>希望有一天能实现 JVM 平台语言制霸；</s></p>\n</blockquote>\n<p>能把 Android 学好学透就不错啦！</p>\n<blockquote>\n<p><s>最近在烦恼要不要转前端……</s></p>\n</blockquote>\n<p>前端还是慢慢来吧，有空就折腾一下</p>\n<h2 id=\"项目\"> 项目</h2>\n<p>2021 年可能会写点小东西，拭目以待！（也可能咕咕~</p>\n<h2 id=\"艦これ\"> 艦これ</h2>\n<p><strong>曾经的</strong>塔威提督，目前等级 119；</p>\n<p><s>舰娘就是生活</s> 生活还是折腾，生命不息，折腾不止</p>\n<p><a href=\"https://myfleet.moe/user/11092700/top\" target=\"_blank\" rel=\"noopener noreferrer\">MyFleetGrils</a></p>\n<p><img src=\"/images/kanmusu.png\" alt=\"Kanmusu\" /></p>\n",
      "image": "https://wafer.li/images/kanmusu.png",
      "date_published": "2021-07-15T11:52:03.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": []
    },
    {
      "title": "C# Basic",
      "url": "https://wafer.li/blog-corners/langroad/CSharp/CSharp%20Basic/",
      "id": "https://wafer.li/blog-corners/langroad/CSharp/CSharp%20Basic/",
      "summary": "\n<p> \n \n  \n  \n  \n  \n \n  \n  \n  \n \n  \n \n  </p>\n\n<h2 id=\"_1-hello-world\"> 1. Hello, World!</h2>\n<div><pre><code><span>namespace</span> <span>SimpleCSharpApp</span>\n<span>{</span>\n  <span>class</span> <span>Program</span>\n  <span>{</span>\n    <span>static</span> <span><span>void</span></span> <span>Main</span><span>(</span><span><span>string</span><span>[</span><span>]</span></span> app<span>)</span>\n    <span>{</span>\n      Console<span>.</span><span>WriteLine</span><span>(</span><span>\"Hello, World!\"</span><span>)</span><span>;</span>\n<div><pre><code>  Console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ReadLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;\n&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;\n</code></pre>\n</div><p><span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>​\t基本的编码规范：</p>\n<ul>\n<li>区分大小写</li>\n<li>命名空间、类、成员（包括方法）采用<strong>大驼峰</strong></li>\n<li>大括号另起一行</li>\n</ul></p>\n",
      "content_html": "\n<p> \n \n  \n  \n  \n  \n \n  \n  \n  \n \n  \n \n  </p>\n\n<h2 id=\"_1-hello-world\"> 1. Hello, World!</h2>\n<div><pre><code><span>namespace</span> <span>SimpleCSharpApp</span>\n<span>{</span>\n  <span>class</span> <span>Program</span>\n  <span>{</span>\n    <span>static</span> <span><span>void</span></span> <span>Main</span><span>(</span><span><span>string</span><span>[</span><span>]</span></span> app<span>)</span>\n    <span>{</span>\n      Console<span>.</span><span>WriteLine</span><span>(</span><span>\"Hello, World!\"</span><span>)</span><span>;</span>\n\n      Console<span>.</span><span>ReadLine</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n  <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>​\t基本的编码规范：</p>\n<ul>\n<li>区分大小写</li>\n<li>命名空间、类、成员（包括方法）采用<strong>大驼峰</strong></li>\n<li>大括号另起一行</li>\n</ul>\n\n<h2 id=\"_2-基本类型\"> 2. 基本类型</h2>\n<p>C# 中的基本类型都是<strong>对象</strong>，事实上，基本类型的关键字都对应一个 <code>System</code> 命名空间中的一个<strong>类</strong></p>\n<blockquote>\n<p>显然是相对于 Java 的重大进步</p>\n</blockquote>\n<p>下表给出了 C# 基本类型和 CLS，系统类型的对应关系。</p>\n<table>\n<thead>\n<tr>\n<th>基本类型</th>\n<th>符合 CLS？</th>\n<th>系统类型</th>\n<th>范围</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>bool</td>\n<td>T</td>\n<td>System.Boolean</td>\n<td>true or false</td>\n<td>布尔值</td>\n</tr>\n<tr>\n<td>sbyte</td>\n<td>F</td>\n<td>System.SByte</td>\n<td>-128 ~ 127</td>\n<td>有符号的 8 bit 整数</td>\n</tr>\n<tr>\n<td>byte</td>\n<td>T</td>\n<td>System.Bute</td>\n<td>0 ~255</td>\n<td>无符号的 8 bit 整数</td>\n</tr>\n<tr>\n<td>short</td>\n<td>T</td>\n<td>System.Int16</td>\n<td>-32768 ~32767</td>\n<td>有符号的 16 bit 整数</td>\n</tr>\n<tr>\n<td>ushort</td>\n<td>F</td>\n<td>System.UInt16</td>\n<td>0 ~ 65535</td>\n<td>无符号的 16 bit 整数</td>\n</tr>\n<tr>\n<td>int</td>\n<td>T</td>\n<td>System.Int32</td>\n<td>-<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span><span>2</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>31</span></span></span></span></span></span></span></span></span></span></span></span> ~ <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span><span>2</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>31</span></span></span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1</span></span></span></span></td>\n<td>带符号的 32 bit 整数</td>\n</tr>\n<tr>\n<td>uint</td>\n<td>F</td>\n<td>System.UInt32</td>\n<td>0 ~ <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span><span>2</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>32</span></span></span></span></span></span></span></span></span></span></span></span></td>\n<td>无符号的 32 bit 整数</td>\n</tr>\n<tr>\n<td>long</td>\n<td>T</td>\n<td>System.Int64</td>\n<td>-<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span><span>2</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>63</span></span></span></span></span></span></span></span></span></span></span></span> ~ <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span><span>2</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>63</span></span></span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1</span></span></span></span></td>\n<td>有符号的 64 bit 整数</td>\n</tr>\n<tr>\n<td>ulong</td>\n<td>F</td>\n<td>Sytem.UInt64</td>\n<td>0 ~ <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span><span>2</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>64</span></span></span></span></span></span></span></span></span></span></span></span></td>\n<td>无符号的 64 bit 整数</td>\n</tr>\n<tr>\n<td>char</td>\n<td>T</td>\n<td>System.Char</td>\n<td>U+0000 ~U+ffff</td>\n<td>16 bit 的 Unicode 字符</td>\n</tr>\n<tr>\n<td>float</td>\n<td>T</td>\n<td>System.Single</td>\n<td><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span>−</span><span>3.4</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span>1</span><span><span>0</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>38</span></span></span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∼</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span>+</span><span>3.4</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span>1</span><span><span>0</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>38</span></span></span></span></span></span></span></span></span></span></span></span></td>\n<td>32 bit 浮点数</td>\n</tr>\n<tr>\n<td>double</td>\n<td>T</td>\n<td>System.Double</td>\n<td><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span>±</span><span>5.0</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span>1</span><span><span>0</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>−</span><span>324</span></span></span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∼</span><span> </span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span>±</span><span>1.7</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span>1</span><span><span>0</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>308</span></span></span></span></span></span></span></span></span></span></span></span></td>\n<td>64 bit 浮点数</td>\n</tr>\n<tr>\n<td>decimal</td>\n<td>T</td>\n<td>System.Decimal</td>\n<td><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>(</span><span>−</span><span>7.9</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span>1</span><span><span>0</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>28</span></span></span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∼</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span>7.9</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span>1</span><span><span>0</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>28</span></span></span></span></span></span></span></span></span><span>)</span><span>/</span><span>(</span><span>1</span><span><span>0</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>0</span><span>∼</span><span>28</span></span></span></span></span></span></span></span></span><span>)</span></span></span></span></td>\n<td>128 bit 带符号数</td>\n</tr>\n<tr>\n<td>string</td>\n<td>T</td>\n<td>System.String</td>\n<td>受系统内存限制</td>\n<td>字符串</td>\n</tr>\n<tr>\n<td>object</td>\n<td>T</td>\n<td>System.Object</td>\n<td>任何类型都能保存在一个 object 变量中</td>\n<td>所有类的基类</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"_2-1-声明和初始化\"> 2.1 声明和初始化</h3>\n<p>C# 变量声明和初始化采用 C 系语言的一贯语法：</p>\n<div><pre><code><span><span>int</span></span> myInt <span>=</span> <span>0</span><span>;</span>\n\n<span><span>string</span></span> myString<span>;</span>\nmyString <span>=</span> <span>\"This is my string\"</span><span>;</span>\n\n<span><span>bool</span></span> b1 <span>=</span> <span>true</span><span>,</span> b2 <span>=</span> <span>false</span><span>,</span> b3 <span>=</span> <span>true</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>当然也可以用全名来声明一个基本变量，不过基本没人这么干。</p>\n<h3 id=\"_2-2-默认值\"> 2.2 默认值</h3>\n<p>与 Java 一样，C# 的基本变量都具有一定的默认值。</p>\n<ul>\n<li><code>bool</code> 默认为 <code>false</code></li>\n<li>数值类型默认为 0，如果是浮点数，则为 0.0</li>\n<li><code>char</code> 类型默认为空字符</li>\n<li><code>BigInteger</code> 默认为 0</li>\n<li><code>DateTime</code> 类型设置为 <code>1/1/0001/ 12:00:00 AM</code></li>\n<li>对象引用默认为 <code>null</code></li>\n</ul>\n<h3 id=\"_2-3-基本类型的对象成员\"> 2.3 基本类型的对象成员</h3>\n<p>C# 与 Java 最大的区别就是，取消了原始类型，所有的类型都是对象。</p>\n<p>所以，基本对象也具有成员，通常集成了一些对本类型的一些处理方法，和 Java 中的 <code>Integer</code> <code>Long</code> 等类型不同。</p>\n<p>需要注意的是，基本类型内置了 <code>Parse()</code> 方法，用于将 <code>string</code> 字面量转换成对应的对象。</p>\n<div><pre><code><span><span>bool</span></span> b <span>=</span> <span>bool</span><span>.</span><span>Parse</span><span>(</span><span>\"True\"</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_2-4-big-number\"> 2.4 Big Number</h3>\n<p>与 Java 一样，C# 也内置了 <code>BigNumber</code> 类型，它需要使用 <code>System.Numerics</code> 命名空间才能使用。</p>\n<h2 id=\"_3-字符串\"> 3. 字符串</h2>\n<p>C# 的字符串和 Java 的大体相似，只有少数的扩展功能。</p>\n<p>字符串使用 <code>string</code> 定义，而不是使用大写的。</p>\n<p>同样，支持加号拼接、转义、<code>StringBuilder</code>。</p>\n<p>字符串也是不可变的。</p>\n<p>不过，C# 字符串相对于 Java 来说也有一些扩展功能。</p>\n<h3 id=\"_3-1-逐字字符串\"> 3.1 逐字字符串</h3>\n<p>实际上就是原始字符串，在字符串引号前加上 <code>@</code>，则编译器不会对转义字符进行转义，同时，空格也会得到保留（即可以声明多行字符串）。</p>\n<div><pre><code><span><span>string</span></span> raw <span>=</span> <span>@\"C:\\MyApp\\bin\\Debug\"</span><span>;</span>\n\n<span><span>string</span></span> multipleLine <span>=</span> <span>@\"This is\n  mutiple\n  line\n  string\"</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h3 id=\"_3-2-相等性判别\"> 3.2 相等性判别</h3>\n<p>谢天谢地，C# 支持了操作符重载功能，也就是说，可以用 <code>==</code> 和 <code>!=</code> 进行字符串相等性判别，而不是 Java 的引用判别。</p>\n<p>与此同时，也可以使用传统的 <code>Equals()</code> 来进行字符串相等性判断。</p>\n<div><pre><code><span><span>string</span></span> s1 <span>=</span> <span>\"hello\"</span><span>;</span>\nConsole<span>.</span><span>WriteLine</span><span>(</span>s1 <span>==</span> <span>\"hello\"</span><span>)</span><span>;</span>\t<span>// true</span>\nConsole<span>.</span><span>WriteLine</span><span>(</span>s1<span>.</span><span>Equals</span><span>(</span><span>\"hello\"</span><span>)</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"_3-3-字符串格式化\"> 3.3 字符串格式化</h3>\n<p>C# 中使用 <code>{0}</code> <code>{1}</code> 等可以实现字符串格式化。</p>\n<div><pre><code><span><span>string</span></span> hehe <span>=</span> <span>\"hhe\"</span><span>;</span>\n<span><span>string</span></span> s <span>=</span> <span>\"{0}, {1}, $hehe\"</span><span>;</span>\nConsole<span>.</span><span>WriteLine</span><span>(</span><span>string</span><span>.</span><span>Format</span><span>(</span>s<span>,</span> <span>1</span><span>,</span> <span>2</span><span>)</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>同时也可以使用基本的格式化字符，可以直接使用于控制台输出。</p>\n<div><pre><code>Console<span>.</span><span>WriteLine</span><span>(</span><span>\"c format: {0:c}\"</span><span>,</span> <span>99999</span><span>)</span><span>;</span> <span>//$99999.00</span>\n</code></pre>\n<div><span>1</span><br></div></div><blockquote>\n<p>比起 Java 只能用格式化字符，不知道高到哪里去了。</p>\n</blockquote>\n<p>下面是一些常用的格式化字符：</p>\n<table>\n<thead>\n<tr>\n<th>格式化字符</th>\n<th style=\"text-align:left\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>C 或 c</td>\n<td style=\"text-align:left\">用于格式化货币，这个标识会以当地的货币符号为前缀</td>\n</tr>\n<tr>\n<td>D 或 d</td>\n<td style=\"text-align:left\">用于格式化十进制数，还可以指定最小的填充个数</td>\n</tr>\n<tr>\n<td>E 或 e</td>\n<td style=\"text-align:left\">用于指数计数法，字母的大小写决定了数字后的 E 的大小写</td>\n</tr>\n<tr>\n<td>F 或 f</td>\n<td style=\"text-align:left\">用于顶点小数的格式化，也可以指定最小的填充个数</td>\n</tr>\n<tr>\n<td>G 或 g</td>\n<td style=\"text-align:left\">代表 general。这个字符能用来将一个数格式化为定点或者指数格式</td>\n</tr>\n<tr>\n<td>N 或 n</td>\n<td style=\"text-align:left\">用于基本的数值格式化（带逗号）</td>\n</tr>\n<tr>\n<td>X 或 x</td>\n<td style=\"text-align:left\">用于十六进制，字母的大小写决定了十六进制字母的大小写</td>\n</tr>\n</tbody>\n</table>\n<p>其中，给定的占位符由冒号分隔，如上面的 <code>{0:c}</code></p>\n<p>能指定填充个数的，在格式化字符后添加个数。例如：<code>{0:d9}</code></p>\n<h2 id=\"_4-类型转换\"> 4. 类型转换</h2>\n<p>与 C 系 语言一样，C# 对于数据类型，会使用<strong>隐式向上转换</strong>，或者称为<strong>宽化</strong>。</p>\n<p>使用 <code>()</code> 对类型进行<strong>强制转换</strong>(cast)，也叫做<strong>窄化</strong>。</p>\n<div><pre><code><span><span>short</span></span> s1 <span>=</span> <span>30000</span><span>;</span>\n<span><span>short</span></span> s2 <span>=</span> <span>30000</span><span>;</span>\n\ns1 <span>+</span> s2<span>;</span>\t\t\t<span>// 转换为 int</span>\n<span>(</span><span>short</span><span>)</span><span>(</span>s1 <span>+</span> s2<span>)</span><span>;</span>\t<span>// 强制转换为 short，丢失数据。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id=\"_4-1-checked-和-unchecked\"> 4.1 checked 和 unchecked</h3>\n<p>当我们不希望数据丢失时，可以使用 <code>checked</code>，这个关键字在数据出现溢出时会抛出异常。</p>\n<div><pre><code><span>checked</span><span>(</span><span>(</span><span>short</span><span>)</span><span>(</span>s1 <span>+</span> s2<span>)</span><span>)</span><span>;</span>\t<span>// OverflowException</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>同样也可以使用 <code>checked</code> 块。</p>\n<div><pre><code><span>checked</span> <span>{</span>\n  <span><span>byte</span></span> sum <span>=</span> <span>(</span><span>byte</span><span>)</span><span>Add</span><span>(</span>b1<span>,</span> b2<span>)</span><span>;</span>\n  Console<span>.</span><span>WriteLine</span><span>(</span><span>\"sum = {0}\"</span><span>,</span> sum<span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>当然，如果运算过多，我们可以直接开启 <code>checked</code> 编译选项，此时对<strong>所有运算</strong>都会进行 <code>checkede</code> 操作。</p>\n<p>当然，这个时候，我们也会有一些不想被 check 的运算，那么就可以使用 <code>unchecked</code> 关键字来避免 checked。</p>\n<p>用法类似 <code>checked</code>，就不举例了。</p>\n<h2 id=\"_5-隐式类型-var\"> 5. 隐式类型 var</h2>\n<p>C# 中，可以利用 <code>var</code> 关键字来让编译器对变量的类型进行<strong>自动推断</strong>。</p>\n<p>这个特性有点类似 C++ 11 的 <code>auto</code></p>\n<div><pre><code><span><span>var</span></span> myInt <span>=</span> <span>0</span><span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>需要注意的是，<code>var</code> 仍然是<strong>强类型</strong>的，只不过类型并不在编辑时确定，但是也是在编译期间就确定类型，而且不能改变。这和 JS 中的 <code>var</code> 有很大不同。</p>\n<h3 id=\"真正用途\"> 真正用途</h3>\n<p>虽然有这么好用的特性，但是 C# 并不鼓励滥用，<strong>如果需要 int，那么就声明 int。</strong></p>\n<p>这个特性通常<strong>只在</strong> LINQ 查询中使用，由于某些情况下无法得知数据库查询结果的真正类型，所以此时使用 <code>var</code> 是合理的。</p>\n<div><pre><code><span><span>var</span></span> subset <span>=</span> <span>from</span> i <span>in</span> numbers <span>where</span> <span>i</span> <span>&lt;</span> <span>10</span> <span>select</span> i<span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div>",
      "date_published": "2016-11-30T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "CSharp"
      ]
    },
    {
      "title": "C# Class Basic",
      "url": "https://wafer.li/blog-corners/langroad/CSharp/CSharp%20Class%20Basic/",
      "id": "https://wafer.li/blog-corners/langroad/CSharp/CSharp%20Class%20Basic/",
      "summary": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>C# 类的基本语法和 Java 无异</p>\n<p>下面只具体讲讲有区别的地方</p>\n",
      "content_html": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>C# 类的基本语法和 Java 无异</p>\n<p>下面只具体讲讲有区别的地方</p>\n\n<h2 id=\"_2-构造函数链\"> 2. 构造函数链</h2>\n<p>Java 中可以通过在构造函数中使用 <code>this</code> 来调用另一个构造函数，从而实现构造函数的职责委托链条。</p>\n<p>C# 中则使用 <strong>冒号</strong> 来保证 <code>this</code> 的优先调用</p>\n<div><pre><code><span>// Java</span>\n<span>class</span> <span>Empolyee</span> <span>{</span>\n\n    <span>Empolyee</span><span>(</span><span>)</span> <span>{</span>\n        <span>this</span><span>(</span><span>\"Unknown\"</span><span>)</span>\n    <span>}</span>\n\n    <span>Empolyee</span><span>(</span><span>String</span> name<span>)</span> <span>{</span>\n        <span>this</span><span>.</span>name <span>=</span> name<span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><div><pre><code><span>// C#</span>\n<span>class</span> <span>Empolyee</span> <span>{</span>\n\n    <span>Empolyee</span><span>(</span><span>)</span><span>:</span> <span>this</span><span>(</span><span>\"Unknwon\"</span><span>)</span> <span>{</span> <span>}</span>\n\n    <span>Empolyee</span><span>(</span><span><span>string</span></span> name<span>)</span> <span>{</span>\n        <span>this</span><span>.</span>name <span>=</span> name\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h2 id=\"_3-可选参数\"> 3. 可选参数</h2>\n<p>当然，在 .NET 4.0 以上可以在构造函数中使用可选参数。</p>\n<p>可选参数用法和其他方法相同</p>\n<h2 id=\"_4-静态构造函数\"> 4. 静态构造函数</h2>\n<p>实际上就是 Java 中的 <strong>静态初始化块</strong>，具体的行为也区别不大。</p>\n<ol>\n<li>静态构造函数只能有一个</li>\n<li>静态构造函数不能重载，不接受任何参数</li>\n<li>静态构造函数在类实例构建和首次调用静态成员时调用</li>\n<li>静态构造函数会 <strong>先于所有构造函数执行</strong></li>\n</ol>\n<p>不过语法上稍有不同，Java 采用 <code>static</code> 加大括号形式，而 C# 采用在构造函数前面加 <code>static</code> 来实现</p>\n<h2 id=\"_5-静态类\"> 5.静态类</h2>\n<p><strong>Java 中没有的内容</strong></p>\n<p>可以在类级别使用 <code>static</code> 关键字，这样的类是 Top-level 的 <strong>静态类</strong>，具有如下特性：</p>\n<ol>\n<li>不能使用 <code>new</code> 关键字构建实例</li>\n<li>只能拥有 <code>static</code> 成员</li>\n</ol>\n<p>实际上，就是 Java 中的工具类写法。</p>\n",
      "date_published": "2016-12-17T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "CSharp"
      ]
    },
    {
      "title": "C# Const and Readonly Field",
      "url": "https://wafer.li/blog-corners/langroad/CSharp/CSharp%20Const%20and%20Readonly%20Field/",
      "id": "https://wafer.li/blog-corners/langroad/CSharp/CSharp%20Const%20and%20Readonly%20Field/",
      "summary": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>C# 提供了两种 <strong>常量级别</strong> 数据，相当于 Kotlin 中的 <code>const</code> 和 <code>lazy value</code>；</p>\n<p>使用 <code>const</code> 和 <code>readonly</code> 来进行修饰</p>\n",
      "content_html": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>C# 提供了两种 <strong>常量级别</strong> 数据，相当于 Kotlin 中的 <code>const</code> 和 <code>lazy value</code>；</p>\n<p>使用 <code>const</code> 和 <code>readonly</code> 来进行修饰</p>\n\n<h2 id=\"_2-const\"> 2. Const</h2>\n<p><code>const</code> 类型是 <strong>编译时常量</strong>。</p>\n<p><code>const</code> 必须被初始化！</p>\n<p>与 Kotlin 不同的是 C# 中的 <code>const</code> 除了字面常量以外，还允许使用 <code>null</code> 应用。</p>\n<p>除此之外，C# 的 <code>const</code> 还允许在局部作用域使用，而 Kotlin 的 <code>const</code> 只允许在 Top-level 使用</p>\n<h2 id=\"_3-readonly-field\"> 3. Readonly Field</h2>\n<p>只读字段是一种特殊的 <code>lazy</code> 常量。</p>\n<p>和 Kotlin 的 <code>lazy-value</code> 不同的是：</p>\n<ol>\n<li>\n<p>只读字段可以不被初始化</p>\n</li>\n<li>\n<p>只读字段 <strong>只能被显式初始化，或者构造函数初始化</strong></p>\n</li>\n<li>\n<p>如果不被初始化，那么显式字段拥有默认值</p>\n</li>\n</ol>\n<h2 id=\"_4-两者区别\"> 4. 两者区别</h2>\n<p>C# 中 <code>const</code> 和 <code>readonly</code> 的主要区别在于：</p>\n<p><code>const</code> 是 <strong>隐式静态的</strong>，即可以直接通过类名来调用 <code>const</code></p>\n<p>而 <code>readonly</code> <strong>不是隐式静态的</strong>。</p>\n",
      "date_published": "2016-12-17T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "CSharp"
      ]
    },
    {
      "title": "C# Control Flow",
      "url": "https://wafer.li/blog-corners/langroad/CSharp/CSharp%20Control%20Flow/",
      "id": "https://wafer.li/blog-corners/langroad/CSharp/CSharp%20Control%20Flow/",
      "summary": "<h2 id=\"_1-if-else\"> 1. if/else</h2>\n<p>只接受布尔值</p>\n",
      "content_html": "<h2 id=\"_1-if-else\"> 1. if/else</h2>\n<p>只接受布尔值</p>\n\n<h2 id=\"_2-逻辑运算符\"> 2. 逻辑运算符</h2>\n<p><code>&amp;&amp;</code> <code>||</code> <code>!</code></p>\n<p>需要注意的是，<code>&amp;&amp;</code> 和 <code>||</code> 在有必要的时候都会“短路”，也就是说如果只检查一个表达式就能确定 if 的布尔值，那么就不会检查另一个了。</p>\n<h2 id=\"_3-switch\"> 3. switch</h2>\n<p>switch 相比 Java 来说，可以支持 <strong>字符串</strong> 和 <strong>枚举</strong> 值。</p>\n<blockquote>\n<p>不过并不支持类型检测，相比 Kotlin 来说差了一截。</p>\n</blockquote>\n<h2 id=\"_4-for\"> 4. for</h2>\n<div><pre><code><span>for</span><span>(</span><span><span>int</span></span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>4</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>\n    <span>// for body</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id=\"_5-foreach\"> 5. foreach</h2>\n<p>遗憾的是，C# 将 foreach 语法用了一个单独的关键字 <code>foreach</code></p>\n<div><pre><code><span>foreach</span><span>(</span><span><span>string</span></span> c <span>in</span> carTypes<span>)</span> <span>{</span>\n    Console<span>.</span><span>WriteLine</span><span>(</span>c<span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>当然也可以使用隐含类型 <code>var</code></p>\n<div><pre><code><span>foreach</span><span>(</span><span><span>var</span></span> i <span>in</span> linqSubset<span>)</span> <span>{</span>\n    Console<span>.</span><span>Write</span><span>(</span><span>\"{0}\"</span><span>,</span> i<span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id=\"_6-while-do-while\"> 6. while/do-while</h2>\n<p>和 Java 没什么不同；\n需要注意一下 do while 最后要有个分号。</p>\n<div><pre><code><span>while</span><span>(</span>condition<span>)</span> <span>{</span>\n    <span>// hehe</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>do</span> <span>{</span>\n    <span>// hehe</span>\n<span>}</span><span>while</span><span>(</span>condition<span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div>",
      "date_published": "2016-11-30T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "CSharp"
      ]
    },
    {
      "title": "C# Method",
      "url": "https://wafer.li/blog-corners/langroad/CSharp/CSharp%20Method/",
      "id": "https://wafer.li/blog-corners/langroad/CSharp/CSharp%20Method/",
      "summary": "<h2 id=\"_1-定义\"> 1. 定义</h2>\n<p>C# 中的方法定义和 Java 没有区别。</p>\n<div><pre><code><span><span>int</span></span> <span>Add</span><span>(</span><span><span>int</span></span> x<span>,</span> <span><span>int</span></span> y<span>)</span>\n<span>{</span>\n    <span>return</span> x <span>+</span> y<span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div>",
      "content_html": "<h2 id=\"_1-定义\"> 1. 定义</h2>\n<p>C# 中的方法定义和 Java 没有区别。</p>\n<div><pre><code><span><span>int</span></span> <span>Add</span><span>(</span><span><span>int</span></span> x<span>,</span> <span><span>int</span></span> y<span>)</span>\n<span>{</span>\n    <span>return</span> x <span>+</span> y<span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div>\n<h2 id=\"_2-默认按值传递\"> 2. 默认按值传递</h2>\n<p>C# 默认的参数传递是 <strong>按值传递</strong> 的；\n也就是说，方法中拿到的参数实际上是实参的一个 <strong>副本</strong></p>\n<h2 id=\"_3-输出参数\"> 3. 输出参数</h2>\n<p>C# 支持 <strong>输出参数</strong>， 这是 C/C++ 语言中常用的一种技巧；\n即，通过对传入的指针进行赋值，然后在调用完毕后进行指针解引用，从而得到多个返回值。</p>\n<p>C# 没有指针，所以使用了 <code>out</code> 关键字用作指明输出参数。</p>\n<p>使用输出参数的方法定义如下：</p>\n<div><pre><code><span><span>void</span></span> <span>Add</span><span>(</span><span><span>int</span></span> x<span>,</span> <span><span>int</span></span> y<span>,</span> <span>out</span> <span><span>int</span></span> ans<span>)</span>\n<span>{</span>\n    ans <span>=</span> x <span>+</span> y<span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>调用时， <strong>也需要</strong> 使用 <code>out</code> 关键字。</p>\n<div><pre><code><span><span>int</span></span> ans<span>;</span>\n<span>Add</span><span>(</span><span>90</span><span>,</span> <span>90</span><span>,</span> <span>out</span> ans<span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>用作输出参数的变量可以不进行初始化，如同上面的 <code>ans</code> 一样；\n但是， <strong>必须</strong> 在方法内部对输出参数进行赋值，否则会报错。</p>\n<p>使用这个技巧，我们可以一次性返回多个值。</p>\n<div><pre><code><span><span>void</span></span> <span>Hehe</span><span>(</span><span>out</span> <span><span>int</span></span> a<span>,</span> <span>out</span> <span><span>int</span></span> b<span>,</span> <span>out</span> <span><span>int</span></span> c<span>)</span>\n<span>{</span>\n    <span>// hehe</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id=\"_4-按引用传递\"> 4. 按引用传递</h2>\n<p>C# 比 Java 高明的地方就在于，C# 可以 <strong>按引用传递</strong>，所以可以做到 Java 比较难做到的 <strong>交换两个 int</strong>；</p>\n<p>只要使用 <code>ref</code>  关键字，指明需要按照引用传递的参数即可</p>\n<div><pre><code><span>public</span> <span>static</span> <span><span>void</span></span> <span>swapStrings</span><span>(</span><span>ref</span> <span><span>string</span></span> s1<span>,</span> <span>ref</span> <span><span>string</span></span> s2<span>)</span>\n<span>{</span>\n    <span><span>string</span></span> temp <span>=</span> s1<span>;</span>\n    s1 <span>=</span> s2<span>;</span>\n    s2 <span>=</span> temp<span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>此时，由于两个参数是按照 <strong>引用</strong> 传递的，所以上述代码是有效的。</p>\n<h2 id=\"_5-不定参数\"> 5. 不定参数</h2>\n<p>同 Java 一样，C# 也支持不定参数。</p>\n<p>只要使用 <code>params</code> 关键字指明不定参数即可。</p>\n<div><pre><code><span><span>void</span></span> <span>addToList</span><span>(</span><span>params</span> <span><span>int</span><span>[</span><span>]</span></span> args<span>)</span>\n<span>{</span>\n    <span>// Add to list</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>与 Java 一样，不定参数只支持 <strong>数组</strong> 类型，而不支持其他集合类型。</p>\n<p>需要注意的是，C# 只支持 <strong>一个</strong> <code>params</code> 参数， 而且必须是参数列表中 <strong>最后一个</strong> 参数。</p>\n<h2 id=\"_6-可选参数\"> 6. 可选参数</h2>\n<p>C# 也支持可选参数（也叫做 <strong>默认参数</strong>），即给参数赋予默认值的行为。</p>\n<div><pre><code><span>static</span> <span><span>void</span></span> <span>EnterLogData</span><span>(</span><span><span>string</span></span> message<span>,</span> <span><span>string</span></span> owner <span>=</span> <span>\"Programmer\"</span><span>)</span>\n<span>{</span>\n    <span>// hehe</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>只要在 <strong>定义</strong> 方法时，给形参进行 <strong>“赋值”</strong> 即可。</p>\n<p>需要注意的是，可选参数的默认值必须在 <strong>编译时确定</strong>；\n也就是说，不能将一些运行时才能确定的量作为默认值</p>\n<div><pre><code><span>static</span> <span><span>void</span></span> <span>EnterLogData</span><span>(</span><span><span>string</span></span> message<span>,</span> <span><span>string</span></span> owner <span>=</span> <span>\"Programmer\"</span><span>,</span> <span>DateTime</span> timeStamp <span>=</span> DateTime<span>.</span>Now<span>)</span> <span>{</span>\n    <span>// ERROR!</span>\n    <span>// DateTime.Now determined at runtime!</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id=\"_7-命名参数\"> 7. 命名参数</h2>\n<p>C# 还支持 <strong>命名参数</strong>，即，通过形参名字来指定对应的实参，而不需要遵守参数顺序。</p>\n<div><pre><code><span>DisplayFancyMessage</span><span>(</span><span>message</span><span>:</span> <span>\"Wow! Very Fancy indeed!\"</span><span>,</span>\n                    <span>textColor</span><span>:</span> ConsoleColor<span>.</span>DarkRed<span>,</span>\n                    <span>backgroundColor</span><span>:</span> ConsoleColor<span>.</span>White<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>通过 <strong>冒号</strong> (<code>:</code>) 来分隔形参和实参。</p>\n<p>通过命名参数，可以很好地结合可选参数来使用。</p>\n<h2 id=\"_8-方法重载\"> 8. 方法重载</h2>\n<p>和其他现代语言一样，C# 也支持方法重载。</p>\n<p>注意方法签名只由两部分决定：方法名字和方法参数（类型和数量）。\n和 Java 的方法重载没什么区别。</p>\n",
      "date_published": "2016-11-30T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "CSharp"
      ]
    },
    {
      "title": "C# Object Initialization",
      "url": "https://wafer.li/blog-corners/langroad/CSharp/CSharp%20Object%20Initialization/",
      "id": "https://wafer.li/blog-corners/langroad/CSharp/CSharp%20Object%20Initialization/",
      "summary": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>为了简化对象初始化的流程，C# 提供了 <strong>对象初始化语法</strong>。</p>\n<p>简单的来说就是通过类似 <strong>数组初始化</strong> 的方法来对变量进行初始化操作。</p>\n",
      "content_html": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>为了简化对象初始化的流程，C# 提供了 <strong>对象初始化语法</strong>。</p>\n<p>简单的来说就是通过类似 <strong>数组初始化</strong> 的方法来对变量进行初始化操作。</p>\n\n<h2 id=\"_2-语法\"> 2. 语法</h2>\n<div><pre><code><span>Point</span> p <span>=</span> <span>new</span> <span>Point</span> <span>{</span>x <span>=</span> <span>1.0</span><span>,</span> y <span>=</span> <span>2.0</span><span>}</span><span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"_3-原理\"> 3. 原理</h2>\n<p>此语法实际上是一个语法糖，其原理就是先调用 <strong>默认构造函数</strong>，然后再对每个属性或者字段 <strong>依次赋值</strong>。</p>\n<p>和以下代码行为相同。</p>\n<div><pre><code><span>Point</span> point <span>=</span> <span>new</span> <span>Point</span><span>(</span><span>)</span><span>;</span>\npoint<span>.</span>x <span>=</span> <span>1.0</span><span>;</span>\npoint<span>.</span>y <span>=</span> <span>2.0</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id=\"_4-调用自定义构造函数\"> 4. 调用自定义构造函数</h2>\n<p>对象初始化块除了调用默认的构造函数以外，还可以调用自定义的构造函数。</p>\n<div><pre><code><span>Point</span> point <span>=</span> <span>new</span> <span>Point</span><span>(</span><span>\"This is a point\"</span><span>)</span> <span>{</span>x <span>=</span> <span>1.0</span><span>,</span> y <span>=</span> <span>2.0</span><span>}</span><span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"_5-初始化内部引用属性\"> 5. 初始化内部引用属性</h2>\n<p>由于自动属性默认为引用类型赋值为 <code>null</code> ，所以内部的属性必须经过正确的初始化之后才能使用。</p>\n<p>为了简化繁琐的声明语句， C# 也提供了对内部引用属性的初始化语法</p>\n<div><pre><code><span>Rectangle</span> rect <span>=</span> <span>new</span> <span>Rectangle</span>\n<span>{</span>\n    TopLeft <span>=</span> <span>new</span> <span>Point</span> <span>{</span> X <span>=</span> <span>10</span><span>,</span> Y <span>=</span> <span>10</span> <span>}</span><span>,</span>     <span>// 注意逗号</span>\n    BottomRight <span>=</span> <span>new</span> <span>Point</span> <span>{</span> X <span>=</span> <span>200</span><span>,</span> Y <span>=</span> <span>200</span> <span>}</span>\n<span>}</span><span>;</span>  <span>// 注意分号</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>其行为和如下代码相同：</p>\n<div><pre><code><span>Rectangle</span> rect <span>=</span> <span>new</span> <span>Rectangle</span><span>(</span><span>)</span><span>;</span>\n\n<span>Point</span> p1 <span>=</span> <span>new</span> <span>Point</span><span>(</span><span>)</span><span>;</span>\np1<span>.</span>X <span>=</span> <span>10</span><span>;</span>\np1<span>.</span>Y <span>=</span> <span>10</span><span>;</span>\nrect<span>.</span>TopLeft <span>=</span> p1<span>;</span>\n\n<span>Point</span> p2 <span>=</span> <span>new</span> <span>Point</span><span>(</span><span>)</span><span>;</span>\np2<span>.</span>X <span>=</span> <span>200</span><span>;</span>\np2<span>.</span>Y <span>=</span> <span>200</span><span>;</span>\nrect<span>.</span>BottomRight <span>=</span> p2<span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div>",
      "date_published": "2016-12-17T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "CSharp"
      ]
    },
    {
      "title": "C# Properties and Fields",
      "url": "https://wafer.li/blog-corners/langroad/CSharp/CSharp%20Properties%20and%20Fields/",
      "id": "https://wafer.li/blog-corners/langroad/CSharp/CSharp%20Properties%20and%20Fields/",
      "summary": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>C# 相对于 Java 的一个较大的改进就是提供了类的 <strong>属性访问</strong> 语法。</p>\n<p>在这里，将和 Kotlin 来比较学习。</p>\n",
      "content_html": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>C# 相对于 Java 的一个较大的改进就是提供了类的 <strong>属性访问</strong> 语法。</p>\n<p>在这里，将和 Kotlin 来比较学习。</p>\n\n<h2 id=\"_2-定义属性\"> 2. 定义属性</h2>\n<p>这是 C# 和 Kotlin 的第一个不同，</p>\n<p>C# 的普通属性需要 <strong>自定义后备字段(backing field)</strong>；</p>\n<p>而 Kotlin 不允许字段，只在 getter 和 setter 中使用 <code>field</code> 来指代字段。</p>\n<div><pre><code><span>// C#</span>\n<span>class</span> <span>Point</span> <span>{</span>\n    <span>private</span> <span><span>int</span></span> x<span>;</span>\n\n    <span>public</span> X <span>{</span>\n        <span>get</span> <span>{</span>\n            <span>return</span> x<span>;</span>\n        <span>}</span>\n        <span>set</span> <span>{</span>\n            x <span>=</span> <span>value</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>注意上面的 <code>value</code> 指代的是传入 setter 的值</p>\n<p>而与之相反的是，Kotlin 允许 setter 使用括号来进行传入参数命名</p>\n<div><pre><code><span>class</span> Point <span>{</span>\n    <span>var</span> x<span>:</span> Int <span>=</span> <span>0</span>\n        <span>get</span><span>(</span><span>)</span> <span>=</span> field\n        <span>set</span><span>(</span>value<span>)</span> <span>{</span>\n            field <span>=</span> value\n        <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id=\"_3-静态属性\"> 3. 静态属性</h2>\n<p>Kotlin 实际上没有这个语法，只能使用伴生对象来实现。</p>\n<p>C# 支持静态属性，不过只能应用于静态字段。</p>\n<div><pre><code><span>class</span> <span>Bank</span> <span>{</span>\n    <span>private</span> <span>static</span> <span><span>int</span></span> interest<span>;</span>\n\n    <span>public</span> <span>static</span> Interest <span>{</span>\n        <span>get</span> <span>{</span> <span>return</span> interest<span>;</span> <span>}</span>\n        <span>set</span> <span>{</span> interest <span>=</span> <span>value</span><span>;</span> <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id=\"_4-自动属性\"> 4. 自动属性</h2>\n<p>如果一个属性不包括具体逻辑，只负责简单获取返回，那么定义一大堆私有后备字段是极其不方便的，所以 C# 提供了 <strong>自动属性</strong>，使用一个 <strong>私有的后备字段</strong> 和 简单的 getter 和 setter。</p>\n<div><pre><code><span>class</span> <span>Point</span> <span>{</span>\n    <span>public</span> X <span>{</span>\n        <span>get</span><span>;</span>\n        <span>set</span><span>;</span>\n    <span>}</span>\n\n    <span>public</span> Y <span>{</span>\n        <span>get</span><span>;</span>\n        <span>set</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>由于后备字段不可见，所以整个类都必须使用 <strong>属性</strong> 来进行操作，而不能直接操作字段。</p>\n<blockquote>\n<p>这点和 Kotlin 的行为很像</p>\n</blockquote>\n<p>有一点需要注意的地方，自动属性会使用默认值来填充私有后备属性；</p>\n<p>这说明任何 <strong>引用类型</strong> 默认为 <code>null</code>，使用时需要注意。</p>\n<p>在 C# 6.0 后可以对自动属性进行初始化</p>\n<div><pre><code><span>public</span> <span><span>double</span></span> X <span>{</span><span>get</span><span>;</span> <span>set</span><span>;</span><span>}</span> <span>=</span> <span>1.0</span>\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"_5-只读只写属性\"> 5. 只读只写属性</h2>\n<p><strong>忽略</strong>属性中对应的 <code>set</code> 或者 <code>get</code> 可以让属性成为 <strong>只读只写属性</strong></p>\n<p>当进行写入操作时，编译器会报错。</p>\n<blockquote>\n<p>而 Kotlin 使用 <code>var</code> 和 <code>val</code> 来区分可读可写，如果需要做严格限制，可以将 getter 或者 setter 设置为私有</p>\n</blockquote>\n",
      "date_published": "2016-12-17T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "CSharp"
      ]
    },
    {
      "title": "C# Visibility Modifiers",
      "url": "https://wafer.li/blog-corners/langroad/CSharp/CSharp%20Visibility%20Modifiers/",
      "id": "https://wafer.li/blog-corners/langroad/CSharp/CSharp%20Visibility%20Modifiers/",
      "summary": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>C# 的访问修饰符比 Java 多了两个 <code>internal</code> 和 <code>protected internal</code></p>\n<p>默认行为也不同</p>\n",
      "content_html": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>C# 的访问修饰符比 Java 多了两个 <code>internal</code> 和 <code>protected internal</code></p>\n<p>默认行为也不同</p>\n\n<h2 id=\"_2-internal\"> 2. Internal</h2>\n<p>C# 新增的 <code>internal</code> 访问修饰符，指的是，该类型的可见范围为 <strong>当前程序集</strong>(即 <code>.dll</code> 和 <code>.exe</code> 中)</p>\n<blockquote>\n<p>注意和 Java 的 package 级别的可见性区分，<code>internal</code> 指示的是整个程序集的可见性。</p>\n</blockquote>\n<h2 id=\"_3-protected-internal\"> 3. Protected Internal</h2>\n<p><code>protected internal</code> 实际上是 <code>protected</code> 和 <code>internal</code> 的一个 <code>union</code>。</p>\n<p>它指示的是，该类型在当前程序集可见 <strong>或者</strong> 在其他程序集中的派生类可见</p>\n<h2 id=\"_4-修饰限制\"> 4. 修饰限制</h2>\n<p>Top-level 的类型只能使用 <code>public</code> 和 <code>internal</code> 来修饰，如普通的类。</p>\n<p>嵌套类、嵌套的数据结构可以使用其他的修饰符。</p>\n",
      "date_published": "2016-12-17T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "CSharp"
      ]
    },
    {
      "title": "C# 分部类",
      "url": "https://wafer.li/blog-corners/langroad/CSharp/CSharp%20%E5%88%86%E9%83%A8%E7%B1%BB/",
      "id": "https://wafer.li/blog-corners/langroad/CSharp/CSharp%20%E5%88%86%E9%83%A8%E7%B1%BB/",
      "summary": "<p>当开发大型项目时，会出现某个类非常长的情况。</p>\n<p>C# 对此提供了一个 <code>partial</code> 关键字；</p>\n<p>可以用它将一个类分割成多个文件，以期分隔经常改动的内容和不经常改动的内容。</p>\n",
      "content_html": "<p>当开发大型项目时，会出现某个类非常长的情况。</p>\n<p>C# 对此提供了一个 <code>partial</code> 关键字；</p>\n<p>可以用它将一个类分割成多个文件，以期分隔经常改动的内容和不经常改动的内容。</p>\n\n<p>例如 <code>Empolyee.cs</code> ：</p>\n<div><pre><code><span>class</span> <span>Employee</span>\n<span>{</span>\n    <span>// 字段</span>\n\n    <span>// 构造函数</span>\n\n    <span>// 方法</span>\n\n    <span>// 属性</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>可以将其分割为两个文件，然后使用 <code>partial</code> 进行标记。</p>\n<div><pre><code><span>// Employee.cs</span>\n\n<span>partial</span> <span>class</span> <span>Employee</span>\n<span>{</span>\n    <span>// 方法</span>\n\n    <span>// 属性</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><div><pre><code><span>// Employee.Internal.cs</span>\n<span>partial</span> <span>class</span> <span>Employee</span>\n<span>{</span>\n    <span>// 字段</span>\n\n    <span>// 构造函数</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>需要注意的是，文件的名字是可以随便取的，并没有特别的限制。</p>\n",
      "date_published": "2016-12-17T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "CSharp"
      ]
    },
    {
      "title": "C# 复杂类型",
      "url": "https://wafer.li/blog-corners/langroad/CSharp/CSharp%20%E5%A4%8D%E6%9D%82%E7%B1%BB%E5%9E%8B/",
      "id": "https://wafer.li/blog-corners/langroad/CSharp/CSharp%20%E5%A4%8D%E6%9D%82%E7%B1%BB%E5%9E%8B/",
      "summary": "<h2 id=\"_1-数组\"> 1. 数组</h2>\n<p>使用类似 Java 的语法进行数组初始化</p>\n<div><pre><code><span><span>int</span><span>[</span><span>]</span></span> intArray <span>=</span> <span>new</span> <span><span>int</span></span><span>[</span><span>]</span><span>;</span>\n<p><span><span>string</span><span>[</span><span>]</span></span> stringArray <span>=</span> <span>new</span> <span><span>string</span><span>[</span><span>]</span></span> <span>{</span><span>&quot;1&quot;</span><span>,</span> <span>&quot;2&quot;</span><span>,</span> <span>&quot;3&quot;</span><span>}</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>当然，数组也可以使用 <code>var</code> 声明</p>\n<div><pre><code><span>// c is a int array</span>\n<span><span>var</span></span> c <span>=</span> <span>new</span><span>[</span><span>]</span> <span>{</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>}</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div></p>\n",
      "content_html": "<h2 id=\"_1-数组\"> 1. 数组</h2>\n<p>使用类似 Java 的语法进行数组初始化</p>\n<div><pre><code><span><span>int</span><span>[</span><span>]</span></span> intArray <span>=</span> <span>new</span> <span><span>int</span></span><span>[</span><span>]</span><span>;</span>\n\n<span><span>string</span><span>[</span><span>]</span></span> stringArray <span>=</span> <span>new</span> <span><span>string</span><span>[</span><span>]</span></span> <span>{</span><span>\"1\"</span><span>,</span> <span>\"2\"</span><span>,</span> <span>\"3\"</span><span>}</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>当然，数组也可以使用 <code>var</code> 声明</p>\n<div><pre><code><span>// c is a int array</span>\n<span><span>var</span></span> c <span>=</span> <span>new</span><span>[</span><span>]</span> <span>{</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>}</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div>\n<h3 id=\"_1-1-多维数组\"> 1.1 多维数组</h3>\n<p>C# 比较神奇的一点就是它有 <strong>两种</strong> 多维数组类型：矩形数组和交错数组。</p>\n<h4 id=\"_1-1-1-矩形数组\"> 1.1.1 矩形数组</h4>\n<p>矩形数组时一个每一行长度都相等的多维数组</p>\n<div><pre><code><span>// 6*6 的数组</span>\n<span><span>int</span> <span>[</span><span>,</span><span>]</span></span> matrix <span>=</span> <span>new</span> <span><span>int</span></span><span>[</span><span>6</span><span>,</span> <span>6</span><span>]</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h4 id=\"_1-1-2-交错数组\"> 1.1.2 交错数组</h4>\n<p>交错数组是 <strong>数组的数组</strong>，其中包括了内部数组。</p>\n<div><pre><code><span>// 5 个不同数组</span>\n<span><span>int</span><span>[</span><span>]</span><span>[</span><span>]</span></span> jagArray <span>=</span> <span>new</span> <span><span>int</span></span><span>[</span><span>5</span><span>]</span><span>[</span><span>]</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h4 id=\"_1-1-3-区别\"> 1.1.3 区别</h4>\n<ol>\n<li>\n<p>矩形数组是 <strong>一个数组</strong></p>\n</li>\n<li>\n<p>交错数组是 <strong>数组的数组</strong>，实际上也就是 Java 的普通多维数组</p>\n</li>\n<li>\n<p>矩形数组涉及方法调用，而交错数组只涉及内存访问。</p>\n<blockquote>\n<p>交错数组比矩形数组要快。</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"_1-2-数组基类\"> 1.2 数组基类</h3>\n<p>数组实际上也是一个对象，可以调用基类 <code>System.Array</code> 的静态方法来进行一些工作。</p>\n<p>主要的方法有：</p>\n<ul>\n<li><code>Clear()</code></li>\n<li><code>CopyTo()</code></li>\n<li><code>Length</code></li>\n<li><code>Rank</code></li>\n<li><code>Reverse()</code></li>\n<li><code>Sort()</code></li>\n</ul>\n<h2 id=\"_2-枚举\"> 2. 枚举</h2>\n<h3 id=\"_2-1-声明与使用\"> 2.1 声明与使用</h3>\n<p>使用 <code>enum</code> 定义枚举。</p>\n<p>默认会以 <code>int</code> 来存储枚举值。</p>\n<div><pre><code><span>enum</span> <span>EmpType</span>\n<span>{</span>\n    Manager<span>,</span>                <span>// 0</span>\n    Grunt<span>,</span>                  <span>// 1</span>\n    Contractor<span>,</span>             <span>// 2</span>\n    VicePresident <span>=</span> <span>101</span>     <span>// 101</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>可以通过 <strong>冒号</strong> (<code>:</code>) 来指定枚举储存的类型</p>\n<div><pre><code><span>enum</span> <span>EmpType</span> <span>:</span> <span><span>byte</span></span>\n<span>{</span>\n    Manager<span>,</span>        <span>// 0</span>\n    Grunt<span>,</span>          <span>// 1</span>\n    Contractor<span>,</span>     <span>// 2</span>\n    VicePresident   <span>// 3</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h3 id=\"_2-2-获取枚举值\"> 2.2 获取枚举值</h3>\n<p>每个枚举对象都有个 <code>ToString()</code> 方法，可以用它获取枚举的 <strong>名字</strong></p>\n<div><pre><code><span>EmpType</span> emp <span>=</span> EmpType<span>.</span>Manager<span>;</span>\n\nemp<span>.</span><span>ToString</span><span>(</span><span>)</span><span>;</span>     <span>// \"Manager\"</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>如果想获取枚举存储的变量值，那么使用强制转换即可。</p>\n<div><pre><code>Console<span>.</span><span>WriteLine</span><span>(</span><span>\"{0} = {1}\"</span><span>,</span> emp<span>.</span><span>ToString</span><span>(</span><span>)</span><span>,</span> <span>(</span><span>byte</span><span>)</span>emp<span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div><p><code>System.Enum</code> 还提供了 <code>GetValues()</code> 方法来获取枚举中的所有成员。</p>\n<h3 id=\"_2-3-注意事项\"> 2.3 注意事项</h3>\n<p>需要注意的是，<code>switch</code> 可以接受 <strong>0</strong> 作为 <strong>枚举值</strong> 进行处理；</p>\n<p>但是，对于其他的数值则不行。</p>\n<p>所以最好还是使用类似 Java 的枚举使用方法。</p>\n<h2 id=\"_3-结构-struct\"> 3. 结构 (struct)</h2>\n<p>结构类型和类很相似，都可以具有构造函数、域和方法；同时也可以给它们附上可见性修饰符。</p>\n<div><pre><code><span>struct</span> <span>Point</span>\n<span>{</span>\n    <span>public</span> <span><span>int</span></span> x<span>;</span>\n    <span>public</span> <span><span>int</span></span> y<span>;</span>\n\n    <span>public</span> <span><span>void</span></span> <span>Display</span><span>(</span><span>)</span>\n    <span>{</span>\n        Console<span>.</span><span>WriteLine</span><span>(</span><span>\"X = {0}, Y = {1}\"</span><span>,</span> x<span>,</span> y<span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>结构和类的不同点主要在于：结构是一个 <strong>值类型</strong>，而类是一个 <strong>引用类型</strong>。</p>\n<p>下面会详细描述两种类型的不同点。</p>\n<p>需要注意的是，结构在声明时必须为 <strong>每个域</strong> 赋值；或者使用 <strong>默认构造函数</strong>，否则在使用结构时就会报错。</p>\n<h2 id=\"_4-值类型和引用类型\"> 4. 值类型和引用类型</h2>\n<ol>\n<li>\n<p>值类型分配在栈中，引用类型分配在堆中</p>\n</li>\n<li>\n<p>值类型在使用等号(<code>=</code>)赋值时，对应内容的值被复制，而引用类型只复制指向对象的引用</p>\n<blockquote>\n<p>即，值类型在复制时，构造出了新的对象\n而引用类型只是复制指针，并没有构造出新的对象</p>\n</blockquote>\n</li>\n<li>\n<p>基本类型和枚举、结构都是值类型</p>\n</li>\n<li>\n<p>类、数组、字符串都是引用类型</p>\n</li>\n<li>\n<p>结构中包含引用类型时，复制结构，只复制引用类型的引用</p>\n</li>\n<li>\n<p>按值传递引用类型时，引用本身进行复制，然后传入方法中，不会改变原有的引用的指向</p>\n</li>\n<li>\n<p>按引用传递引用类型时，引用本身被传入方法中，会改变原有引用的指向</p>\n</li>\n</ol>\n<h2 id=\"_5-可空类型\"> 5. 可空类型</h2>\n<p>可空类型(nullable-type) 只能用于 <strong>值类型</strong>。</p>\n<p>它使用 <code>?</code> 来表示一个值类型是 <strong>可以为空的</strong>。</p>\n<div><pre><code><span><span>int</span><span>?</span></span> nullableInt <span>=</span> <span>null</span><span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>这通常用于数据库编程中。</p>\n<p>此语法不能用于引用类型，因为引用类型可以为空。</p>\n<blockquote>\n<p>这和 Kotlin 中的 <code>?</code> 不同，Kotlin 中不指明 <code>?</code> 的类型都是不可空的。</p>\n</blockquote>\n<p>可以使用 <code>??</code> 操作符为空类型赋予初始值。</p>\n<div><pre><code><span><span>int</span></span> myData <span>=</span> dr<span>.</span><span>GetIntFromDatabase</span><span>(</span><span>)</span> <span>??</span> <span>100</span><span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div>",
      "date_published": "2016-11-30T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "CSharp"
      ]
    },
    {
      "title": ".NET 平台基础知识",
      "url": "https://wafer.li/blog-corners/langroad/CSharp/dot%20NET%20%E5%B9%B3%E5%8F%B0%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/",
      "id": "https://wafer.li/blog-corners/langroad/CSharp/dot%20NET%20%E5%B9%B3%E5%8F%B0%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/",
      "summary": "<h2 id=\"_1-概述\"> 1 . 概述</h2>\n<p>.NET 是微软公司开发的一个运行库和平台，它是平台无关和语言无关的，可以支持多种语言创建 .NET 应用并跨平台运行。</p>\n<blockquote>\n<p>这有点类似 Java 的 &quot;write once, run anywhere&quot; 的思想</p>\n</blockquote>\n",
      "content_html": "<h2 id=\"_1-概述\"> 1 . 概述</h2>\n<p>.NET 是微软公司开发的一个运行库和平台，它是平台无关和语言无关的，可以支持多种语言创建 .NET 应用并跨平台运行。</p>\n<blockquote>\n<p>这有点类似 Java 的 &quot;write once, run anywhere&quot; 的思想</p>\n</blockquote>\n\n<h2 id=\"_2-net-平台的构成\"> 2. .NET 平台的构成</h2>\n<p>.NET 平台主要有平台构造块（CLR, CTS, CLS）和基础类库构成。</p>\n<h3 id=\"_2-1-平台构造块\"> 2.1 平台构造块</h3>\n<p>.NET 的平台构造块有三个，分别为 CLR, CTS 和 CLS。</p>\n<h4 id=\"_2-1-1-clr-公共语言运行库\"> 2.1.1 CLR —— 公共语言运行库</h4>\n<p>CLR 全称叫做 Common Langurage Runtime。其主要作用就是为我们定位、加载和管理 .NET 类型，同时负责底层细节的工作，如内存管理、应用托管、处理线程、安全检查等。</p>\n<blockquote>\n<p>从 Java 的角度看，CLR 相当于 Java 的 JRE</p>\n</blockquote>\n<h4 id=\"_2-1-2-cts-公共类型系统\"> 2.1.2 CTS —— 公共类型系统</h4>\n<p>CTS 的全称叫做 Common Type System。顾名思义，它定义了一个公共的 .NET 类型系统，描述 .NET 支持的数据结构和类型，这是 .NET 的多语言支持的特点。</p>\n<h4 id=\"_2-1-3-cls-公共语言规范\"> 2.1.3 CLS —— 公共语言规范</h4>\n<p>CLS 全称为 Common Language Specification。它定义了一个让所有的 .NET 语言都支持的公共类型和编程结构的子集，这主要是保证各个语言的兼容性而设计的。如果构造的 .NET 类型仅公开与 CLS 兼容的部分，那么所编写的 .NET 库就能与其他语言进行交互。</p>\n<h3 id=\"_2-2-基础类库\"> 2.2 基础类库</h3>\n<p>.NET 除了三大构件以外，还提供了一个使用与全部 .NET 程序语言的基础库。</p>\n<blockquote>\n<p>相当于 Java 和 C ++ 中的标准库</p>\n</blockquote>\n<p>基础类库包括各种基本类型，文件 IO ，线程，GUI 以及与各种外部设备的交互等等。</p>\n<p>下面的图显示了 .NET 构件与基础类库的关系。</p>\n<p><img src=\"https://img.blog.csdn.net/20160611195251305\" alt=\"关系\" /></p>\n<h2 id=\"_3-c-的特点\"> 3. C# 的特点</h2>\n<ol>\n<li>\n<p>不需要指针</p>\n</li>\n<li>\n<p>自动管理内存和垃圾回收</p>\n<blockquote>\n<p>所以不支持 <code>delete</code> 关键字</p>\n</blockquote>\n</li>\n<li>\n<p>类、接口、结构、枚举、委托都有正式的语法结构</p>\n</li>\n<li>\n<p>可以重载操作符</p>\n</li>\n<li>\n<p>支持基于特性的编程</p>\n</li>\n<li>\n<p>属性(property) 而非字段(field)</p>\n<blockquote>\n<p>也就是说可以直接用点操作符而不是使用 getter 和 setter。</p>\n</blockquote>\n</li>\n<li>\n<p><code>await</code> 和 <code>async</code> 关键字，类似同步调用的异步调用方法</p>\n</li>\n</ol>\n<p>同时还具有其他语言的泛型、匿名类、反射等特性。</p>\n<h2 id=\"_4-托管代码和非托管代码\"> 4. 托管代码和非托管代码</h2>\n<p>和 Java 一样，C# 语言需要生成类似 Java 字节码的一种中间代码才能够运行。</p>\n<p>所以 C# 编译生成的代码只能在 .NET 运行库中执行。</p>\n<blockquote>\n<p>就像 Java 必须使用 JRE 运行一样</p>\n</blockquote>\n<p>正确的来说，这种必须在 .NET 运行库中执行的代码被称为<strong>托管代码</strong>(managed code)；</p>\n<p>包含托管代码的二进制单元称为<strong>程序集</strong>(assembly)。</p>\n<p>反之，不能直接在 .NET 运行库承载的代码被称为非托管代码(unmanaged code)</p>\n<h2 id=\"_5-其他支持-net-的编程语言\"> 5. 其他支持 .NET 的编程语言</h2>\n<p>除了 C# 以外，.NET 框架也支持其他的编程语言。</p>\n<p>实际上，在安装了 Visual Studio 之后，微软会提供 C#, Visual Basic, C++/CLI , JavaScript 和 F# 的 .NET 支持</p>\n<h2 id=\"_6-net-程序集概览\"> 6. .NET 程序集概览</h2>\n<p>为了实现平台无关性，.NET 采用了程序集的概念。</p>\n<p>不同的语言通过特定的编译器，编译得到一个中间语言(IL)和元数据，随后打包成一个程序集。</p>\n<blockquote>\n<p>需要注意的是，.NET 中间语言拥有很多种缩写，IL 只是其中一种，其余的还有 MSIL 或者 CIL。</p>\n<p>IL, MSIL, CIL 都是等价的，指的就是中间语言。</p>\n</blockquote>\n<p>程序集是二进制大对象所打包成的集合，大致分为两类；</p>\n<p>一类是应用程序，拥有一个 <code>.exe</code> 入口。</p>\n<p>另一类是库，具有 <code>.dll</code> 扩展名。</p>\n<p>CIL 类似于 Java 的字节码，也是平台无关性的一个重要的原因。</p>\n<p>在运行时，CIL 通过 JIT 编译器编译成为特定的机器码，在不同的设备上进行运行。</p>\n<p>程序集除了包含 CIL 以外，还包含了元数据。元数据是许多 C# 特性的支柱（例如反射，晚期绑定等），同时，一些现代 IDE (Visual Studio)可以利用元数据进行智能感知。</p>\n<p>此外，程序集还包含了描述程序集本身的元数据，它们叫做<strong>清单</strong>(manifest)。</p>\n<h2 id=\"_7-cts\"> 7. CTS</h2>\n<p>CTS 是 .NET 的公共类型系统，它包括五个内容：</p>\n<ul>\n<li>类</li>\n<li>接口</li>\n<li>结构</li>\n<li>枚举</li>\n<li>委托</li>\n</ul>\n<p>大体上与 Java 类似，下面重点讲讲和 Java 不同的部分。</p>\n<h3 id=\"_7-1-委托-delegate\"> 7.1 委托(delegate)</h3>\n<p>这可以算是 C# 相对 Java 的一个进步的方面。委托相当于一个类型安全的<strong>函数指针</strong>，实际上委托是一个派生自 <code>System.MultcastDelegate</code> 的<strong>类</strong>，使用 <code>delegate</code> 关键字可以声明一个委托。</p>\n<div><pre><code><span>delegate</span> <span><span>int</span></span> <span>BinaryOp</span><span>(</span><span><span>int</span></span> x<span>,</span> <span><span>int</span></span> y<span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>这样，就可以使用委托来实现回调，而不需要像 Java 一样使用臃肿的接口来进行回调动作。</p>\n<h3 id=\"_7-2-结构-struct\"> 7.2 结构(struct)</h3>\n<p>C# 的结构和 C99 之后的结构很像，用法也趋近；可以包含字段、构造函数、定义方法等。</p>\n<p>不过一般当做一个容器类来使用。</p>\n<h2 id=\"_8-内建类型\"> 8. 内建类型</h2>\n<p>同样，.NET 具有一个內建的核心数据类型，用于兼容不同平台的类型结构。下表给出了一个 CTS 数据类型和 C# 、C++ 的相应对比。</p>\n<table>\n<thead>\n<tr>\n<th>CTS</th>\n<th>C</th>\n<th style=\"text-align:left\">C++</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>System.Byte</td>\n<td>byte</td>\n<td style=\"text-align:left\">unsigned char</td>\n</tr>\n<tr>\n<td>System.SByte</td>\n<td>sbyte</td>\n<td style=\"text-align:left\">signed cahr</td>\n</tr>\n<tr>\n<td>System.Int16</td>\n<td>short</td>\n<td style=\"text-align:left\">short</td>\n</tr>\n<tr>\n<td>System.Int32</td>\n<td>int</td>\n<td style=\"text-align:left\">int 或 long</td>\n</tr>\n<tr>\n<td>System.Int64</td>\n<td>long</td>\n<td style=\"text-align:left\">int64_t</td>\n</tr>\n<tr>\n<td>System.UInt16</td>\n<td>ushort</td>\n<td style=\"text-align:left\">unsigned short</td>\n</tr>\n<tr>\n<td>System.UInt32</td>\n<td>uint</td>\n<td style=\"text-align:left\">unsigned int 或 unsigned long</td>\n</tr>\n<tr>\n<td>System.UInt64</td>\n<td>ulong</td>\n<td style=\"text-align:left\">unsigned int64_t</td>\n</tr>\n<tr>\n<td>System.Single</td>\n<td>float</td>\n<td style=\"text-align:left\">float</td>\n</tr>\n<tr>\n<td>System.Double</td>\n<td>double</td>\n<td style=\"text-align:left\">double</td>\n</tr>\n<tr>\n<td>System.Object</td>\n<td>object</td>\n<td style=\"text-align:left\">object^</td>\n</tr>\n<tr>\n<td>System.Char</td>\n<td>char</td>\n<td style=\"text-align:left\">wchar_t</td>\n</tr>\n<tr>\n<td>System.String</td>\n<td>string</td>\n<td style=\"text-align:left\">String^</td>\n</tr>\n<tr>\n<td>System.Decimal</td>\n<td>decimal</td>\n<td style=\"text-align:left\">Decimal</td>\n</tr>\n<tr>\n<td>System.Boolean</td>\n<td>bool</td>\n<td style=\"text-align:left\">bool</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"_9-clr\"> 9. CLR</h2>\n<p>CLR 类似于 JVM，利用 <code>mscoree.dll</code> 库来进行 .NET 程序加载工作。</p>\n<p>下图是 <code>mscoree.dll</code> 的工作流。</p>\n<p><img src=\"https://www.ituring.com.cn/download/01YY7g3jBdEN\" alt=\"\" /></p>\n<h2 id=\"_10-名称空间-namespace\"> 10. 名称空间(namespace)</h2>\n<p>这个特性类似于 Java 的 <code>package</code> 。</p>\n<p>语法和 C++ 中的名称空间语法相同，使用 <code>using</code> 来引入名称空间（相当于 Java 的 <code>import</code>） 来进行使用。</p>\n<div><pre><code><span>using</span> <span>System</span><span>;</span>\n\n<span>public</span> <span>class</span> <span>MyApp</span>\n<span>{</span>\n  <span>static</span> <span><span>void</span></span> <span>Main</span><span>(</span><span>)</span>\n  <span>{</span>\n    Console<span>.</span><span>WriteLine</span><span>(</span><span>\"Hi from C#\"</span><span>)</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>当然，同 Java 一样，在使用对应的名称空间之前，首先要引入依赖程序集。</p>\n",
      "image": "https://img.blog.csdn.net/20160611195251305",
      "date_published": "2016-11-30T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "CSharp"
      ]
    },
    {
      "title": "动词变化形式",
      "url": "https://wafer.li/blog-corners/langroad/Japanese/%E5%8A%A8%E8%AF%8D%E5%8F%98%E5%8C%96%E5%BD%A2%E5%BC%8F/",
      "id": "https://wafer.li/blog-corners/langroad/Japanese/%E5%8A%A8%E8%AF%8D%E5%8F%98%E5%8C%96%E5%BD%A2%E5%BC%8F/",
      "summary": "<h2 id=\"_1-敬体形式-ます形\"> 1. 敬体形式(ます形)</h2>\n<p><img src=\"https://ww3.sinaimg.cn/large/006tNc79gw1fadotjnrlgj31kw0wejvz.jpg\" alt=\"\" /></p>\n",
      "content_html": "<h2 id=\"_1-敬体形式-ます形\"> 1. 敬体形式(ます形)</h2>\n<p><img src=\"https://ww3.sinaimg.cn/large/006tNc79gw1fadotjnrlgj31kw0wejvz.jpg\" alt=\"\" /></p>\n\n<h2 id=\"_2-连用形\"> 2. 连用形</h2>\n<p>实际上就是 ます 形去掉 ます，就是动词连用形。</p>\n<h3 id=\"_2-1-敬体\"> 2.1 敬体</h3>\n<p><img src=\"https://ww1.sinaimg.cn/large/006tNc79gw1fadowlhl2tj31kw0wkq8q.jpg\" alt=\"\" /></p>\n<p>注意，这里的敬体时态变形都是属于敬体。</p>\n<p>中顿形用的比较少。</p>\n<blockquote>\n<p>始めまして</p>\n</blockquote>\n<h3 id=\"_2-2-名词\"> 2.2 名词</h3>\n<p>动词连用形就是动词的 <strong>名词形式</strong>。</p>\n<p><img src=\"https://ww4.sinaimg.cn/large/006tNc79gw1fadp1msrawj31kw0wcado.jpg\" alt=\"\" /></p>\n<p>通常和 に 连用，表示目的。</p>\n<blockquote>\n<p>に 作为助词只能接名词，表示目的时，只能使用动词的名词形式，即连用形。</p>\n</blockquote>\n<h3 id=\"_2-3-构成复合词\"> 2.3 构成复合词</h3>\n<p><img src=\"https://ww2.sinaimg.cn/large/006tNc79gw1fadp4u9r4ej31kw0wkafh.jpg\" alt=\"\" /></p>\n<h2 id=\"_3-否定形\"> 3. 否定形</h2>\n<p>由动词原形变化而来</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/006tNc79gw1fadp9qc2i6j31kw0wijx5.jpg\" alt=\"\" /></p>\n<h2 id=\"_4-意志形-想要做\"> 4. 意志形(想要做)</h2>\n<p>用作第二人称时，主要表达<strong>劝诱和建议</strong>的意义。</p>\n<p><img src=\"https://ww2.sinaimg.cn/large/006tNc79gw1fadpfgd83qj31kw0wjwj3.jpg\" alt=\"\" /></p>\n<p>注意，意志形和推量形有区别，推量形表示 <strong>推测</strong>。</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/006tNc79gw1fadphot8s7j31kw0wawjx.jpg\" alt=\"\" /></p>\n<p>需要注意的是，推量形不能用于第二人称，而意志形不能用于第三人称。</p>\n<h2 id=\"_5-た-形-て-形\"> 5. た 形/て 形</h2>\n<p><img src=\"https://ww2.sinaimg.cn/large/006tNc79gw1fae0smbu83j31kw0wmwiz.jpg\" alt=\"\" /></p>\n<h3 id=\"_5-1-音变规律\"> 5.1 音变规律</h3>\n<p><strong>仅仅适用于五段动词</strong></p>\n<p><img src=\"https://ww3.sinaimg.cn/large/006tNc79gw1fae28lq0sqj31kw0wuq9g.jpg\" alt=\"\" /></p>\n<h3 id=\"_5-2-作用\"> 5.2 作用</h3>\n<p><img src=\"https://ww4.sinaimg.cn/large/65e4f1e6jw1fae2euignej21kw0wg0y6.jpg\" alt=\"\" /></p>\n<p>た 形表示 <strong>完成时和过去式</strong></p>\n<p>て 形表示 <strong>中顿</strong>，如果有两个动词需要隔开来说，那么使用 て 形</p>\n<h2 id=\"_6-假定形-如果\"> 6. 假定形(如果)</h2>\n<p><img src=\"https://ww3.sinaimg.cn/large/65e4f1e6gw1fae2lsbgg6j21kw0wfjwj.jpg\" alt=\"\" /></p>\n<p>直接使用 <strong>尾变 え 段 + ば</strong> 即可，不需要区分。</p>\n<h3 id=\"_6-1-假定形表达方式\"> 6.1 假定形表达方式</h3>\n<p>假定形表达方式有四种： と、ば、なら、たら</p>\n<h4 id=\"_6-1-1-と-形式\"> 6.1.1 と 形式</h4>\n<p>前面的动作发生之后，就 <strong>一定会</strong> (100%) 发生后面的动作；</p>\n<p>表示一种自然状态和必定发生的事情。</p>\n<p>使用 <strong>动词原形、否定形 + と</strong></p>\n<blockquote>\n<p>コインを入 い れると、缶 (かん) ビールが出 で る</p>\n</blockquote>\n<h4 id=\"_6-1-2-ば-形式\"> 6.1.2 ば 形式</h4>\n<p>主要是固定搭配、谚语和接特定的动词，基本属于固定搭配。</p>\n<p>就是上面的 PPT 的形式。</p>\n<blockquote>\n<p>平 (へい) 日 (じつ) は学 (がっ) 校 (こう) に行 い かなければならない</p>\n<p>研 けん 究 きゅう すればするほど、面 おも 白 しろ くなる。</p>\n<p>住 す めば都 みやこ 。</p>\n<blockquote>\n<p>表示习惯了都是好地方 （谚语）</p>\n</blockquote>\n<p>喉 のど 元 もと 過 す ぎれば熱 あつ さを忘 わす れる。</p>\n<blockquote>\n<p>比喻享乐时候就会忘了以前的艰辛</p>\n</blockquote>\n<p>麝 じゃ あれば香 かんば し。</p>\n<blockquote>\n<p>比喻有实力的人最终都能得到认同</p>\n</blockquote>\n<p>この仕 し 事 ごと はやればできると思 おも う。</p>\n<p>先 せん 生 せい に聞 き けば分 わ かる。</p>\n<p>学 がく 生 せい はちゃんと宿 しゅく 題 だい をすればいい</p>\n</blockquote>\n<p>接特定的动词，主要有</p>\n<ol>\n<li>やれば</li>\n<li>聞けば</li>\n<li>すれば</li>\n</ol>\n<p>固定搭配，主要有</p>\n<ol>\n<li>\n<p>〜 ば 〜 ほど</p>\n<blockquote>\n<p>越... 就越 ...</p>\n</blockquote>\n</li>\n<li>\n<p>否定形去 い ＋ ければならない</p>\n<blockquote>\n<p>不...的话，就不行。</p>\n</blockquote>\n</li>\n</ol>\n<p>剩下的都表示 <strong>必然结果</strong></p>\n<h4 id=\"_6-1-3-なら-形式\"> 6.1.3 なら 形式</h4>\n<p>假设前面的动作 <strong>尚未进行</strong>，而给予后面的建议和意见、后果。</p>\n<p>用法： <strong>动词原形、否定形、名词 + なら</strong></p>\n<p>注意不需要变化，只使用原形即可。</p>\n<p>通常只接原形。</p>\n<blockquote>\n<p>スーパーに行 い くなら、メロンを買 か ってきてください</p>\n</blockquote>\n<h4 id=\"_6-1-4-たら-形式\"> 6.1.4 たら 形式</h4>\n<p>动词 た 形 + なら 的省略。</p>\n<p>表示 <strong>如果事情已经发生了，而对后方的效果、后果。</strong></p>\n<blockquote>\n<p>(已经发生了) 的话...就...</p>\n</blockquote>\n<p>用法： <strong>动词 た 形 + ら</strong></p>\n<blockquote>\n<p>学 がっ 校 こう に行 い ったら、先 せん 生 せい に休 やす みのことを伝 つた えてください\n<strong>到了学校之后</strong>，和老师说休假的事情。</p>\n</blockquote>\n<h4 id=\"_6-1-5-なら-和-たら-的区别\"> 6.1.5 なら 和 たら 的区别</h4>\n<ul>\n<li>なら\n<blockquote>\n<p>表示前面的动作 <strong>尚未进行</strong>，多用于表示建议</p>\n</blockquote>\n</li>\n<li>たら\n<blockquote>\n<p>表示前面的动作 <strong>已经进行</strong></p>\n</blockquote>\n</li>\n</ul>\n<p>但是在接形容词和名词，区别不大。</p>\n<p>还有就是 なら 比较正式化，而 たら 比较口语化；</p>\n<p>需要注意的就是它们在接动词的区别。</p>\n<h2 id=\"_7-命令形\"> 7. 命令形</h2>\n<p>语法上比较凶悍，大多数情况不要使用。</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/65e4f1e6gw1fae2paq48cj21kw0wdq78.jpg\" alt=\"\" /></p>\n<p>一段动词中的 よ 是一个 <strong>书面用语</strong>，口语中一般不用。</p>\n<h3 id=\"_7-1-命令的表达方式\"> 7.1 命令的表达方式</h3>\n<p><img src=\"https://ww3.sinaimg.cn/large/65e4f1e6gw1fae2r554kaj21kw0wbaeg.jpg\" alt=\"\" /></p>\n<p>最后一种是 <strong>否定形式</strong> 的命令表达。</p>\n<blockquote>\n<p>在这里是双重否定，注意区分。</p>\n</blockquote>\n",
      "image": "https://ww3.sinaimg.cn/large/006tNc79gw1fadotjnrlgj31kw0wejvz.jpg",
      "date_published": "2016-12-04T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Japanese"
      ]
    },
    {
      "title": "动词特征和分类",
      "url": "https://wafer.li/blog-corners/langroad/Japanese/%E5%8A%A8%E8%AF%8D%E7%89%B9%E5%BE%81%E5%92%8C%E5%88%86%E7%B1%BB/",
      "id": "https://wafer.li/blog-corners/langroad/Japanese/%E5%8A%A8%E8%AF%8D%E7%89%B9%E5%BE%81%E5%92%8C%E5%88%86%E7%B1%BB/",
      "summary": "<h2 id=\"_1-动词特征\"> 1. 动词特征</h2>\n<p><img src=\"https://ww4.sinaimg.cn/large/006tNc79gw1fadogttbnrj31kw0x2wil.jpg\" alt=\"\" /></p>\n",
      "content_html": "<h2 id=\"_1-动词特征\"> 1. 动词特征</h2>\n<p><img src=\"https://ww4.sinaimg.cn/large/006tNc79gw1fadogttbnrj31kw0x2wil.jpg\" alt=\"\" /></p>\n\n<h2 id=\"_2-动词分类\"> 2. 动词分类</h2>\n<p><img src=\"https://ww3.sinaimg.cn/large/006tNc79gw1fadoi93mdmj31kw0w4wht.jpg\" alt=\"\" /></p>\n<p><img src=\"https://ww1.sinaimg.cn/large/006tNc79gw1fadojmviaij31kw0wugqb.jpg\" alt=\"\" /></p>\n<p><img src=\"https://ww1.sinaimg.cn/large/006tNc79gw1fadom0nmxtj31kw0w9wic.jpg\" alt=\"\" /></p>\n<p>如果是 <strong>汉字直接加　る</strong>，并且 <strong>不是两个假名</strong>，那么它是 <strong>五段动词</strong>。</p>\n<p>如果是 <strong>两个假名</strong> 的，那么就为 <strong>一段动词</strong>。</p>\n<blockquote>\n<p>比如上面的 帰る 有三个假名，是 <strong>五段动词</strong>。\n但是 見る　<strong>只有两个假名</strong>，而且，る　前面是 み(い 段假名)，是 <strong>一段动词</strong></p>\n</blockquote>\n",
      "image": "https://ww4.sinaimg.cn/large/006tNc79gw1fadogttbnrj31kw0x2wil.jpg",
      "date_published": "2016-12-03T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Japanese"
      ]
    },
    {
      "title": "授受关系",
      "url": "https://wafer.li/blog-corners/langroad/Japanese/%E6%8E%88%E5%8F%97%E5%85%B3%E7%B3%BB/",
      "id": "https://wafer.li/blog-corners/langroad/Japanese/%E6%8E%88%E5%8F%97%E5%85%B3%E7%B3%BB/",
      "summary": "<h2 id=\"_1-我-他人\"> 1. 我 -&gt; 他人</h2>\n<p><img src=\"https://ww4.sinaimg.cn/large/006tNc79gw1facsmr44fhj31kw0xawhu.jpg\" alt=\"\" /></p>\n<p>需要注意的是， さしあげる　是 あげる 的自谦语。</p>\n<blockquote>\n<p>实际上，判断自谦语和尊敬语主要看主语成分，即 は 的修饰词。</p>\n</blockquote>\n",
      "content_html": "<h2 id=\"_1-我-他人\"> 1. 我 -&gt; 他人</h2>\n<p><img src=\"https://ww4.sinaimg.cn/large/006tNc79gw1facsmr44fhj31kw0xawhu.jpg\" alt=\"\" /></p>\n<p>需要注意的是， さしあげる　是 あげる 的自谦语。</p>\n<blockquote>\n<p>实际上，判断自谦语和尊敬语主要看主语成分，即 は 的修饰词。</p>\n</blockquote>\n\n<h2 id=\"_2-他人-我\"> 2. 他人 -&gt; 我</h2>\n<p><img src=\"https://ww1.sinaimg.cn/large/006tNc79gw1facsvyzcczj31kw0wvjvo.jpg\" alt=\"\" /></p>\n<p>这里有个常考点，主要是考 <strong>格助词</strong> 和后面的句末修饰的关系。</p>\n<p>需要记忆。</p>\n<p>同理，上述的 くださる　是 くれる　的尊敬语；</p>\n<p>いだだく　是 もらう　的 <strong>自谦语</strong>。</p>\n<blockquote>\n<p>主要看主语，いだだく　虽然是 自谦语，但是用于描述别人的动作，表示对别人的尊敬。</p>\n</blockquote>\n<h2 id=\"_3-结合使役-逻辑颠倒\"> 3. 结合使役，逻辑颠倒！</h2>\n<p><img src=\"https://ww3.sinaimg.cn/large/006tNc79gw1fact2971huj31kw0wxjwe.jpg\" alt=\"\" /></p>\n<p>这里的逻辑颠倒，主要是 <strong>行为人</strong> 的变化。</p>\n<p>这里的第三句并没有 <strong>请求</strong> 的意思，所表达的就是 “我要说自己的意见”，而不包含有请求意味。</p>\n<h2 id=\"_4-请求别人为自己做某事\"> 4. 请求别人为自己做某事</h2>\n<p><img src=\"https://ww3.sinaimg.cn/large/006tNc79gw1fact8n66ixj31kw0wqn1u.jpg\" alt=\"\" /></p>\n<p>这里的句式才具有 <strong>请求意味</strong>；</p>\n<p>需要注意的是，いただく　的请求句式需要使用 <strong>动词的可能态</strong>，也就是动词末尾变为同行的 え　段。</p>\n<h2 id=\"_5-请求别人允许自己做某事\"> 5. 请求别人允许自己做某事</h2>\n<p><img src=\"https://ww1.sinaimg.cn/large/006tNc79gw1factd1h7jwj31kw0x6dku.jpg\" alt=\"\" /></p>\n<p>在请求句式加上 <strong>使役态</strong>，变成 <strong>请求允许</strong> 的意思。</p>\n<h2 id=\"_6-注意\"> 6. 注意</h2>\n<p>授受关系中隐含了一个 <strong>恩惠给予</strong> 的意思。</p>\n<p>如果没有包含此意思，就不应该使用此句式。</p>\n",
      "image": "https://ww4.sinaimg.cn/large/006tNc79gw1facsmr44fhj31kw0xawhu.jpg",
      "date_published": "2016-12-02T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Japanese"
      ]
    },
    {
      "title": "时间数词",
      "url": "https://wafer.li/blog-corners/langroad/Japanese/%E6%97%B6%E9%97%B4%E6%95%B0%E8%AF%8D/",
      "id": "https://wafer.li/blog-corners/langroad/Japanese/%E6%97%B6%E9%97%B4%E6%95%B0%E8%AF%8D/",
      "summary": "<h2 id=\"_1-日期\"> 1. 日期</h2>\n<ol>\n<li>\n<p>一号</p>\n<blockquote>\n<p>一日（ついたち）/（いちにち）/一号</p>\n</blockquote>\n</li>\n<li>\n<p>二号</p>\n<blockquote>\n<p>二日（ふつか）/二号</p>\n</blockquote>\n</li>\n<li>\n<p>三号</p>\n<blockquote>\n<p>三日（みっか）/三号</p>\n</blockquote>\n</li>\n<li>\n<p>四号</p>\n<blockquote>\n<p>四日（よっか）/四号</p>\n</blockquote>\n</li>\n<li>\n<p>五号</p>\n<blockquote>\n<p>五日（いつか）/五号</p>\n</blockquote>\n</li>\n<li>\n<p>六号</p>\n<blockquote>\n<p>六日（むいか）/六号</p>\n</blockquote>\n</li>\n<li>\n<p>七号</p>\n<blockquote>\n<p>七日（なのか）/七号</p>\n</blockquote>\n</li>\n<li>\n<p>八号</p>\n<blockquote>\n<p>八日（ようか）/八号\n注意，八号和四号很像，八号有<strong>长音</strong></p>\n</blockquote>\n</li>\n<li>\n<p>九号</p>\n<blockquote>\n<p>九日（ここのか）/九号</p>\n</blockquote>\n</li>\n<li>\n<p>十号</p>\n<blockquote>\n<p>十日（とおか）/十号</p>\n</blockquote>\n</li>\n<li>\n<p>二十号</p>\n<blockquote>\n<p>二十日（はつか）</p>\n</blockquote>\n</li>\n<li>\n<p>几号</p>\n<blockquote>\n<p>表示疑问\n何日（なんにち）/几号,几日</p>\n</blockquote>\n</li>\n</ol>\n",
      "content_html": "<h2 id=\"_1-日期\"> 1. 日期</h2>\n<ol>\n<li>\n<p>一号</p>\n<blockquote>\n<p>一日（ついたち）/（いちにち）/一号</p>\n</blockquote>\n</li>\n<li>\n<p>二号</p>\n<blockquote>\n<p>二日（ふつか）/二号</p>\n</blockquote>\n</li>\n<li>\n<p>三号</p>\n<blockquote>\n<p>三日（みっか）/三号</p>\n</blockquote>\n</li>\n<li>\n<p>四号</p>\n<blockquote>\n<p>四日（よっか）/四号</p>\n</blockquote>\n</li>\n<li>\n<p>五号</p>\n<blockquote>\n<p>五日（いつか）/五号</p>\n</blockquote>\n</li>\n<li>\n<p>六号</p>\n<blockquote>\n<p>六日（むいか）/六号</p>\n</blockquote>\n</li>\n<li>\n<p>七号</p>\n<blockquote>\n<p>七日（なのか）/七号</p>\n</blockquote>\n</li>\n<li>\n<p>八号</p>\n<blockquote>\n<p>八日（ようか）/八号\n注意，八号和四号很像，八号有<strong>长音</strong></p>\n</blockquote>\n</li>\n<li>\n<p>九号</p>\n<blockquote>\n<p>九日（ここのか）/九号</p>\n</blockquote>\n</li>\n<li>\n<p>十号</p>\n<blockquote>\n<p>十日（とおか）/十号</p>\n</blockquote>\n</li>\n<li>\n<p>二十号</p>\n<blockquote>\n<p>二十日（はつか）</p>\n</blockquote>\n</li>\n<li>\n<p>几号</p>\n<blockquote>\n<p>表示疑问\n何日（なんにち）/几号,几日</p>\n</blockquote>\n</li>\n</ol>\n\n<h2 id=\"_2-星期\"> 2. 星期</h2>\n<p>星期相对比较简单，记住 <strong>日月火水木金土</strong> 即可。</p>\n<h2 id=\"_3-时间前后表达\"> 3. 时间前后表达</h2>\n<h3 id=\"_3-1-日\"> 3.1 日</h3>\n<ol>\n<li>\n<p>今天</p>\n<blockquote>\n<p>きょう</p>\n</blockquote>\n</li>\n<li>\n<p>明天</p>\n<blockquote>\n<p>あした/みょうにち</p>\n</blockquote>\n</li>\n<li>\n<p>昨天</p>\n<blockquote>\n<p>きのう</p>\n</blockquote>\n</li>\n<li>\n<p>前天</p>\n<blockquote>\n<p>おととい</p>\n</blockquote>\n</li>\n<li>\n<p>后天</p>\n<blockquote>\n<p>あさって</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"_3-2-星期\"> 3.2 星期</h3>\n<ol>\n<li>\n<p>本周</p>\n<blockquote>\n<p>こんしゅう (今周)</p>\n</blockquote>\n</li>\n<li>\n<p>上周</p>\n<blockquote>\n<p>せんしゅう (先周)</p>\n</blockquote>\n</li>\n<li>\n<p>上上周</p>\n<blockquote>\n<p>せんせんしゅう (先々周)</p>\n</blockquote>\n</li>\n<li>\n<p>下周</p>\n<blockquote>\n<p>らいしゅう (来周)</p>\n</blockquote>\n</li>\n<li>\n<p>下下周</p>\n<blockquote>\n<p>さらいしゅう (再来周)</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"_3-3-月\"> 3.3 月</h3>\n<ol>\n<li>\n<p>这个月</p>\n<blockquote>\n<p>こんげつ （本月）</p>\n</blockquote>\n</li>\n<li>\n<p>下个月</p>\n<blockquote>\n<p>らいげつ （来月）</p>\n</blockquote>\n</li>\n<li>\n<p>下下个月</p>\n<blockquote>\n<p>さらいげつ （再来月）</p>\n</blockquote>\n</li>\n<li>\n<p>上个月</p>\n<blockquote>\n<p>せんげつ (先月)</p>\n</blockquote>\n</li>\n<li>\n<p>上上个月</p>\n<blockquote>\n<p>せんせんげつ (先々月)</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"_3-4-年\"> 3.4 年</h3>\n<ol>\n<li>\n<p>今年</p>\n<blockquote>\n<p>ことし (今年)</p>\n</blockquote>\n</li>\n<li>\n<p>去年</p>\n<blockquote>\n<p>きょねん (去年) / さくねん (昨年)</p>\n</blockquote>\n</li>\n<li>\n<p>前年</p>\n<blockquote>\n<p>おととし / ぜんねん (前年)</p>\n</blockquote>\n</li>\n<li>\n<p>明年</p>\n<blockquote>\n<p>らいねん (来年)</p>\n</blockquote>\n</li>\n<li>\n<p>后年</p>\n<blockquote>\n<p>さらいねん (再来年)</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"_4-一天之内的表达\"> 4. 一天之内的表达</h2>\n<ol>\n<li>\n<p>早上</p>\n<blockquote>\n<p>あさ</p>\n</blockquote>\n</li>\n<li>\n<p>上午</p>\n<blockquote>\n<p>ごぜん (午前)</p>\n</blockquote>\n</li>\n<li>\n<p>中午</p>\n<blockquote>\n<p>ひる (昼)</p>\n</blockquote>\n</li>\n<li>\n<p>下午</p>\n<blockquote>\n<p>ごご (午后)</p>\n</blockquote>\n</li>\n<li>\n<p>傍晚</p>\n<blockquote>\n<p>ゆうがた (夕方)</p>\n</blockquote>\n</li>\n<li>\n<p>晚上</p>\n<blockquote>\n<p>よる (夜)</p>\n</blockquote>\n</li>\n<li>\n<p>白天</p>\n<blockquote>\n<p>ひる (昼)</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"_5-长时间末尾的表达\"> 5. 长时间末尾的表达</h2>\n<ol>\n<li>\n<p>周末</p>\n<blockquote>\n<p>周末（しゅうまつ）</p>\n</blockquote>\n</li>\n<li>\n<p>月末</p>\n<blockquote>\n<p>月末（げつまつ）</p>\n</blockquote>\n</li>\n<li>\n<p>年末</p>\n<blockquote>\n<p>年末（ねんまつ）</p>\n</blockquote>\n</li>\n</ol>\n",
      "date_published": "2016-12-03T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Japanese"
      ]
    },
    {
      "title": "特殊发音",
      "url": "https://wafer.li/blog-corners/langroad/Japanese/%E7%89%B9%E6%AE%8A%E5%8F%91%E9%9F%B3/",
      "id": "https://wafer.li/blog-corners/langroad/Japanese/%E7%89%B9%E6%AE%8A%E5%8F%91%E9%9F%B3/",
      "summary": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>特殊发音指的是在发音过程中，一些五十音的发音方式要发生改变的情况。</p>\n<p>包括浊音、半浊音、拗音、促音和长音，以及同一个假名可能在不同场景下需要音变的情况。</p>\n",
      "content_html": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>特殊发音指的是在发音过程中，一些五十音的发音方式要发生改变的情况。</p>\n<p>包括浊音、半浊音、拗音、促音和长音，以及同一个假名可能在不同场景下需要音变的情况。</p>\n\n<h2 id=\"_2-浊音\"> 2. 浊音</h2>\n<p>浊音值得是 「た」「さ」「か」「は」行假名派生出来的，具体的浊化音和英语的浊化差不多：ta -&gt; da; sa -&gt; za; ka -&gt; ga;</p>\n<table>\n<thead>\n<tr>\n<th>あ</th>\n<th>い</th>\n<th>う</th>\n<th>え</th>\n<th>お</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>が</td>\n<td>ぎ</td>\n<td>ぐ</td>\n<td>げ</td>\n<td>ご</td>\n</tr>\n<tr>\n<td>ガ</td>\n<td>ギ</td>\n<td>グ</td>\n<td>ゲ</td>\n<td>ゴ</td>\n</tr>\n<tr>\n<td>ざ</td>\n<td>じ</td>\n<td>ず</td>\n<td>ぜ</td>\n<td>ぞ</td>\n</tr>\n<tr>\n<td>ザ</td>\n<td>ジ</td>\n<td>ズ</td>\n<td>ゼ</td>\n<td>ゾ</td>\n</tr>\n<tr>\n<td>だ</td>\n<td>ぢ</td>\n<td>づ</td>\n<td>で</td>\n<td>ど</td>\n</tr>\n<tr>\n<td>ダ</td>\n<td>ヂ</td>\n<td>ヅ</td>\n<td>デ</td>\n<td>ド</td>\n</tr>\n<tr>\n<td>ば</td>\n<td>び</td>\n<td>ぶ</td>\n<td>べ</td>\n<td>ぼ</td>\n</tr>\n<tr>\n<td>バ</td>\n<td>ビ</td>\n<td>ブ</td>\n<td>ベ</td>\n<td>ボ</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"_2-1-鼻浊音\"> 2.1 鼻浊音</h3>\n<p>特别注意，当 「が」行位于 <strong>句中或者句末</strong> 时，发鼻浊音。</p>\n<p>即在发 「が」时，先发 「ん」的音。</p>\n<p>当 「が」行位于词首的时候，只发普通的浊音，而不是鼻浊音。</p>\n<p>当 「が」用作 <strong>助词</strong> 时，也发 <strong>鼻浊音</strong></p>\n<p>具体可以参考此<a href=\"http://www.bilibili.com/video/av3488623/\" target=\"_blank\" rel=\"noopener noreferrer\">视频链接</a></p>\n<h3 id=\"_2-2-半浊音\"> 2.2 半浊音</h3>\n<p>需要注意的是，最后一个 「は」的浊化。</p>\n<p>有浊音和 <strong>半浊音</strong> 的区别。</p>\n<p>「は」的浊音就是 ha -&gt; ba (「ば」)</p>\n<p>而 「は」的半浊音是 ha -&gt; pa (「ぱ」)</p>\n<p>注意假名右上角标注的不同，浊音标注两点，而半浊音标注一个圈</p>\n<h2 id=\"_3-送气音和不送气音\"> 3. 送气音和不送气音</h2>\n<p>送气音是 「か」「た」「ぱ」行假名特有现象。</p>\n<p>主要是为了满足较快的语速，保证说话的连贯性。</p>\n<p>当这些假名不在词首、句首时，发不送气音。</p>\n<p>即， <strong>发音不变，将送气量减少</strong>，听起来就会像浊音，但是实际上还是清音或者半浊音。</p>\n<blockquote>\n<p>这里要多多练习才能掌握，注意多听多练，重点在 <strong>气流量的减少</strong> 而非 发音的改变，不然会导致 「か」「が」不分。</p>\n</blockquote>\n<h2 id=\"_4-母音无声化\"> 4. 母音无声化</h2>\n<p>母音无声化指的是在一些情况下 <strong>省略元音</strong>，而只保留气音的现象。</p>\n<p>这也是为日语的高语速而服务的。</p>\n<h3 id=\"_4-1-「い」「う」结尾-无声子音\"> 4.1 「い」「う」结尾 + 无声子音</h3>\n<p>无声子音指的是声带不震动的气音。</p>\n<p>包括 「か」「さ」「た」「は」「ぱ」行，以及拗音 きゃ行、しゃ行、ちゃ行、ひゃ行、ぴゃ行</p>\n<p>如果遇到 「い」「う」结尾的词加上无声子音，那么就会造成母音无声化。</p>\n<p>其最主要的特征就是发前面的词时， <strong>声带不会震动！</strong></p>\n<p>具体可以看<a href=\"https://jp.sonic-learning.com/2010/03/11/museika/\" target=\"_blank\" rel=\"noopener noreferrer\">这个视频</a></p>\n<h3 id=\"_4-2-「い」「う」假名结尾时\"> 4.2 「い」「う」假名结尾时</h3>\n<p>比如说常见的 です 和 ます，其中的 す 就会出现母音无声化。</p>\n<p>念做 「ｓ」而不是 「su」。</p>\n<blockquote>\n<p>注意 す 的读音也有比较难发的地方，注意读准</p>\n</blockquote>\n<h2 id=\"_5-促音\"> 5. 促音</h2>\n<p>促音指的是 っ　，其本身 <strong>不发音</strong>，但是占用词语的一个节拍。</p>\n<p>所谓节拍，就是有促音的，读的时候，保持口型，不发音，等一阵子再发下一个假名。</p>\n<p>具体看 http://www.learnjapanese.aiyori.org/hiragana-sokuon.html</p>\n<h2 id=\"_6-长音\"> 6. 长音</h2>\n<p>长音指的是 <strong>将前一个字母的音拉长一拍</strong>，和促音相反。</p>\n<p>在 <strong>写法上</strong>，有如下规则：</p>\n<ol>\n<li>\n<p>母音重复</p>\n<blockquote>\n<p>如 「あ」「い」「う」只需要重复假名即可</p>\n</blockquote>\n</li>\n<li>\n<p>「え」段加「い」</p>\n<blockquote>\n<p>如 「きれい」美丽的</p>\n</blockquote>\n</li>\n<li>\n<p>「お」段加「う」</p>\n<blockquote>\n<p>如 「おとうさん」父亲</p>\n</blockquote>\n</li>\n<li>\n<p>片假名使用「ー」表示</p>\n<blockquote>\n<p>日文输入法输入减号即可</p>\n</blockquote>\n</li>\n</ol>\n<p>注意，「え」和 「お」会出现母音重复现象，如 「おおい」。</p>\n<p>同时，「え」段有时也有加「え」的情况，如 「おねえさん」</p>\n<p>可能需要总结归纳。</p>\n<h2 id=\"_7-拗音\"> 7. 拗音</h2>\n<p>拗音是 「イ」段假名的特有现象，此段假名加上 ょ・ゃ・ょ 即组成拗音。</p>\n<p>注意拗音的字要缩小。</p>\n<p>拗音连成一个音节来读，而不是分开两个音节，相对来说较为简单。</p>\n<p>需要注意的是，拗音的罗马字会省略掉 i，如　「きゃ」的罗马字是「kya」，在打字时注意即可。</p>\n<p>如果要单独打后面的缩小的字，那么在假名前面加上 x 即可，如 ゃ 使用 「xya」即可。</p>\n<h2 id=\"_8-助词音变\"> 8. 助词音变</h2>\n<p>一些假名在用作助词时，会发生音变现象，比如：</p>\n<ol>\n<li>「は」-&gt; 「わ」</li>\n<li>「へ」-&gt; 「え」</li>\n</ol>\n",
      "date_published": "2016-12-10T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Japanese"
      ]
    },
    {
      "title": "自动词和他动词",
      "url": "https://wafer.li/blog-corners/langroad/Japanese/%E8%87%AA%E5%8A%A8%E8%AF%8D%E5%92%8C%E4%BB%96%E5%8A%A8%E8%AF%8D/",
      "id": "https://wafer.li/blog-corners/langroad/Japanese/%E8%87%AA%E5%8A%A8%E8%AF%8D%E5%92%8C%E4%BB%96%E5%8A%A8%E8%AF%8D/",
      "summary": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>相当于英语中的及物动词和不及物动词。</p>\n<p>自动词是不及物的；</p>\n<p>他动词是及物的。</p>\n",
      "content_html": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>相当于英语中的及物动词和不及物动词。</p>\n<p>自动词是不及物的；</p>\n<p>他动词是及物的。</p>\n\n<h2 id=\"_2-用法区别\"> 2. 用法区别</h2>\n<p>这里有个考点，就是自他动词的用法区别</p>\n<ol>\n<li>\n<p>主语 が　+ 自动词</p>\n<blockquote>\n<p>自动词前面的格助词是 が</p>\n</blockquote>\n</li>\n<li>\n<p>主语 が　+ 宾语 を　+ 他动词</p>\n<blockquote>\n<p>他动词前面的格助词是 を</p>\n</blockquote>\n</li>\n<li>\n<p>を　后面还可以接自动词，表示经过、离开。</p>\n</li>\n</ol>\n<h2 id=\"_3-按照意思区分\"> 3. 按照意思区分</h2>\n<p>首先，我们可以按照意思来区分。</p>\n<p>如果动作可以 <strong>自然发生</strong>，不需要外力帮助，那么就是自动词。</p>\n<p>比如说，雨が降る　这里的 降る　是自动词；</p>\n<p>而 料理を食べる　中的 食べる　就是他动词。</p>\n<blockquote>\n<p>雨是自然落下的，不存在外力；\n料理是被吃的，存在外力。</p>\n</blockquote>\n<h2 id=\"_4-自他动词按照说话立场有所不同\"> 4. 自他动词按照说话立场有所不同</h2>\n<p>例如，开门 開く　是自动词；</p>\n<p>而 開ける　是他动词。</p>\n<p>区别在于说话人立场不同，</p>\n<p>開く 指的是乘客看到电车门打开了，此时对于 <strong>乘客而言</strong>，车门打开不依靠外力；</p>\n<p>而 開ける　指的是，电车司机把门打开了，此时 <strong>对于电车司机而言</strong>，车门打开依靠外力指向。</p>\n<h2 id=\"_5-区分技巧\"> 5. 区分技巧</h2>\n<p>对于同个意思的自他动词，称为一对自他动词，主要有以下几种区分技巧。</p>\n<h3 id=\"_5-1-技巧一\"> 5.1 技巧一</h3>\n<p><img src=\"https://ww4.sinaimg.cn/large/65e4f1e6gw1fae4cd6mz0j21kw0wo43v.jpg\" alt=\"\" /></p>\n<p>あ　是自动词， え　是他动词</p>\n<blockquote>\n<p>注意，存在反例，不一定正确。</p>\n</blockquote>\n<h3 id=\"_5-2-技巧二\"> 5.2 技巧二</h3>\n<p><img src=\"https://ww4.sinaimg.cn/large/65e4f1e6gw1fae4dtm5v0j21kw0x444a.jpg\" alt=\"\" /></p>\n<p>す　结尾的动词，几乎可以确定为他动词；另外一个就是他动词。</p>\n<h3 id=\"_5-3-技巧三\"> 5.3 技巧三</h3>\n<p><img src=\"https://ww1.sinaimg.cn/large/65e4f1e6jw1fae4gae9ncj21kw0x0dky.jpg\" alt=\"\" /></p>\n<p>注意，另一个动词没有 る　才能使用。\n如果没有 す，那么 る　就把 す　的地位替代掉，成为他动词。</p>\n<blockquote>\n<p>注意，这个技巧不靠谱概率较高，慎用。</p>\n</blockquote>\n<h3 id=\"_5-4-反例\"> 5.4 反例</h3>\n<p><img src=\"https://ww3.sinaimg.cn/large/65e4f1e6gw1fae4ijf1tyj21kw0x4djs.jpg\" alt=\"\" /></p>\n<blockquote>\n<p>預かる：别人的东西放在自己这里 -&gt; 保管\n預ける：自己的东西放在别人那里 -&gt; 寄存</p>\n</blockquote>\n<p>此外还有一些反例</p>\n<ol>\n<li>\n<p>聞く 是自动词；聞こえる 是他动词</p>\n<blockquote>\n<p>聞く　是听\n聞こえる 是听得到</p>\n</blockquote>\n</li>\n<li>\n<p>固定搭配 なる 和 する</p>\n<blockquote>\n<p>〜が〜になる，表示自然变化\n〜を〜にする，表示人为改变。</p>\n<p>〜になる，表示客观结果\n〜にする，表示主观决定</p>\n</blockquote>\n</li>\n<li>\n<p>入る　是自动词，入れる　是他动词</p>\n</li>\n</ol>\n",
      "image": "https://ww4.sinaimg.cn/large/65e4f1e6gw1fae4cd6mz0j21kw0wo43v.jpg",
      "date_published": "2016-12-04T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Japanese"
      ]
    },
    {
      "title": "补助动词",
      "url": "https://wafer.li/blog-corners/langroad/Japanese/%E8%A1%A5%E5%8A%A9%E5%8A%A8%E8%AF%8D/",
      "id": "https://wafer.li/blog-corners/langroad/Japanese/%E8%A1%A5%E5%8A%A9%E5%8A%A8%E8%AF%8D/",
      "summary": "<h2 id=\"_1-〜ている\"> 1. 〜ている</h2>\n<p>主要表示以下意思：</p>\n<ol>\n<li>\n<p>正在进行的动作</p>\n</li>\n<li>\n<p>反复进行的动作</p>\n</li>\n<li>\n<p>自然维持的状态</p>\n<blockquote>\n<p>电视机坏了</p>\n</blockquote>\n</li>\n<li>\n<p>过去的经历</p>\n<blockquote>\n<p>去过 3 次北海道</p>\n</blockquote>\n</li>\n<li>\n<p>未来完成的结果</p>\n<blockquote>\n<p>到...时候， <strong>已经</strong>... 了吧</p>\n</blockquote>\n</li>\n</ol>\n",
      "content_html": "<h2 id=\"_1-〜ている\"> 1. 〜ている</h2>\n<p>主要表示以下意思：</p>\n<ol>\n<li>\n<p>正在进行的动作</p>\n</li>\n<li>\n<p>反复进行的动作</p>\n</li>\n<li>\n<p>自然维持的状态</p>\n<blockquote>\n<p>电视机坏了</p>\n</blockquote>\n</li>\n<li>\n<p>过去的经历</p>\n<blockquote>\n<p>去过 3 次北海道</p>\n</blockquote>\n</li>\n<li>\n<p>未来完成的结果</p>\n<blockquote>\n<p>到...时候， <strong>已经</strong>... 了吧</p>\n</blockquote>\n</li>\n</ol>\n\n<h2 id=\"_2-〜てある\"> 2. 〜てある</h2>\n<ol>\n<li>\n<p>后接他动词，表示状态</p>\n<blockquote>\n<p>〜ている 一般接 <strong>自动词</strong>，表示自然保持的状态\n〜てある　后接 <strong>他动词</strong>，表示人为维持的状态</p>\n<p>需要注意的是，上述两个的格动词都使用 が\n实际上，〜ている 让他动词具有表达状态的能力，整体上成为了自动词\n还有就是，上述的两种状态，都是 <strong>静止状态</strong>，所以格助词使用 に。\n<img src=\"https://ww3.sinaimg.cn/large/65e4f1e6gw1faem4uhis4j21kw0x0wjc.jpg\" alt=\"\" /></p>\n</blockquote>\n</li>\n<li>\n<p>后接他动词，表示 <strong>事先做好了某种准备</strong></p>\n<blockquote>\n<p><img src=\"https://ww3.sinaimg.cn/large/65e4f1e6gw1faemljbhx4j21kw0wkadt.jpg\" alt=\"\" />\n票已经买好了，准备已经做好了</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"_3-〜ておく\"> 3. 〜ておく</h2>\n<p><img src=\"https://ww3.sinaimg.cn/large/65e4f1e6gw1faemo1ksr0j21kw0x5782.jpg\" alt=\"\" /></p>\n",
      "image": "https://ww3.sinaimg.cn/large/65e4f1e6gw1faem4uhis4j21kw0x0wjc.jpg",
      "date_published": "2016-12-04T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Japanese"
      ]
    },
    {
      "title": "Java 基础",
      "url": "https://wafer.li/blog-corners/langroad/Java/Java%20%E5%9F%BA%E7%A1%80/",
      "id": "https://wafer.li/blog-corners/langroad/Java/Java%20%E5%9F%BA%E7%A1%80/",
      "summary": "<h2 id=\"_1-变量和数据类型\"> 1. 变量和数据类型</h2>\n<ol>\n<li>\n<p>boolean【Java】 = bool【C ++】</p>\n</li>\n<li>\n<p>所有的变量都要被初始化，最好在声明的时候就对其赋值</p>\n<div><pre><code><span>double</span> n <span>=</span> <span>0.0</span><span>;</span>\t\t<span>//Recommended</span>\n</code></pre>\n<div><span>1</span><br></div></div></li>\n<li>\n<p>使用 <code>final</code> 关键字指定常量</p>\n</li>\n<li>\n<p>Java 有 <strong>原始类型</strong> 和 <strong>引用类型</strong></p>\n<ul>\n<li>原始类型保存的是值，而引用类型实际上是指向内存块的指针</li>\n<li>数组和对象名都是对于真正的数组或者对象的引用，而不是其自身</li>\n<li>【这里的“引用”类似于指针，而不是对象的别名】</li>\n</ul>\n</li>\n<li>\n<p><strong>数组和对象都要使用new来声明构建，Java会自动进行垃圾处理，因而不需要显式delete</strong></p>\n<blockquote>\n<p>数组的声明：<code>int[] a = new int[100];</code>\n类的构建：<code>Class a = new Class(...);</code></p>\n</blockquote>\n<blockquote>\n<p>注意只有使用了 <code>new</code> 才会分配空间和构建对象，单纯的声明 <code>int[] a</code>类似于声明一个指向数组的指针</p>\n<p>Java对于大型数据类型只有通过 <code>new</code> 来构建，<code>int a [100]</code> 这种语法将不被接受，对于数组还可以使用列表初始化的语法\n<code>int[] a = {1,2,3,4,6};</code></p>\n</blockquote>\n</li>\n<li>\n<p>Java允许数组长度为0 <strong>（注意这里和null并不同）</strong></p>\n</li>\n</ol>\n",
      "content_html": "<h2 id=\"_1-变量和数据类型\"> 1. 变量和数据类型</h2>\n<ol>\n<li>\n<p>boolean【Java】 = bool【C ++】</p>\n</li>\n<li>\n<p>所有的变量都要被初始化，最好在声明的时候就对其赋值</p>\n<div><pre><code><span>double</span> n <span>=</span> <span>0.0</span><span>;</span>\t\t<span>//Recommended</span>\n</code></pre>\n<div><span>1</span><br></div></div></li>\n<li>\n<p>使用 <code>final</code> 关键字指定常量</p>\n</li>\n<li>\n<p>Java 有 <strong>原始类型</strong> 和 <strong>引用类型</strong></p>\n<ul>\n<li>原始类型保存的是值，而引用类型实际上是指向内存块的指针</li>\n<li>数组和对象名都是对于真正的数组或者对象的引用，而不是其自身</li>\n<li>【这里的“引用”类似于指针，而不是对象的别名】</li>\n</ul>\n</li>\n<li>\n<p><strong>数组和对象都要使用new来声明构建，Java会自动进行垃圾处理，因而不需要显式delete</strong></p>\n<blockquote>\n<p>数组的声明：<code>int[] a = new int[100];</code>\n类的构建：<code>Class a = new Class(...);</code></p>\n</blockquote>\n<blockquote>\n<p>注意只有使用了 <code>new</code> 才会分配空间和构建对象，单纯的声明 <code>int[] a</code>类似于声明一个指向数组的指针</p>\n<p>Java对于大型数据类型只有通过 <code>new</code> 来构建，<code>int a [100]</code> 这种语法将不被接受，对于数组还可以使用列表初始化的语法\n<code>int[] a = {1,2,3,4,6};</code></p>\n</blockquote>\n</li>\n<li>\n<p>Java允许数组长度为0 <strong>（注意这里和null并不同）</strong></p>\n</li>\n</ol>\n\n<h2 id=\"_2-作用域\"> 2. 作用域</h2>\n<ol>\n<li>\n<p>Java不允许在嵌套的代码块内声明同名变量</p>\n<blockquote>\n<p>所以尽量保证变量的名称不重复【在同一个包(package)内】</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"_3-控制流程\"> 3. 控制流程</h2>\n<ol>\n<li>\n<p>for循环中，Java要求在三个部分对同一计数器变量进行初始化，检测和更新</p>\n</li>\n<li>\n<p>可以使用break label的形式来跳出多重嵌套循环</p>\n<div><pre><code><span>//例如</span>\nlabel<span>:</span>\n<span>for</span><span>(</span><span>)</span>\n<span>{</span>\n    <span>for</span><span>(</span><span>)</span>\n    <span>{</span>\n\t    <span>for</span><span>(</span><span>)</span>\n\t    <span>{</span>\n\t\t    <span>if</span><span>(</span><span>)</span>\n\t    \t<span>{</span>\n\t\t\t    <span>break</span> label<span>;</span>\n\t\t    <span>}</span>\n\t    <span>}</span>\n    <span>}</span>\n<span>}</span>\n\n<span>//break语句使得程序跳转到带标签的语句块末尾</span>\n<span>//即最外层的for循环的末尾</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div></li>\n<li>\n<p><strong>for each循环，可以依此处理数组（或其他形式的集合）的每个元素，而不需要在意下标值</strong></p>\n<div><pre><code><span>//语法</span>\n<span>for</span><span>(</span>variable <span>:</span> colletion<span>)</span>\n<span>{</span>\n    <span>//statement</span>\n<span>}</span>\n\n<span>//依次打印数组内字符</span>\na<span>[</span><span>]</span>  <span>=</span> <span>new</span> <span>int</span> <span>[</span><span>100</span><span>]</span><span>;</span>\n<span>.</span><span>.</span><span>.</span><span>.</span>\n<span>for</span><span>(</span><span>int</span> element <span>:</span> a<span>)</span>\n<span>{</span>\n    <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>element<span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div></li>\n</ol>\n",
      "date_published": "2017-03-16T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Java"
      ]
    },
    {
      "title": "Java 多线程同步",
      "url": "https://wafer.li/blog-corners/langroad/Java/Java%20%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/",
      "id": "https://wafer.li/blog-corners/langroad/Java/Java%20%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/",
      "summary": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>由于每句代码只能在一个线程中执行，当多个线程试图访问同一个对象域时，就会出现<strong>竞争</strong>，导致对象的数据最终出现错误。\n特别是当线程中的操作<strong>不是原子操作</strong>的时候，当线程切换的时候。</p>\n<p>为了消除竞争的危害，对于多个线程<strong>有可能</strong>同时操作同一个对象的情况，我们就要实现<strong>线程同步</strong></p>\n",
      "content_html": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>由于每句代码只能在一个线程中执行，当多个线程试图访问同一个对象域时，就会出现<strong>竞争</strong>，导致对象的数据最终出现错误。\n特别是当线程中的操作<strong>不是原子操作</strong>的时候，当线程切换的时候。</p>\n<p>为了消除竞争的危害，对于多个线程<strong>有可能</strong>同时操作同一个对象的情况，我们就要实现<strong>线程同步</strong></p>\n\n<p>实现线程同步的方法主要有三种：</p>\n<ol>\n<li>使用 <code>Lock/Condition</code> 即显式的锁</li>\n<li>使用 <code>synchronized</code> 关键字</li>\n<li>使用并发库和阻塞类来实现线程管理</li>\n</ol>\n<blockquote>\n<p><strong>Executor 和 Task 优先于线程</strong>\n<strong>并发工具优先于 <code>wait()</code> 和 <code>notify()</code></strong>\n—— <em>Effective Java Second Edition</em></p>\n</blockquote>\n<p>注意，线程同步不仅要求<strong>互斥性</strong>，也要求<strong>可见性</strong>，即只有一个线程能对同步代码块进行操作，同时，<strong>该代码块对所有线程应是可见的</strong></p>\n<h2 id=\"_2-使用-reentrantlock-实现同步\"> 2. 使用 ReentrantLock 实现同步</h2>\n<h3 id=\"_2-1-锁的初级使用\"> 2.1 锁的初级使用</h3>\n<p><code>ReentrantLock</code> 是一个锁对象，在有可能出现竞争的方法中使用锁，就可以<strong>保护</strong>一段代码块<strong>同一时间只能由一个线程进行读写操作</strong></p>\n<p>例如：</p>\n<div><pre><code><span>public</span> <span>class</span> <span>Bank</span> <span>{</span>\n    <span>private</span> <span>ReentrantLock</span> myLock<span>;</span>\n    <span>public</span> <span>void</span> <span>transfer</span><span>(</span><span>)</span> <span>{</span>\n        myLock<span>.</span><span>lock</span><span>(</span><span>)</span><span>;</span>\n        <span>// ----------- 临界区</span>\n        <span>try</span> <span>{</span>\n            <span>// some works</span>\n        <span>}</span>\n        <span>finally</span> <span>{</span>\n            myLock<span>.</span><span>unlock</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n        <span>// ---------- 临界区</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>在临界区之间的代码是受锁对象保护的，当其他线程试图执行临界区代码（试图获取锁）时，就会导致线程阻塞，直到当前执行的线程解开锁为止。</p>\n<p>注意要将解锁代码放置在 <code>finally</code> 中，否则可能会由于异常的抛出而无法解锁。\n此时，不能使用<strong>带资源的try块</strong>。\n因为要在 <code>finally</code> 中释放锁，而释放锁的方法不是 <code>close()</code></p>\n<p>锁是<strong>可重入</strong>的，锁对象自身维护一个<strong>持有计数</strong>，如果在临界区中调用了另一个被锁保护的方法，那么，计数器增加，解锁后，计数器减少，直到持有计数为 0 时，线程才会释放锁。</p>\n<p>当由于<strong>异常而跳出临界区</strong>时，应进行相应的清理操作，保证对象的完整性。\n因为在 <code>finally</code> 中，锁会被释放。</p>\n<h3 id=\"_2-2-公平锁\"> 2.2 公平锁</h3>\n<p>使用 <code>ReentrantLock(boolean fair)</code> 可以指定构造一个<strong>公平锁</strong>。\n它倾向于让阻塞队列中等待时间最长的线程获取到锁，但是额外的检测成本可能会造成性能损失。</p>\n<h3 id=\"_2-3-条件对象\"> 2.3 条件对象</h3>\n<p>条件对象 <code>Condition</code> 用于确保临界区中的代码符合执行条件。</p>\n<h4 id=\"_2-3-1-使用条件对象的原因\"> 2.3.1 使用条件对象的原因</h4>\n<ol>\n<li>\n<p>不能使用一般的 <code>if</code> 语句进行检查</p>\n<blockquote>\n<p>因为 <code>if</code> 是非原子性的，线程可能在通过检查之后被剥夺，再次进入时却又不满足执行条件。</p>\n</blockquote>\n<div><pre><code><span>// DON'T DO THAT!!</span>\n<span>if</span> <span>(</span>bank<span>.</span><span>getBalance</span><span>(</span>form<span>)</span> <span>>=</span> amount<span>)</span> <span>{</span>\n    <span>// transfer() was protected by Lock object.</span>\n    bank<span>.</span><span>transfer</span><span>(</span>from<span>,</span> <span>to</span><span>,</span> amount<span>)</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div></li>\n<li>\n<p>不能在临界区内检查条件</p>\n<blockquote>\n<p>有可能在条件不满足的情况下，需要其他线程的协助才能满足条件。\n例如，当前线程操作的账户对象不满足转出余额，那么就需要<strong>等待另一线程向当前账户注资</strong>。\n此时，由于当前线程<strong>占有锁</strong>，其他线程无法操作这一账户。</p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"_2-3-2-使用条件对象\"> 2.3.2 使用条件对象</h4>\n<ol>\n<li>\n<p>通过锁对象的 <code>newCondition()</code> 来获得一个条件对象。</p>\n</li>\n<li>\n<p>当条件不满足时， 调用<strong>条件对象的</strong> <code>await()</code> 方法</p>\n<blockquote>\n<p>该方法会使当前线程阻塞，加入条件对象等待队列，并<strong>放弃锁</strong></p>\n</blockquote>\n</li>\n<li>\n<p>当<strong>条件有可能满足时</strong>，调用<strong>条件对象的</strong> <code>singalAll()</code> 方法</p>\n<blockquote>\n<p>这一方法会激活<strong>所有的</strong>等待该条件对象的线程，并尝试重新获取锁，从被阻塞的地方<strong>继续执行</strong>\n此时，线程应<strong>再次测试条件</strong>，因为此时无法确保条件是否被满足。</p>\n</blockquote>\n<blockquote>\n<p>之所以不能确保，是因为线程在 <code>await()</code> 之后，<strong>不具备将自己唤醒的能力</strong>，必须由另一线程执行 <code>singalAll()</code> 方法。\n如果没有一个线程能够调用 <code>singnal</code>，那么此时系统就<strong>死锁</strong>了。\n所以就应在<strong>对象的状态有利于等待线程的改变时</strong>调用 <code>singalAll()</code> 方法。</p>\n</blockquote>\n<blockquote>\n<p>另外，也有一个 <code>singal()</code> 方法，这个方法会随机选择一个等待线程进行唤醒。</p>\n</blockquote>\n</li>\n</ol>\n<p>综上，以下是使用条件对象的基本框架：</p>\n<div><pre><code><span>class</span> <span>Bank</span> <span>{</span>\n    <span>private</span> <span>Condition</span> sufficientFunds<span>;</span>\n    <span>private</span> <span>ReentrantLock</span> bankLock<span>;</span>\n    <span>.</span><span>.</span><span>.</span><span>.</span>\n    <span>public</span> <span>Bank</span><span>(</span><span>)</span> <span>{</span>\n        <span>.</span><span>.</span><span>.</span>\n        <span>// Using the Lock object to</span>\n        <span>// get the condition object reference</span>\n        sufficientFunds <span>=</span> bankLock<span>.</span><span>newCondition</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>.</span><span>.</span><span>.</span>\n\n    <span>public</span> <span>void</span> <span>transfer</span><span>(</span><span>int</span> from<span>,</span> <span>int</span> <span>to</span><span>,</span> <span>int</span> amount<span>)</span> <span>{</span>\n        <span>// Lock the code</span>\n        bankLock<span>.</span><span>lock</span><span>(</span><span>)</span><span>;</span>\n        <span>try</span> <span>{</span>\n            <span>while</span><span>(</span>accounts<span>[</span>from<span>]</span> <span>&lt;</span> amount<span>)</span> <span>{</span>\n                <span>// Don't have sufficient funds, await</span>\n                sufficientFunds<span>.</span><span>await</span><span>(</span><span>)</span><span>;</span>\n            <span>}</span>\n            <span>// Have sufficient funds</span>\n            <span>// Transfer funds..</span>\n            <span>.</span><span>.</span><span>.</span>\n            <span>// Transfer complete, singnal all</span>\n            sufficientFund<span>.</span><span>singnalAll</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n        <span>finally</span> <span>{</span>\n            <span>// Unlock the code</span>\n            bankLock<span>.</span><span>unlock</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br></div></div><h2 id=\"_3-synchronized-关键字\"> 3. <code>synchronized</code> 关键字</h2>\n<h3 id=\"_3-1-内部锁\"> 3.1 内部锁</h3>\n<p>这里比 8.5.1 更 “高级” 和傻瓜性了；\n其实从 jdk 1.0 开始，任何 Java 对象都拥有一个<strong>内部锁</strong>；\n我们不需要再显式实现一个锁和条件对象的架构了。</p>\n<p>如果一个方法用 <code>synchronized</code> 声明，那么对象的锁将保护整个方法;</p>\n<p>也就是说：</p>\n<div><pre><code><span>// Both of these method is equivalent</span>\n\n<span>public</span> <span>synchronized</span> <span>void</span> <span>method</span><span>(</span><span>)</span> <span>{</span>\n    <span>// method body</span>\n<span>}</span>\n\n<span>public</span> <span>void</span> <span>method</span><span>(</span><span>)</span> <span>{</span>\n    <span>this</span><span>.</span>intrinsicLock<span>.</span><span>lock</span><span>(</span><span>)</span><span>;</span>\n    <span>try</span> <span>{</span>\n        <span>// method body</span>\n    <span>}</span>\n    <span>finally</span> <span>{</span>\n        <span>this</span><span>.</span>intrinsicLock<span>.</span><span>unlock</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><h3 id=\"_3-2-唯一的条件对象\"> 3.2 唯一的条件对象</h3>\n<p>对象的内部锁拥有唯一一个条件对象；\n通过 <code>wait()</code> 方法将线程添加到条件的等待队列；\n通过 <code>notifyAll()</code> <code>notify()</code> 方法解除等待线程的阻塞</p>\n<p>也就是说：</p>\n<div><pre><code><span>wait</span><span>(</span><span>)</span><span>;</span> <span>==</span> intrinsicCondition<span>.</span><span>await</span><span>(</span><span>)</span><span>;</span>\n<span>notify</span><span>(</span><span>)</span><span>All</span> <span>==</span> intrinsicCondition<span>.</span><span>singnalAll</span><span>(</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h3 id=\"_3-3-例子\"> 3.3 例子</h3>\n<p>使用 <code>synchronized</code> 重写的 <code>Bank</code> 类</p>\n<div><pre><code><span>class</span> <span>Bank</span> <span>{</span>\n    <span>private</span> <span>double</span><span>[</span><span>]</span> accounts<span>;</span>\n\n    <span>public</span> <span>synchronized</span> <span>void</span> <span>transfer</span><span>(</span><span>int</span> form<span>,</span> <span>int</span> <span>to</span><span>,</span> <span>int</span> amount<span>)</span> <span>throws</span> <span>InterruptedException</span> <span>{</span>\n        <span>while</span> <span>(</span>accounts<span>[</span>from<span>]</span> <span>&lt;</span> amount<span>)</span> <span>{</span>\n            <span>// Do not have suffient funds</span>\n            <span>// Using wait() method instead of await()</span>\n            <span>wait</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n        <span>// Do have suffient funds</span>\n        <span>// Transfering..</span>\n        accounts<span>[</span>from<span>]</span> <span>-=</span> amount<span>;</span>\n        accounts<span>[</span><span>to</span><span>]</span> <span>+=</span> amount<span>;</span>\n\n        <span>// Transfer done</span>\n        <span>// Using notifyAll() method instead of singnalAll()</span>\n        <span>notifyAll</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>public</span> <span>synchronized</span> <span>double</span> <span>getTotalBalance</span><span>(</span><span>)</span> <span>{</span><span>.</span><span>.</span><span>.</span><span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><h3 id=\"_3-4-局限性\"> 3.4 局限性</h3>\n<p>可以看到，使用 <code>synchronized</code> 关键字大大减少了代码量，使代码更为整洁；\n但是对应的，也存在一些缺点：</p>\n<ol>\n<li>\n<p>不能中断一个正在试图获得锁的进程</p>\n<blockquote>\n<p>因为锁在对象内部，开发者无法操作，2 同</p>\n</blockquote>\n</li>\n<li>\n<p>试图获得锁时，不能设定超时</p>\n</li>\n<li>\n<p>每个锁仅有单一的条件，可能是不够的</p>\n</li>\n</ol>\n<h3 id=\"_3-5-总结\"> 3.5 总结</h3>\n<p>那么，究竟是使用 <code>synchronized</code> 关键字还是 <code>Lock/Condition</code> 机制呢？</p>\n<ol>\n<li>\n<p><strong>最好两者都不使用</strong>，使用 Java 自带或一些第三方的并发工具来处理同步问题。</p>\n<blockquote>\n<p><em>Effective Java</em> 中提到 “并发工具优先” 的概念，即，成套的并发库和并发工具，要优先于使用 <code>wait()</code>, <code>notify()</code> 方法</p>\n</blockquote>\n</li>\n<li>\n<p>如果不想采用并发库，并且 <code>synchronized</code> 的缺点并没有对程序造成影响，那么<strong>尽量使用它</strong></p>\n<blockquote>\n<p>这样可以减少编写的代码，减少出错的几率</p>\n</blockquote>\n</li>\n<li>\n<p>如果特别需要 <code>Lock/Condition</code> 的独有特性时，那么才使用 <code>Lock/Condition</code></p>\n<blockquote>\n<p>比如说即时中断，特定的等待超时等。</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"_4-同步阻塞\"> 4. 同步阻塞</h2>\n<p>同步阻塞允许客户使用</p>\n<div><pre><code><span>synchronized</span><span>(</span>lock<span>)</span> <span>{</span>\n    <span>// method body</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>获取到内部的锁</p>\n<p>这也叫做<strong>客户端锁定</strong>，这个方法是很脆弱的，通常不推荐使用</p>\n<h2 id=\"_5-监视器\"> 5. 监视器</h2>\n<p>监视器是 <em>Per Brinch Hansen</em> 提出的面向对象的线程安全实现方式。</p>\n<p>使用 Java 语言来表述就是：</p>\n<ol>\n<li>监视器是只包含<strong>私有域</strong>的类</li>\n<li>每个监视器类的对象有一个相关的锁</li>\n<li>使用该锁对所有的方法进行加锁</li>\n<li>该锁可以有任意多个相关条件</li>\n</ol>\n<p><strong>Java 的 <code>synchronized</code> 关键字使用一种不严谨的方法实现了监视器</strong></p>\n<blockquote>\n<p>但是这也导致了 <em>Per Brinch Hansen</em> 本人的批评</p>\n</blockquote>\n<h2 id=\"_6-volatile-域\"> 6. Volatile 域</h2>\n<p><code>volatile</code> 可以被看做是一种 <strong>程度较轻的 <code>synchronized</code></strong>;\n它只具有 <code>synchronized</code> 提供的<strong>可见性</strong>，而不具备<strong>原子性</strong>\n同时， <code>volatile</code> 变量<strong>不会造成阻塞</strong></p>\n<p>这说明了，当我们需要同步的写入操作时，<code>volatile</code> 就不适用了；\n但是如果该变量仅用于读取，那么 <code>volatile</code> 能提供优于 <code>synchronized</code> 的性能。</p>\n<h3 id=\"_6-1-正确使用-volatile-变量的条件\"> 6.1 正确使用 <code>volatile</code> 变量的条件</h3>\n<ol>\n<li>\n<p>对该变量的写操作<strong>不依赖于</strong>当前值</p>\n<blockquote>\n<p>比如说，用 <code>volatile</code> 变量做计数器是不行的，因为计数器的增加要先读取当前值</p>\n</blockquote>\n</li>\n<li>\n<p>该变量没有包含在具有其他变量的不变式中</p>\n</li>\n</ol>\n<p>大多数的编程情形都会和这两个条件的其中之一冲突，使得 <code>volatile</code> 不能如 <code>synchronized</code> 一样普遍实现线程安全</p>\n<h3 id=\"_6-2-性能考虑\"> 6.2 性能考虑</h3>\n<p>一般情况下， <code>volatile</code> 的性能要比使用 <code>synchronized</code> 要高；\n所以在符合使用 <code>volatile</code> 的情形下应该尽量使用。</p>\n<h3 id=\"_6-3-正确使用的情形\"> 6.3 正确使用的情形</h3>\n<ol>\n<li>\n<p>状态标志</p>\n<blockquote>\n<p>这是 <code>volatile</code> 的最常使用情形，作为一个布尔状态标志，用于指示发生了一个重要的一次性事件，或监视线程状态（是否被终止）</p>\n</blockquote>\n<div><pre><code><span>volatile</span> <span>boolean</span> shutdownRequested<span>;</span>\n\n<span>.</span><span>.</span><span>.</span>\n\n<span>public</span> <span>void</span> <span>shutdown</span><span>(</span><span>)</span> <span>{</span> shutdownRequested <span>=</span> <span>true</span><span>;</span> <span>}</span>\n\n<span>public</span> <span>void</span> <span>doWork</span><span>(</span><span>)</span> <span>{</span>\n    <span>while</span> <span>(</span><span>!</span>shutdownRequested<span>)</span> <span>{</span>\n        <span>// do stuff</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><blockquote>\n<p>此时，很可能需要从外部（另一线程）调用 <code>shutdown()</code> 方法，那么就需要保证 <code>shutdownRequested</code> 的可见性。\n此时，显然使用 <code>volatile</code> 关键字会更好</p>\n</blockquote>\n</li>\n<li>\n<p>一次性安全发布</p>\n<blockquote>\n<p>当缺乏同步可见性时，可能会出现一个线程获取到了一个<strong>不完全构建的对象</strong>，从而出现<strong>更新值</strong>和<strong>旧值</strong>同时存在。\n此时，可以将该对象的引用定义为 <code>volatile</code> 类型，然后在使用前通过检查该引用就可以知道对象是否安全发布了。</p>\n</blockquote>\n<div><pre><code><span>public</span> <span>class</span> <span>BackgroundFloobleLoader</span> <span>{</span>\n    <span>public</span> <span>volatile</span> <span>Flooble</span> theFlooble<span>;</span>\n\n    <span>public</span> <span>void</span> <span>initInBackground</span><span>(</span><span>)</span> <span>{</span>\n        <span>// do lots of stuff</span>\n        theFlooble <span>=</span> <span>new</span> <span>Flooble</span><span>(</span><span>)</span><span>;</span>  <span>// this is the only write to theFlooble</span>\n    <span>}</span>\n<span>}</span>\n\n<span>public</span> <span>class</span> <span>SomeOtherClass</span> <span>{</span>\n    <span>public</span> <span>void</span> <span>doWork</span><span>(</span><span>)</span> <span>{</span>\n        <span>while</span> <span>(</span><span>true</span><span>)</span> <span>{</span>\n            <span>// do some stuff...</span>\n            <span>// use the Flooble, but only if it is ready</span>\n            <span>if</span> <span>(</span>floobleLoader<span>.</span>theFlooble <span>!=</span> <span>null</span><span>)</span>\n                <span>doSomething</span><span>(</span>floobleLoader<span>.</span>theFlooble<span>)</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><blockquote>\n<p>注意使用的条件在于，<strong>该对象一经发布就不可修改，或者是线程安全对象</strong>\n如果需要对该对象进行异步更改，那么就需要 <code>synchronized</code> 等进行额外的同步操作。</p>\n</blockquote>\n</li>\n<li>\n<p>独立观察</p>\n<blockquote>\n<p><code>volatile</code> 变量可以定期的发布一些观察结果供程序内部使用，或者收集必要的统计信息</p>\n</blockquote>\n<div><pre><code><span>// Record the last login user's account</span>\n<span>public</span> <span>class</span> <span>UserManager</span> <span>{</span>\n    <span>public</span> <span>volatile</span> <span>String</span> lastUser<span>;</span>\n\n    <span>public</span> <span>boolean</span> <span>authenticate</span><span>(</span><span>String</span> user<span>,</span> <span>String</span> password<span>)</span> <span>{</span>\n        <span>boolean</span> valid <span>=</span> <span>passwordIsValid</span><span>(</span>user<span>,</span> password<span>)</span><span>;</span>\n        <span>if</span> <span>(</span>valid<span>)</span> <span>{</span>\n            <span>User</span> u <span>=</span> <span>new</span> <span>User</span><span>(</span><span>)</span><span>;</span>\n            activeUsers<span>.</span><span>add</span><span>(</span>u<span>)</span><span>;</span>\n            lastUser <span>=</span> user<span>;</span>\n        <span>}</span>\n        <span>return</span> valid<span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><blockquote>\n<p>这个模式和上述的模式稍有不同，使用该值的代码需要清除该值可能会随时变化。</p>\n</blockquote>\n</li>\n<li>\n<p>volatile bean 模式</p>\n<blockquote>\n<p>这是 Java Bean 模式的一种。\n它要求，所有的数据成员都是 <code>volatile</code> 的，同时， getter &amp; setter 必须非常简单，不包含其他复杂代码\n该模式为一些易变数据提供了容器，但是要求<strong>放入这些容器的对象必须是线程安全的</strong></p>\n</blockquote>\n<div><pre><code><span>@ThreadSafe</span>\n<span>public</span> <span>class</span> <span>Person</span> <span>{</span>\n    <span>private</span> <span>volatile</span> <span>String</span> firstName<span>;</span>\n    <span>private</span> <span>volatile</span> <span>String</span> lastName<span>;</span>\n    <span>private</span> <span>volatile</span> <span>int</span> age<span>;</span>\n\n    <span>public</span> <span>String</span> <span>getFirstName</span><span>(</span><span>)</span> <span>{</span> <span>return</span> firstName<span>;</span> <span>}</span>\n    <span>public</span> <span>String</span> <span>getLastName</span><span>(</span><span>)</span> <span>{</span> <span>return</span> lastName<span>;</span> <span>}</span>\n    <span>public</span> <span>int</span> <span>getAge</span><span>(</span><span>)</span> <span>{</span> <span>return</span> age<span>;</span> <span>}</span>\n\n    <span>public</span> <span>void</span> <span>setFirstName</span><span>(</span><span>String</span> firstName<span>)</span> <span>{</span>\n        <span>this</span><span>.</span>firstName <span>=</span> firstName<span>;</span>\n    <span>}</span>\n\n    <span>public</span> <span>void</span> <span>setLastName</span><span>(</span><span>String</span> lastName<span>)</span> <span>{</span>\n        <span>this</span><span>.</span>lastName <span>=</span> lastName<span>;</span>\n    <span>}</span>\n\n    <span>public</span> <span>void</span> <span>setAge</span><span>(</span><span>int</span> age<span>)</span> <span>{</span>\n        <span>this</span><span>.</span>age <span>=</span> age<span>;</span>\n   <span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div></li>\n</ol>\n<p>}\n```</p>\n<ol start=\"5\">\n<li>\n<p>高级应用——开销较低的读——写锁策略</p>\n<blockquote>\n<p>当对于一个变量的读操作远远超过写操作时，我们就可以使用 <code>volatile</code> 关键字修饰该变量，用于保证可见性，同时对 setter 方法采取 <code>synchronized</code> 修饰保证同步性，实现较低开销的读和写锁</p>\n</blockquote>\n<div><pre><code><span>@ThreadSafe</span>\n<span>public</span> <span>class</span> <span>CheesyCounter</span> <span>{</span>\n    <span>// Employs the cheap read-write lock trick</span>\n    <span>// All mutative operations MUST be done with the 'this' lock held</span>\n    <span>@GuardedBy</span><span>(</span><span>\"this\"</span><span>)</span> <span>private</span> <span>volatile</span> <span>int</span> value<span>;</span>\n\n    <span>public</span> <span>int</span> <span>getValue</span><span>(</span><span>)</span> <span>{</span> <span>return</span> value<span>;</span> <span>}</span>\n\n    <span>public</span> <span>synchronized</span> <span>int</span> <span>increment</span><span>(</span><span>)</span> <span>{</span>\n        <span>return</span> value<span>++</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div></li>\n</ol>\n<h2 id=\"_7-final-变量\"> 7. <code>final</code> 变量</h2>\n<p>如果一个域被声明为 <code>final</code>，那么对于该<strong>变量</strong>将不会出现线程安全问题。\n其他线程将在 <code>final</code> 变量被赋值成功后才能见到此变量。</p>\n<p>注意，只有<strong>变量</strong>是线程安全的，其指向的数组、对象等仍然需要同步操作。</p>\n<h2 id=\"_8-死锁\"> 8. 死锁</h2>\n<p>Java 并不能在语言层次上避免或打破死锁的发生，这是程序设计的工作。</p>\n<h2 id=\"_9-线程局部变量\"> 9. 线程局部变量</h2>\n<p>如果要避免线程间共享变量，那么可以使用 ThreadLocal 辅助类为各个线程提供各自的实例。</p>\n<p>例如，如果要让每个线程都拥有自己的 <code>SimpleDateFormat</code> 变量，那么只需要</p>\n<div><pre><code><span>public</span> <span>static</span> <span>final</span> <span>ThreadLocal</span><span><span>&lt;</span><span>SimpleDateFormat</span><span>></span></span> dateFormat <span>=</span>\n    <span>new</span> <span>ThreadLocal</span><span><span>&lt;</span><span>SimpleDateFormat</span><span>></span></span><span>(</span><span>)</span> <span>{</span>\n        <span>protected</span> <span>SimpleDateFormat</span> <span>initalValue</span><span>(</span><span>)</span> <span>{</span>\n            <span>return</span> <span>new</span> <span>SimpleDateFormat</span><span>(</span><span>\"yyyy-MM-dd\"</span><span>)</span><span>;</span>\n        <span>}</span>\n    <span>}</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>如果要访问具体线程的格式化方法，可以调用</p>\n<div><pre><code><span>String</span> dateStamp <span>=</span> dateFormat<span>.</span><span>get</span><span>(</span><span>)</span><span>.</span><span>format</span><span>(</span><span>new</span> <span>Date</span><span>(</span><span>)</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>在一个<strong>给定线程</strong>中<strong>首次调用</strong> <code>get()</code> 方法时，会调用 <code>initialValue()</code> 方法。\n在此之后， <code>get()</code> 会返回属于当前线程的那个实例</p>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>Δ</span></span></span></span> 对于随机数生成器，如果需要线程独享的随机数生成器，那么可以使用</p>\n<div><pre><code><span>int</span> random <span>=</span> <span>ThreadLocalRandom</span><span>.</span><span>current</span><span>(</span><span>)</span><span>.</span><span>nextInt</span><span>(</span>upperBound<span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div><p><code>current()</code> 会返回特定于当前线程的 <code>Random</code> 类实例。</p>\n<p>另外还有个 <code>set()</code> 和 <code>remove()</code> 方法，分别用于为当前线程设置新值和删除当前线程的值。</p>\n<h2 id=\"_10-锁测试与超时\"> 10. 锁测试与超时</h2>\n<p>如果要使用这一特性，就要使用 <code>Lock/Condition</code> 架构。</p>\n<p>由于尝试获取锁会导致阻塞，使用 <code>tryLock</code> 可以试图申请一个锁，成功则返回 <code>true</code>, 失败返回 <code>false</code>，同时，线程可以<strong>立即离开</strong>做其他事情</p>\n<div><pre><code><span>if</span> <span>(</span>myLock<span>.</span><span>tryLock</span><span>(</span><span>)</span><span>)</span> <span>{</span>\n    <span>// now the thread owns the lock</span>\n    <span>try</span> <span>{</span><span>.</span><span>.</span><span>.</span><span>}</span>\n    <span>finally</span> <span>{</span>\n        myLock<span>.</span><span>unlock</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n<span>else</span> <span>{</span>\n    <span>// Do something else</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>同时，还可以设置<strong>超时参数</strong></p>\n<div><pre><code><span>if</span> <span>(</span>myLock<span>.</span><span>tryLock</span><span>(</span><span>100</span><span>,</span> <span>TimeUnit</span><span>.</span>MILLSECONDS<span>)</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>注意， <code>tryLock()</code> 会<strong>忽略</strong>锁的公平性</p>\n<p><code>lock()</code> 方法不能被中断，如果一个线程在等待获取锁时被中断，<strong>那么就有可能会造成死锁</strong></p>\n<p>但是，如果采用 <code>tryLock()</code>，如果线程在等待期间被中断，将抛出 <code>InterruptedException</code> ，此时就可以用这个特性来跳出死锁问题。</p>\n<p>同时，<code>await()</code> 方法也可以设定超时。</p>\n<h2 id=\"_11-读-写锁\"> 11. 读/写锁</h2>\n<p>如果很多线程从一个数据结构读取数据而很少修改其中数据的话，那么我们使用另一种锁 <code>ReentrantReadWriteLock</code> 来提高性能</p>\n<p>此时，允许读线程<strong>共享访问</strong>，写线程为<strong>互斥访问</strong></p>\n<blockquote>\n<p>这里有点像 <code>volatile</code> 的高级应用；\n不同的点在于，<code>volatile</code> 用于一个变量，而 <code>ReentrantReadWriteLock</code> 用于一个<strong>数据结构</strong></p>\n</blockquote>\n<h3 id=\"_11-1-使用步骤\"> 11.1 使用步骤</h3>\n<ol>\n<li>\n<p>构建 <code>ReentrantReadWriteLock</code> 对象</p>\n<div><pre><code><span>private</span> <span>ReentrantReadWriteLock</span> rwl <span>=</span> <span>new</span> <span>ReentrantReadWriteLock</span><span>(</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div></li>\n<li>\n<p>抽取读锁和写锁</p>\n<div><pre><code><span>private</span> <span>Lock</span> readLock <span>=</span> rwl<span>.</span><span>readLock</span><span>(</span><span>)</span><span>;</span>\n<span>private</span> <span>Lock</span> writeLock <span>=</span> rwl<span>.</span><span>writeLock</span><span>(</span><span>)</span><span>;</span><span>1</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div></li>\n<li>\n<p>对所有的 getter 加读锁</p>\n<div><pre><code><span>public</span> <span>double</span> <span>getTotalBalance</span><span>(</span><span>)</span> <span>{</span>\n    readLock<span>.</span><span>lock</span><span>(</span><span>)</span><span>;</span>\n    <span>try</span> <span>{</span><span>.</span><span>.</span><span>.</span><span>}</span>\n    <span>finally</span> <span>{</span>\n        readLock<span>.</span><span>unlock</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div></li>\n<li>\n<p>对所有 setter 加写锁</p>\n<div><pre><code><span>public</span> <span>void</span> <span>transfer</span><span>(</span><span>.</span><span>.</span><span>.</span><span>)</span> <span>{</span>\n    writeLock<span>.</span><span>lock</span><span>(</span><span>)</span><span>;</span>\n    <span>try</span> <span>{</span><span>.</span><span>.</span><span>.</span><span>}</span>\n    <span>finally</span> <span>{</span>\n        writeLock<span>.</span><span>unlock</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div></li>\n</ol>\n",
      "date_published": "2017-03-16T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Java"
      ]
    },
    {
      "title": "Java 多线程基础",
      "url": "https://wafer.li/blog-corners/langroad/Java/Java%20%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/",
      "id": "https://wafer.li/blog-corners/langroad/Java/Java%20%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/",
      "summary": "<h2 id=\"_1-创建线程\"> 1.  创建线程</h2>\n<h3 id=\"_1-1-通过-runnable-接口创建\"> 1.1 通过 <code>Runnable</code> 接口创建</h3>\n<ol>\n<li>\n<p>实现 <code>Runnable</code> 接口</p>\n<div><pre><code><span>class</span> <span>Myrunnable</span> implement <span>Runnable</span> <span>{</span>\n   <span>run</span><span>(</span><span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>\n</ol>\n",
      "content_html": "<h2 id=\"_1-创建线程\"> 1.  创建线程</h2>\n<h3 id=\"_1-1-通过-runnable-接口创建\"> 1.1 通过 <code>Runnable</code> 接口创建</h3>\n<ol>\n<li>\n<p>实现 <code>Runnable</code> 接口</p>\n<div><pre><code><span>class</span> <span>Myrunnable</span> implement <span>Runnable</span> <span>{</span>\n   <span>run</span><span>(</span><span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>\n</ol>\n\n<ol start=\"2\">\n<li>\n<p>创建 <code>Runnable</code> 对象</p>\n<div><pre><code><span>Runnable</span> r <span>=</span> <span>new</span> <span>Myrunnable</span><span>(</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div></li>\n<li>\n<p>由 Runnable 对象创建 Thread 对象</p>\n<div><pre><code><span>Thread</span> t <span>=</span> <span>new</span> <span>Thread</span><span>(</span>r<span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div></li>\n<li>\n<p>启动线程</p>\n<div><pre><code>t<span>.</span><span>start</span><span>(</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div><blockquote>\n<p>不能直接调用 <code>run()</code> 方法，应调用 <code>Thread.start()</code> 方法来间接调用 run 方法</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"_1-2-通过继承-thread-类实现\"> 1.2 通过继承 <code>Thread</code> 类实现</h3>\n<ol>\n<li>\n<p>实现继承类</p>\n<div><pre><code><span>public</span> <span>class</span> <span>MyThread</span> <span>extends</span> <span>Thread</span> <span>{</span>\n    <span>public</span> <span>void</span> <span>run</span><span>(</span><span>)</span> <span>{</span>\n        <span>// Do works</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div></li>\n<li>\n<p>构造类实例</p>\n<div><pre><code><span>public</span> <span>void</span> <span>static</span> <span>main</span><span>(</span><span>Sting</span> <span>[</span><span>]</span> args<span>)</span> <span>{</span>\n    <span>MyThread</span> my <span>=</span> <span>new</span> <span>MyThread</span><span>(</span><span>)</span><span>;</span>\n    <span>Thread</span> t <span>=</span> <span>new</span> <span>Thread</span><span>(</span>my<span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div></li>\n<li>\n<p>通过 <code>start()</code> 方法开启线程</p>\n<div><pre><code>t<span>.</span><span>start</span><span>(</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div></li>\n</ol>\n<h2 id=\"_2-中断线程\"> 2. 中断线程</h2>\n<p>Java 使用<strong>中断</strong>来执行<strong>终止线程</strong>的作用；\n但是，当一个线程接收到终止信号时，它可以选择对于中断信号的响应方式，这就带来了很好的扩展性。\n但同时也带来了一些疑惑的地方。</p>\n<h3 id=\"_2-1-中断置位和检测\"> 2.1 中断置位和检测</h3>\n<ol>\n<li>\n<p>使用 <code>Thread.currentThread()</code> 方法获取到当前运行的线程</p>\n<blockquote>\n<p>关于 <code>Thread.currentThread()</code> 方法：\n此方法的官方解释是：Return the current executing Thread reference.\n所谓的<strong>当前线程</strong>指的是：<strong>运行当前代码段的线程</strong>，由于<strong>一段代码只能在一个线程中运行</strong>，如果使用多个线程同时执行同一段代码时，那么这个方法获取到的就是<strong>执行当前代码段的线程</strong>，叫做当前线程。\n注意，这个方法如果<strong>不在子线程中</strong>（即 <code>run()</code> 方法中），那么获取到的<strong>就一直是主线程（main）</strong>\n需要特别注意的是，不同线程不允许访问同一个变量，否则会引起<strong>竞争冒险</strong></p>\n</blockquote>\n</li>\n<li>\n<p>使用 <code>interrupt()</code> 将中断布尔值置为 <code>true</code></p>\n<blockquote>\n<p>Java 的中断线程实际上是将线程内置的一个 <code>boolean</code> 值置为 <code>true</code>，以此来表示该线程已被中断。\n当我们需要中断一个线程时，就调用该方法将线程内部的中断布尔值置为 <code>true</code>。\n线程会在适当时候轮询这个布尔值，同时响应中断操作。注意这个动作是 <code>Thread</code> 官方类库中自带的。</p>\n</blockquote>\n</li>\n<li>\n<p>使用 <code>isInterrupted()</code> 来查询当前线程的中断布尔值</p>\n<blockquote>\n<p>一个好的 <code>run()</code> 方法应该包含对中断的检测，如果检测到中断，那么就应该进行响应。\n一般来说，应该放弃当前正在进行的工作，进行清理后将线程终止。</p>\n</blockquote>\n<blockquote>\n<p>但是如果需要在 <code>run()</code> 中执行 <code>sleep()</code> 方法，那么就没有必要检测中断状态，因为 <code>sleep()</code> 方法在被中断时，会抛出 <code>InterruptedException</code>，那么只需捕获这个异常进行处理即可。</p>\n</blockquote>\n</li>\n<li>\n<p>关于 <code>interrupted()</code> 和 <code>isInterrupted()</code></p>\n<blockquote>\n<p><code>isInterrupted()</code> 方法检测中断状态，但是不会影响中断状态的值。\n<code>interrupted()</code> 方法检测中断状态，同时将中断状态清除。\n需要注意的是，<code>sleep()</code> <code>wait()</code> 方法在抛出 <code>InterruptedException</code> 之后，<strong>都会将中断状态清除</strong>。\n对于这种状况，我们就需要对其进行一些处理。</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"_2-2-关于-interruptedexception-异常\"> 2.2 关于 <code>InterruptedException</code> 异常</h3>\n<h4 id=\"_2-2-1-抛出时机\"> 2.2.1 抛出时机</h4>\n<p>当线程同时位于<strong>阻塞</strong>和<strong>中断</strong>状态时，抛出。\n即，当线程调用 <code>sleep()</code> <code>wait()</code> <code>join()</code> 等方法时被中断，那么抛出异常。</p>\n<p>一般来说，如果一个方法可以抛出 <code>InterruptedException</code>，那么说明这个方法的当前线程是可以被中断（取消）的。</p>\n<h4 id=\"_2-2-2-interruptedexception-的处理\"> 2.2.2 <code>InterruptedException</code> 的处理</h4>\n<ol>\n<li>\n<p>不捕捉该异常，改为向上层抛出。</p>\n<blockquote>\n<p>这在很多基础类库的方法中很常见，比如 <code>sleep()</code>.\n通过将这个方法传送给更高级的调用者，让高层面的调用方法对其进行处理。</p>\n</blockquote>\n<div><pre><code><span>public</span> <span>void</span> <span>putTask</span><span>(</span><span>Task</span> r<span>)</span> <span>throws</span> <span>InterruptedException</span> <span>{</span>\n    queue<span>.</span><span>put</span><span>(</span>r<span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>\n<li>\n<p>执行清理后，将该异常抛出。</p>\n<blockquote>\n<p>这种逻辑常常在一些第三方的并发库中，为了避免由于异常导致的数据缺失，进行一些必要的清理、保存操作后，将异常传给调用者。</p>\n</blockquote>\n<div><pre><code><span>public</span> <span>void</span> <span>matchPlayers</span><span>(</span><span>)</span> <span>throws</span> <span>InterruptedException</span> <span>{</span>\n    <span>try</span> <span>{</span>\n         <span>Player</span> playerOne<span>,</span> playerTwo<span>;</span>\n         <span>while</span> <span>(</span><span>true</span><span>)</span> <span>{</span>\n             playerOne <span>=</span> playerTwo <span>=</span> <span>null</span><span>;</span>\n             <span>// Wait for two players to arrive and start a new game</span>\n             playerOne <span>=</span> players<span>.</span><span>waitForPlayer</span><span>(</span><span>)</span><span>;</span> <span>// could throw IE</span>\n             playerTwo <span>=</span> players<span>.</span><span>waitForPlayer</span><span>(</span><span>)</span><span>;</span> <span>// could throw IE</span>\n             <span>startNewGame</span><span>(</span>playerOne<span>,</span> playerTwo<span>)</span><span>;</span>\n         <span>}</span>\n     <span>}</span>\n     <span>catch</span> <span>(</span><span>InterruptedException</span> e<span>)</span> <span>{</span>\n         <span>// If we got one player and were interrupted, put that player back</span>\n         <span>if</span> <span>(</span>playerOne <span>!=</span> <span>null</span><span>)</span>\n             players<span>.</span><span>addFirst</span><span>(</span>playerOne<span>)</span><span>;</span>\n         <span>// Then propagate the exception</span>\n         <span>throw</span> e<span>;</span>\n     <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div></li>\n<li>\n<p>捕捉中断后，重新将中断置位</p>\n<blockquote>\n<p>当不便抛出中断时，比如通过实现 <code>Runnable</code> 接口定义的任务。\n此时，就要<strong>重新将中断置位</strong>，以便高层代码能了解到中断的发生。</p>\n</blockquote>\n<div><pre><code><span>public</span> <span>class</span> <span>TaskRunner</span> <span>implements</span> <span>Runnable</span> <span>{</span>\n    <span>private</span> <span>BlockingQueue</span><span><span>&lt;</span><span>Task</span><span>></span></span> queue<span>;</span>\n\n    <span>public</span> <span>TaskRunner</span><span>(</span><span>BlockingQueue</span><span><span>&lt;</span><span>Task</span><span>></span></span> queue<span>)</span> <span>{</span>\n        <span>this</span><span>.</span>queue <span>=</span> queue<span>;</span>\n    <span>}</span>\n\n    <span>public</span> <span>void</span> <span>run</span><span>(</span><span>)</span> <span>{</span>\n        <span>try</span> <span>{</span>\n             <span>while</span> <span>(</span><span>true</span><span>)</span> <span>{</span>\n                <span>Task</span> task <span>=</span> queue<span>.</span><span>take</span><span>(</span><span>10</span><span>,</span> <span>TimeUnit</span><span>.</span>SECONDS<span>)</span><span>;</span>\n                 task<span>.</span><span>execute</span><span>(</span><span>)</span><span>;</span>\n             <span>}</span>\n        <span>}</span>\n        <span>catch</span> <span>(</span><span>InterruptedException</span> e<span>)</span> <span>{</span>\n             <span>// Restore the interrupted status</span>\n             <span>Thread</span><span>.</span><span>currentThread</span><span>(</span><span>)</span><span>.</span><span>interrupt</span><span>(</span><span>)</span><span>;</span>\n         <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div></li>\n<li>\n<p>当且仅当已知线程即将退出时，才能<strong>生吞</strong>线程</p>\n<blockquote>\n<p>这种线程首先必须是由继承 <code>Thread</code> 实现的，而不是 <code>Runnable</code> 实现的，或者其他通用代码库中的方法。\n应在两处轮询中断状态，确保其一定会退出</p>\n</blockquote>\n<div><pre><code><span>public</span> <span>class</span> <span>PrimeProducer</span> <span>extends</span> <span>Thread</span> <span>{</span>\n    <span>private</span> <span>final</span> <span>BlockingQueue</span><span><span>&lt;</span><span>BigInteger</span><span>></span></span> queue<span>;</span>\n\n    <span>PrimeProducer</span><span>(</span><span>BlockingQueue</span><span><span>&lt;</span><span>BigInteger</span><span>></span></span> queue<span>)</span> <span>{</span>\n        <span>this</span><span>.</span>queue <span>=</span> queue<span>;</span>\n    <span>}</span>\n\n    <span>public</span> <span>void</span> <span>run</span><span>(</span><span>)</span> <span>{</span>\n        <span>try</span> <span>{</span>\n            <span>BigInteger</span> p <span>=</span> <span>BigInteger</span><span>.</span>ONE<span>;</span>\n            <span>// 两处轮询中断状态</span>\n            <span>while</span> <span>(</span><span>!</span><span>Thread</span><span>.</span><span>currentThread</span><span>(</span><span>)</span><span>.</span><span>isInterrupted</span><span>(</span><span>)</span><span>)</span>\n                queue<span>.</span><span>put</span><span>(</span>p <span>=</span> p<span>.</span><span>nextProbablePrime</span><span>(</span><span>)</span><span>)</span><span>;</span>\n        <span>}</span> <span>catch</span> <span>(</span><span>InterruptedException</span> consumed<span>)</span> <span>{</span>\n            <span>/* Allow thread to exit */</span>\n        <span>}</span>\n    <span>}</span>\n\n    <span>public</span> <span>void</span> <span>cancel</span><span>(</span><span>)</span> <span>{</span> <span>interrupt</span><span>(</span><span>)</span><span>;</span> <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div></li>\n</ol>\n<h2 id=\"_3-线程的生命周期\"> 3. 线程的生命周期</h2>\n<p><img src=\"https://ww2.sinaimg.cn/large/8c1fca6bjw1f0lm5o2cp2j20fx0csdgk.jpg\" alt=\"Thread Life Cycle\" /></p>\n<ol>\n<li>\n<p>新建</p>\n<blockquote>\n<p>当线程被 <code>new</code> 的时候</p>\n</blockquote>\n</li>\n<li>\n<p>可运行</p>\n<blockquote>\n<p>当调用 <code>start()</code> 方法后，进入可运行状态</p>\n</blockquote>\n</li>\n<li>\n<p>运行</p>\n<blockquote>\n<p>当线程经调度器获得资源时，进入运行状态</p>\n</blockquote>\n</li>\n<li>\n<p>阻塞状态</p>\n<blockquote>\n<p>当 <code>sleep()</code> <code>wait()</code> <code>join()</code> 方法调用，和<strong>等待锁</strong>或者等待 <strong>IO 输入</strong> 时，进入阻塞状态。\n注意，<code>join()</code> 方法会导致<strong>调用这个方法的线程</strong>阻塞，如果线程 <code>t1</code> 调用 <code>t2.join()</code>，那么 <code>t1</code> 将进入阻塞状态，直到 <code>t2</code> 执行完毕。\n使用 <code>yeild()</code> 方法不会使线程被阻塞，它只是让当前运行的线程放弃资源，重新进入<strong>可运行</strong>状态，接受调度器的重新调度。</p>\n</blockquote>\n</li>\n<li>\n<p>终止状态</p>\n<blockquote>\n<p>仅有两种情况会使得线程终止。\n一是 <code>run()</code> 方法执行完毕。\n一是由于未捕获的异常造成的线程终止。</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"_3-1-java-如何终止一个线程\"> 3.1 Java 如何终止一个线程</h3>\n<ol>\n<li>\n<p>对于会引起 <code>InterruptedException</code> 的方法</p>\n<blockquote>\n<p>对于这种方法，直接对 <code>InterruptedException</code> 进行捕获即可。\n注意如果产生异常的方法在一个循环之中，那么就要 <code>break</code> 出来。\n注意要将中断状态再次置位，否则如果在一个嵌套循环里面发生中断的话，那么将得不到正确处理。</p>\n</blockquote>\n</li>\n<li>\n<p>对于不会引起 <code>InterruptedException</code> 的方法</p>\n<blockquote>\n<p>对于这种方法，我们可以通过在执行真正的工作前，先轮询中断状态的布尔变量。如果中断状态已经被置位了，那么就执行退出。\n但是这样会造成一定程度的延时性，所以最好还是通过异常进行处理。\n例如：</p>\n</blockquote>\n<div><pre><code><span>public</span> <span>void</span> <span>run</span><span>(</span><span>)</span> <span>{</span>\n    <span>try</span> <span>{</span>\n        <span>while</span><span>(</span><span>!</span><span>Thread</span><span>.</span><span>currentThread</span><span>(</span><span>)</span><span>.</span><span>isInterrupted</span><span>(</span><span>)</span><span>)</span> <span>{</span>\n             <span>// ...</span>\n        <span>}</span>\n    <span>}</span> <span>catch</span> <span>(</span><span>InterruptedException</span> consumed<span>)</span> <span>{</span>\n        <span>/* Allow thread to exit */</span>\n    <span>}</span>\n<span>}</span>\n\n<span>public</span> <span>void</span> <span>cancel</span><span>(</span><span>)</span> <span>{</span> <span>interrupt</span><span>(</span><span>)</span><span>;</span> <span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div></li>\n<li>\n<p>对于被 <code>IO</code> 阻塞的方法</p>\n<blockquote>\n<p>对于这种方法，当中断发生时，它会产生 <code>InterruptedIOException</code>。\n通过类似捕获 <code>InterruptedException</code> 的方法来捕获 <code>InterruptedIOException</code>。\n但是要注意，由于中断的发生，我们需要同时关闭这个线程所占有的 IO 流，此时，我们要重载 <code>interrupt()</code> 方法，使其能够关闭 IO 流，同时引起 <code>IOException</code> 的发生。\n所以对于 <code>IOException</code>，我们就需要判断是否是由于中断引起的 <code>IOException</code></p>\n</blockquote>\n<div><pre><code><span>import</span> <span>java<span>.</span>io<span>.</span></span><span>IOException</span><span>;</span>\n<span>import</span> <span>java<span>.</span>io<span>.</span></span><span>InputStream</span><span>;</span>\n<span>import</span> <span>java<span>.</span>io<span>.</span></span><span>InterruptedIOException</span><span>;</span>\n\n<span>public</span> <span>class</span> <span>BlockedOnIO</span> <span>extends</span> <span>Thread</span> <span>{</span>\n    <span>private</span> <span>final</span> <span>InputStream</span> in<span>;</span>\n    <span>public</span> <span>BlockedOnIO</span><span>(</span><span>InputStream</span> in<span>)</span> <span>{</span>\n        <span>this</span><span>.</span>in <span>=</span> in<span>;</span>\n    <span>}</span>\n\n    <span>@Override</span>\n    <span>public</span> <span>void</span> <span>interrupt</span><span>(</span><span>)</span> <span>{</span>\n        <span>super</span><span>.</span><span>interrupt</span><span>(</span><span>)</span><span>;</span>\n        <span>try</span> <span>{</span>\n            in<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span> <span>catch</span> <span>(</span><span>IOException</span> e<span>)</span> <span>{</span><span>}</span> <span>// quietly close</span>\n    <span>}</span>\n\n    <span>public</span> <span>void</span> <span>run</span><span>(</span><span>)</span> <span>{</span>\n        <span>try</span> <span>{</span>\n            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"Reading from input stream\"</span><span>)</span><span>;</span>\n            in<span>.</span><span>read</span><span>(</span><span>)</span><span>;</span>\n            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"Finished reading\"</span><span>)</span><span>;</span>\n        <span>}</span> <span>catch</span> <span>(</span><span>InterruptedIOException</span> e<span>)</span> <span>{</span>\n            <span>Thread</span><span>.</span><span>currentThread</span><span>(</span><span>)</span><span>.</span><span>interrupt</span><span>(</span><span>)</span><span>;</span>\n            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"Interrupted via InterruptedIOException\"</span><span>)</span><span>;</span>\n        <span>}</span> <span>catch</span> <span>(</span><span>IOException</span> e<span>)</span> <span>{</span>\n            <span>if</span> <span>(</span><span>!</span><span>isInterrupted</span><span>(</span><span>)</span><span>)</span> <span>{</span>\n                e<span>.</span><span>printStackTrace</span><span>(</span><span>)</span><span>;</span>\n            <span>}</span> <span>else</span> <span>{</span>\n                <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"Interrupted\"</span><span>)</span><span>;</span>\n            <span>}</span>\n        <span>}</span>\n        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"Shutting down thread\"</span><span>)</span><span>;</span>\n    <span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br></div></div></li>\n</ol>\n<p>}\n```</p>\n<h2 id=\"_4-线程属性\"> 4. 线程属性</h2>\n<h3 id=\"_4-1-优先级\"> 4.1 优先级</h3>\n<ol>\n<li>系统会优先调用高优先级的线程</li>\n<li>线程优先级高度依赖系统实现，由系统线程优先级映射到 Java 虚拟机上</li>\n</ol>\n<h3 id=\"_4-2-守护线程\"> 4.2 守护线程</h3>\n<ol>\n<li>守护线程用于给其他线程提供服务，例如发送定时信号等。</li>\n<li>守护线程由于很容易中断，<strong>不应访问固有资源</strong>（例如文件、数据库等）</li>\n<li><code>setDaemon()</code> 方法必须在线程开始前调用</li>\n<li>当程序中<strong>只存在守护线程时</strong>，JVM 退出，守护线程一并终止</li>\n<li>典型应用：GC（垃圾回收），保持长连接等。</li>\n</ol>\n<h3 id=\"_4-3-uncaughtexceptionhandler\"> 4.3 <code>uncaughtExceptionHandler</code></h3>\n<ol>\n<li>\n<p>线程的 <code>run()</code> 方法不能抛出任何被检测的异常</p>\n</li>\n<li>\n<p>未捕获的异常会被 <code>uncaughtExceptionHandler</code> 捕获</p>\n</li>\n<li>\n<p>可以使用特定的方法设置处理器，如果未设置，则为<strong>空</strong></p>\n</li>\n<li>\n<p>任何线程默认情况同属于一个线程组</p>\n</li>\n<li>\n<p>线程组（<code>ThreadGroup</code>）默认实现了一个处理器，其对应方法按照如下逻辑进行工作</p>\n<ol>\n<li>\n<p>如果有父线程组，那么就采用父线程组的处理器</p>\n</li>\n<li>\n<p>否则，如果 <code>getDefaultExceptionHandler()</code> 方法部位空，那么则调用该处理器。</p>\n</li>\n<li>\n<p>否则，如果线程已经死亡，则什么都不做</p>\n</li>\n<li>\n<p>否则，将线程的名字和对应的栈轨迹输出到 <code>System.err</code> 上。</p>\n<blockquote>\n<p>这也是我们通常见到的情景。</p>\n</blockquote>\n</li>\n</ol>\n</li>\n</ol>\n",
      "image": "https://ww2.sinaimg.cn/large/8c1fca6bjw1f0lm5o2cp2j20fx0csdgk.jpg",
      "date_published": "2017-03-16T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Java"
      ]
    },
    {
      "title": "Java 多线程工具",
      "url": "https://wafer.li/blog-corners/langroad/Java/Java%20%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B7%A5%E5%85%B7/",
      "id": "https://wafer.li/blog-corners/langroad/Java/Java%20%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B7%A5%E5%85%B7/",
      "summary": "<h2 id=\"_1-并发工具\"> 1. 并发工具</h2>\n<p>对于很多的多线程问题，我们不需要再去实现一遍底层的锁和同步机制了。\n对于一般的应用向问题，应<strong>优先采用并发工具</strong></p>\n<blockquote>\n<p>Executor 和 Task 优先于线程(<code>Runnable</code>)\n并发工具优先于 <code>wait()</code> 和 <code>notify()</code>\n—— <em>Effective Java Second Edition</em></p>\n</blockquote>\n",
      "content_html": "<h2 id=\"_1-并发工具\"> 1. 并发工具</h2>\n<p>对于很多的多线程问题，我们不需要再去实现一遍底层的锁和同步机制了。\n对于一般的应用向问题，应<strong>优先采用并发工具</strong></p>\n<blockquote>\n<p>Executor 和 Task 优先于线程(<code>Runnable</code>)\n并发工具优先于 <code>wait()</code> 和 <code>notify()</code>\n—— <em>Effective Java Second Edition</em></p>\n</blockquote>\n\n<h3 id=\"_1-1-阻塞队列\"> 1.1 阻塞队列</h3>\n<p>对于许多线程问题，可以通过使用一个或者多个队列来将其形式化。可以通过 <code>Producesor</code> 将任务加入队列，然后由 <code>Comsumor</code> 来将任务取出然后进行处理的方式来实现。</p>\n<p>Java 的阻塞队列自带了阻塞特性，<strong>不再需要显式的同步</strong></p>\n<h4 id=\"_1-1-1-api\"> 1.1.1 API</h4>\n<p>这里只介绍阻塞队列的阻塞方法，实际上阻塞队列也包含一些非阻塞的方法</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:center\">正常动作</th>\n<th style=\"text-align:center\">特殊情况下的动作</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">put</td>\n<td style=\"text-align:center\">添加一个元素</td>\n<td style=\"text-align:center\">如果队列满，则阻塞</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">take</td>\n<td style=\"text-align:center\">移出并返回头元素</td>\n<td style=\"text-align:center\">如果队列空，则阻塞</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">offer</td>\n<td style=\"text-align:center\">添加一个元素，并返回 true</td>\n<td style=\"text-align:center\">如果队列满，则返回 false</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">poll</td>\n<td style=\"text-align:center\">移出并返回队列的头元素</td>\n<td style=\"text-align:center\">如果队列空，则返回 null</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">peek</td>\n<td style=\"text-align:center\">返回队列的头元素（<strong>不移出</strong>）</td>\n<td style=\"text-align:center\">如果队列空，则返回 null</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>注意：</p>\n</blockquote>\n<blockquote>\n<ol>\n<li>offer 、peek、poll <strong>在特殊情况下并不阻塞</strong>，但是它们有对应的<strong>超时版本</strong></li>\n</ol>\n</blockquote>\n<ol start=\"2\">\n<li>由于 peak poll 带有 <strong>返回 <code>null</code></strong> 的属性，所以<strong>不能往这样的队列插入 <code>null</code> 值</strong></li>\n<li>这个队列还具有 <code>add()</code> 和 <code>remove</code> 方法，但是它们在特殊情况下会<strong>抛出异常</strong>，所以在多线程程序中不要使用这样的方法。</li>\n</ol>\n<p>Java 准备了多种实现形式的阻塞队列，包括链表、双端链表、数组等实现，甚至包括优先队列。</p>\n<p>同时，Java 1.7 还提供了 <code>TransferQueue</code> 接口，这个接口允许生产者线程等待，直到消费者线程准备就绪。</p>\n<h4 id=\"_1-1-2-例子\"> 1.1.2 例子</h4>\n<p>下面是一个使用阻塞队列来管理多线程关系的例子：\n即，<strong>生产者线程将元素加入到队列中，消费者线程将元素取出进行处理</strong></p>\n<div><pre><code><span>public</span> <span>class</span> <span>BlockingQueueExample</span> <span>{</span>\n    <span>public</span> <span>static</span> <span>void</span> <span>main</span><span>(</span><span>String</span><span>[</span><span>]</span> args<span>)</span> <span>throws</span> <span>Exception</span> <span>{</span>\n        <span>BlockingQueue</span> bq <span>=</span> <span>new</span> <span>ArrayBlockingQueue</span><span>(</span><span>1000</span><span>)</span><span>;</span>\n        <span>Producer</span> producer <span>=</span> <span>new</span> <span>Producer</span><span>(</span>bq<span>)</span><span>;</span>\n        <span>Consumer</span> consumer <span>=</span> <span>new</span> <span>Consumer</span><span>(</span>bq<span>)</span><span>;</span>\n\n        <span>new</span> <span>Thread</span><span>(</span>producer<span>)</span><span>.</span><span>start</span><span>(</span><span>)</span><span>;</span>\n        <span>new</span> <span>Thread</span><span>(</span>consumer<span>)</span><span>.</span><span>start</span><span>(</span><span>)</span><span>;</span>\n\n        <span>Thread</span><span>.</span><span>sleep</span><span>(</span><span>4000</span><span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n\n\n<span>/**\n* Producer generate the sum.\n* And add it into the queue\n*/</span>\n<span>public</span> <span>class</span> <span>Producer</span> <span>implements</span> <span>Runnable</span> <span>{</span>\n    <span>private</span> <span>BlockingQueue</span> bq <span>=</span> <span>null</span><span>;</span>\n\n    <span>public</span> <span>Producer</span><span>(</span><span>BlockingQueue</span> queue<span>)</span> <span>{</span>\n        <span>this</span><span>.</span><span>setBlockingQueue</span><span>(</span>queue<span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>// The blocking queue has a internal synchronize</span>\n    <span>// The delay of each end of the addition will show this</span>\n    <span>public</span> <span>void</span> <span>run</span><span>(</span><span>)</span> <span>{</span>\n        <span>Random</span> rand <span>=</span> <span>new</span> <span>Random</span><span>(</span><span>)</span><span>;</span>\n        <span>int</span> res <span>=</span> <span>0</span><span>;</span>\n        <span>try</span> <span>{</span>\n            res <span>=</span> <span>Addition</span><span>(</span>rand<span>.</span><span>nextInt</span><span>(</span><span>100</span><span>)</span><span>,</span> rand<span>.</span><span>nextInt</span><span>(</span><span>50</span><span>)</span><span>)</span><span>;</span>\n            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"Produced: \"</span> <span>+</span> res<span>)</span><span>;</span>\n            bq<span>.</span><span>put</span><span>(</span>res<span>)</span><span>;</span>\n            <span>Thread</span><span>.</span><span>sleep</span><span>(</span><span>1000</span><span>)</span><span>;</span>\n\n            res <span>=</span> <span>Addition</span><span>(</span>rand<span>.</span><span>nextInt</span><span>(</span><span>100</span><span>)</span><span>,</span> rand<span>.</span><span>nextInt</span><span>(</span><span>50</span><span>)</span><span>)</span><span>;</span>\n            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"Produced: \"</span> <span>+</span> res<span>)</span><span>;</span>\n            bq<span>.</span><span>put</span><span>(</span>res<span>)</span><span>;</span>\n            <span>Thread</span><span>.</span><span>sleep</span><span>(</span><span>1000</span><span>)</span><span>;</span>\n\n            res <span>=</span> <span>Addition</span><span>(</span>rand<span>.</span><span>nextInt</span><span>(</span><span>100</span><span>)</span><span>,</span> rand<span>.</span><span>nextInt</span><span>(</span><span>50</span><span>)</span><span>)</span><span>;</span>\n            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"Produced: \"</span> <span>+</span> res<span>)</span><span>;</span>\n            bq<span>.</span><span>put</span><span>(</span>res<span>)</span><span>;</span>\n        <span>}</span> <span>catch</span> <span>(</span><span>InterruptedException</span> e<span>)</span> <span>{</span>\n            e<span>.</span><span>printStackTrace</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n\n    <span>public</span> <span>void</span> <span>setBlockingQueue</span><span>(</span><span>BlockingQueue</span> bq<span>)</span> <span>{</span>\n        <span>this</span><span>.</span>bq <span>=</span> bq<span>;</span>\n    <span>}</span>\n\n    <span>public</span> <span>int</span> <span>Addition</span><span>(</span><span>int</span> x<span>,</span> <span>int</span> y<span>)</span> <span>{</span>\n        <span>int</span> result <span>=</span> <span>0</span><span>;</span>\n        result <span>=</span> x <span>+</span> y<span>;</span>\n        <span>return</span> result<span>;</span>\n    <span>}</span>\n<span>}</span>\n\n<span>/**\n* Comsumer take the result from the queue.\n* And print it out to the output\n*/</span>\n<span>public</span> <span>class</span> <span>Consumer</span> <span>implements</span> <span>Runnable</span> <span>{</span>\n    <span>protected</span> <span>BlockingQueue</span> queue <span>=</span> <span>null</span><span>;</span>\n\n    <span>public</span> <span>Consumer</span><span>(</span><span>BlockingQueue</span> queue<span>)</span> <span>{</span>\n        <span>this</span><span>.</span>queue <span>=</span> queue<span>;</span>\n    <span>}</span>\n\n    <span>public</span> <span>void</span> <span>run</span><span>(</span><span>)</span> <span>{</span>\n        <span>try</span> <span>{</span>\n            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"Consumed: \"</span> <span>+</span> queue<span>.</span><span>take</span><span>(</span><span>)</span><span>)</span><span>;</span>\n            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"Consumed: \"</span> <span>+</span> queue<span>.</span><span>take</span><span>(</span><span>)</span><span>)</span><span>;</span>\n            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"Consumed: \"</span> <span>+</span> queue<span>.</span><span>take</span><span>(</span><span>)</span><span>)</span><span>;</span>\n        <span>}</span> <span>catch</span> <span>(</span><span>InterruptedException</span> e<span>)</span> <span>{</span>\n            e<span>.</span><span>printStackTrace</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br></div></div><p>The output:</p>\n<div><pre><code>Produced: 93\nConsumed: 93\nProduced: 69\nConsumed: 69\nProduced: 76\nConsumed: 76\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h3 id=\"_1-2-线程安全的集合\"> 1.2 线程安全的集合</h3>\n<p>在 <code>java.util.concurrent</code> 包提供了许多线程安全的集合。\n主要用于<strong>多线程并发修改一个数据结构</strong>的并发问题。\n包括 哈希表、有序集和队列等</p>\n<p>一般来说，线程安全的集合要比一般的集合<strong>更高效</strong></p>\n<p>在较早的 Java 版本，曾有“同步包装器”使得一般的集合类型变为同步的，但是现在已经不推荐使用了，<strong>最好使用 <code>java.util.concurrent</code> 包中的集合</strong></p>\n<h2 id=\"_2-callable-和-future\"> 2. <code>Callable</code> 和  <code>Future</code></h2>\n<h3 id=\"_2-1-callable\"> 2.1 <code>Callable</code></h3>\n<p><code>Callable</code> 是一个<strong>带返回值</strong>的 <code>Runnable</code>，具有泛型特性。\n例如 <code>Callable&lt;Integer&gt;</code> 表示一个最终返回 <code>Interger</code> 的异步计算</p>\n<h3 id=\"_2-2-future\"> 2.2 <code>Future</code></h3>\n<p><code>Future</code> 保存异步任务的结果，可以将其启动然后交给一个线程。\n所有者在任务执行完毕后，可以通过 <code>get()</code> 方法获得结果。</p>\n<p><code>Future</code> 具有以下方法</p>\n<div><pre><code><span>public</span> <span>interface</span> <span>Future</span><span><span>&lt;</span><span>V</span><span>></span></span> <span>{</span>\n    <span>V</span> <span>get</span><span>(</span><span>)</span> <span>throws</span> <span>.</span><span>.</span><span>.</span><span>;</span>\n    <span>V</span> <span>get</span><span>(</span><span>long</span> timeout<span>,</span> <span>TimeUnit</span> unit<span>)</span> <span>throws</span> <span>.</span><span>.</span><span>.</span><span>;</span>\n    <span>void</span> <span>cancel</span><span>(</span><span>boolean</span> mayInterrupt<span>)</span><span>;</span>\n    <span>boolean</span> <span>isCancelled</span><span>(</span><span>)</span><span>;</span>\n    <span>boolean</span> <span>isDone</span><span>(</span><span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>第一个 <code>get()</code> 调用直到计算完成前会被<strong>阻塞</strong>；\n如果任务完成前第二个 <code>get()</code> 超时，则抛出 <code>TimeoutException</code>\n如果线程被中断，则都抛出 <code>InterruptedException</code>\n如果任务已经完成，那么 <code>get()</code> 立即返回</p>\n<p>可以使用 <code>cancel()</code> 方法来<strong>中断</strong>任务，\n如果任务没有开始，则它将被取消而不会再运行，\n如果任务已经在运行，那么则由 <code>mayInterrupt</code> 参数来决定是否<strong>中断</strong>任务\n如果任务<strong>已经被取消</strong>或者<strong>已经完成</strong>，那么返回 <code>false</code>，其他情况返回 <code>true</code></p>\n<blockquote>\n<p>注意，<strong>此方法一旦返回，则 <code>isDone()</code> 永远返回 <code>true</code></strong></p>\n</blockquote>\n<h3 id=\"_2-3-futuretask\"> 2.3 <code>FutureTask</code></h3>\n<p>Java 实现了 <code>FutureTask</code> 包装器，它是一个类，同时实现了 <code>Runnable</code> 和 <code>Future</code> 接口\n它接受一个 <code>Callable</code> 接口作为构建器参数，主要用于将 <code>Callable</code> 转换为 <code>Runnalbe</code> 和 <code>Future</code></p>\n<p>可以如下使用</p>\n<div><pre><code><span>Callable</span><span><span>&lt;</span><span>Integer</span><span>></span></span> myComputation <span>=</span> <span>.</span><span>.</span><span>.</span><span>;</span>\n<span>FutureTask</span><span><span>&lt;</span><span>Integer</span><span>></span></span> task <span>=</span> <span>new</span> <span>FutureTask</span><span><span>&lt;</span><span>Integer</span><span>></span></span><span>(</span>myComputation<span>)</span><span>;</span>\n<span>Thread</span> t <span>=</span> <span>new</span> <span>Thread</span><span>(</span>task<span>)</span>     <span>// It's a Runnale</span>\nt<span>.</span><span>start</span><span>(</span><span>)</span><span>;</span>\n<span>.</span><span>.</span><span>.</span>\n<span>Integer</span> result <span>=</span> task<span>.</span><span>get</span><span>(</span><span>)</span><span>;</span>    <span>// It's a Future</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id=\"_3-执行器-executor\"> 3. 执行器(Executor)</h2>\n<p>如果你需要做一些重复性较高的异步任务，或者创建大量的生命期很短的线程，那么就应该用线程池来管理。\n实际上，为了提高效率，执行任何的并发任务，都应该优先考虑 Execulator 和 Task</p>\n<blockquote>\n<p>Execulator 和 Task 优先于线程(Thread)\n—— <em>Effective Java Second Edition</em></p>\n</blockquote>\n<p>在这里，并发的最小单位升级为 <code>Executor</code> 和 <code>Task</code>。\n所谓的 <code>Task</code> 就是用户构建的 <code>Runnable</code> 或者 <code>Callable</code> 对象；\n这也是为什么要优先采用 <code>Runnable</code> 的原因</p>\n<h3 id=\"_3-1-基本使用\"> 3.1 基本使用</h3>\n<p>基本的使用步骤如下：</p>\n<ol>\n<li>使用 <code>Executors</code> 的静态方法构建线程池，或者叫 <code>ExecutorService</code></li>\n<li>调用 <code>execute()</code> 或 <code>submit()</code> 提交 <code>Runnable</code> 或 <code>Callable</code> 对象</li>\n<li>当不在提交任务时，调用 <code>shutdown()</code></li>\n</ol>\n<blockquote>\n<p>注意，还有一个 <code>execute()</code> 方法执行 <code>submit()</code> 的效果。\n它们的主要区别在于，\n<code>execute()</code> 会触发<strong>未捕获处理器</strong>，从而向 <code>System.err</code> 输出错误信息;\n<code>submit()</code> 会抛出 <code>ExecutionException</code>，可以使用 <code>getCause()</code> 获取出错信息</p>\n</blockquote>\n<blockquote>\n<p>另外， <code>submit()</code> 返回的是 <code>Future</code> 对象，可以通过它取消特定任务。\n由此，如果使用 <code>Callable</code> 那么使用 <code>submit()</code>；\n如果使用 <code>Runnable</code> 那么使用 <code>execute()</code></p>\n</blockquote>\n<p>例子：</p>\n<div><pre><code><span>ExecutorService</span> executorService <span>=</span> <span>Executors</span><span>.</span><span>newFixedThreadPool</span><span>(</span><span>10</span><span>)</span><span>;</span>\n\nexecutorService<span>.</span><span>execute</span><span>(</span><span>new</span> <span>Runnable</span><span>(</span><span>)</span> <span>{</span>\n    <span>public</span> <span>void</span> <span>run</span><span>(</span><span>)</span> <span>{</span>\n        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"Asynchronous task\"</span><span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span><span>)</span><span>;</span>\n\nexecutorService<span>.</span><span>shutdown</span><span>(</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h3 id=\"_3-2-scheduledexecutorservice-预定执行\"> 3.2 <code>ScheduledExecutorService</code> 预定执行</h3>\n<p>该类是 <code>ExecutorService</code> 的子类，用于构建<strong>预订性</strong>和<strong>重复性、周期性</strong> 的任务</p>\n<p>可以指定任务只运行一次，也可以指定任务的运行周期</p>\n<h3 id=\"_3-3-控制任务组\"> 3.3 控制任务组</h3>\n<p>使用 <code>ExecutorService</code> 的另一个重要原因就是可以实现控制一组相关任务。\n特别是在采用<strong>分治策略</strong>的算法中常常能用到。</p>\n<p>例如，使用对一个大整数进行因式分解，那么我们可以将整个过程分成很多很小的过程，当小任务全部解决完毕时，整数的因式分解也就完毕了。</p>\n<p>或者，我们可以用它来提交很多对于同一个问题的不同解决方案，如果有任何一个解决方案得出答案，那整个任务就可以停止了。</p>\n<p>对于以上两种情况，使用 <code>ExecutorService</code> 分别有两种方法进行对应：</p>\n<ol>\n<li><code>invokeAll()</code>，这个方法<strong>提交所有的 <code>Callable</code> 到一个集合中</strong>，并返回一个 <code>Future</code> 对象，代表<strong>所有任务解决结果</strong></li>\n<li><code>invokeAny()</code>，这个方法<strong>提交所有的 <code>Callable</code> 到一个集合中</strong>，并返回一个 <code>Future</code> 对象，代表<strong>某一个任务的解决结果</strong></li>\n</ol>\n<p>例子：</p>\n<div><pre><code><span>// invokeAll -- Return a List of Future</span>\n<span>List</span><span><span>&lt;</span><span>Callable</span><span>&lt;</span><span>T</span><span>></span><span>></span></span> task <span>=</span> <span>.</span><span>.</span><span>.</span><span>;</span>\n<span>List</span><span><span>&lt;</span><span>Future</span><span>&lt;</span><span>T</span><span>></span><span>></span></span> results <span>=</span> executor<span>.</span><span>invokeAll</span><span>(</span>task<span>)</span><span>;</span>\n\n<span>// invokeAny -- Return only one Future</span>\n<span>Future</span><span><span>&lt;</span><span>T</span><span>></span></span> resultOfInvokeAny <span>=</span> executor<span>.</span><span>invokeAny</span><span>(</span>task<span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>可以使用 <code>ExecutorCompletionService</code> 来对 <code>invokeAll()</code> 得到的结果集进行排列处理</p>\n<div><pre><code><span>// executor is a ExecutorService</span>\n<span>ExecutorCompletionService</span> service <span>=</span> <span>new</span> <span>ExecutroCompletionService</span><span>(</span>executor<span>)</span><span>;</span>\n\n<span>for</span> <span>(</span><span>Callable</span><span><span>&lt;</span><span>T</span><span>></span></span> task <span>:</span> tasks<span>)</span> <span>{</span>\n    service<span>.</span><span>submit</span><span>(</span>task<span>)</span><span>;</span>\n<span>}</span>\n\n<span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> tasks<span>.</span><span>size</span><span>(</span><span>)</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>\n    <span>processFurther</span><span>(</span>service<span>.</span><span>take</span><span>(</span><span>)</span><span>.</span><span>get</span><span>(</span><span>)</span><span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h3 id=\"_3-4-fork-join-框架\"> 3.4 Fork-Join 框架</h3>\n<p>对于多线程处理的<strong>分治策略</strong>的任务， Java 实现了一种 Fork-Join 框架来更好的实现这种任务流程。</p>\n<p>分治的很常见的实现方式是<strong>递归实现</strong>，这个框架也使用了<strong>递归</strong>的思路</p>\n<p>使用步骤：</p>\n<ol>\n<li>提供一个扩展了 <code>RecursiveTask&lt;T&gt;</code> 或者 <code>RecursiveAction</code> 的类</li>\n<li>Override <code>compute()</code> 方法，在其中调用子任务并将其合并</li>\n</ol>\n<p>例子：</p>\n<div><pre><code><span>class</span> <span>Counter</span> <span>extends</span> <span>RecursiveTask</span><span><span>&lt;</span><span>Integer</span><span>></span></span> <span>{</span>\n    <span>.</span><span>.</span><span>.</span>\n    <span>@Override</span>\n    <span>protected</span> <span>Integer</span> <span>computer</span><span>(</span><span>)</span> <span>{</span>\n        <span>if</span> <span>(</span><span>to</span> <span>-</span> from <span>&lt;</span> THRESHOLD<span>)</span> <span>{</span>\n            <span>// solve problem directly</span>\n        <span>}</span>\n        <span>else</span> <span>{</span>\n            <span>int</span> mid <span>=</span> from <span>+</span> <span>(</span><span>to</span> <span>-</span> from<span>)</span> <span>/</span> <span>2</span><span>;</span>\n            <span>// Recursive solve left</span>\n            <span>Counter</span> first <span>=</span> <span>new</span> <span>Counter</span><span>(</span>values<span>,</span> form<span>,</span> mid<span>,</span> filter<span>)</span><span>;</span>\n            <span>// Recursive solve right</span>\n            <span>Counter</span> second <span>=</span> <span>new</span> <span>Counter</span><span>(</span>values<span>,</span> mid<span>,</span> <span>to</span><span>,</span> filter<span>)</span><span>;</span>\n            <span>invokeAll</span><span>(</span>first<span>,</span> second<span>)</span><span>;</span>   <span>// Add both to executor</span>\n            <span>return</span> first<span>.</span><span>join</span><span>(</span><span>)</span> <span>+</span> second<span>.</span><span>join</span><span>(</span><span>)</span><span>;</span> <span>// bind the solution</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><h2 id=\"_4-同步器-synchronizer\"> 4. 同步器(Synchronizer)</h2>\n<p>同步器是并发工具的一种，一些使线程能够等待另一个线程的对象，允许它们协调动作。</p>\n<table>\n<th colspan=\"3\" style=\"text-align:center;\">同步器</th>\n<tr style=\"text-align:center;\">\n<td style=\"text-align:center;\">类</td>\n<td style=\"text-align:center;\">作用</td>\n<td style=\"text-align:center;\">何时使用</td>\n</tr>\n<tr style=\"text-align:center;\">\n<td style=\"text-align:center;\">CyclicBarrier  (不常用)</td>\n<td style=\"text-align:center;\">允许线程集等待直到其中预定数目的线程到达一个公共障栅(barrier)，然后可以选择执行一个处理 barrier 的动作</td>\n<td style=\"text-align:center;\">当大量的线程需要在它们的结果可用之前完成时</td>\n</tr>\n<tr style=\"text-align:center;\">\n<td style=\"text-align:center;\">CountDownLatch (常用)</td>\n<td style=\"text-align:center;\">允许线程集等待直到计数器为 0</td>\n<td style=\"text-align:center;\">当线程需要等待事件发生（才允许执行时）</td>\n</tr>\n<tr style=\"text-align:center;\">\n<td style=\"text-align:center;\">Exchanger（不常用）</td>\n<td style=\"text-align:center;\">允许两个线程在要交换的对象准备好时交换对象</td>\n<td style=\"text-align:center;\">当两个线程工作在同一个数据结构的<b>两个实例</b>上时</td>\n</tr>\n<tr style=\"text-align:center;\">\n<td style=\"text-align:center;\">Semaphore（常用）</td>\n<td style=\"text-align:center;\">允许线程集等待知道它被允许继续执行为止</td>\n<td style=\"text-align:center;\">限制访问资源的线程总数</td>\n</tr>\n<tr style=\"text-align:center;\">\n<td style=\"text-align:center;\">SynchronousQueue</td>\n<td style=\"text-align:center;\">允许一个线程将对象交给另一个线程</td>\n<td style=\"text-align:center;\">在没有显式同步的情况下，当两个线程准备好将一个对象传递到另一个时</td>\n</tr>\n</table>\n<blockquote>\n<p>注意 <code>CountDownLatch</code>，这个类用于<strong>让某些线程等待其他线程</strong>。\n它是唯一一个带有 <code>int</code> 构造参数的同步器，用于<strong>指定等待的并发线程的个数</strong></p>\n</blockquote>\n<blockquote>\n<p>形象来说，就是一个红绿灯，直到倒计时完毕，线程才可以运行\n下面是一个简单的多线程计时的例子</p>\n</blockquote>\n<div><pre><code><span>/**\n* A simple timing concurrent execution.\n* The timer will not start until all the worker thread are ready.\n* And when the last worker thread done, the timer stop\n*/</span>\n<span>public</span> <span>static</span> <span>long</span> <span>time</span><span>(</span><span>Executor</span> executor<span>,</span> <span>int</span> concurrency<span>,</span> <span>final</span> <span>Runnalbe</span> action<span>)</span> <span>throws</span> <span>InterruptedException</span> <span>{</span>\n    <span>final</span> <span>CountDownLatch</span> ready <span>=</span> <span>new</span> <span>CounDownLatch</span><span>(</span>concurrency<span>)</span><span>;</span>\n    <span>final</span> <span>CountDownLatch</span> start <span>=</span> <span>new</span> <span>CounDownLatch</span><span>(</span><span>1</span><span>)</span><span>;</span>\n    <span>final</span> <span>CountDownLatch</span> done <span>=</span> <span>new</span> <span>CounDownLatch</span><span>(</span>concurrency<span>)</span><span>;</span>\n\n    <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> concurrency<span>;</span> i<span>++</span><span>)</span> <span>{</span>\n        executor<span>.</span><span>execute</span><span>(</span><span>new</span> <span>Runnable</span><span>(</span><span>)</span> <span>{</span>\n            <span>// This is the worker thread</span>\n            <span>public</span> <span>void</span> <span>run</span><span>(</span><span>)</span> <span>{</span>\n                ready<span>.</span><span>countDown</span><span>(</span><span>)</span><span>;</span> <span>// Tell the timer worker is ready</span>\n                <span>try</span> <span>{</span>\n                    start<span>.</span><span>await</span><span>(</span><span>)</span><span>;</span> <span>// Worker stuck at start point</span>\n\n                    <span>// Because of blocking,</span>\n                    <span>// this statement will not run</span>\n                    <span>// until the start count down reach 0</span>\n                    action<span>.</span><span>run</span><span>(</span><span>)</span><span>;</span>\n                <span>}</span> <span>catch</span> <span>(</span><span>InterruptedException</span><span>)</span> <span>{</span>\n                    <span>Thread</span><span>.</span><span>currentThread</span><span>(</span><span>)</span><span>.</span><span>interrupt</span><span>(</span><span>)</span><span>;</span>\n                <span>}</span> <span>finally</span> <span>{</span>\n                    done<span>.</span><span>countDown</span><span>(</span><span>)</span><span>;</span>   <span>// Tell the timer worker is done</span>\n                <span>}</span>\n            <span>}</span>\n        <span>}</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>// This is the timer thread</span>\n    ready<span>.</span><span>await</span><span>(</span><span>)</span><span>;</span>  <span>// Wait for all the workers are done</span>\n    <span>long</span> startNanos <span>=</span> <span>System</span><span>.</span><span>nanoTime</span><span>(</span><span>)</span><span>;</span>\n    start<span>.</span><span>countDown</span><span>(</span><span>)</span><span>;</span>  <span>// Let worker thread off!!</span>\n    done<span>.</span><span>await</span><span>(</span><span>)</span><span>;</span>   <span>// Wait for worker done.</span>\n    <span>return</span> <span>System</span><span>.</span><span>nanoTime</span><span>(</span><span>)</span> <span>-</span> startNanos<span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br></div></div><blockquote>\n<p>在<strong>线程</strong>中调用锁存器的 <code>await()</code> 方法<strong>可以阻塞当前线程</strong>\n当锁存器的计数器为 0 时，<strong>所有的被该锁存器阻塞的线程即刻执行</strong></p>\n</blockquote>\n<blockquote>\n<p>锁存器是共享的，在任何线程中都可被更改\n一旦归 0，障碍即刻被放弃</p>\n</blockquote>\n",
      "date_published": "2017-03-16T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Java"
      ]
    },
    {
      "title": "Java 异常",
      "url": "https://wafer.li/blog-corners/langroad/Java/Java%20%E5%BC%82%E5%B8%B8/",
      "id": "https://wafer.li/blog-corners/langroad/Java/Java%20%E5%BC%82%E5%B8%B8/",
      "summary": "<h2 id=\"_1-异常分类\"> 1. 异常分类</h2>\n<p>※具体的结构层次如图\n<img src=\"https://img.my.csdn.net/uploads/201310/29/1383051170_4167.jpeg\" alt=\"\" /></p>\n",
      "content_html": "<h2 id=\"_1-异常分类\"> 1. 异常分类</h2>\n<p>※具体的结构层次如图\n<img src=\"https://img.my.csdn.net/uploads/201310/29/1383051170_4167.jpeg\" alt=\"\" /></p>\n\n<ul>\n<li>\n<p>Throwable</p>\n<ul>\n<li>\n<p>Error</p>\n<blockquote>\n<p>※Java运行时系统的内部错误和资源耗尽错误，应用程序不该抛出这类异常;\n该异常出现时，只能终止程序</p>\n</blockquote>\n</li>\n<li>\n<p>Exception</p>\n<ul>\n<li>\n<p>IOException 及其他</p>\n<blockquote>\n<p>※包含\n试图在文件尾部后面读取数据（IO）\n试图打开一个不存在的文件（IO）\n试图根据给定的字符串查找Class，而这个类并不存在</p>\n</blockquote>\n</li>\n<li>\n<p>Runtime Exception</p>\n<blockquote>\n<p>※包含\n错误的类型转换\n数组访问越界\n访问空指针</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>注意要点</p>\n<ul>\n<li>如果出现 <code>RuntimeException</code>，那么就一定是你的问题，需要从程序设计方面进行改进</li>\n<li>所有派生于 <code>Error</code> 和 <code>RuntimeException</code> 的异常称为未检查异常</li>\n<li>注意 <code>IOException</code> 并不包含用户输入的部分，此类通过一般检查可以避免的异常不应作为异常抛出并处理，应该由流程控制语句（<code>if</code> <code>else</code> <code>while</code> <code>continue</code>）处理</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"_2-声明异常\"> 2. 声明异常</h2>\n<p>类似于C++98的异常规范</p>\n<ul>\n<li>\n<p>在方法的首部声明</p>\n<div><pre><code><span>public</span> <span>FileInputStream</span><span>(</span><span>String</span> name<span>)</span> <span>throws</span> <span>FileNotFoundException</span>\n</code></pre>\n<div><span>1</span><br></div></div></li>\n<li>\n<p><strong>声明多个时 ，使用逗号隔开</strong></p>\n</li>\n<li>\n<p>必须声明所有可能抛出的已检查异常</p>\n<blockquote>\n<p>如果未声明，则表明方法不会抛出（已检查）异常</p>\n</blockquote>\n</li>\n<li>\n<p>不必声明未检查异常</p>\n</li>\n<li>\n<p>子类方法的声明异常不能比超类方法更为通用</p>\n<blockquote>\n<p>即子类声明的异常层次不能高于超类方法\n超类没有声明异常时，子类也不能声明异常</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"_3-抛出异常\"> 3.抛出异常</h2>\n<ul>\n<li>\n<p>使用 <code>throw</code> 关键字表明抛出异常</p>\n<blockquote>\n<p>注意与声明异常的关键字（<code>throws</code>）区分开\n只能抛出 <code>Throwable</code> 子类的对象\n而 C++ 能抛出任何类型的值</p>\n</blockquote>\n</li>\n<li>\n<p>抛出异常与捕获异常不同，如果没有异常处理器（<code>try</code> <code>catch</code>）捕获异常，则程序将会终止</p>\n</li>\n<li>\n<p>自定义异常</p>\n<ul>\n<li>通常包含一个默认构造器和一个带有详细描述信息的构造器</li>\n<li>必须派生于 <code>Exception</code> 及其子类</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"_4-捕获异常\"> 4.捕获异常</h2>\n<h3 id=\"_4-1-使用try-catch语句块来捕获异常\"> 4.1 使用try/catch语句块来捕获异常</h3>\n<p>如果调用一个抛出已检查异常的方法，则必须对其处理（<code>try/catch</code>），或继续将其传递（<code>throws</code>）</p>\n<p>一个catch语句里面可以捕获多个异常类型，使用 <code>|</code> 间隔开</p>\n<p>此时，异常变量为 <code>final</code></p>\n<p>可以在 <code>catch</code> 语句中再次抛出异常</p>\n<p>与 C++ 不同的是，不能只写 <code>throw</code> 关键字，而需要将整个抛出异常都写上</p>\n<h3 id=\"_4-2-finally-子句\"> 4.2 <code>finally</code> 子句</h3>\n<div><pre><code><span>try</span>\n<span>{</span>\n\t<span>.</span><span>.</span><span>.</span>\n<span>}</span>\n<span>catch</span><span>(</span><span>.</span><span>.</span><span>.</span><span>)</span>\n<span>{</span>\n\t<span>.</span><span>.</span><span>.</span>\n<span>}</span>\n<span>finally</span>\n<span>{</span>\n\t<span>.</span><span>.</span><span>.</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h4 id=\"_4-2-1-概述\"> 4.2.1 概述</h4>\n<ul>\n<li>\n<p>不管是否有异常被捕获，<code>finally</code> 子句都将被执行</p>\n</li>\n<li>\n<p>抛出异常并被捕获时，先执行 <code>catch</code> 语句，后执行 <code>finally</code> 语句</p>\n</li>\n<li>\n<p>抛出异常未被捕获时，先执行 <code>finally</code> 语句，后将异常返回给调用者</p>\n<blockquote>\n<p><code>try</code> 可以只有 <code>finally</code>，而没有<code>catch</code></p>\n</blockquote>\n</li>\n<li>\n<p><strong>当finally语句抛出异常时，会覆盖掉原有异常（此时建议使用带资源的try语句）</strong></p>\n<ul>\n<li>\n<p>※如果此异常必须返回给调用者的话，则需要进行一些处理才能返回给调用者</p>\n</li>\n<li>\n<p>※如果原异常具有异常处理器（被捕获）则不需要这种解决办法</p>\n<ul>\n<li>\n<p>常规解决办法</p>\n<div><pre><code> <span>InputStream</span> in <span>=</span> <span>.</span><span>.</span><span>.</span><span>.</span><span>;</span>\n <span>Excepiton</span> ex <span>=</span> <span>null</span><span>;</span>\n <span>try</span>\n <span>{</span>\n     <span>try</span>\n \t<span>{</span>\n     \t<span>.</span><span>.</span><span>.</span>\n     <span>}</span>\n     <span>catch</span><span>(</span><span>Exception</span> e<span>)</span>\n     <span>{</span>\n         ex <span>=</span> e<span>;</span>\n         <span>throw</span> e<span>;</span>\t\t\t\t\t<span>//这里重新抛出了e，为的就是将这个异常返回给调用者</span>\n     <span>}</span>\n <span>}</span>\n <span>finally</span>\n <span>{</span>\n     <span>try</span>\n \t<span>{</span>\n         in<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span>\n     <span>}</span>\n     <span>catch</span><span>(</span><span>Exception</span> e<span>)</span>\t\t\t<span>//在这里捕获（抑制）了close方法的异常，</span>\n     <span>{</span>\n         <span>if</span><span>(</span>ex <span>==</span> <span>null</span><span>)</span>\t<span>throw</span> e<span>;</span>\n     <span>}</span>\n <span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"_4-2-2-带资源的try语句\"> 4.2.2 带资源的try语句</h4>\n<ul>\n<li>\n<p><strong>只要需要关闭资源，就要尽可能使用带资源的try语句</strong></p>\n</li>\n<li>\n<p><strong>资源必须属于一个实现了AutoCloseable的类，否则应使用常规方法</strong></p>\n<div><pre><code><span>try</span><span>(</span><span>Resource</span> res <span>=</span> <span>.</span><span>.</span><span>.</span><span>)</span>\n<span>{</span>\n\t<span>.</span><span>.</span><span>.</span><span>.</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div></li>\n<li>\n<p>资源：特指文件和输入输出流等，和<strong>申请的内存无关</strong></p>\n<blockquote>\n<p>当 <code>try</code> 块退出时，将会自动调用 <code>res.close()</code></p>\n</blockquote>\n</li>\n<li>\n<p>可以指定多个资源\n当出现异常时，<code>close</code> 异常会被自动捕获（抑制），原有异常将会重新抛出\n<code>close</code> 的异常将会被增加到原有异常中，可以使用 <code>getSuppressed</code> 方法获取到被抑制的异常列表</p>\n</li>\n</ul>\n<p>此 <code>try</code> 块也可以有 <code>catch</code> 和 <code>finally</code> 子句，会在关闭资源之后执行</p>\n<h2 id=\"_5-使用异常的技巧\"> 5. 使用异常的技巧</h2>\n<h3 id=\"_5-1-异常处理不能代替简单的测试\"> 5.1 异常处理不能代替简单的测试</h3>\n<ul>\n<li>异常处理会比简单的测试花费更多的时间</li>\n<li>应该仅在异常状况下使用异常机制</li>\n<li><strong>资源的IO错误，设备错误，物理限制等等</strong></li>\n<li><strong>而对于用户的输入错误，应该使用流程控制来进行处理</strong></li>\n</ul>\n<h3 id=\"_5-2-不要过分细化异常\"> 5.2 不要过分细化异常</h3>\n<p><strong>应该将整个任务包装在一个try语句内</strong></p>\n<h3 id=\"_5-3-利用异常层次结构\"> 5.3 利用异常层次结构</h3>\n<p>※应该尽量的抛出更为恰当的子类，而不是仅仅抛出较为高层次的异常类对象\n※捕获时同理</p>\n<h3 id=\"_5-4-应该关闭不重要的异常\"> 5.4 应该关闭不重要的异常</h3>\n<p>※在方法多重调用时使用</p>\n<h3 id=\"_5-5-早抛出-晚捕获\"> 5.5 早抛出，晚捕获</h3>\n<h2 id=\"_6-断言\"> 6. 断言</h2>\n<p>断言就是增加一个编译检查项，如果结果与断言不符，那么就抛出异常</p>\n",
      "image": "https://img.my.csdn.net/uploads/201310/29/1383051170_4167.jpeg",
      "date_published": "2017-03-16T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Java"
      ]
    },
    {
      "title": "Java 接口和内部类",
      "url": "https://wafer.li/blog-corners/langroad/Java/Java%20%E6%8E%A5%E5%8F%A3%E5%92%8C%E5%86%85%E9%83%A8%E7%B1%BB/",
      "id": "https://wafer.li/blog-corners/langroad/Java/Java%20%E6%8E%A5%E5%8F%A3%E5%92%8C%E5%86%85%E9%83%A8%E7%B1%BB/",
      "summary": "<h2 id=\"_1-接口\"> 1. 接口</h2>\n<p>这是 Java 中的专有名词，指代的是 <strong>interface</strong> 关键字</p>\n<h3 id=\"_1-1-接口\"> 1.1 接口</h3>\n<div><pre><code><span>public</span> <span>interface</span> <span>Comparable</span> <span>{</span><span>.</span><span>.</span><span>.</span><span>}</span>\n</code></pre>\n<div><span>1</span><br></div></div>",
      "content_html": "<h2 id=\"_1-接口\"> 1. 接口</h2>\n<p>这是 Java 中的专有名词，指代的是 <strong>interface</strong> 关键字</p>\n<h3 id=\"_1-1-接口\"> 1.1 接口</h3>\n<div><pre><code><span>public</span> <span>interface</span> <span>Comparable</span> <span>{</span><span>.</span><span>.</span><span>.</span><span>}</span>\n</code></pre>\n<div><span>1</span><br></div></div>\n<ul>\n<li>\n<p>接口不是类，而是对类的一组需求描述</p>\n</li>\n<li>\n<p>接口中的所有方法自动为public</p>\n</li>\n<li>\n<p>实现接口</p>\n<ul>\n<li>\n<p>将类声明为实现给定的接口</p>\n<div><pre><code><span>class</span> <span>Employee</span> <span>implements</span> <span>Comparable</span> <span>{</span><span>.</span><span>.</span><span>.</span><span>.</span><span>}</span>\n</code></pre>\n<div><span>1</span><br></div></div></li>\n<li>\n<p>对接口中的所有方法进行定义</p>\n<blockquote>\n<p><strong>接口实现必须声明为public</strong></p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p>特性</p>\n<ul>\n<li>\n<p>不是类，不能使用new来实例化</p>\n</li>\n<li>\n<p>不能包含实例域和静态方法</p>\n</li>\n<li>\n<p>可以包含常量，接口中的域被自动设为public static final</p>\n</li>\n<li>\n<p>可以声明接口的变量</p>\n<div><pre><code><span>Comparable</span> x<span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div></li>\n<li>\n<p>必须引用实现了接口的类对象</p>\n<div><pre><code>x <span>=</span> <span>new</span> <span>Employee</span><span>(</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div></li>\n</ul>\n</li>\n<li>\n<p>可以使用instanceof来检查一个对象是否实现了某个特定接口</p>\n<div><pre><code><span>if</span><span>(</span>anObject <span>instanceof</span> <span>Comparable</span><span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div></li>\n<li>\n<p>可以扩展（<strong>继承</strong>）</p>\n<div><pre><code><span>public</span> <span>interface</span> <span>Powered</span> <span>extends</span> <span>Moveable</span>\n</code></pre>\n<div><span>1</span><br></div></div></li>\n<li>\n<p>每个类只能拥有一个超类，但是可以实现多个接口</p>\n<div><pre><code><span>class</span> <span>Employee</span> <span>extends</span> <span>Persons</span> <span>implements</span> <span>Comparable</span> <span>{</span>\n    <span>.</span><span>.</span><span>.</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>\n</ul>\n<h3 id=\"_1-2-对象克隆\"> 1.2 对象克隆</h3>\n<ul>\n<li>默认克隆（<code>Object.clone()</code>）</li>\n<li>浅拷贝</li>\n<li>protected方法</li>\n<li>实现克隆\n<ul>\n<li>必须实现 <code>Cloneable</code> 接口</li>\n<li>使用 <code>public</code> 重新定义 <code>clone()</code> 方法</li>\n<li>即使浅拷贝能满足要求，也要进行上述两条操作</li>\n<li>需要声明 <code>CloneNotSupportedException</code> 异常</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"_2-内部类\"> 2. 内部类</h2>\n<div><pre><code><span>class</span> <span>TalkingClock</span>\n<span>{</span>\n\t<span>public</span> <span>class</span> <span>TimePrinter</span> <span>implements</span> <span>ActionListenner</span>\n\t<span>{</span>\n\t\t<span>.</span><span>.</span><span>.</span>\n\t<span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h3 id=\"_2-1-概述\"> 2.1 概述</h3>\n<ul>\n<li>在类的内部直接定义，类似于C++的嵌套类</li>\n<li>可以访问作用域内的数据，包括私有的</li>\n<li>可以隐藏内部类</li>\n<li>可以便捷实现回调</li>\n</ul>\n<h3 id=\"_2-2-普通内部类\"> 2.2 普通内部类</h3>\n<ul>\n<li>可以访问外围类对象数据（包括私有的）</li>\n<li>通过 <code>OuterClass.this</code> 访问外围类</li>\n<li>在外围类的作用域之外，使用 <code>OuterClass.InnerClass</code> 引用内部类</li>\n</ul>\n<h3 id=\"_2-3-局部内部类\"> 2.3 局部内部类</h3>\n<ul>\n<li>\n<p>简称局部类，在一个方法内进行定义</p>\n<div><pre><code><span>public</span> <span>void</span> <span>start</span><span>(</span><span>)</span>\n<span>{</span>\n    <span>class</span> <span>TinmePrinter</span> <span>implements</span> <span>ActionListenner</span>\n    <span>{</span>\n\t    <span>.</span><span>.</span><span>.</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div></li>\n<li>\n<p>局部类可以访问局部变量（必须声明为 <code>final</code>）</p>\n</li>\n<li>\n<p>更新封闭作用域内的计数器时，使用 <code>final</code> 的长度为 1 的数组</p>\n</li>\n</ul>\n<h3 id=\"_2-4-匿名内部类\"> 2.4 匿名内部类</h3>\n<div><pre><code><span>new</span> <span>SuperType</span><span>(</span>cosntruction parameters<span>)</span>\n\t<span>{</span>\n\t\t<span>.</span><span>.</span><span>.</span>\n\t<span>}</span>\n<span>// 如果只创建局部类的一个对象的时候才使用</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ul>\n<li>SuperType可以是类或者接口</li>\n<li>如果用于实现接口时，不能有任何构造参数</li>\n</ul>\n<div><pre><code><span>new</span> <span>InterfaceType</span><span>(</span><span>)</span>\n\t<span>{</span>\n\t\t<span>.</span><span>.</span><span>.</span>\n\t<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id=\"_2-5-静态内部类\"> 2.5 静态内部类</h3>\n<ul>\n<li>用于将一个类隐藏在另一个类之中，通常用于防止名称的冲突</li>\n<li>只有内部类可以声明为 <code>static</code></li>\n<li>特别的，通过静态方法构造的内部类必须声明为 <code>static</code></li>\n</ul>\n",
      "date_published": "2017-03-16T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Java"
      ]
    },
    {
      "title": "Java 泛型基础",
      "url": "https://wafer.li/blog-corners/langroad/Java/Java%20%E6%B3%9B%E5%9E%8B%E5%9F%BA%E7%A1%80/",
      "id": "https://wafer.li/blog-corners/langroad/Java/Java%20%E6%B3%9B%E5%9E%8B%E5%9F%BA%E7%A1%80/",
      "summary": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>泛型类似于 C++ 中的模板，使得编写的代码可以被多种不同的对象所使用。</p>\n<p>在 Java 增加泛型类之前，泛型实际上是以<strong>继承</strong>方式实现的</p>\n<p>泛型使用类型参数来指示元素的类型</p>\n<div><pre><code><span>ArrayList</span><span><span>&lt;</span><span>String</span><span>></span></span> files <span>=</span> <span>new</span> <span>ArrayList</span><span><span>&lt;</span><span>String</span><span>></span></span><span>(</span><span>)</span><span>;</span>\n<p><span>// Java SE 7 之后可以省略构造函数中的泛型类型</span>\n<span>ArrayList</span><span><span>&lt;</span><span>String</span><span>&gt;</span></span> files <span>=</span> <span>new</span> <span>ArrayList</span><span><span>&lt;</span><span>&gt;</span></span><span>(</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div></p>\n",
      "content_html": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>泛型类似于 C++ 中的模板，使得编写的代码可以被多种不同的对象所使用。</p>\n<p>在 Java 增加泛型类之前，泛型实际上是以<strong>继承</strong>方式实现的</p>\n<p>泛型使用类型参数来指示元素的类型</p>\n<div><pre><code><span>ArrayList</span><span><span>&lt;</span><span>String</span><span>></span></span> files <span>=</span> <span>new</span> <span>ArrayList</span><span><span>&lt;</span><span>String</span><span>></span></span><span>(</span><span>)</span><span>;</span>\n\n<span>// Java SE 7 之后可以省略构造函数中的泛型类型</span>\n<span>ArrayList</span><span><span>&lt;</span><span>String</span><span>></span></span> files <span>=</span> <span>new</span> <span>ArrayList</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div>\n<h2 id=\"_2-泛型类\"> 2. 泛型类</h2>\n<ol>\n<li>\n<p>单个参数</p>\n<div><pre><code><span>// 其中 T 为类型参数</span>\n<span>public</span> <span>class</span> <span>Pair</span><span><span>&lt;</span><span>T</span><span>></span></span> <span>{</span><span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div></li>\n<li>\n<p>多个参数</p>\n<div><pre><code><span>// 多个类型参数用逗号隔开</span>\n<span>public</span> <span>class</span> <span>Piar</span><span><span>&lt;</span><span>T</span><span>,</span> <span>U</span><span>></span></span> <span>{</span><span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div></li>\n</ol>\n<h2 id=\"_3-泛型方法\"> 3. 泛型方法</h2>\n<p>泛型方法不仅只存在于泛型类中，也可以在非泛型类中定义泛型方法</p>\n<div><pre><code><span>class</span> <span>ArrarAlg</span> <span>{</span>\n\n    <span>/**\n    * 这是一个泛型方法，\n    * &lt;T> 表示其为泛型方法\n    */</span>\n    <span>public</span> <span>static</span> <span><span>&lt;</span><span>T</span><span>></span></span> <span>T</span> <span>getMiddle</span><span>(</span><span>T</span><span>.</span><span>.</span><span>.</span> a<span>)</span> <span>{</span><span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>调用泛型方法时，通过在<strong>方法名前</strong>的尖括号中放入具体的类型来将其实例化</p>\n<div><pre><code><span>String</span> middle <span>=</span> <span>ArrayAlg</span><span>.</span><span><span>&lt;</span><span>String</span><span>></span></span><span>getMiddle</span><span>(</span><span>\"John\"</span><span>,</span> <span>\"Q.\"</span><span>,</span> <span>\"Public\"</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>其实大多数情况下，编译器都能推断出正确的类型，所以方括号可以省略</p>\n<h2 id=\"_4-类型变量的限定\"> 4. 类型变量的限定</h2>\n<p>有时候我们需要对类型变量进行一定的约束:</p>\n<p>比如，当我们需要对变量进行比较操作时，我们需要确保变量都实现了 <code>Comparable</code> 接口。</p>\n<p>对于类型变量的限定有两种方式</p>\n<ol>\n<li>\n<p>限定上界</p>\n<div><pre><code><span>public</span> <span>static</span> <span><span>&lt;</span><span>T</span> <span>extends</span> <span>Comarable</span><span>></span></span> <span>T</span> <span>min</span><span>(</span><span>T</span><span>[</span><span>]</span> a<span>)</span> <span>.</span><span>.</span><span>.</span>\n</code></pre>\n<div><span>1</span><br></div></div><blockquote>\n<p>这里我们限定了 T 必须是实现了 Comarable 接口的变量。\n如果 Comarable 是一个类，那么 T 必须是它，或者它的子类</p>\n</blockquote>\n</li>\n<li>\n<p>限定下界</p>\n<div><pre><code><span>public</span> <span>static</span> <span><span>&lt;</span><span>T</span> <span>super</span> <span>Child</span><span>></span></span> <span>T</span> <span>doSomeThings</span><span>(</span><span>T</span><span>[</span><span>]</span> a<span>)</span> <span>.</span><span>.</span><span>.</span>\n</code></pre>\n<div><span>1</span><br></div></div><blockquote>\n<p>这里限定了 T 必须是 Child 的超类，或者它本身。</p>\n</blockquote>\n</li>\n</ol>\n<p>使用 <code>&amp;</code> 分隔限定类型，使用逗号来分隔 类型参数</p>\n<div><pre><code><span>T</span> <span>extends</span> <span>Comparable</span> <span>&amp;</span> <span>Serializable</span>\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"_5-泛型类的实例化\"> 5.泛型类的实例化</h2>\n<h3 id=\"_5-1-类型擦除\"> 5.1 类型擦除</h3>\n<p>Java 中的泛型类采用 <strong>类型擦除</strong> 方式来进行实例化。</p>\n<blockquote>\n<p>类型擦除即为，擦除类型参数，并将其替换为限定的类型。\n例如上面的 <code>T extends Comparable</code> 则在类中的 <code>T</code> 会被替换为 <code>Comparable</code></p>\n<p>如果类型没有被限定，则替换为 <code>Object</code></p>\n</blockquote>\n<p>需要注意的是，虚拟机中没有泛型类型变量，任何的泛型类在需要实例化的时候，都会先进行<strong>类型擦除</strong>，然后替换为实例化的类型。</p>\n<p>例如， <code>Pair&lt;T&gt;</code> 的原始类型如下</p>\n<div><pre><code><span>public</span> <span>class</span> <span>Pair</span> <span>{</span>\n    <span>private</span> <span>Object</span> first<span>;</span>\n    <span>private</span> <span>Object</span> second<span>;</span>\n\n    <span>public</span> <span>Pair</span><span>(</span><span>)</span> <span>{</span>\n        first <span>=</span> <span>null</span><span>;</span>\n        second <span>=</span> <span>null</span><span>;</span>\n    <span>}</span>\n\n    <span>public</span> <span>Object</span> <span>getFirst</span><span>(</span><span>)</span> <span>{</span>\n        <span>return</span> <span>this</span><span>.</span>first<span>;</span>\n    <span>}</span>\n\n    <span>public</span> <span>Object</span> <span>getSecond</span><span>(</span><span>)</span> <span>{</span>\n        <span>return</span> <span>this</span><span>.</span>second<span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>通过类型擦除的方法，Java 使得泛型类就好像一个普通的类，从而避免了 C++ 模板实例化所造成的代码膨胀。</p>\n<h3 id=\"_5-2-翻译泛型表达式\"> 5.2 翻译泛型表达式</h3>\n<p>当程序调用泛型方法时， Java 采用强制类型转换（Cast）来返回或调用正确的类型</p>\n<p>例如</p>\n<div><pre><code><span>Pair</span><span><span>&lt;</span><span>Employee</span><span>></span></span> buddies <span>=</span> <span>.</span><span>.</span><span>.</span><span>;</span>\n<span>Employee</span> buddy <span>=</span> buddies<span>.</span><span>getFirst</span><span>(</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>此时，编译器自动插入强制类型转换使得 <code>getFirst()</code> 方法返回 <code>Employee</code> 类型</p>\n<h3 id=\"_5-3-泛型方法的实例化和桥方法\"> 5.3 泛型方法的实例化和桥方法</h3>\n<p>泛型方法在实例化过程中也使用 <strong>类型擦除</strong>\n但是这在继承中会导致方法的冲突。</p>\n<p>例如：</p>\n<div><pre><code><span>class</span> <span>DateInterval</span> <span>extends</span> <span>Pair</span><span><span>&lt;</span><span>Date</span><span>></span></span> <span>{</span>\n    <span>public</span> <span>void</span> <span>setSecond</span><span>(</span><span>Date</span> second<span>)</span> <span>{</span> <span>.</span><span>.</span><span>.</span> <span>}</span>\n<span>}</span>\n\n<span>// 经过类型擦除之后</span>\n<span>class</span> <span>DateInterval</span> <span>extends</span> <span>Pair</span> <span>{</span>\n    <span>public</span> <span>void</span> <span>setSecond</span><span>(</span><span>Date</span> second<span>)</span> <span>{</span> <span>.</span><span>.</span><span>.</span> <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>当使用基类指针实现多态性的时候</p>\n<div><pre><code><span>Pair</span><span><span>&lt;</span><span>Date</span><span>></span></span> pair <span>=</span> interval<span>;</span>\npair<span>.</span><span>setSecond</span><span>(</span>aDate<span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>此时，存在一个从 <code>Pair</code> 继承而来的方法</p>\n<div><pre><code><span>public</span> <span>void</span> <span>setSecond</span><span>(</span><span>Object</span> second<span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>由于<strong>形式参数的改变</strong>，使得这是一个不同的方法；\n但是我们对 <code>pair</code> 的多态性描述显然是要调用 <code>setSecond(Date second)</code> 方法；\n此时，编译器就会自动生成一个桥方法，用来保证多态的正确使用。</p>\n<div><pre><code><span>// 桥方法</span>\n<span>public</span> <span>void</span> <span>setSecond</span><span>(</span><span>Objedt</span> second<span>)</span> <span>{</span>\n    <span>setSecond</span><span>(</span><span>(</span><span>Date</span><span>)</span> second<span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id=\"_6-约束和局限性\"> 6. 约束和局限性</h2>\n<h3 id=\"_6-1-不能用基本类型实例化类型参数\"> 6.1 不能用基本类型实例化类型参数</h3>\n<p>由于泛型使用<strong>类型擦除</strong>来实现，所有的未限定类型均会被替换成 <code>Object</code>；</p>\n<p>而 <code>Object</code> 不能储存基本类型</p>\n<p>此时一般使用对象包装器来实现基本类型的实例化</p>\n<h3 id=\"_6-2-运行时的类型查询只适用于原始类型\"> 6.2 运行时的类型查询只适用于原始类型</h3>\n<p>由于使用了类型擦除，所有的类型查询都只对泛型类的<strong>原始类型</strong>适用，而对泛型版本不适用。</p>\n<p><code>instanceof</code> 和 <code>getClass()</code> 返回的都是原始类型</p>\n<h3 id=\"_6-3-不能创建参数化类型的数组\"> 6.3 不能创建参数化类型的数组</h3>\n<p>创建泛型类的<strong>数组</strong>是不合法的。</p>\n<p>由于类型擦除的存在，所有的未限定泛型类都会被替换成 <code>Object</code>。</p>\n<p>例如</p>\n<div><pre><code><span>Pair</span><span><span>&lt;</span><span>String</span><span>></span></span><span>[</span><span>]</span> table <span>=</span> <span>new</span> <span>Pair</span><span><span>&lt;</span><span>String</span><span>></span></span> <span>[</span><span>10</span><span>]</span><span>;</span>   <span>// ERROR</span>\n<span>// After erase</span>\n<span>Pair</span><span>[</span><span>]</span> table <span>=</span> <span>new</span> <span>Pair</span><span>[</span><span>10</span><span>]</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>此时，如果有下面的一条语句</p>\n<div><pre><code><span>Object</span><span>[</span><span>]</span> objects <span>=</span> table<span>;</span>   <span>// OK, Pair is a type of Object</span>\n\n<span>// But, if edit one of the elements</span>\nobjects<span>[</span><span>0</span><span>]</span> <span>=</span> <span>\"Hello\"</span><span>;</span>   <span>// ERROR, because the objects[0] is Pair, not String</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>当需要收集参数化类型对象时，使用 <code>ArrayList</code> 来代替数组实现</p>\n<p>如果实在需要创建泛型类的数组，那么就必须使用 <strong>强制转换</strong>。</p>\n<div><pre><code><span>Pair</span><span><span>&lt;</span><span>String</span><span>></span></span> p <span>=</span> <span>(</span><span>Pair</span><span><span>&lt;</span><span>String</span><span>></span></span><span>[</span><span>]</span><span>)</span> <span>new</span> <span>Object</span><span>[</span><span>10</span><span>]</span><span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_6-4-varargs-警告\"> 6.4 Varargs 警告</h3>\n<p>当使用可变参数的泛型类作为形参时，由于可变类型是一个数组，此时违反了上面一条规则。</p>\n<p>但是对于这种情况，规则有所放松，使用这个会得到一个<strong>警告</strong>，可以用 <code>@SafeVarargs</code> 注解来压制这个警告</p>\n<div><pre><code><span>@SafeVarargs</span>\n<span>public</span> <span>static</span> <span><span>&lt;</span><span>T</span><span>></span></span> <span>void</span> <span>addAll</span><span>(</span><span>Collection</span><span><span>&lt;</span><span>T</span><span>></span></span> coll<span>,</span> <span>T</span><span>.</span><span>.</span><span>.</span> ts<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h3 id=\"_6-5-不能实例化类型变量\"> 6.5 不能实例化类型变量</h3>\n<p>所谓的类型变量指的是 <code>T</code></p>\n<p>不能使用  <code>new T(...)</code> 类似这样的表达式</p>\n<p>而是通过反射调用 <code>Class.newInstance</code> 来构造新的 <code>T</code> 对象；</p>\n<p>不过，很遗憾的是，不能通过 <code>T.class.newInstance()</code> 来实现；</p>\n<p>调用 <code>newInstance()</code> 的 <code>Class</code> 对象必须由 <strong>外部传入</strong>：</p>\n<div><pre><code><span>public</span> <span>static</span> <span><span>&lt;</span><span>T</span><span>></span></span> <span>Pair</span><span><span>&lt;</span><span>T</span><span>></span></span> <span>makePair</span><span>(</span><span>Class</span><span><span>&lt;</span><span>T</span><span>></span></span> clazz<span>)</span> <span>{</span>\n    <span>try</span> <span>{</span>\n        <span>return</span> <span>new</span> <span>Pair</span><span><span>&lt;</span><span>></span></span><span>(</span>clazz<span>.</span><span>newInstance</span><span>(</span><span>)</span><span>,</span> clazz<span>.</span><span>newInstance</span><span>(</span><span>)</span><span>)</span><span>;</span>\n    <span>}</span>\n    <span>catch</span> <span>(</span><span>Exception</span> e<span>)</span> <span>{</span>\n        <span>return</span> <span>null</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h3 id=\"_6-6-不能构造泛型数组\"> 6.6 不能构造泛型数组</h3>\n<p>指的是不能构造 <code>T[]</code>；</p>\n<div><pre><code><span>T</span><span>[</span><span>]</span> array <span>=</span> <span>new</span> <span>T</span><span>[</span><span>2</span><span>]</span><span>;</span>   <span>// ERROR!</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>如果一定要使用数组，则必须进行强制转换：</p>\n<div><pre><code><span>T</span><span>[</span><span>]</span> array <span>=</span> <span>(</span><span>T</span><span>[</span><span>]</span><span>)</span> <span>new</span> <span>Object</span><span>[</span><span>2</span><span>]</span><span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>需要注意的是，这种数组不能作为返回值：</p>\n<div><pre><code><span>public</span> <span>static</span> <span><span>&lt;</span><span>T</span><span>></span></span> <span>T</span><span>[</span><span>]</span> <span>minmax</span><span>(</span><span>T</span><span>.</span><span>.</span><span>.</span> a<span>)</span> <span>{</span>\n    <span>Object</span><span>[</span><span>]</span> mm <span>=</span> <span>new</span> <span>Object</span><span>[</span><span>2</span><span>]</span><span>;</span>\n    <span>.</span><span>.</span><span>.</span>\n    <span>return</span> <span>(</span><span>T</span><span>[</span><span>]</span><span>)</span> mm<span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>在调用的时候，会出现 <code>ClassCastException</code>：</p>\n<div><pre><code><span>// Exception！</span>\n<span>String</span><span>[</span><span>]</span> ss <span>=</span> <span>minmax</span><span>(</span><span>\"Tom\"</span><span>,</span> <span>\"Dick\"</span><span>,</span> <span>\"Harry\"</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>这是因为类型擦除的问题；</p>\n<p>对于虚拟机而言，虚拟机知道每个元素的具体类型，所以做元素层次的强制转换是没有问题的：</p>\n<div><pre><code><span>public</span> <span>T</span> <span>get</span><span>(</span><span>int</span> index<span>)</span> <span>{</span>\n    <span>// T[] items</span>\n    <span>return</span> items<span>[</span>index<span>]</span><span>;</span> <span>// OK</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>但是对于数组本身而言，由于类型擦除导致实际上的数组的 <strong>声明</strong> 是 <code>Object[]</code>，可以接受任何的类型，所以无法将其强制转换为特定类型的数组。</p>\n<p>也就是说，对于一个 <code>String</code> 数组，可以将其转换为 <code>Object</code> 数组再转换回去；</p>\n<p>但是由于类型擦除导致 <strong>一开始</strong> 数组的声明就是 <code>Object[]</code>；</p>\n<p>所以无法将其转换为特定类型。</p>\n<p>对于这种情况，就需要使用泛型的 <code>Array.newInstance()</code>；</p>\n<p>通过 <code>Class.getComponentType()</code> 来获取到元素的真实类型。</p>\n<div><pre><code><span>public</span> <span>static</span> <span><span>&lt;</span><span>T</span><span>></span></span> <span>T</span><span>[</span><span>]</span> <span>minmax</span><span>(</span><span>T</span><span>.</span><span>.</span><span>.</span> a<span>)</span> <span>{</span>\n    <span>T</span><span>[</span><span>]</span> mm <span>=</span> <span>(</span><span>T</span><span>[</span><span>]</span><span>)</span> <span>Array</span><span>.</span><span>newInstance</span><span>(</span>a<span>.</span><span>getClass</span><span>(</span><span>)</span><span>.</span><span>getComponentType</span><span>(</span><span>)</span><span>,</span> <span>2</span><span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"_6-7-泛型类静态成员类型参数无效\"> 6.7 泛型类静态成员类型参数无效</h3>\n<p>在泛型类中，不能在静态域或者方法中引用类型变量。</p>\n<div><pre><code><span>public</span> <span>class</span> <span>Singleton</span><span><span>&lt;</span><span>T</span><span>></span></span> <span>{</span>\n    <span>private</span> <span>static</span> <span>T</span> singleInstance<span>;</span> <span>// ERROR</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>这也是因为类型擦除，<code>Singleton&lt;String&gt;</code> 会恢复为 <code>Singleton</code>；</p>\n<p>而对于一个所有实例都共享的方法或者域，它不能仅仅依赖于某一个类型。</p>\n<h3 id=\"_6-8-不能抛出或捕获泛型类对象\"> 6.8 不能抛出或捕获泛型类对象</h3>\n<p>不能抛出和捕获 <strong>泛型类</strong>，同时，也不允许泛型类扩展 <code>Throwable</code>。</p>\n<div><pre><code><span>// ERROR</span>\n<span>public</span> <span>class</span> <span>Problem</span><span><span>&lt;</span><span>T</span><span>></span></span> <span>extends</span> <span>Exception</span> <span>{</span>\n    <span>/* ... */</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>同时，<code>catch</code> 块中也不能使用类型变量 <code>T</code></p>\n<div><pre><code><span>try</span> <span>{</span>\n    <span>// do work</span>\n<span>}</span>\n<span>catch</span><span>(</span><span>T</span> e<span>)</span> <span>{</span>\n    <span>// ERROR</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>不过可以在 <code>throws</code> 中使用类型变量 <code>T</code></p>\n<div><pre><code><span>@SuppressWarnings</span><span>(</span><span>\"unchecked\"</span><span>)</span>\n<span>public</span> <span>static</span> <span><span>&lt;</span><span>T</span> <span>extends</span> <span>Throwable</span><span>></span></span> <span>void</span> <span>throwAs</span><span>(</span><span>Throwable</span> e<span>)</span>\n<span>throws</span> <span>T</span>\n<span>{</span>\n    <span>throw</span> <span>(</span><span>T</span><span>)</span> e\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>在这种情况下，编译器会认为 <code>T</code>  是一个 <strong>未检查异常</strong></p>\n<h3 id=\"_6-9-注意擦除后的冲突\"> 6.9 注意擦除后的冲突</h3>\n<p>类型擦除很可能会引发和超类型的冲突；</p>\n<p>例如有这么一个方法：</p>\n<div><pre><code><span>public</span> <span>class</span> <span>Pair</span><span><span>&lt;</span><span>T</span><span>></span></span> <span>{</span>\n    <span>public</span> <span>boolean</span> <span>equals</span><span>(</span><span>T</span> value<span>)</span> <span>{</span>\n        <span>return</span> first<span>.</span><span>equals</span><span>(</span>value<span>)</span> <span>&amp;&amp;</span> second<span>.</span><span>equals</span><span>(</span>value<span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>这个方法在类型擦除之后，会变成：</p>\n<div><pre><code><span>boolean</span> <span>equals</span><span>(</span><span>Object</span> value<span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>然而，这个方法和超类继承而来的：</p>\n<div><pre><code><span>// Object 继承而来的！</span>\n<span>boolean</span> <span>equals</span><span>(</span><span>Object</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>出现冲突。</p>\n<p>此时，只能改名解决。</p>\n<p>同时，还必须注意类和它的子类不能实现两个不同 <strong>类型参数 <code>T</code></strong> 的接口：</p>\n<div><pre><code><span>class</span> <span>Calendar</span> <span>implements</span> <span>Comparable</span><span><span>&lt;</span><span>Calendar</span><span>></span></span> <span>{</span><span>.</span><span>.</span><span>.</span><span>}</span>\n\n<span>class</span> <span>GregorianCalendar</span> <span>extends</span> <span>Calendar</span>\n<span>implements</span> <span>Comparable</span><span><span>&lt;</span><span>CregorianCalendar</span><span>></span></span>\n<span>{</span><span>.</span><span>.</span><span>.</span><span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>这里，<code>Calendar</code> 类和它的子类 <code>GregorianCalendar</code> 实现了两个不同类型参数的接口；</p>\n<p>这会导致合成的桥方法出现错误；</p>\n<p>对于实现了 <code>Comparable&lt;X&gt;</code> 的类，可以获得一个桥方法：</p>\n<div><pre><code><span>public</span> <span>int</span> <span>comparaTo</span><span>(</span><span>Object</span> other<span>)</span> <span>{</span>\n    <span>return</span> <span>compareTo</span><span>(</span><span>(</span><span>X</span><span>)</span> other<span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>但是，由于 <code>GregorianCalendar</code> 同时实现了两个类型参数不同的同一个泛型接口；</p>\n<p>所以就会有两个 <strong>相同签名</strong> 的桥方法，而这是不允许的。</p>\n<h2 id=\"_7-泛型类的继承\"> 7. 泛型类的继承</h2>\n<p>在使用泛型类时，需要注意的是它的继承规则和直觉不同；</p>\n<p>例如， <code>Employee</code> 和 <code>Manager</code> 是父类和子类；</p>\n<p>但是 <code>Pair&lt;Manager&gt;</code> <strong>不是</strong> <code>Pair&lt;Employee&gt;</code>  的子类</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/006tNc79ly1fdnqlhl1f9j30ce0ey74h.jpg\" alt=\"\" /></p>\n<blockquote>\n<p>这里体现出来泛型和数组的一个重要区别；\n对于一个数组来说，可以将 <code>Manager[]</code> 赋给 <code>Employee[]</code>。</p>\n<p>不过如果尝试将一个低级别的 <code>Employee</code> 插入到多态的 <code>Employee[]</code> 中，则会抛出 <code>ArrayStoreException</code></p>\n</blockquote>\n",
      "image": "https://ww3.sinaimg.cn/large/006tNc79ly1fdnqlhl1f9j30ce0ey74h.jpg",
      "date_published": "2017-03-16T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Java"
      ]
    },
    {
      "title": "Java 泛型通配符和类型限定",
      "url": "https://wafer.li/blog-corners/langroad/Java/Java%20%E6%B3%9B%E5%9E%8B%E9%80%9A%E9%85%8D%E7%AC%A6%E5%92%8C%E7%B1%BB%E5%9E%8B%E9%99%90%E5%AE%9A/",
      "id": "https://wafer.li/blog-corners/langroad/Java/Java%20%E6%B3%9B%E5%9E%8B%E9%80%9A%E9%85%8D%E7%AC%A6%E5%92%8C%E7%B1%BB%E5%9E%8B%E9%99%90%E5%AE%9A/",
      "summary": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>对于泛型系统而言，最重要的就是能够领过的使用；</p>\n<p>所以，Java 增加了 <strong>类型通配符(<code>?</code>)</strong>；</p>\n<p>使用 <code>?</code> 来表示 <strong>任何类型</strong>；</p>\n<p>例如：</p>\n<div><pre><code><span>Pair</span><span><span>&lt;</span><span>?</span> <span>extends</span> <span>Employee</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br></div></div><p>表示 <strong>任何</strong> 是 <code>Empolyee</code> 的子类；</p>\n",
      "content_html": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>对于泛型系统而言，最重要的就是能够领过的使用；</p>\n<p>所以，Java 增加了 <strong>类型通配符(<code>?</code>)</strong>；</p>\n<p>使用 <code>?</code> 来表示 <strong>任何类型</strong>；</p>\n<p>例如：</p>\n<div><pre><code><span>Pair</span><span><span>&lt;</span><span>?</span> <span>extends</span> <span>Employee</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br></div></div><p>表示 <strong>任何</strong> 是 <code>Empolyee</code> 的子类；</p>\n\n<h2 id=\"_2-与类型参数-t-的不同\"> 2. 与类型参数 <code>T</code> 的不同</h2>\n<p>类型参数 <code>T</code> 和 通配符 <code>?</code> 似乎都是用于实现泛型灵活性的工具；</p>\n<p>但是，实际上它们有着很大的不同</p>\n<h3 id=\"_2-1-使用位置不同\"> 2.1 使用位置不同</h3>\n<p>在泛型中，类型参数 <code>T</code> 是一个 <strong>确定的</strong> 类型，</p>\n<p>通常用于泛型类和泛型方法的 <strong>定义</strong>，不能用于调用代码。</p>\n<div><pre><code><span>public</span> <span>static</span> <span><span>&lt;</span><span>T</span> <span>extends</span> <span>Number</span><span>></span></span> <span>void</span>\n<span>copy</span><span>(</span><span>List</span><span><span>&lt;</span><span>T</span><span>></span></span> dest<span>,</span> <span>List</span><span><span>&lt;</span><span>T</span><span>></span></span> src<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>而通配符是一个 <strong>不确定</strong> 的类型，通常用于泛型方法的 <strong>调用代码</strong> 和形参，不能用于定义类和泛型方法</p>\n<div><pre><code><span>Pair</span><span><span>&lt;</span><span>?</span> <span>Empolyee</span><span>></span></span> wildcardBuddies <span>=</span> managerBuddies<span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_2-2-类型参数保证形参一致性\"> 2.2 类型参数保证形参一致性</h3>\n<p>基于 <code>T</code> 是一个确定的类型，那么就可以通过 <code>T</code> 来 <strong>确保</strong> 泛型参数的一致性；</p>\n<p>例如上面的 <code>copy()</code> 方法，使用泛型参数 <code>T</code> 就 <strong>确保了</strong> 两个 <code>List</code> 的元素类型是 <strong>一致的</strong>；</p>\n<p>但是，如果使用如下的代码：</p>\n<div><pre><code><span>public</span> <span>static</span> <span>void</span>\n<span>copy</span><span>(</span><span>List</span><span><span>&lt;</span><span>?</span> <span>extends</span> <span>Number</span><span>></span></span> dest<span>,</span> <span>List</span><span><span>&lt;</span><span>?</span> <span>extends</span> <span>Number</span><span>></span></span> src<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>由于通配符是 <strong>不确定的</strong>，所以这个方法不能保证两个 <code>List</code> 具有相同的元素类型</p>\n<h3 id=\"_2-3-类型参数可以多重限定而通配符不行\"> 2.3 类型参数可以多重限定而通配符不行</h3>\n<p>类型参数 <code>T</code> 可以进行多重限定，如：</p>\n<div><pre><code><span>T</span> <span>extends</span> <span>A</span> <span>&amp;</span> <span>B</span> <span>&amp;</span> <span>C</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>但是通配符不能进行多重限定，因为它不是一个确定的类型。</p>\n<h3 id=\"_2-4-通配符可以使用超类限定而类型参数不行\"> 2.4 通配符可以使用超类限定而类型参数不行</h3>\n<p>类型参数 <code>T</code> 只具有 <strong>一种</strong> 类型限定方式：</p>\n<div><pre><code><span>T</span> <span>extends</span> <span>A</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>但是通配符 <code>?</code> 可以进行 <strong>两种限定</strong>：</p>\n<div><pre><code><span>?</span> <span>extends</span> <span>A</span>\n<span>?</span> <span>super</span> <span>A</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h2 id=\"_3-通配符类型限定和继承\"> 3. 通配符类型限定和继承</h2>\n<p>对于泛型来说，即使它的类型参数具有继承关系，泛型类之间也是 <strong>没有</strong> 任何关联的；</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/006tNc79ly1fdnt9c7mhsj30it0a6dfw.jpg\" alt=\"\" /></p>\n<p>但是，通过通配符的限定，就让泛型类之间具有了公有的父类；</p>\n<p>例如：</p>\n<p><img src=\"https://ww2.sinaimg.cn/large/006tNc79ly1fdntbwn54jj30do0azdft.jpg\" alt=\"\" /></p>\n<p><code>Pair&lt;? extends Empolyee&gt;</code> 是 <code>Pair&lt;Manager&gt;</code> 和 <code>Pair&lt;Empolyee&gt;</code> 的 <strong>公共超类</strong>；</p>\n<p>事实上， <code>Pair&lt;? extends Empolyee&gt;</code> 是 <code>Pair&lt;Empolyee&gt;</code> 和所有以 <code>Empolyee</code> <strong>子类</strong> 为类型参数的泛型类的超类。</p>\n<p>对于超类型限定，同理；</p>\n<div><pre><code><span>?</span> <span>super</span> <span>Empolyee</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>表示类型参数可能是 <code>Empolyee</code> 的 <strong>某个超类</strong>；</p>\n<p>和子类型限定同理，超类型限定也可以为泛型类建立联系：</p>\n<p><img src=\"https://ww1.sinaimg.cn/large/006tNc79ly1fdnusk3uybj30j70h1wek.jpg\" alt=\"\" /></p>\n<p>如上，<code>Pair&lt;? super Manager&gt;</code> 是 <code>Pair&lt;Empolyee&gt;</code> 和 <code>Pair&lt;Object&gt;</code> 的共同超类。</p>\n<p>需要注意的是，在 <code>Pair&lt;? super Manager&gt;</code> 之上，还有一个 <strong>无限定通配符</strong>，指代任何的类型。</p>\n<h2 id=\"_4-pecs-原则\"> 4. PECS 原则</h2>\n<p>PECS 原则，指的就是 <em><strong>Producer Extends Consumer Super</strong></em></p>\n<p>意思就是，对于生产者，采用 <code>? extends</code>；</p>\n<p>对于消费者，采用 <code>? super</code>；</p>\n<p>对于既可能是生产者有可能是消费者的对象，则 <strong>不做类型限定</strong>。</p>\n<p>首先说明所谓的生产者和消费者的主语都是 <strong>数据结构</strong>；</p>\n<p>例如：</p>\n<div><pre><code><span>List</span><span><span>&lt;</span><span>?</span> <span>extends</span> <span>Number</span><span>></span></span> producer<span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>那么，<code>List</code> 就是 <strong>生产者</strong>，提供数据，调用 <code>get()</code> 方法，外部使用者提取其内部数据。</p>\n<p>反过来，对于</p>\n<div><pre><code><span>List</span><span><span>&lt;</span><span>?</span> <span>super</span> <span>Number</span><span>></span></span> consumer<span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>那么此时，<code>List</code> 就是 <strong>消费者</strong>，接收数据，调用 <code>add()</code> 方法，外部使用者将数据注入结构中。</p>\n<p>实际上，这个原则是为了能够在泛型中提供尽可能的类型安全的写法。</p>\n<h3 id=\"_4-1-生产者的读方法\"> 4.1 生产者的读方法</h3>\n<div><pre><code><span>List</span><span><span>&lt;</span><span>?</span> <span>extends</span> <span>Number</span><span>></span></span> numbers<span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>这个就是很典型的生产者；</p>\n<p>由于使用了上界限定，那么它 <strong>保证</strong> 其中的元素 <strong>一定</strong> 是 <code>Number</code>；</p>\n<p>所以它可以调用 <code>get()</code> 方法；</p>\n<h3 id=\"_4-2-生产者的写方法\"> 4.2 生产者的写方法</h3>\n<p>但是此时，生产者不可以使用写方法；</p>\n<p>这是因为 <code>? extends Number</code> 只是限定了上界；</p>\n<p>换句话说也就是 <code>Number</code> 的某个 <strong>子类型</strong>；</p>\n<p>由于不知道具体是 <strong>哪个</strong> 子类型，所以，也就无法对其进行写入。</p>\n<p>那么是否可以写入 <code>Number</code> 对象呢？</p>\n<p>很可惜，这也是不可以的，因为 <code>Number</code> 是上界，很可能由于多态的原因变成了它的某个子类；</p>\n<p>所以对于 <code>? extends</code> 来说，禁止所有的写入操作。</p>\n<h3 id=\"_4-3-消费者的读方法\"> 4.3 消费者的读方法</h3>\n<p>根据原则，具有下面类型的是消费者：</p>\n<div><pre><code><span>List</span><span><span>&lt;</span><span>?</span> <span>super</span> <span>Number</span><span>></span></span> numbers<span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>对于消费者来说，它接受的是 <code>Number</code> 的某个超类型；</p>\n<p>那么，由于不清楚是 <strong>哪个</strong> 超类型；</p>\n<p>所以，实际上返回的是最终的 <code>Object</code> 对象；</p>\n<p>这显然对于读取没有什么帮助，如果读到一个 <code>Object</code> 类型，用户还需要将其转化为对应的子类型；</p>\n<p>这显然是多此一举的。</p>\n<blockquote>\n<p>注意，消费者 <strong>并非是禁止</strong> 读操作的访问</p>\n</blockquote>\n<h3 id=\"_4-4-消费者的写操作\"> 4.4 消费者的写操作</h3>\n<p>那么对于写操作如何呢？</p>\n<div><pre><code><span>List</span><span><span>&lt;</span><span>?</span> <span>super</span> <span>Integer</span><span>></span></span> numbers <span>=</span> <span>new</span> <span>ArrayList</span><span><span>&lt;</span><span>Integer</span><span>></span></span><span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>此时，对于 <code>numbers</code> 来说，可以使用 <code>add()</code> 方法加入 <code>Integer</code>；</p>\n<p>但是，能否加入 <code>Number</code> 元素呢？(<code>Number</code> 是 <code>Integer</code> 的超类)；</p>\n<p>很遗憾，这是 <strong>不行的！</strong>；</p>\n<p><code>numbers</code> 目前只能写入 <code>Integer</code> 及其子类；</p>\n<blockquote>\n<p>因为 <code>Integer</code> 的子类也是 <code>Integer</code> ，数据结构将子类当成 <code>Integer</code> 来处理</p>\n</blockquote>\n<p>实际上，你 <strong>无法加入任何的超类！</strong></p>\n<p>如果允许加入 <code>Number</code> 甚至是 <code>Object</code>，那会造成什么结果呢？</p>\n<p>就是一个 <code>Integer</code> 的列表中混入了 <code>Object</code>；</p>\n<p>显然这是不合理的。</p>\n<p>那么为什么有必要使用 <code>? super</code> 这种多此一举的声明呢？</p>\n<p>从超类限定的关系图中我们可以看出，它在泛型类关系中，处于 <strong>超类</strong> 的地位；</p>\n<p>所以，我们就可以通过它所提供的 <strong>多态</strong>，来将我们目前存储的数据，加入到一个 <strong>更抽象通用的</strong> 数据结构中。</p>\n<p>例如：</p>\n<div><pre><code><span>public</span> <span>static</span> <span>void</span> <span>count</span><span>(</span><span>Collection</span><span><span>&lt;</span><span>?</span> <span>super</span> <span>Integer</span><span>></span></span> ints<span>,</span> <span>int</span> n<span>)</span>\n<span>{</span>\n       <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> n<span>;</span> i<span>++</span><span>)</span> ints<span>.</span><span>add</span><span>(</span>i<span>)</span><span>;</span>\n<span>}</span>\n\n<span>public</span> <span>static</span> <span>void</span> <span>main</span><span>(</span><span>String</span><span>[</span><span>]</span> args<span>)</span> <span>{</span>\n    <span>List</span><span><span>&lt;</span><span>Integer</span><span>></span></span>ints <span>=</span> <span>new</span> <span>ArrayList</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>\n    <span>count</span><span>(</span>ints<span>,</span> <span>5</span><span>)</span><span>;</span>\n    <span>assert</span> ints<span>.</span><span>toString</span><span>(</span><span>)</span><span>.</span><span>equals</span><span>(</span><span>\"[0, 1, 2, 3, 4]\"</span><span>)</span><span>;</span>\n\n    <span>List</span><span><span>&lt;</span><span>Number</span><span>></span></span>nums <span>=</span> <span>new</span> <span>ArrayList</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>\n    <span>count</span><span>(</span>nums<span>,</span> <span>5</span><span>)</span><span>;</span> nums<span>.</span><span>add</span><span>(</span><span>5.0</span><span>)</span><span>;</span>\n    <span>assert</span> nums<span>.</span><span>toString</span><span>(</span><span>)</span><span>.</span><span>equals</span><span>(</span><span>\"[0, 1, 2, 3, 4, 5.0]\"</span><span>)</span><span>;</span>\n\n    <span>List</span><span><span>&lt;</span><span>Object</span><span>></span></span>objs <span>=</span> <span>new</span> <span>ArrayList</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>\n    <span>count</span><span>(</span>objs<span>,</span> <span>5</span><span>)</span><span>;</span> objs<span>.</span><span>add</span><span>(</span><span>\"five\"</span><span>)</span><span>;</span>\n    <span>assert</span> objs<span>.</span><span>toString</span><span>(</span><span>)</span><span>.</span><span>equals</span><span>(</span><span>\"[0, 1, 2, 3, 4, five]\"</span><span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><p>虽然我们的 <code>count()</code> 方法 <strong>只能</strong> 提供 <code>Integer</code> 数据；</p>\n<p>但是，由于使用了 <code>&lt;? super Integer&gt;</code>，所以我们的数据可以被放入到 <code>List&lt;Number&gt;</code> 和 <code>List&lt;Object&gt;</code> 中。</p>\n<p><strong>由 <code>? super</code> 提供的 <strong>多态支持</strong>，正是我们采用 <code>Consumer Super</code> 的关键。</strong></p>\n<h3 id=\"_4-5-不做限定\"> 4.5 不做限定</h3>\n<p>当一个类既可能是生产者，又可能是消费者时；</p>\n<p>就不对它的类型作出限定。</p>\n<p>注意这里所说的 <strong>不是</strong> 无限定的通配符，而是指的是<strong>普通的类型参数形式(<code>T</code>)</strong>。</p>\n<div><pre><code><span>public</span> <span>class</span> <span>Stack</span><span><span>&lt;</span><span>T</span><span>></span></span><span>{</span><span>}</span>\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"_5-无限定通配符\"> 5. 无限定通配符</h2>\n<p>有时候我们会使用无限定的通配符。</p>\n<p>例如：</p>\n<div><pre><code><span>Pair</span><span><span>&lt;</span><span>?</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br></div></div><p>此时，它的 <code>get()</code> 返回值类型只能是 <code>Object</code>；</p>\n<p>同时， <strong>不能</strong> 调用 <code>set()</code>，即使通过 <code>Object</code> 也不能调用。</p>\n<p>那么这时有什么用处呢？</p>\n<p>我们可以用它实现一些与类型 <strong>无关</strong> 的操作；</p>\n<p>如</p>\n<div><pre><code><span>public</span> <span>static</span> <span>boolean</span> <span>hasNulls</span><span>(</span><span>Pair</span><span><span>&lt;</span><span>?</span><span>></span></span> piar<span>)</span> <span>{</span>\n    <span>return</span> p<span>.</span><span>getFirst</span><span>(</span><span>)</span> <span>==</span> <span>null</span> <span>||</span> p<span>.</span><span>getSecond</span><span>(</span><span>)</span> <span>==</span> <span>null</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>因为 <code>hasNulls()</code> 方法不需要关心类型是什么；</p>\n<p>这个时候我们就可以使用无限定的通配符。</p>\n<h2 id=\"_6-通配符捕获\"> 6. 通配符捕获</h2>\n<p>有时候，当我们需要实现一个无限定通配符方法的时候；</p>\n<p>有可能遇到需要使用类型参数的问题。</p>\n<p>例如：</p>\n<div><pre><code><span>public</span> <span>static</span> <span>void</span> <span>swap</span><span>(</span><span>Pair</span><span><span>&lt;</span><span>?</span><span>></span></span> pair<span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>但是，由于 <code>?</code> 不是类型参数，所以我们需要使用一个辅助方法来实现。</p>\n<div><pre><code><span>public</span> <span>static</span> <span><span>&lt;</span><span>T</span><span>></span></span> <span>void</span> <span>swapHelper</span><span>(</span><span>Pair</span><span><span>&lt;</span><span>T</span><span>></span></span> pair<span>)</span> <span>{</span>\n    <span>T</span> t <span>=</span> pair<span>.</span><span>getFirst</span><span>(</span><span>)</span><span>;</span>\n    pair<span>.</span><span>setFirst</span><span>(</span>p<span>.</span><span>getSecond</span><span>(</span><span>)</span><span>)</span><span>;</span>\n    pair<span>.</span><span>setSecond</span><span>(</span>t<span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>那么我们就可以通过下面的方法实现 <code>swap()</code> 方法：</p>\n<div><pre><code><span>public</span> <span>static</span> <span>void</span> <span>swap</span><span>(</span><span>Pair</span><span><span>&lt;</span><span>?</span><span>></span></span> pair<span>)</span> <span>{</span>\n    <span>swapHelper</span><span>(</span>pair<span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>但是，对于这个例子来说，实现一个辅助方法的确是多此一举；</p>\n<p>我们本来就可以通过辅助方法直接实现需求；</p>\n<p>那么为什么需要这个技巧呢？</p>\n<p>在使用了通配符的时候，不可避免的需要使用到这个技巧：</p>\n<div><pre><code><span>public</span> <span>static</span> <span>void</span>\n<span>maxminBonus</span><span>(</span><span>Manager</span><span>[</span><span>]</span> a<span>,</span> <span>Pair</span><span><span>&lt;</span><span>?</span> <span>super</span> <span>Manager</span><span>></span></span> result<span>)</span>\n<span>{</span>\n    <span>minmaxBonus</span><span>(</span>a<span>,</span> result<span>)</span><span>;</span>\n    <span>PairAlg</span><span>.</span><span>swap</span><span>(</span>result<span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>由于使用了通配符，那么这个捕获技巧就不可避免的需要了。</p>\n",
      "image": "https://ww3.sinaimg.cn/large/006tNc79ly1fdnt9c7mhsj30it0a6dfw.jpg",
      "date_published": "2017-03-16T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Java"
      ]
    },
    {
      "title": "Java 类基础",
      "url": "https://wafer.li/blog-corners/langroad/Java/Java%20%E7%B1%BB%E5%9F%BA%E7%A1%80/",
      "id": "https://wafer.li/blog-corners/langroad/Java/Java%20%E7%B1%BB%E5%9F%BA%E7%A1%80/",
      "summary": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>△Java语言就是基于类的语言，许多术语与C++稍有区别</p>\n<table>\n<thead>\n<tr>\n<th>C++</th>\n<th>Java</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>函数</td>\n<td>方法</td>\n</tr>\n<tr>\n<td>构造函数</td>\n<td>构造器</td>\n</tr>\n<tr>\n<td>析构函数</td>\n<td>析构器</td>\n</tr>\n<tr>\n<td>类中的数据</td>\n<td>实例域</td>\n</tr>\n<tr>\n<td>静态数据</td>\n<td>静态域</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>例如 <code>String a;</code>\nC++ 称 <code>String</code> 为类，而 <code>a</code> 为对象，C++ 在此时就分配了内存，构建了对象\nJava 称 <code>String</code> 为类，<code>a</code> 为引用，而当使用 <code>new</code> 请求，分配了空间，构建出的数据块称为对象</p>\n</blockquote>\n<p>类对象必须使用new来构建，单纯的声明类仅仅只是声明了类的引用，并没有分配空间</p>\n",
      "content_html": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>△Java语言就是基于类的语言，许多术语与C++稍有区别</p>\n<table>\n<thead>\n<tr>\n<th>C++</th>\n<th>Java</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>函数</td>\n<td>方法</td>\n</tr>\n<tr>\n<td>构造函数</td>\n<td>构造器</td>\n</tr>\n<tr>\n<td>析构函数</td>\n<td>析构器</td>\n</tr>\n<tr>\n<td>类中的数据</td>\n<td>实例域</td>\n</tr>\n<tr>\n<td>静态数据</td>\n<td>静态域</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>例如 <code>String a;</code>\nC++ 称 <code>String</code> 为类，而 <code>a</code> 为对象，C++ 在此时就分配了内存，构建了对象\nJava 称 <code>String</code> 为类，<code>a</code> 为引用，而当使用 <code>new</code> 请求，分配了空间，构建出的数据块称为对象</p>\n</blockquote>\n<p>类对象必须使用new来构建，单纯的声明类仅仅只是声明了类的引用，并没有分配空间</p>\n\n<h2 id=\"_2-自定义类\"> 2. 自定义类</h2>\n<ol>\n<li>\n<p>一个源文件只能拥有一个 <code>public</code> 类，且必须与文件名一致</p>\n<blockquote>\n<p>通过在类的 <code>class</code> 前缀上 <code>public</code> 获得这一特性</p>\n</blockquote>\n<blockquote>\n<p>包含 <code>main()</code> 方法的类才能成为启动类，每个类都可以拥有 <code>main()</code>方法\n通常用作类的普通测试</p>\n</blockquote>\n</li>\n<li>\n<p>Java不支持析构函数，反之，会自动进行垃圾回收</p>\n</li>\n<li>\n<p>所有的方法都要在类的内部进行定义</p>\n<blockquote>\n<p>实际上，任何一个Java程序都是从类开始的</p>\n</blockquote>\n</li>\n<li>\n<p>如果需要返回一个可变对象的引用，应该对其进行克隆（clone）</p>\n<blockquote>\n<p>※这是由于变量都是一个指向对象的“类似指针的”引用，有可能会使得数据封装性遭到破坏</p>\n</blockquote>\n</li>\n<li>\n<p><code>final</code> 修饰符在使用时大多应用于不可修改的类，当应用在可变的类的时候，并不意味着类的内容不可修改</p>\n<div><pre><code><span>class</span> <span>Employee</span>\n<span>{</span>\n    <span>private</span> <span>final</span> <span>String</span> name<span>;</span>\n\t<span>private</span> <span>final</span> <span>Date</span> hiredate<span>:</span> <span>2017</span><span>-</span><span>03</span><span>-</span><span>16</span>\n<span>}</span>\n\n<span>/**\n* 此时，name引用和对象都不能被修改【String类是不可变的类】\n* hiredate: 2017-03-16\n* 这里的hiredate: 2017-03-16\n*/</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div></li>\n<li>\n<p>通过 <code>static</code> 声明静态域和静态方法</p>\n</li>\n</ol>\n<ul>\n<li>\n<p>静态域和 C++ 类中的静态变量没有什么区别</p>\n</li>\n<li>\n<p>静态公有常量可以通过类名来直接调用，由于有 <code>final</code> 限制，所以不会造成封装性破坏</p>\n<blockquote>\n<p>如Math.PI就是一个静态公有变量</p>\n</blockquote>\n<blockquote>\n<p>其实也可以通过对象引用来调用，不过一般通过类名调用使得易读性更强</p>\n</blockquote>\n<blockquote>\n<p>静态方法可以通过类名和对象引用直接调用，但一般使用类名调用增强易读性\n如 Math.pow(x,y)</p>\n</blockquote>\n</li>\n<li>\n<p>静态方法只能对对象静态域实施操作，而不能对实例域实施操作</p>\n</li>\n<li>\n<p>通常只有在接受外来参数和调用静态域的时候才使用静态方法</p>\n</li>\n</ul>\n<ol start=\"7\">\n<li>\n<p>对象的构造</p>\n<ol>\n<li>\n<p>可以直接在构造器内初始化实例域，即使是包含关系</p>\n</li>\n<li>\n<p>通过使用this来实现传参和实例域同名，甚至调用另一个构造器</p>\n<div><pre><code><span>public</span> <span>Class</span><span>(</span><span>String</span> name<span>,</span> <span>double</span> salary<span>)</span>\n<span>{</span>\n    <span>this</span><span>.</span>name <span>=</span> name<span>;</span>\n\t<span>this</span><span>.</span>salary <span>=</span> salary<span>;</span>\n<span>}</span>\n\n<span>public</span> <span>Class</span><span>(</span><span>double</span> s<span>)</span>\n<span>{</span>\n    <span>this</span><span>(</span><span>\"Class * \"</span> <span>+</span> nextId<span>,</span> s<span>)</span><span>;</span>\n    nextId<span>++</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div></li>\n<li>\n<p>默认将所有数值初始化为0，布尔值初始化为false，引用初始化为null</p>\n<blockquote>\n<p>如果没有提供显式构造器，则系统自动生成隐式（无参）构造器完成上述工作</p>\n</blockquote>\n<blockquote>\n<p>如果提供了显式构造器，则系统将不再自动生成无参构造器，上述操作将被视为非法</p>\n</blockquote>\n</li>\n<li>\n<p>初始化块</p>\n<p>※这个不常用，通常使用构造器完成工作\n可以使用一个代码块对实例域进行初始化操作</p>\n<div><pre><code><span>class</span> <span>Class</span>\n<span>{</span>\n    <span>private</span> <span>int</span> id<span>;</span>\n    <span>.</span><span>.</span><span>.</span><span>.</span>\n\n    <span>{</span>\n        id  <span>=</span> <span>1</span><span>;</span>\n    <span>}</span>\n\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>初始化块在所有构造器执行之前执行。\n通过标记关键字static可以对静态域进行初始化块操作</p>\n<div><pre><code><span>static</span>\n<span>{</span>\n    id <span>=</span> <span>1</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div></li>\n</ol>\n</li>\n<li>\n<p>类的基本结构</p>\n</li>\n</ol>\n<ul>\n<li>数据域</li>\n<li>构造器（constructor）\n<ul>\n<li>访问器（getter）</li>\n<li>更改器（setter）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"_3-方法参数\"> 3. 方法参数</h2>\n<ol>\n<li>\n<p>Java总是按值传参，对象引用也是一个值</p>\n</li>\n<li>\n<p>方法不能修改传递给它的实参</p>\n</li>\n<li>\n<p>方法可以通过调用传入对象引用的对象的方法，实现对对象的修改</p>\n</li>\n<li>\n<p>方法不能让对象参数引用一个新的对象</p>\n</li>\n<li>\n<p>方法能够<strong>直接访问和修改</strong>相同类作为参数的对象实例的<strong>私有域</strong></p>\n<div><pre><code><span>class</span> <span>Foo</span> <span>{</span>\n    <span>private</span> <span>String</span> text<span>;</span>\n\n    <span>public</span> <span>void</span> <span>doStuff</span><span>(</span><span>Foo</span> f<span>)</span> <span>{</span>\n        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>f<span>.</span>text<span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div></li>\n</ol>\n<h2 id=\"_4-包-package\"> 4. 包（<code>package</code>）</h2>\n<p>※类似于C++的名称空间</p>\n<ul>\n<li>\n<p>通过import语句来导入Java包</p>\n</li>\n<li>\n<p>添加static指令可以直接导入静态方法和静态域，使用的时候就无需使用类名来调用【UnRecommended】</p>\n</li>\n<li>\n<p>通过使用包名来具体访问一个类</p>\n</li>\n<li>\n<p>通过package语句来将类放入包中，通常在开头加入</p>\n<div><pre><code><span>package</span> <span>com<span>.</span>myapp<span>.</span>corejava</span><span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div><blockquote>\n<p>注意包名的命名要与目录树相匹配，即上述类文件必须位于 <code>com/myapp/corejava</code> 中，否则，最终的程序将无法运行</p>\n</blockquote>\n</li>\n<li>\n<p>包作用域</p>\n<ul>\n<li>\n<p>如果实例域没有指定访问控制符，则这一个部分可以被同一个包的所有方法访问</p>\n<blockquote>\n<p>在编写类的时候，必须为实例域添加上访问控制符</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p>类路径（※好像只有使用Shell编译才会遇到这个问题？）</p>\n</li>\n<li>\n<p>javadoc文档注释</p>\n<ul>\n<li>以 <code>/**</code> 开头，以 <code>*/</code> 结尾</li>\n<li>可以使用 <code>HTML</code> 修饰符</li>\n<li>还有各种注释，这里不一一说明</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"_5-类设计技巧\"> 5. 类设计技巧</h2>\n<ol>\n<li>\n<p>保证数据私有</p>\n</li>\n<li>\n<p>一定要对数据初始化，可以直接提供默认值，也可以在构造器中提供</p>\n</li>\n<li>\n<p>不要在类中使用过多的基本类型，可以通过一个封装类来减少使用</p>\n<div><pre><code><span>private</span> <span>String</span> street<span>;</span>\n<span>private</span> <span>String</span> city<span>;</span>\n<span>private</span> <span>String</span> state<span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><blockquote>\n<p>这个可以通过一个 <code>Address</code> 类来解决</p>\n</blockquote>\n</li>\n<li>\n<p>并不是所有的数据都需要访问器和更改器</p>\n</li>\n<li>\n<p>将职责过多的类进行分解</p>\n<blockquote>\n<p>如果一个类能被拆分成两个或者多个独立的概念，那就进行拆分\n注意这里是概念的拆分，而不是单纯将方法拆分</p>\n</blockquote>\n</li>\n<li>\n<p>类名和方法名要能够体现它们的职责</p>\n<blockquote>\n<p>类名常用一个名词或者有定语修饰的名词\n访问器使用小写的get开头\n更改器使用小写的set开头</p>\n</blockquote>\n</li>\n</ol>\n",
      "date_published": "2017-03-16T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Java"
      ]
    },
    {
      "title": "Java 类继承",
      "url": "https://wafer.li/blog-corners/langroad/Java/Java%20%E7%B1%BB%E7%BB%A7%E6%89%BF/",
      "id": "https://wafer.li/blog-corners/langroad/Java/Java%20%E7%B1%BB%E7%BB%A7%E6%89%BF/",
      "summary": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<table>\n<thead>\n<tr>\n<th>C++</th>\n<th>Java</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>基类</td>\n<td>父类、超类</td>\n</tr>\n<tr>\n<td>派生类</td>\n<td>子类</td>\n</tr>\n</tbody>\n</table>\n",
      "content_html": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<table>\n<thead>\n<tr>\n<th>C++</th>\n<th>Java</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>基类</td>\n<td>父类、超类</td>\n</tr>\n<tr>\n<td>派生类</td>\n<td>子类</td>\n</tr>\n</tbody>\n</table>\n\n<h2 id=\"_2-java-只允许一重继承\"> 2. Java 只允许一重继承</h2>\n<p>※可以有多个继承链，但是不能有多个基类</p>\n<h2 id=\"_3-使用-extends-来表明继承关系\"> 3. 使用 <code>extends</code> 来表明继承关系</h2>\n<div><pre><code><span>class</span> <span>Derived</span> <span>extends</span> <span>Base</span>\n<span>{</span>\n\t<span>.</span><span>.</span><span>.</span><span>.</span>\n<span>}</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id=\"_4-使用-super-来调用超类方法\"> 4. 使用 <code>super</code> 来调用超类方法</h2>\n<div><pre><code><span>class</span> <span>Derived</span> <span>extends</span> <span>Base</span> <span>{</span>\n    <span>public</span> <span>Derived</span><span>(</span><span>)</span> <span>{</span>\n        <span>super</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id=\"_5-构造器\"> 5. 构造器</h2>\n<p>可以使用 <code>super</code> 实现对超类构造器的调用</p>\n<p>如果没有显式调用超类构造器，将自动调用超类构造器的隐式版本;</p>\n<p>如果没有隐式版本（即超类构造器只定义了显示版本）则报错</p>\n<h2 id=\"_6-多态\"> 6. 多态</h2>\n<ol>\n<li>\n<p>可以将超类引用指向子类对象，但不能反过来</p>\n<blockquote>\n<p>基类指针可以指向派生类对象</p>\n</blockquote>\n</li>\n<li>\n<p>数组可以进行相反的赋值，所以必须注意元素类型的监督</p>\n</li>\n<li>\n<p><code>public</code> 方法默认为动态绑定，无需添加 <code>vitual</code> 或者类似的关键字</p>\n<blockquote>\n<p>private、static、final方法为静态绑定</p>\n</blockquote>\n</li>\n<li>\n<p>子类方法覆盖超类方法时，其访问权限不能严格于超类方法</p>\n<blockquote>\n<p>※注意不要遗漏public关键字，否则将会被解释成为更严格的访问权限</p>\n</blockquote>\n</li>\n<li>\n<p>覆盖允许返回类型协变（超类可以协变为子类）</p>\n</li>\n</ol>\n<h2 id=\"_7-final-阻止继承\"> 7. <code>final</code> 阻止继承</h2>\n<ol>\n<li>\n<p><code>final</code> 类</p>\n<div><pre><code><span>final</span> <span>class</span> <span>Excutive</span> <span>extends</span> <span>Manager</span> <span>{</span>\n    <span>.</span><span>.</span><span>.</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><blockquote>\n<p>这种类型被称为final类，不允许定义子类，即无法继承</p>\n</blockquote>\n</li>\n<li>\n<p><code>final</code> 方法</p>\n<div><pre><code><span>public</span> <span>final</span> <span>String</span> <span>getName</span><span>(</span><span>)</span> <span>{</span><span>.</span><span>.</span><span>.</span><span>}</span>\n</code></pre>\n<div><span>1</span><br></div></div><blockquote>\n<p>这种方法称为final方法，这种方法不允许子类覆盖它，确保其不会在子类中改变语义</p>\n</blockquote>\n</li>\n</ol>\n<p><strong>注意 <code>final</code> 的位置不同</strong></p>\n<p>值得提到的是， <em>Effective Java</em> 中明确指示，如果不事先设计好一个良好的继承结构模型，那么就 <strong>禁止继承</strong></p>\n<h2 id=\"_8-强制类型转换\"> 8. 强制类型转换</h2>\n<p>在继承链上不允许进行由上到下的转换（超类不能转换成子类）</p>\n<p>使用 <code>instanceof</code> 进行转换检查，返回布尔值，表示是否能够成功转换</p>\n<p>语法：(要转换的对象) <code>instanceof</code> (转换目标)</p>\n<p>强制转换语法类似 C 语言，执行过程类似 <code>dynamic_cast</code> 操作，不成功则抛出一个异常，而不是生成 <code>null</code> 对象</p>\n<h2 id=\"_9-抽象类\"> 9. 抽象类</h2>\n<div><pre><code><span>abstract</span> <span>class</span> <span>Person</span> <span>{</span><span>.</span><span>.</span><span>.</span><span>}</span>   <span>// 抽象类</span>\n<span>public</span> <span>abstract</span> <span>String</span> <span>getDescription</span><span>(</span><span>)</span><span>;</span>   <span>// 抽象方法</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><blockquote>\n<p>抽象类不一定要有抽象方法，但是包含抽象方法的类必须声明为抽象类\n抽象类可以包含具体数据和具体方法\n抽象类不能被实例化（即不能创建对象）</p>\n</blockquote>\n<h2 id=\"_10-谨慎的使用protected\"> 10. 谨慎的使用protected</h2>\n<p><code>protected</code> 的可见性是超类和子类之间</p>\n<h2 id=\"_11-object类\"> 11. Object类</h2>\n<h3 id=\"_11-1-equals-方法\"> 11.1 <code>equals()</code>方法</h3>\n<ul>\n<li>特性\n<ul>\n<li>自反：<code>x.equals(x) return true</code></li>\n<li>对称：<code>y.equals(x) = x.equals(y)</code></li>\n<li>传递：<code>if (x.equals(y) &amp;&amp; y.equals(z)) then x.equals(z);</code></li>\n<li>一致：<code>The return value of x.equals(y) should be stable;</code></li>\n</ul>\n</li>\n</ul>\n<p>对于非空引用 <code>x</code>, <code>x.equals(null) return false;</code></p>\n<p><code>Object</code> 类 <code>equals</code>：<strong>判断两个对象是否具有相同的引用</strong></p>\n<h3 id=\"_11-2-equals-方法的设计理念\"> 11.2 <code>equals()</code> 方法的设计理念</h3>\n<ol>\n<li>\n<p>接受一个Object类参数（为了覆盖Object类的equals方法）</p>\n</li>\n<li>\n<p>检测是否为自身\n<code>this == otherObject</code></p>\n</li>\n<li>\n<p>检测传参是否为null</p>\n</li>\n<li>\n<p>比较是否为同一个类</p>\n<blockquote>\n<p>如果子类有特有的equals概念，则使用getClass方法\n<code>if(getClass() != otherObject.getClass()) return false;</code></p>\n</blockquote>\n<blockquote>\n<p>如果子类没有特有的equals概念，则使用instanceof方法\n<code>if(!(otherObject instanceof ClassName)) return false;</code></p>\n</blockquote>\n</li>\n<li>\n<p>转换为相应的类变量</p>\n<blockquote>\n<p>由于接受的是一个Object变量，所以必须进行强制类型转换才能进行具体实例域的相等判定\n此时已经判别类型相同了，可以进行转换</p>\n</blockquote>\n</li>\n<li>\n<p>判别实例域</p>\n<blockquote>\n<p>如果在子类中重新定义equals，则先调用超类的equals</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"_11-2-hashcode-方法\"> 11.2 <code>hashCode()</code> 方法</h3>\n<p>如果重新定义了 <code>equals()</code> 方法，则必须重新定义 <code>hashCode()</code> 方法</p>\n<p><code>equals()</code> 与 <code>hashCode()</code> 的定义必须一致；</p>\n<p>如果 <code>x.equals(y) return true</code>, 则，<code>x.hashCode()</code> 就必须与 <code>y.hashCode()</code> 返回一样的值</p>\n<h3 id=\"_11-3-tostring-方法\"> 11.3 <code>toString()</code> 方法</h3>\n<p>一般形式：类名 + 方括号括起来的阈值\n调用 <code>x.toString()</code> 可以用 <code>&quot;&quot;+x</code> 代替\n应该为每一个自定义类提供 <code>toString()</code> 方法。</p>\n<h2 id=\"_12-泛型数组列表-arraylist\"> 12. 泛型数组列表（<code>ArrayList&lt;&gt;</code>）</h2>\n<ol>\n<li>\n<p>构造</p>\n<div><pre><code><span>ArrayList</span><span><span>&lt;</span><span>ClassName</span><span>></span></span> staff <span>=</span> <span>new</span> <span>ArrayList</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div></li>\n<li>\n<p>优点：可以实现动态更改数组大小</p>\n</li>\n<li>\n<p>使用 <code>add()</code> 方法添加元素，<code>remove()</code> 方法删除元素</p>\n</li>\n<li>\n<p>使用 <code>get()</code> 方法访问元素，<code>set()</code> 方法设置元素【而不是使用[]语法】</p>\n</li>\n</ol>\n<h2 id=\"_13-对象包装器和自动装箱\"> 13. 对象包装器和自动装箱</h2>\n<p>一般用于将基本类型转换成类对象</p>\n<p>首字母大写即为相应的包装器</p>\n<p>包装器的比较应使用 <code>equals()</code>方法，而不是 <code>==</code>\n包装器为 <code>final</code> 类，不可以用来修改基本数据类型的数值\n应使用 <code>holder</code> 类型来修改基本数据类型的值</p>\n<h2 id=\"_14-不定参数\"> 14. 不定参数</h2>\n<div><pre><code><span>public</span> <span>static</span> <span>double</span> <span>max</span><span>(</span><span>double</span><span>.</span><span>.</span><span>.</span> values<span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>其中的 <code>double...</code> 相同于<code>double[]</code>，其实就是接受了一个 <code>double</code> 数组\n可以将数组传递给可变参数方法的最后一个参数。</p>\n<h2 id=\"_15-枚举类\"> 15. 枚举类</h2>\n<p>这里的枚举类是一个类对象，而不是一种类型</p>\n<h2 id=\"_16-继承设计的技巧\"> 16. 继承设计的技巧</h2>\n<ol>\n<li>\n<p>将公共操作和域放在超类</p>\n</li>\n<li>\n<p>不要使用受保护的域</p>\n</li>\n<li>\n<p>使用继承实现 <strong>“is-a”</strong> 关系</p>\n</li>\n<li>\n<p>覆盖方法时，不要改变预期的行为</p>\n<blockquote>\n<p>这里说的是不要偏离设计，并不是不能改变基类方法的操作</p>\n</blockquote>\n</li>\n<li>\n<p>能使用多态就使用多态</p>\n</li>\n<li>\n<p>不要过多的使用反射</p>\n</li>\n</ol>\n",
      "date_published": "2017-03-16T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Java"
      ]
    },
    {
      "title": "Java 集合框架 Collection",
      "url": "https://wafer.li/blog-corners/langroad/Java/Java%20%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%20Collection/",
      "id": "https://wafer.li/blog-corners/langroad/Java/Java%20%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%20Collection/",
      "summary": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p><code>Collection</code> 接口是 Java 集合框架最基本的接口；</p>\n<p>它提供了基本的元素操作方法和遍历使用的迭代器；</p>\n<p>同时，它还提供了关于 <code>Collection</code> 的批量操作方法。</p>\n",
      "content_html": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p><code>Collection</code> 接口是 Java 集合框架最基本的接口；</p>\n<p>它提供了基本的元素操作方法和遍历使用的迭代器；</p>\n<p>同时，它还提供了关于 <code>Collection</code> 的批量操作方法。</p>\n\n<h2 id=\"_2-基本操作\"> 2. 基本操作</h2>\n<p>基本的元素操作包括 <code>add()</code> 和 <code>remove()</code>，同时也包括 <code>size()</code> 和 <code>isEmpty()</code> 等一系列的集合基本操作。</p>\n<p>其中 <code>add()</code> 和 <code>remove()</code> 的返回值是 <code>boolean</code>；</p>\n<p>这个布尔值用于表示增加和删除是否成功。（是否对集合本身进行了操作）</p>\n<h2 id=\"_3-遍历操作\"> 3. 遍历操作</h2>\n<p>Java 的 Collection 遍历操作有三种：</p>\n<ol>\n<li>使用迭代器 <code>Iterator</code></li>\n<li>使用 <em>for each</em> 循环</li>\n<li>使用 <code>Stream</code> 的聚合操作(Java 8)</li>\n</ol>\n<p>实际上，使用 <em>for each</em> 循环和使用迭代器是一样的；</p>\n<p><em>for each</em> 可以应用于任何实现了 <code>Iterable</code> 接口的类：</p>\n<div><pre><code><span>public</span> ineterface <span>Iterable</span><span><span>&lt;</span><span>E</span><span>></span></span> <span>{</span>\n    <span>Iterator</span><span><span>&lt;</span><span>E</span><span>></span></span> <span>iterator</span><span>(</span><span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p><em>for each</em> 实际上就是应用它返回的迭代器进行遍历操作。</p>\n<p>关于 <code>Stream</code> 用单独的一篇文章介绍，这里主要解析迭代器的工作。</p>\n<h2 id=\"_4-迭代器的遍历\"> 4. 迭代器的遍历</h2>\n<div><pre><code><span>public</span> <span>interface</span> <span>Iterator</span><span><span>&lt;</span><span>E</span><span>></span></span> <span>{</span>\n    <span>E</span> <span>next</span><span>(</span><span>)</span><span>;</span>\n    <span>boolean</span> <span>hasNext</span><span>(</span><span>)</span><span>;</span>\n    <span>void</span> <span>remove</span><span>(</span><span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>其中，<code>next()</code> 方法返回下一个元素，<code>hasNext()</code> 方法用于检测是否到达了集合末尾。</p>\n<p>当到达了集合末尾时，调用 <code>next()</code> 会抛出 <code>NoSuchElementException</code>，所以，正确的写法是在循环时使用 <code>hasNext()</code> 作为判断条件：</p>\n<div><pre><code><span>while</span><span>(</span>iter<span>.</span><span>hasNext</span><span>(</span><span>)</span><span>)</span> <span>{</span>\n    element <span>=</span> iter<span>.</span><span>next</span><span>(</span><span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>其中，<code>Collection</code> 接口已经扩展(extends)了 <code>Iterable</code> 接口，所以自带 <code>iterator()</code> 方法。</p>\n<p>元素被访问的顺序取决于集合类的具体实现。</p>\n<p>比较特别的是，Java 中的迭代器和 C++ 中的迭代器不一样；</p>\n<p>C++ 中的迭代器是基于索引的，可以不执行查找操作就将迭代器进行移动；</p>\n<p>相反，Java 中的迭代器更类似于 <code>read()</code> 方法，迭代器的查找操作和移动操作紧密相连；</p>\n<p>Java 中的迭代器更类似于是 <strong>位于两个元素之间</strong>，调用 <code>next()</code> 将越过一个元素，并返回这个元素的引用。</p>\n<h2 id=\"_5-迭代器的删除\"> 5. 迭代器的删除</h2>\n<p>比较特别的是，<code>Iterator</code> 接口还提供了一个 <code>remove()</code> 方法；</p>\n<p>它会删除 <strong>上次</strong> 调用 <code>next()</code> 的元素；</p>\n<p>也就是说，如果你想删除某个位置上的元素，你的迭代器就必须 <strong>先越过</strong> 这个元素。</p>\n<div><pre><code><span>Iterator</span><span><span>&lt;</span><span>String</span><span>></span></span> it <span>=</span> c<span>.</span><span>iterator</span><span>(</span><span>)</span><span>;</span>\n\niter<span>.</span><span>next</span><span>(</span><span>)</span><span>;</span>    <span>//skip over the first</span>\niter<span>.</span><span>remove</span><span>(</span><span>)</span><span>;</span>  <span>// delete the first</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>需要注意的是，<code>next()</code> 和 <code>remove()</code> 是具有依赖性的；</p>\n<p><strong>不能连续调用两次 <code>remove()</code></strong>，否则，将会抛出 <code>IllegalStateException</code></p>\n<div><pre><code>iter<span>.</span><span>remove</span><span>(</span><span>)</span><span>;</span>\niter<span>.</span><span>remove</span><span>(</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>必须先调用 <code>next()</code> 来越过将要删除的元素。</p>\n<h2 id=\"_6-批量操作\"> 6. 批量操作</h2>\n<p>Collection 同时提供了一套批量操作方法，用于对另一个集合进行操作，主要的方法有：</p>\n<ol>\n<li>\n<p><code>containsAll()</code></p>\n<blockquote>\n<p>判断另一集合是否为本集合的子集\n（本集合是否完全包含了另一集合）</p>\n</blockquote>\n</li>\n<li>\n<p><code>addAll()</code></p>\n<blockquote>\n<p>将另一集合的所有元素加入到本集合中</p>\n</blockquote>\n</li>\n<li>\n<p><code>removeAll()</code></p>\n<blockquote>\n<p>将本集合中含有的 另一集合中的所有元素 从本集合中删除</p>\n</blockquote>\n</li>\n<li>\n<p><code>retainAll()</code></p>\n<blockquote>\n<p>将本集合中 <strong>不属于</strong>  另一集合的所有元素从本集合中删除\n即，将本集合改造成两个集合的 <strong>交集</strong></p>\n</blockquote>\n</li>\n<li>\n<p><code>clear()</code></p>\n<blockquote>\n<p>删除本集合中的所有元素</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"_7-和数组的转换操作\"> 7. 和数组的转换操作</h2>\n<p><code>Collection</code> 存在一个 <code>toArray()</code> 方法；</p>\n<p>但是，比较坑爹的是，这个方法仅仅只返回一个 <code>Object[]</code>；</p>\n<div><pre><code><span>Object</span><span>[</span><span>]</span> a <span>=</span> c<span>.</span><span>toArray</span><span>(</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>这显然没有什么卵用，因为 <code>Object[]</code> 是 <strong>新构建的</strong>，它不能强制转换成更为具体的数组。</p>\n<p>所以，我们需要采用另一个 <code>toArray(T[] a)</code> 方法；</p>\n<div><pre><code><span>// 写法一</span>\n<span>String</span><span>[</span><span>]</span> stringArray <span>=</span> c<span>.</span><span>toArray</span><span>(</span><span>new</span> <span>String</span><span>[</span><span>0</span><span>]</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>实际上，我们可以直接向 <code>toArray()</code> 提供一个足够大的数组：</p>\n<div><pre><code><span>// 写法二</span>\n<span>String</span><span>[</span><span>]</span> stringArray <span>=</span> c<span>.</span><span>toArray</span><span>(</span><span>new</span> <span>String</span><span>[</span>c<span>.</span><span>size</span><span>(</span><span>)</span><span>]</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>那么这两种写法有什么区别呢？</p>\n<p>根据 JDK 文档，当数组参数的空间不够大时，它会自动重新构建一个足够大的数组进行元素转存；</p>\n<p>当数组空间足够大时，<code>toArray()</code> 就不自己构建数组了，而是直接将元素储存到数组中。</p>\n<p>这样看来，写法一好像没有什么必要，毕竟都要创建数组，不如直接创建了事，何必要多出一个无用的数组呢？</p>\n<p>实际上，写法二具有线程安全问题；</p>\n<p>即使你使用线程安全的 <code>Collection</code>，但是当有元素在 <code>size()</code> 和 <code>toArray()</code> 之间被删除了，那么最终生成的数组就会包含 <code>null</code>。</p>\n<p>而，写法一就可以直接避免这个问题。</p>\n<blockquote>\n<p>线程安全的 <code>Collection</code> 只保证每个方法是线程安全的，当你调用两个以上的方法联合使用时，就不具备线程安全了。</p>\n</blockquote>\n<p>Reference: <a href=\"http://stackoverflow.com/questions/3293946/the-easiest-way-to-transform-collection-to-array#comment66730178_3293970\" target=\"_blank\" rel=\"noopener noreferrer\">The easiest way to transform collection to array?</a></p>\n",
      "date_published": "2017-04-03T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Java"
      ]
    },
    {
      "title": "Java 集合框架",
      "url": "https://wafer.li/blog-corners/langroad/Java/Java%20%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/",
      "id": "https://wafer.li/blog-corners/langroad/Java/Java%20%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/",
      "summary": "<h2 id=\"_1-介绍\"> 1. 介绍</h2>\n<p>任何语言都会提供一套基础的数据结构的库；</p>\n<p>Java 也不例外，而且提供了一个庞大的数据结构库，有时对于它们之间的选择让人很困惑。</p>\n<p>这里就来简单说明一下 Java 的 Collection 和基本的 Collection 数据结构</p>\n",
      "content_html": "<h2 id=\"_1-介绍\"> 1. 介绍</h2>\n<p>任何语言都会提供一套基础的数据结构的库；</p>\n<p>Java 也不例外，而且提供了一个庞大的数据结构库，有时对于它们之间的选择让人很困惑。</p>\n<p>这里就来简单说明一下 Java 的 Collection 和基本的 Collection 数据结构</p>\n\n<h2 id=\"_2-接口关系图\"> 2. 接口关系图</h2>\n<p>和现代的数据结构类库一样，Java 采用了 Collection 接口和实现相分离的策略。</p>\n<p>通过这样，来做到使用一个统一的接口，对某种数据结构的不同实现进行多态调用。</p>\n<p>基本的 <code>Collection</code> 接口继承关系如下：</p>\n<Mermaid id=\"mermaid-382ee169\" data-code=\"classDiagram%0A%20%20%20%20class%20Collection%0A%20%20%20%20%3C%3Cinterface%3E%3E%20Collection%0A%0A%20%20%20%20class%20Set%0A%20%20%20%20%3C%3Cinterface%3E%3E%20Set%0A%20%20%20%20class%20List%0A%20%20%20%20%3C%3Cinterface%3E%3E%20List%0A%20%20%20%20class%20Queue%0A%20%20%20%20%3C%3Cinterface%3E%3E%20Queue%0A%20%20%20%20class%20Deque%0A%20%20%20%20%3C%3Cinterface%3E%3E%20Deque%0A%0A%20%20%20%20class%20SortedSet%0A%20%20%20%20%3C%3Cinterface%3E%3E%20SortedSet%0A%0A%20%20%20%20Collection%20%3C%7C--%20Set%0A%20%20%20%20Collection%20%3C%7C--%20List%0A%20%20%20%20Collection%20%3C%7C--%20Queue%0A%20%20%20%20Collection%20%3C%7C--%20Deque%0A%20%20%20%20Collection%20%3C%7C--%20Set%0A%0A%20%20%20%20Set%20%3C%7C--%20SortedSet%0A%0A%20%20%20%20class%20Map%0A%20%20%20%20%3C%3Cinterface%3E%3E%20Map%0A%0A%20%20%20%20class%20SortedMap%0A%20%20%20%20%3C%3Cinterface%3E%3E%20SortedMap%0A%0A%20%20%20%20Map%20%3C%7C--%20SortedMap%0A\"></Mermaid><p>需要注意的是，<code>Map</code> 并非 <code>Collection</code> 的子类，而是自成一派。</p>\n<p>同时，这些接口都是 <strong>泛型接口</strong>，可以使用它们定义泛型方法。</p>\n<h2 id=\"_3-接口具体含义\"> 3. 接口具体含义</h2>\n<p>这些接口的具体含义如下：</p>\n<ul>\n<li>\n<p><code>Collection</code></p>\n<blockquote>\n<p>Collection 类结构的根，一个 Collection 代表了一堆对象的集合体，对象通常被称作 <em>元素</em></p>\n</blockquote>\n</li>\n<li>\n<p><code>Set</code></p>\n<blockquote>\n<p>一个 <strong>不能拥有重复元素</strong> 的 Collection，类似数学意义上的集合</p>\n</blockquote>\n</li>\n<li>\n<p><code>List</code></p>\n<blockquote>\n<p>一个 <strong>有序的</strong>  Collection，有时也被称作 <strong>序列</strong>(sequence)\n一般来说，<code>List</code> 的用户对于 <code>List</code> 有着比较精确地控制\n用户可以使用索引来进行元素的查找和插入操作</p>\n</blockquote>\n</li>\n<li>\n<p><code>Queue</code></p>\n<blockquote>\n<p>一个存储着即将进行处理的元素的 Collection\n相比 Collection，它提供了特别的加入、删除和查找操作</p>\n<p>比较特别的是，队列一般来说具有 <strong>先进先出</strong>(FIFO) 的插入和删除次序\n队列的新元素位于队列末尾，旧元素位于队列头部</p>\n</blockquote>\n</li>\n<li>\n<p><code>Deque</code></p>\n<blockquote>\n<p>双端队列，在队列两头都可以进行插入和删除操作\n同时，双端队列也同时支持 <strong>先进先出</strong>(FIFO) 和 <strong>后进先出</strong>(LIFO) 的插入和删除策略</p>\n</blockquote>\n</li>\n<li>\n<p><code>Map</code></p>\n<blockquote>\n<p>一个存储键值对的对象\n<code>Map</code> 不能包含重复键，每个键可以被映射到最多一个值上</p>\n</blockquote>\n</li>\n<li>\n<p><code>SortedSet</code></p>\n<blockquote>\n<p>一个它的元素按照 <strong>升序排列</strong> 的 <code>Set</code></p>\n</blockquote>\n</li>\n<li>\n<p><code>SortedMap</code></p>\n<blockquote>\n<p>一个它的键按照 <strong>升序排列</strong> 的 <code>Map</code></p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"_4-abstract-类\"> 4. Abstract 类</h2>\n<p>集合框架中，除了接口和具体实现，还提供了一系列的 <code>Abstract*</code>  类；</p>\n<p>它是 <code>Collection</code> 和 <code>Map</code> 以及其子接口的简单实现形式，利用泛型来提供了一些通用的方法；</p>\n<p>比如 <code>contains()</code> 方法，就是利用了泛型的 <code>Iterator</code> 实现的。</p>\n<p><code>Abstract</code> 类是用于进行具体集合类实现的，通过继承 <code>Abstract</code> 类，可以极大减轻</p>\n<h2 id=\"_5-视图\"> 5. 视图</h2>\n<p>在通常情况下，我们需要将一个具体的 <code>Collection</code> 或者 <code>Map</code> 对象转换成另一种集合框架内的具体对象进行操作；</p>\n<p>所以，集合框架提供了一种很有用的视图技术；</p>\n<p>视图(views) 指的就是返回一个实现了 <strong>其他接口</strong> 的 <strong>引用</strong>，通过这个引用，来进行 <strong>原有集合</strong> 的操作，这个对象引用就是视图。</p>\n<h3 id=\"_5-1-array-aslist\"> 5.1 <code>Array.asList()</code></h3>\n<p>不仅集合框架中存在包装器，<code>Array</code> 类中也存在可以包装成一个 <code>List</code> 的方法；</p>\n<p>它返回一个 <code>List</code> 的视图，可以通过它来使用 <code>List</code> 中的访问方法（包括 <code>get</code> 和 <code>set</code>）对 <strong>原数组</strong> 进行访问和元素的修改；</p>\n<p>但是，不能调用 <code>add()</code> 和 <code>remove()</code> 这种能够对数组大小产生影响的方法；</p>\n<p>注意，视图对象始终是在 <strong>原对象</strong> 进行操作的。</p>\n<blockquote>\n<p>有趣的是，<code>asList()</code> 返回的也是 <code>ArrayList</code> 对象\n不过，不是 <code>java.util.ArrayList</code>，而是 <code>java.util.Arrays.ArrayList</code>，是其自身的一个子类</p>\n</blockquote>\n<p>Java 5 之后，<code>asList()</code> 方法声明为了不定参数，可以直接传入元素进行转换操作。</p>\n<h3 id=\"_5-2-子范围\"> 5.2 子范围</h3>\n<p>可以使用诸如 <code>subXXX()</code> 和 <code>headXXX()</code> 和 <code>tailXXX()</code> 方法返回 Collection 的一个子范围；</p>\n<p>可以通过这个子范围视图对集合的一部分进行操作。</p>\n<h3 id=\"_5-3-不可变的视图\"> 5.3 不可变的视图</h3>\n<p>通过 <code>unmodifiableXXX()</code> 可以获取一个不可修改的视图；</p>\n<p>这个视图中的所有的更改器方法都会返回 <code>UnsupportedOperationException</code>；</p>\n<p>当然，这不意味着其原始集合不能被更改，只是视图对象不能更改原有集合，但是通过原始集合的引用，同样可以更改原始的集合。</p>\n<p>需要注意的是，<code>unmodifiableCollection()</code> 返回的集合是通过原始的 <code>Object.equals()</code>  方法进行相等性判断的；</p>\n<p>也就是说，不能通过 <code>Collection</code> 视图进行相等性判定。</p>\n<h3 id=\"_5-4-同步视图\"> 5.4 同步视图</h3>\n<p>集合框架还提供了一个同步视图，用来进行一系列的多线程同步工作。</p>\n<p>通过 <code>synchronizedXXX()</code> 可以获取到一个线程安全的 <code>Collection</code> 或者 <code>Map</code>；</p>\n<p>不过，这个线程安全仅限于一些基本的方法；</p>\n<p>对于遍历方法，包括使用迭代器和 <code>Stream</code>，都需要 <strong>手动进行同步</strong></p>\n<h3 id=\"_5-5-检查视图\"> 5.5 检查视图</h3>\n<p>在 Java 5 引入泛型之后，集合框架提供了一个检查视图；</p>\n<p>它专门用于检查是否有其他类型的对象混入了集合之中。</p>\n<p>例如：</p>\n<div><pre><code><span>ArrayList</span><span><span>&lt;</span><span>String</span><span>></span></span> strings <span>=</span> <span>new</span> <span>ArrayList</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>\n<span>ArrayList</span> a <span>=</span> strings<span>;</span>\na<span>.</span><span>add</span><span>(</span><span>new</span> <span>Date</span><span>(</span><span>)</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>由于使用了原始类型，编译器无法发现这一泛型错误。</p>\n<p>使用检查视图，我们就可以发现这一错误：</p>\n<div><pre><code><span>List</span><span><span>&lt;</span><span>String</span><span>></span></span> checkedStrings <span>=</span> <span>Colllections</span><span>.</span><span>checkedList</span><span>(</span>strings<span>,</span> <span>String</span><span>.</span><span>class</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>当发现类型不符合时，它会立即抛出一个 <code>ClassCastException</code>；</p>\n<p>不过，它也有缺陷，它是依赖于虚拟机的泛型安全机制；</p>\n<p>当向 <code>ArrayList&lt;Pair&lt;String&gt;&gt;</code> 中插入 <code>Pair&lt;Date&gt;</code> 时，就不能检测出这种错误。</p>\n",
      "date_published": "2017-04-03T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Java"
      ]
    },
    {
      "title": "Java to Kotlin",
      "url": "https://wafer.li/blog-corners/langroad/Kotlin/Java%20to%20Kotlin/",
      "id": "https://wafer.li/blog-corners/langroad/Kotlin/Java%20to%20Kotlin/",
      "summary": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>下面总结一些代码段，用于帮助从 Java 迁移到 Kotlin</p>\n",
      "content_html": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>下面总结一些代码段，用于帮助从 Java 迁移到 Kotlin</p>\n\n<h2 id=\"_2-lazy-initialization\"> 2. Lazy Initialization</h2>\n<div><pre><code><span>// Java</span>\n\n<span>private</span> <span>A</span> a <span>=</span> <span>null</span><span>;</span>\n\n<span>public</span> <span>A</span> <span>getA</span><span>(</span><span>)</span> <span>{</span>\n    <span>if</span> <span>(</span>a <span>==</span> <span>null</span><span>)</span> <span>{</span>\n        a <span>=</span> <span>initA</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>return</span> a<span>;</span>\n<span>}</span>\n\n<span>private</span> <span>A</span> <span>initA</span><span>(</span><span>)</span> <span>{</span>\n    <span>// ...</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><div><pre><code><span>// Kotlin</span>\n\n<span>val</span> a<span>:</span> A <span>by</span> lazy <span>{</span> <span>initA</span><span>(</span><span>)</span> <span>}</span>\n\n<span>private</span> <span>fun</span> <span>initA</span><span>(</span><span>)</span><span>:</span> A <span>{</span>\n    <span>// ...</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id=\"_3-app-getcontext\"> 3. App.getContext()</h2>\n<div><pre><code><span>// Java</span>\n\n<span>class</span> <span>App</span> <span>extends</span> <span>Application</span> <span>{</span>\n    <span>private</span> <span>Context</span> context <span>=</span> <span>null</span><span>;</span>\n\n    <span>@Override</span>\n    <span>public</span> <span>void</span> <span>onCreate</span><span>(</span><span>)</span> <span>{</span>\n        <span>super</span><span>.</span><span>onCreate</span><span>(</span><span>)</span><span>;</span>\n\n        context <span>=</span> <span>getAppContext</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>public</span> <span>Context</span> <span>getContext</span><span>(</span><span>)</span> <span>{</span>\n        retrun context<span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><div><pre><code><span>// Kotlin</span>\n\n<span>class</span> App <span>:</span> <span>Application</span><span>(</span><span>)</span> <span>{</span>\n    conpanion <span>object</span> <span>{</span>\n        <span>lateinit</span> <span>var</span> context<span>:</span> Context\n        <span>private</span> <span>set</span>\n    <span>}</span>\n\n    <span>override</span> <span>fun</span> <span>onCreate</span><span>(</span><span>)</span> <span>{</span>\n        context <span>=</span> applicationContext\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>或者也可以直接扩展 <code>Context</code> 类</p>\n<div><pre><code><span>val</span> Context<span>.</span>myApp<span>:</span> MyApp\n        <span>get</span><span>(</span><span>)</span> <span>=</span> applicationContext <span>as</span> MyApp\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h2 id=\"_4-it-in-lambda\"> 4. <code>it</code> in lambda</h2>\n<p>当实现的接口是单方法接口时，Kotlin 会自动使用 lambda 来代替；\n这时候很容易出现不知道怎么写的问题。</p>\n<p>此时，放心大胆的用 <code>it</code> 这个内置的 lambda 表达式参数。</p>\n<div><pre><code><span>// Java</span>\n\nbutton<span>.</span><span>setOnClickListener</span><span>(</span><span>new</span> <span>OnClickListener</span><span>(</span><span>)</span> <span>{</span>\n    <span>@Override</span>\n    <span>public</span> <span>void</span> <span>onClick</span><span>(</span><span>View</span> view<span>)</span> <span>{</span>\n        <span>// Perform action on click</span>\n    <span>}</span>\n<span>}</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><div><pre><code><span>// Kotlin</span>\n\nbutton<span>.</span><span>setOnClickListener</span> <span>{</span> it <span>-></span> <span>// it is a view</span>\n    <span>// Perform action on click</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><blockquote>\n<p>需要注意的是 lambda 是表达式，默认返回值为最后执行函数的返回值或者字面量；\n不需要 <code>return</code> 关键字。</p>\n</blockquote>\n<h2 id=\"_5-functional-read-from-stdin\"> 5. Functional Read From StdIn</h2>\n<div><pre><code><span>fun</span> <span>main</span><span>(</span>args<span>:</span> Array<span>&lt;</span>String<span>></span><span>)</span> <span>{</span>\n    <span>val</span> reader <span>=</span> <span>BufferedReader</span><span>(</span><span>InputStreamReader</span><span>(</span>System<span>.</span>`<span>in</span>`<span>)</span><span>)</span>\n\n    reader<span>.</span><span>lines</span><span>(</span><span>)</span><span>.</span><span>forEach</span><span>(</span><span>::</span>println<span>)</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div>",
      "date_published": "2017-03-17T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Kotlin"
      ]
    },
    {
      "title": "Kotlin Android Extension",
      "url": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20Android%20Extension/",
      "id": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20Android%20Extension/",
      "summary": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>Kotlin 对于 Android 开发，还提供了一些扩展特性，有助于提高 Android 开发的效率。</p>\n",
      "content_html": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>Kotlin 对于 Android 开发，还提供了一些扩展特性，有助于提高 Android 开发的效率。</p>\n\n<h2 id=\"_2-findviewbyid\"> 2. findViewById</h2>\n<p>任何一个 Android 开发者都会对这个方法非常熟悉，我们通过它来获取视图中组件的对象实例，随后进行操作。</p>\n<p>当然，一堆 <code>findViewById()</code> 势必降低了代码可读性，所以也出现了一些库（如 <code>ButterKnife</code>）用于简化这个方法的调用和造型，但由于它们都是运行期间的库，所以也就要求使用注解，这实际上并没有根本解决问题。</p>\n<p>Kotlin 则将简化一步到位，只需要 <code>import</code> 视图对应的包，你就可以简单轻松的获取到对象的实例。</p>\n<div><pre><code><span>// Using R.layout.activity_main from the main source set</span>\n<span>import</span> kotlinx<span>.</span>android<span>.</span>synthetic<span>.</span>main<span>.</span>activity_main<span>.</span><span>*</span>\n\n<span>class</span> MyActivity <span>:</span> <span>Activity</span><span>(</span><span>)</span> <span>{</span>\n    <span>override</span> <span>fun</span> <span>onCreate</span><span>(</span>savedInstanceState<span>:</span> Bundle<span>?</span><span>)</span> <span>{</span>\n        <span>super</span><span>.</span><span>onCreate</span><span>(</span>savedInstanceState<span>)</span>\n        <span>setContentView</span><span>(</span>R<span>.</span>layout<span>.</span>activity_main<span>)</span>\n        textView<span>.</span><span>setText</span><span>(</span><span>\"Hello, world!\"</span><span>)</span>\n        <span>// Instead of findView(R.id.textView) as TextView</span>\n        <span>// The name of instance is the name of its id</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h2 id=\"_3-如何使用\"> 3. 如何使用</h2>\n<p>很简单，只需要在 <code>app/build.gradle</code> 文件添加上下面这一行即可：</p>\n<div><pre><code>apply plugin<span>:</span> <span>'kotlin-android-extensions'</span>\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"_4-使用场景\"> 4. 使用场景</h2>\n<p>配置好 Kotlin Android Extension 之后，就可以使用 <code>import</code> 语句来导入对应的 xml 视图组件了。</p>\n<div><pre><code>kotlinx<span>.</span>android<span>.</span>synthetic<span>.</span>main<span>.</span>activity_main<span>.</span><span>*</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>这样你就能在 <code>Activity</code> 中直接通过 <code>id</code> 来使用这些组件了。</p>\n<p>假如你需要在 Fragment 中使用这些组件怎么办呢？\nFragment 不像 Activity 拥有自带的 <code>findViewById()</code> 方法，它通常要使用一个 <code>rootView</code> 来进行组件获取。</p>\n<p>很简单，只需要在上面的基础上加一个 <code>view</code> 即可。</p>\n<div><pre><code>kotlinx<span>.</span>android<span>.</span>synthetic<span>.</span>main<span>.</span>activity_main<span>.</span>view<span>.</span><span>*</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>这个功能也可以用在 Adapter 上；\n如果引入了这个语句，那么我们可以使用如下语法来进行组件获取和调用：</p>\n<div><pre><code>    <span><span><span>&lt;</span>TextView</span>\n            <span><span>android:</span>id</span><span><span>=</span><span>\"</span>@+id/hello<span>\"</span></span>\n            <span><span>android:</span>layout_width</span><span><span>=</span><span>\"</span>fill_parent<span>\"</span></span>\n            <span><span>android:</span>layout_height</span><span><span>=</span><span>\"</span>wrap_content<span>\"</span></span>\n            <span><span>android:</span>text</span><span><span>=</span><span>\"</span>Hello World, MyActivity<span>\"</span></span>\n            <span>/></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><div><pre><code>activity<span>.</span>hello<span>.</span><span>setText</span><span>(</span><span>\"Hi!\"</span><span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"_5-android-flavors\"> 5. Android Flavors</h2>\n<p>有些时候，我们的 APP 会被分成付费版和免费版；\n这个特性通常是通过在 <code>build.gradle</code> 划定 Android Flavors 来实现的。</p>\n<p>那么对于不同的 Flavor，我们需要不同的布局组件怎么办呢？</p>\n<p>很简单，只需要把上面的 <code>main</code> 改成相应的包名就行了；\n对于 <code>free/res/layout/activity_free.xml</code>，我们可以写如下语句</p>\n<div><pre><code><span>import</span> kotlinx<span>.</span>android<span>.</span>synthetic<span>.</span>free<span>.</span>activity_free<span>.</span><span>*</span>\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"_6-实现原理\"> 6. 实现原理</h2>\n<p>通过扩展方法，来给每个类提供相应的扩展属性和扩展方法；\n然后通过不同的包来引入这些扩展。</p>\n",
      "date_published": "2017-03-17T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Kotlin"
      ]
    },
    {
      "title": "Kotlin Android Getting Started",
      "url": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20Android%20Getting%20Started/",
      "id": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20Android%20Getting%20Started/",
      "summary": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>由于 Android Studio 基于 IntelliJ IDEA 开发，所以很容易在 Android Studio 上使用 Kotlin 开发 Android。</p>\n",
      "content_html": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>由于 Android Studio 基于 IntelliJ IDEA 开发，所以很容易在 Android Studio 上使用 Kotlin 开发 Android。</p>\n\n<h2 id=\"_2-创建工程\"> 2. 创建工程</h2>\n<p>这步和普通的 Android 创建工程没有什么区别。</p>\n<p>创建完毕后，你一般会拥有一个由 AS 创建的 Java Activity 类。</p>\n<h2 id=\"_3-将-java-代码转换成-kotlin-代码\"> 3. 将 Java 代码转换成 Kotlin 代码</h2>\n<p>IDEA 内建了代码转换功能，只需要通过 Find Action(<code>cmd + shift + a</code>) 即可找到 <strong>Convert Java File to Kotlin File</strong></p>\n<p><img src=\"https://kotlinlang.org/assets/images/tutorials/kotlin-android/convert-java-to-kotlin.png\" alt=\"\" /></p>\n<p>经过转换之后，我们就能拥有一个使用 Kotlin 来编写的 Activity 类了。</p>\n<h2 id=\"_4-在工程中配置-kotlin\"> 4. 在工程中配置 Kotlin</h2>\n<p>由于 Kotlin 是一个外部库，所以我们需要对工程进行一些配置。</p>\n<p>当然，Android Studio 内置了自动配置方法，只需要在 Find Action 中搜索 <strong>Configure Kotlin in Project</strong> 即可。</p>\n<p><img src=\"https://kotlinlang.org/assets/images/tutorials/kotlin-android/configure-kotlin-in-project.png\" alt=\"\" /></p>\n<p>接下来会弹出一个对话框，选择最新的 Kotlin 版本即可。</p>\n<p><img src=\"https://kotlinlang.org/assets/images/tutorials/kotlin-android/configure-kotlin-in-project-details.png\" alt=\"\" /></p>\n<p>最后，我们只需要同步一下 Gradle 即可。</p>\n<p><img src=\"https://kotlinlang.org/assets/images/tutorials/kotlin-android/sync-project-with-gradle.png\" alt=\"\" /></p>\n<h2 id=\"_5-剩下的工作\"> 5. 剩下的工作</h2>\n<p>由于 Kotlin 最终还是会被编译成字节码，所以剩下的 UI 开发和 APK 构建与使用 Java 语言时并没有任何区别。</p>\n<p>尽情享受 Kotlin 所带来的便利吧！</p>\n",
      "image": "https://kotlinlang.org/assets/images/tutorials/kotlin-android/convert-java-to-kotlin.png",
      "date_published": "2016-10-14T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Kotlin"
      ]
    },
    {
      "title": "Kotlin Scoping 函数",
      "url": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20Scoping%20%E5%87%BD%E6%95%B0/",
      "id": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20Scoping%20%E5%87%BD%E6%95%B0/",
      "summary": "<p>在 Kotlin 的 <a href=\"https://github.com/JetBrains/kotlin/blob/master/libraries/stdlib/src/kotlin/util/Standard.kt\" target=\"_blank\" rel=\"noopener noreferrer\">Standard.kt</a> 中提供了一些特殊的高阶函数；</p>\n<p>它们被称作 <strong>Scoping 函数</strong>，此类函数通过使用一个函数 <code>block</code>，将你需要对某对象进行的一系列操作限制在 lambda 作用域内；</p>\n<p>这样，对于该对象操作的代码就不会泄露到外层作用域，使得代码更为干净整洁。</p>\n<p>例如：</p>\n<div><pre><code>DbConnection<span>.</span><span>getConnection</span><span>(</span><span>)</span><span>.</span><span>let</span> <span>{</span> connection <span>-></span>\n<span>}</span>\n<span>// connection is no longer visible here</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>可以看到，对于 <code>connection</code> 的操作就仅局限于 <code>let</code> 的 lambda 区域，而在 lambda 区域外是不可见的；</p>\n<p>这就可以保证对 <code>connection</code> 的操作，不会影响到接下来的作用域。</p>\n",
      "content_html": "<p>在 Kotlin 的 <a href=\"https://github.com/JetBrains/kotlin/blob/master/libraries/stdlib/src/kotlin/util/Standard.kt\" target=\"_blank\" rel=\"noopener noreferrer\">Standard.kt</a> 中提供了一些特殊的高阶函数；</p>\n<p>它们被称作 <strong>Scoping 函数</strong>，此类函数通过使用一个函数 <code>block</code>，将你需要对某对象进行的一系列操作限制在 lambda 作用域内；</p>\n<p>这样，对于该对象操作的代码就不会泄露到外层作用域，使得代码更为干净整洁。</p>\n<p>例如：</p>\n<div><pre><code>DbConnection<span>.</span><span>getConnection</span><span>(</span><span>)</span><span>.</span><span>let</span> <span>{</span> connection <span>-></span>\n<span>}</span>\n<span>// connection is no longer visible here</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>可以看到，对于 <code>connection</code> 的操作就仅局限于 <code>let</code> 的 lambda 区域，而在 lambda 区域外是不可见的；</p>\n<p>这就可以保证对 <code>connection</code> 的操作，不会影响到接下来的作用域。</p>\n\n<h2 id=\"_1-let\"> 1. <code>let</code></h2>\n<h3 id=\"_1-1-定义\"> 1.1 定义</h3>\n<div><pre><code><span>public</span> <span>inline</span> <span>fun</span> <span>&lt;</span>T<span>,</span> R<span>></span> T<span>.</span><span>let</span><span>(</span>f<span>:</span> <span>(</span>T<span>)</span> <span>-></span> R<span>)</span><span>:</span> R <span>=</span> <span>f</span><span>(</span><span>this</span><span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_1-2-例子\"> 1.2 例子</h3>\n<div><pre><code><span>val</span> s <span>=</span> <span>\"hoge\"</span><span>.</span><span>let</span> <span>{</span> it<span>.</span><span>toUpperCase</span><span>(</span><span>)</span> <span>}</span>\n<span>println</span><span>(</span>s<span>)</span> <span>//=> HOGE</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>从定义之中我们可以看到，<code>let</code> 是所有类型都具有的扩展函数；</p>\n<p>它的 <code>lambda</code> 的参数就是 <code>let</code> 的调用者。</p>\n<h3 id=\"_1-3-主要用途\"> 1.3 主要用途</h3>\n<p><code>let</code> 的主要用途在 Kotlin 的 <a href=\"https://kotlinlang.org/docs/reference/idioms.html#execute-if-not-null\" target=\"_blank\" rel=\"noopener noreferrer\">Idioms</a> 中有介绍；</p>\n<p>主要就是用于在对象 <code>nullable</code> 的时候，对对象进行操作；</p>\n<div><pre><code><span>data</span><span>?</span><span>.</span><span>let</span> <span>{</span>\n    <span>..</span><span>.</span> <span>// execute this block if not null</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>当 <code>data</code> 为 <code>null</code> 时，<code>let</code> 就不执行，而直接返回 <code>null</code>；</p>\n<p>否则就执行 <code>let</code> 的 lambda。</p>\n<p>此时，它与 Java <code>Optional</code> 的以下三个函数的功能类似：</p>\n<ul>\n<li><code>map</code></li>\n<li><code>flatMap</code></li>\n<li><code>ifPresent</code></li>\n</ul>\n<p>可以看到，<code>let</code> 实际上就相当于集合中的 <code>map</code>，作用就是进行元素的变换功能；</p>\n<p><img src=\"https://ww2.sinaimg.cn/large/006tNbRwgy1fevs5lulszj30ho08k74u.jpg\" alt=\"\" /></p>\n<p>注意，不能在 <code>let</code> 中调用 <code>it</code> 的修改方法；</p>\n<p>否则，就会对原有对象进行改变。</p>\n<h2 id=\"_2-with\"> 2. <code>with</code></h2>\n<h3 id=\"_2-1-定义\"> 2.1 定义</h3>\n<div><pre><code><span>public</span> <span>inline</span> <span>fun</span> <span>&lt;</span>T<span>,</span> R<span>></span> <span>with</span><span>(</span>receiver<span>:</span> T<span>,</span> f<span>:</span> T<span>.</span><span>(</span><span>)</span> <span>-></span> R<span>)</span><span>:</span> R <span>=</span> receiver<span>.</span><span>f</span><span>(</span><span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_2-2-例子\"> 2.2 例子</h3>\n<div><pre><code><span>val</span> w <span>=</span> <span>Window</span><span>(</span><span>)</span>\n<span>with</span><span>(</span>w<span>)</span> <span>{</span>\n  <span>setWidth</span><span>(</span><span>100</span><span>)</span>\n  <span>setHeight</span><span>(</span><span>200</span><span>)</span>\n  <span>setBackground</span><span>(</span>RED<span>)</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>和 <code>let</code> 不同，<code>with</code>  <strong>并不是扩展函数</strong>；</p>\n<p>它的第一个参数，是任意类型的对象，如上面的 <code>x</code>；</p>\n<p>需要注意的是它的 lambda 部分，它的 lambda 要求接收者（调用者）必须是第一个参数的类型；</p>\n<p>也就是说，我们可以在它的 lambda 中调用第一个参数的方法；</p>\n<p>正如上面的例子，其中的几个 <code>set</code> 方法都隐含了调用者是 <code>w</code></p>\n<h3 id=\"_2-3-主要用途\"> 2.3 主要用途</h3>\n<p>由于指定了接收者类型，所以 <code>with</code> 函数主要用于对复杂对象的一系列配置操作。</p>\n<p>如上面的设置 <code>Window</code> 的宽度和高度，以及背景颜色等。</p>\n<p><img src=\"https://ww4.sinaimg.cn/large/006tNbRwgy1fevsj7j8fij30e60agjrw.jpg\" alt=\"\" /></p>\n<p>可以看到，<code>with</code> 的调用 <strong>会改变传入的对象</strong></p>\n<p>实际上，这里也可以使用 <code>let</code> 函数进行这种操作；</p>\n<p>不过由于 <code>let</code> 函数是将对象当做 <strong>参数</strong> 传入，所以如果要获得和 <code>with</code> 一样的效果，就必须在前面加 <code>it</code>：</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/006tNbRwly1fevslr0wr7j30iu0aijrz.jpg\" alt=\"\" /></p>\n<p>所以，<code>let</code> 并不适合这里所说的这个用途，利用 <code>let</code> 进行元素变换即可。</p>\n<h2 id=\"_3-run\"> 3. <code>run</code></h2>\n<h3 id=\"_3-1-定义\"> 3.1 定义</h3>\n<div><pre><code><span>public</span> <span>inline</span> <span>fun</span> <span>&lt;</span>T<span>,</span> R<span>></span> T<span>.</span><span>run</span><span>(</span>f<span>:</span> T<span>.</span><span>(</span><span>)</span> <span>-></span> R<span>)</span><span>:</span> R <span>=</span> <span>f</span><span>(</span><span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_3-2-例子\"> 3.2 例子</h3>\n<div><pre><code><span>val</span> s <span>=</span> <span>\"hoge\"</span><span>.</span><span>run</span> <span>{</span> <span>toUpperCase</span><span>(</span><span>)</span> <span>}</span>\n<span>println</span><span>(</span>s<span>)</span> <span>//=> HOGE</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>可以看到，<code>run</code> 实际上就是 <code>let</code> 和 <code>with</code> 的结合；</p>\n<p>可以让 <code>with</code> 不需要指定 <code>receiver</code> 参数就进行对象内部属性的配置；</p>\n<p>同时，<code>run</code> 也是一个扩展函数，可以通过任何的类进行调用。</p>\n<h3 id=\"_3-3-主要用途\"> 3.3 主要用途</h3>\n<p>作为 <code>let</code> 和 <code>with</code> 的合体方法，那么最主要的用途当然还是进行某个对象的配置。</p>\n<p><img src=\"https://ww1.sinaimg.cn/large/006tNbRwgy1fevw96ztszj30go0843yz.jpg\" alt=\"\" /></p>\n<p>需要注意的是，<code>run</code> 也会对对象进行改变。</p>\n<h2 id=\"_4-apply\"> 4. <code>apply</code></h2>\n<h3 id=\"_4-1-定义\"> 4.1 定义</h3>\n<div><pre><code><span>public</span> <span>inline</span> <span>fun</span> <span>&lt;</span>T<span>></span> T<span>.</span><span>apply</span><span>(</span>f<span>:</span> T<span>.</span><span>(</span><span>)</span> <span>-></span> Unit<span>)</span><span>:</span> T <span>{</span> <span>f</span><span>(</span><span>)</span><span>;</span> <span>return</span> <span>this</span> <span>}</span>\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_4-2-例子\"> 4.2 例子</h3>\n<div><pre><code><span>val</span> s <span>=</span> <span>\"hoge\"</span><span>.</span><span>apply</span> <span>{</span> <span>toUpperCase</span><span>(</span><span>)</span> <span>}</span>\n<span>println</span><span>(</span>s<span>)</span> <span>//=> hoge</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>相比之前的结果，返回的依旧是小写字符；</p>\n<p>这是由于 <code>apply</code> 返回的是 <code>apply</code> 的调用者的缘故。</p>\n<h3 id=\"_4-3-主要用途\"> 4.3 主要用途</h3>\n<p>由于 <code>apply</code> 的返回类型为调用者自身，所以可以利用 <code>apply</code> 实现一个 <strong>流式 API 调用</strong>。</p>\n<p>实际上就是 <code>with</code> 最后返回 <code>this</code> 的简略版本。</p>\n<p><img src=\"https://ww1.sinaimg.cn/large/006tNbRwgy1fevwr9abcuj30va062q3m.jpg\" alt=\"\" /></p>\n<h2 id=\"_5-also\"> 5. <code>also</code></h2>\n<p>这是 Kotlin 1.1 新增的 scoping 函数</p>\n<h3 id=\"_5-1-定义\"> 5.1 定义</h3>\n<div><pre><code><span>public</span> <span>inline</span> <span>fun</span> <span>&lt;</span>T<span>></span> T<span>.</span><span>also</span><span>(</span>block<span>:</span> <span>(</span>T<span>)</span> <span>-></span> Unit<span>)</span><span>:</span> T <span>{</span> <span>block</span><span>(</span><span>this</span><span>)</span><span>;</span> <span>return</span> <span>this</span> <span>}</span>\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_5-2-使用例子\"> 5.2 使用例子</h3>\n<div><pre><code><span>val</span> s <span>=</span> <span>\"hoge\"</span><span>.</span><span>also</span> <span>{</span> it<span>.</span><span>toUpperCase</span><span>(</span><span>)</span> <span>}</span>\n<span>println</span><span>(</span>s<span>)</span> <span>//=> hoge</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>可以看到，其作用和 <code>apply</code> 一样；</p>\n<p>但是和 <code>apply</code> 的区别在于，<code>also</code> 的函数参数并非指定接收者；</p>\n<p>而是将调用者 <code>T</code> 当做其参数传入 lambda；</p>\n<p>类似于 <code>let</code> 的 <code>apply</code> 版本。</p>\n<h3 id=\"_5-3-主要用途\"> 5.3 主要用途</h3>\n<p>那么这样做有什么好处呢？</p>\n<p>首先，由于 <strong>没有指定接收者</strong>，所以 lambda 内外的 <code>this</code> 的含义没有改变：</p>\n<div><pre><code><span>// applyを使用</span>\n<span>val</span> button <span>=</span> <span>Button</span><span>(</span><span>this</span><span>)</span><span>.</span><span>apply</span> <span>{</span>\n  text <span>=</span> <span>\"Click me\"</span>\n  setOnClickListener <span>{</span>\n    <span>startActivity</span><span>(</span><span>Intent</span><span>(</span><span>this</span><span>@MainActivity</span><span>,</span> NextActivity<span>::</span><span>class</span><span>.</span>java<span>)</span><span>)</span>\n    <span>// 単なる「this」ではNG   ^</span>\n  <span>}</span>\n<span>}</span>\n\n<span>// alsoを使用</span>\n<span>val</span> button <span>=</span> <span>Button</span><span>(</span><span>this</span><span>)</span><span>.</span><span>also</span> <span>{</span> button <span>-></span>\n  button<span>.</span>text <span>=</span> <span>\"Click me\"</span>\n  button<span>.</span><span>setOnClickListener</span> <span>{</span>\n    <span>startActivity</span><span>(</span><span>Intent</span><span>(</span><span>this</span><span>,</span> NextActivity<span>::</span><span>class</span><span>.</span>java<span>)</span><span>)</span>\n  <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>其次，可以通过赋予 lambda 参数名字，例如上面的 <code>button</code> ，增强可读性。</p>\n<h3 id=\"_5-4-和-let-的区别\"> 5.4 和 <code>let</code> 的区别</h3>\n<p><code>also</code> 和 <code>let</code> 都是通过将调用者作为 lambda 的参数传入函数的形式进行调用；</p>\n<p>其区别就在于 <code>also</code> 最终返回值为其自身的调用者，即 <code>this</code>；</p>\n<p>而 <code>let</code> 的最终返回值由它的 lambda 的最后一个表达式的返回值决定。</p>\n<p>类似于 <code>apply</code> 和 <code>with</code> 的区别；</p>\n<p>同理，也可以利用 <code>let</code> 来实现上面的 <code>also</code> 实现的功能：</p>\n<div><pre><code><span>val</span> button <span>=</span> <span>Button</span><span>(</span><span>this</span><span>)</span><span>.</span><span>let</span> <span>{</span> button <span>-></span>\n  button<span>.</span>text <span>=</span> <span>\"Click me\"</span>\n  button<span>.</span><span>setOnClickListener</span> <span>{</span>\n    <span>startActivity</span><span>(</span><span>Intent</span><span>(</span><span>this</span><span>,</span> NextActivity<span>::</span><span>class</span><span>.</span>java<span>)</span><span>)</span>\n  <span>}</span>\n  button <span>// letの場合はこれが必要になる</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id=\"_6-总结\"> 6. 总结</h2>\n<ol>\n<li><code>let</code> 用于进行元素变换操作，类似于 <code>map</code></li>\n<li><code>with</code> 用于对复杂对象的配置，需要提供具体的对象</li>\n<li><code>run</code> 是 <code>with</code> 的 <code>let</code> 版本，配置对象属性，不需要提供具体对象</li>\n<li><code>apply</code> 是 <code>with</code> 的流式 API 版本</li>\n<li><code>also</code> 是 <code>let</code> 的 <code>apply</code> 版本，用于对象配置，同时保留流式 API 和 当前 <code>this</code> 的含义</li>\n</ol>\n<h2 id=\"_7-参考资料\"> 7. 参考资料</h2>\n<p><a href=\"http://qiita.com/ngsw_taro/items/d29e3080d9fc8a38691e#%E5%AE%9A%E7%BE%A9-2\" target=\"_blank\" rel=\"noopener noreferrer\">Kotlin スコープ関数 用途まとめ</a></p>\n<p><a href=\"http://beust.com/weblog/2015/10/30/exploring-the-kotlin-standard-library/\" target=\"_blank\" rel=\"noopener noreferrer\">Exploring the Kotlin standard library</a></p>\n",
      "image": "https://ww2.sinaimg.cn/large/006tNbRwgy1fevs5lulszj30ho08k74u.jpg",
      "date_published": "2021-07-15T11:52:03.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Kotlin"
      ]
    },
    {
      "title": "Kotlin this 表达式",
      "url": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%60this%60%20%E8%A1%A8%E8%BE%BE%E5%BC%8F/",
      "id": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%60this%60%20%E8%A1%A8%E8%BE%BE%E5%BC%8F/",
      "content_html": "<p>tags:\n- Kotlin\n- 语言之路</p>\n<hr>\n<p>Kotlin 提供了一个 <code>this</code> 表达式，主要就是一个带标签的 <code>this</code>，用于在内部类、扩展中获取正确的类对象实例。</p>\n<div><pre><code><span>class</span> A <span>{</span> <span>// implicit label @A</span>\n  <span>inner</span> <span>class</span> B <span>{</span> <span>// implicit label @B</span>\n    <span>fun</span> Int<span>.</span><span>foo</span><span>(</span><span>)</span> <span>{</span> <span>// implicit label @foo</span>\n      <span>val</span> a <span>=</span> <span>this</span><span>@A</span> <span>// A's this</span>\n      <span>val</span> b <span>=</span> <span>this</span><span>@B</span> <span>// B's this</span>\n\n      <span>val</span> c <span>=</span> <span>this</span> <span>// foo()'s receiver, an Int</span>\n      <span>val</span> c1 <span>=</span> <span>this</span><span>@foo</span> <span>// foo()'s receiver, an Int</span>\n\n      <span>val</span> funLit <span>=</span> <span>lambda@</span> <span>fun</span> String<span>.</span><span>(</span><span>)</span> <span>{</span>\n        <span>val</span> d <span>=</span> <span>this</span> <span>// funLit's receiver</span>\n      <span>}</span>\n\n\n      <span>val</span> funLit2 <span>=</span> <span>{</span> s<span>:</span> String <span>-></span>\n        <span>// foo()'s receiver, since enclosing lambda expression</span>\n        <span>// doesn't have any receiver</span>\n        <span>val</span> d1 <span>=</span> <span>this</span>\n      <span>}</span>\n    <span>}</span>\n  <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div>",
      "date_published": "2016-11-26T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Kotlin"
      ]
    },
    {
      "title": "Kotlin lateinit vs lazy",
      "url": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20lateinit%20vs%20lazy/",
      "id": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20lateinit%20vs%20lazy/",
      "content_html": "<p><code>lateinit</code> 和 <code>lazy</code> 是 Kotlin 中的两种不同的延迟初始化技术。</p>\n<p>在 Kotlin 使用中，很可能搞不清楚它们的使用场景和方法。下面就来做一个理清：</p>\n<ol>\n<li><code>lateinit</code> 只用于 <code>var</code>，而 <code>lazy</code> 只用于 <code>val</code></li>\n<li><code>lateinit</code> 和 <code>lazy</code> 都不能有 <strong>自定义的 getter 和 setter</strong>，但是可以对 getter 和 setter 进行可见符修饰</li>\n<li><code>lazy</code> 应用于单例模式(<code>if-null-then-init-else-return</code>)，而且当且仅当变量被<strong>第一次调用</strong>的时候，委托方法才会执行。</li>\n<li><code>lateinit</code> 则用于只能生命周期流程中进行获取或者初始化的变量，比如 Android 的 <code>onCreate()</code></li>\n<li>当单例对象需要使用外界参数来进行构造时，内部的该参数对应的属性应使用 <code>lateinit</code>\n<blockquote>\n<p>比如说网络 <code>ApiManager</code> 需要 <code>context</code> 来进行获取缓存的操作；\n那么，<code>ApiManager</code> 中的 <code>context</code> 属性就必须使用 <code>lateinit</code></p>\n<p>这是因为，<code>lazy</code> 使用委托方法来进行变量初始化，而委托方法不能从外界获取参数，但是 <code>lateinit</code> 可以通过一个 <code>init(context: Context)</code> 来获取到相应的外界参数来初始化属性。</p>\n</blockquote>\n</li>\n</ol>\n",
      "date_published": "2016-10-29T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Kotlin"
      ]
    },
    {
      "title": "Kotlin 使用 Gradle",
      "url": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E4%BD%BF%E7%94%A8%20Gradle/",
      "id": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E4%BD%BF%E7%94%A8%20Gradle/",
      "summary": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>一般来说，IntilliJ 会自动的给我们配置 Kotlin 的 Gradle 设置；</p>\n<p>但是，有时候我们也想自己进行一些自定义的 Gradle 配置；</p>\n<p>下面就来总结几个常用的配置方法</p>\n",
      "content_html": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>一般来说，IntilliJ 会自动的给我们配置 Kotlin 的 Gradle 设置；</p>\n<p>但是，有时候我们也想自己进行一些自定义的 Gradle 配置；</p>\n<p>下面就来总结几个常用的配置方法</p>\n\n<h2 id=\"_2-去除-src-中的-java-目录\"> 2. 去除 <code>src</code> 中的 <code>java</code> 目录</h2>\n<p>虽然说 Kotlin 经常和 Java 混着写，但是，有时候我们想写一个纯 Kotlin 程序的时候，却发现 <code>src</code> 目录中一直存在着一个 <code>java</code> 目录；</p>\n<p>这着实激起了我的强迫症，解决方法如下：</p>\n<div><pre><code>sourceSets <span>{</span>\n    main<span>.</span>java<span>.</span>srcDirs <span>=</span> <span>[</span><span>'src/main/kotlin'</span><span>]</span>\n    test<span>.</span>java<span>.</span>srcDirs <span>=</span> <span>[</span><span>'src/test/kotlin'</span><span>]</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>这是 gradle java 插件中常用的指定源文件位置的方法；</p>\n<p>不过需要注意的是，即使我们使用的是 kotlin 插件，也要使用 <code>main.java</code>；</p>\n<p>而不能使用 <code>main.kotlin</code></p>\n<p>这应该是因为 kotlin 插件继承了 java 插件的源文件位置设定的结果。</p>\n<h2 id=\"_2-指定字节码版本\"> 2. 指定字节码版本</h2>\n<p>有时候我们想使用一些高级的语言特性，不想为低级的 JVM 编写代码；</p>\n<p>这个时候就需要指定字节码版本；</p>\n<p>在 java 插件中，我们可以通过 <code>sourceCompatibility</code> 和 <code>targetCompatibility</code> 来解决这个问题；</p>\n<p>不过在 Kotlin 中，我们还有对应的 JVM 版本和语言和 API 版本可以设定（注意，仅在 Kotlin 1.1 之后可以使用）；</p>\n<div><pre><code>compileKotlin <span>{</span>\n    sourceCompatibility <span>=</span> JavaVersion<span>.</span>VERSION_1_8\n    targetCompatibility <span>=</span> JavaVersion<span>.</span>VERSION_1_8\n\n    kotlinOptions <span>{</span>\n        jvmTarget <span>=</span> <span>\"1.8\"</span>\n        apiVersion <span>=</span> <span>\"1.1\"</span>\n        languageVersion <span>=</span> <span>\"1.1\"</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>注意一定要在 <code>compileKotiln</code> 中，因为这个是编译 Kotlin 时候的选项。</p>\n",
      "date_published": "2017-03-20T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Kotlin"
      ]
    },
    {
      "title": "Kotlin 内联函数",
      "url": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0/",
      "id": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0/",
      "summary": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>使用 lambda 和高阶函数固然方便，但是由于需要生成函数对象和进行闭包操作，这也造成了一些不必要的内存和时间开销。</p>\n<p>但是一般情况下，我们可以通过将函数和 Lambda 表达式内联化进行开销的减免。</p>\n<blockquote>\n<p>内联函数指的是将整个函数直接替换为函数实际代码的技术，它可以减少函数调用时由于跳转产生的开销浪费。</p>\n</blockquote>\n",
      "content_html": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>使用 lambda 和高阶函数固然方便，但是由于需要生成函数对象和进行闭包操作，这也造成了一些不必要的内存和时间开销。</p>\n<p>但是一般情况下，我们可以通过将函数和 Lambda 表达式内联化进行开销的减免。</p>\n<blockquote>\n<p>内联函数指的是将整个函数直接替换为函数实际代码的技术，它可以减少函数调用时由于跳转产生的开销浪费。</p>\n</blockquote>\n\n<h2 id=\"_2-kotlin-内联语法\"> 2. Kotlin 内联语法</h2>\n<p>例如 <code>lock()</code> 函数，它可以很方便的在调用点进行内联化操作：</p>\n<div><pre><code><span>lock</span><span>(</span>l<span>)</span> <span>{</span> <span>foo</span><span>(</span><span>)</span> <span>}</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>通过这种写法，编译器并没有为 lambda 表达式创建一个函数对象，而是生成了如下代码：</p>\n<div><pre><code>l<span>.</span><span>lock</span><span>(</span><span>)</span>\n<span>try</span> <span>{</span>\n  <span>foo</span><span>(</span><span>)</span>\n<span>}</span>\n<span>finally</span> <span>{</span>\n  l<span>.</span><span>unlock</span><span>(</span><span>)</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>为了让编译器进行这种操作，我们可以给函数使用 <code>inline</code> 修饰符。</p>\n<div><pre><code><span>inline</span> <span>fun</span> lock<span>&lt;</span>T<span>></span><span>(</span>lock<span>:</span> Lock<span>,</span> body<span>:</span> <span>(</span><span>)</span> <span>-></span> T<span>)</span><span>:</span> T <span>{</span>\n  <span>// ...</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>注意，<code>inline</code> 修饰符会对整个函数和其 lambda 表达式都有效，即整个函数和 lambda 都被替换成实际代码。</p>\n<div><pre><code><span>//  内联函数</span>\n<span>inline</span> <span>fun</span> <span>&lt;</span>T<span>></span> <span>inlineLock</span><span>(</span>lock<span>:</span> Lock<span>,</span> body<span>:</span> <span>(</span><span>)</span> <span>-></span> T<span>)</span><span>:</span> T <span>{</span>\n    lock<span>.</span><span>lock</span><span>(</span><span>)</span>\n    <span>try</span> <span>{</span>\n        <span>return</span> <span>body</span><span>(</span><span>)</span>\n    <span>}</span> <span>finally</span> <span>{</span>\n        lock<span>.</span><span>unlock</span><span>(</span><span>)</span>\n    <span>}</span>\n<span>}</span>\n\n<span>//  普通函数</span>\n<span>fun</span> <span>echo</span><span>(</span><span>)</span> <span>=</span> <span>println</span><span>(</span><span>\"foo\"</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>调用该内联函数：</p>\n<div><pre><code><span>val</span> lock <span>=</span> <span>ReentrantLock</span><span>(</span><span>)</span>\n<span>inlineLock</span><span>(</span>lock<span>,</span> <span>{</span> <span>echo</span><span>(</span><span>)</span> <span>}</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>以上代码会被编译为如下代码：</p>\n<div><pre><code><span>val</span> lock <span>=</span> <span>ReentrantLock</span><span>(</span><span>)</span>\nlock<span>.</span><span>lock</span><span>(</span><span>)</span>\n<span>try</span> <span>{</span>\n    <span>println</span><span>(</span><span>\"foo\"</span><span>)</span>\n<span>}</span> <span>finally</span> <span>{</span>\n    lock<span>.</span><span>unlock</span><span>(</span><span>)</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>函数内联技术会导致代码体积膨胀，为了减少代码体积膨胀，不要内联大体积的函数。</p>\n<h2 id=\"_3-noinline\"> 3. Noinline</h2>\n<p>有时候我们只希望对函数本身进行内联化操作，而对其 lambda 参数不使用内联。</p>\n<p>此时我们可以对参数使用 <code>noinline</code> 标识符</p>\n<div><pre><code><span>inline</span> <span>fun</span> <span>foo</span><span>(</span>inlined<span>:</span> <span>(</span><span>)</span> <span>-></span> Unit<span>,</span> <span>noinline</span> notInlined<span>:</span> <span>(</span><span>)</span> <span>-></span> Unit<span>)</span> <span>{</span>\n  <span>// ...</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>内联的 lambda 只能在内联函数内部调用，或者作为一个 <code>inline</code> 参数传给内联函数；\n但是非内联的 labmda 可以储存在变量中，或者传递它。</p>\n<h2 id=\"_4-非局部返回\"> 4. 非局部返回</h2>\n<p>普通的 <code>return</code> 默认返回的函数是<strong>最近的 <code>fun</code> 所定义的函数</strong>，这叫做局部返回(local return)</p>\n<p>所以，由于在 lambda 表达式内部不能让外部函数返回，所以在 lambda 表达式中使用 <code>return</code> 是被禁止的。</p>\n<div><pre><code><span>fun</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>\n  ordinaryFunction <span>{</span>\n     <span>return</span> <span>// ERROR: can not make `foo` return here</span>\n  <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>但是内联函数由于使用定义替代了调用，所以在其中使用 <code>return</code> 是可以的。</p>\n<div><pre><code><span>fun</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>\n  inlineFunction <span>{</span>\n    <span>return</span> <span>// OK: the lambda is inlined</span>\n  <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>这个例子中，<code>return</code> 会让 <code>foo()</code> 返回。</p>\n<p>这种返回方式被称作非局部返回。\n这种特性十分有效，所以被内建在标准的循环中</p>\n<div><pre><code><span>fun</span> <span>hasZeros</span><span>(</span>ints<span>:</span> List<span>&lt;</span>Int<span>></span><span>)</span><span>:</span> Boolean <span>{</span>\n  ints<span>.</span><span>forEach</span> <span>{</span>\n    <span>if</span> <span>(</span>it <span>==</span> <span>0</span><span>)</span> <span>return</span> <span>true</span> <span>// returns from hasZeros</span>\n  <span>}</span>\n  <span>return</span> <span>false</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>有时候，在调用处传入的 lambda 可能并不会被立即执行，而是传入到另一个线程中，或者另一个本地对象或本地方法中，此时，非本地返回同样会被禁止。</p>\n<p>为了提示编译器，我们使用 <code>crossinline</code> 标识符来指明当前的函数对象会在一个内嵌的函数或者对象，或是在另一个线程中执行。</p>\n<div><pre><code><span>inline</span> <span>fun</span> <span>f</span><span>(</span><span>crossinline</span> body<span>:</span> <span>(</span><span>)</span> <span>-></span> Unit<span>)</span> <span>{</span>\n    <span>val</span> f <span>=</span> <span>object</span><span>:</span> Runnable <span>{</span>\n        <span>override</span> <span>fun</span> <span>run</span><span>(</span><span>)</span> <span>=</span> <span>body</span><span>(</span><span>)</span>\n    <span>}</span>\n    <span>// ...</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p><code>break</code> 和 <code>continue</code> 尚未写入支持，但是 Kotlin 开发组预计会在未来实现这两个功能。</p>\n<h2 id=\"_5-类型参数\"> 5. 类型参数</h2>\n<p>有时候我们希望访问一个对象的类型参数，例如 <code>Class</code>，在 Java 中，这通常是通过<strong>反射机制</strong>来实现的。</p>\n<div><pre><code><span>fun</span> <span>&lt;</span>T<span>></span> TreeNode<span>.</span><span>findParentOfType</span><span>(</span>clazz<span>:</span> Class<span>&lt;</span>T<span>></span><span>)</span><span>:</span> T<span>?</span> <span>{</span>\n    <span>var</span> p <span>=</span> parent\n    <span>while</span> <span>(</span>p <span>!=</span> <span>null</span> <span>&amp;&amp;</span> <span>!</span>clazz<span>.</span><span>isInstance</span><span>(</span>p<span>)</span><span>)</span> <span>{</span>\n        p <span>=</span> p<span>.</span>parent\n    <span>}</span>\n    <span>@Suppress</span><span>(</span><span>\"UNCHECKED_CAST\"</span><span>)</span>\n    <span>return</span> p <span>as</span> T\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>调用这个函数：</p>\n<div><pre><code><span>val</span> root <span>=</span> <span>DefaultMutableTreeNode</span><span>(</span><span>\"root\"</span><span>)</span>\n<span>val</span> node1 <span>=</span> <span>DefaultMutableTreeNode</span><span>(</span><span>\"node1\"</span><span>)</span>\n<span>val</span> node1_1 <span>=</span> <span>DefaultMutableTreeNode</span><span>(</span><span>\"node1_1\"</span><span>)</span>\n<span>val</span> node2 <span>=</span> <span>DefaultMutableTreeNode</span><span>(</span><span>\"node2\"</span><span>)</span>\nnode1<span>.</span><span>add</span><span>(</span>node1_1<span>)</span>\nroot<span>.</span><span>add</span><span>(</span>node1<span>)</span>\nroot<span>.</span><span>add</span><span>(</span>node2<span>)</span>\n\n<span>var</span> parent <span>=</span> node1_1<span>.</span><span>findParentOfType</span><span>(</span>DefaultMutableTreeNode<span>::</span><span>class</span><span>.</span>java<span>)</span>\n<span>println</span><span>(</span>parent<span>)</span> <span>//  node1</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>可以看到由于依赖于反射，所以在函数体内不但要处理未检查类型转换的警告也很难处理具体类型的信息。</p>\n<p>而内联函数由于是复制到调用处，所以实际在运行时无需依赖反射，可以直接得到真实类型。\n要开启此功能，只需在泛型参数前加上 <code>reified</code> 关键字。</p>\n<div><pre><code><span>inline</span> <span>fun</span> <span>&lt;</span><span>reified</span> T<span>></span> TreeNode<span>.</span><span>inlineFindParentOfType</span><span>(</span><span>)</span><span>:</span> T<span>?</span> <span>{</span>\n    <span>var</span> p <span>=</span> parent\n    <span>while</span> <span>(</span>p <span>!=</span> <span>null</span> <span>&amp;&amp;</span> p <span>!</span><span>is</span> T<span>)</span> <span>{</span>\n        p <span>=</span> p<span>.</span>parent\n    <span>}</span>\n    <span>return</span> p <span>as</span> T\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>调用该函数</p>\n<div><pre><code><span>val</span> parent <span>=</span> node1_1<span>.</span>inlineFindParentOfType<span>&lt;</span>DefaultMutableTreeNode<span>></span><span>(</span><span>)</span>\n<span>println</span><span>(</span>parent<span>)</span> <span>//  node1</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>非内联的函数不能使用 <code>reified</code> 标识符。\n一个不具备运行时表示类型的类型（比如一个没有 reified 的类型参数，或者是一个虚拟的类型，如 <code>Nothing</code>），不能当做 <code>reified</code> 函数参数使用。</p>\n",
      "date_published": "2016-11-26T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Kotlin"
      ]
    },
    {
      "title": "Kotlin 内部类",
      "url": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E5%86%85%E9%83%A8%E7%B1%BB/",
      "id": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E5%86%85%E9%83%A8%E7%B1%BB/",
      "summary": "<h2 id=\"_1-声明\"> 1. 声明</h2>\n<div><pre><code><span>class</span> Outer <span>{</span>\n  <span>private</span> <span>val</span> bar<span>:</span> Int <span>=</span> <span>1</span>\n  <span>class</span> Nested <span>{</span>\n    <span>fun</span> <span>foo</span><span>(</span><span>)</span> <span>=</span> <span>2</span>\n  <span>}</span>\n<span>}</span>\n<p><span>val</span> demo <span>=</span> Outer<span>.</span><span>Nested</span><span>(</span><span>)</span><span>.</span><span>foo</span><span>(</span><span>)</span> <span>// == 2</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div></p>\n",
      "content_html": "<h2 id=\"_1-声明\"> 1. 声明</h2>\n<div><pre><code><span>class</span> Outer <span>{</span>\n  <span>private</span> <span>val</span> bar<span>:</span> Int <span>=</span> <span>1</span>\n  <span>class</span> Nested <span>{</span>\n    <span>fun</span> <span>foo</span><span>(</span><span>)</span> <span>=</span> <span>2</span>\n  <span>}</span>\n<span>}</span>\n\n<span>val</span> demo <span>=</span> Outer<span>.</span><span>Nested</span><span>(</span><span>)</span><span>.</span><span>foo</span><span>(</span><span>)</span> <span>// == 2</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div>\n<h2 id=\"_2-inner-关键字\"> 2. <code>inner</code> 关键字</h2>\n<p>需要使用 <code>inner</code> 关键字来指明一个内部类<strong>允许访问外部类属性。</strong></p>\n<div><pre><code><span>class</span> Outer <span>{</span>\n  <span>private</span> <span>val</span> bar<span>:</span> Int <span>=</span> <span>1</span>\n  <span>inner</span> <span>class</span> Inner <span>{</span>\n    <span>fun</span> <span>foo</span><span>(</span><span>)</span> <span>=</span> bar\n  <span>}</span>\n<span>}</span>\n\n<span>val</span> demo <span>=</span> <span>Outer</span><span>(</span><span>)</span><span>.</span><span>Inner</span><span>(</span><span>)</span><span>.</span><span>foo</span><span>(</span><span>)</span> <span>// == 1</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id=\"_3-获取外部类实例\"> 3. 获取外部类实例</h2>\n<p>通过使用<a href=\"https://kotlinlang.org/docs/reference/this-expressions.html\" target=\"_blank\" rel=\"noopener noreferrer\">带标签的 <code>this</code></a> 可以获取外部类实例。</p>\n<h2 id=\"_4-匿名内部类\"> 4. 匿名内部类</h2>\n<p>Kotlin 没有 Java 中的匿名类，反之，Kotlin 使用**对象表达式(object expression)**来实现这一功能。</p>\n<div><pre><code>window<span>.</span><span>addMouseListener</span><span>(</span><span>object</span><span>:</span> <span>MouseAdapter</span><span>(</span><span>)</span> <span>{</span>\n  <span>override</span> <span>fun</span> <span>mouseClicked</span><span>(</span>e<span>:</span> MouseEvent<span>)</span> <span>{</span>\n    <span>// ...</span>\n  <span>}</span>\n\n  <span>override</span> <span>fun</span> <span>mouseEntered</span><span>(</span>e<span>:</span> MouseEvent<span>)</span> <span>{</span>\n    <span>// ...</span>\n  <span>}</span>\n<span>}</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>如果内部类对应的接口只有一个方法，那么也可以使用 lambda 表达式来创建这个内部类。</p>\n<div><pre><code><span>val</span> listener <span>=</span> ActionListener <span>{</span> <span>println</span><span>(</span><span>\"clicked\"</span><span>)</span> <span>}</span>\n</code></pre>\n<div><span>1</span><br></div></div>",
      "date_published": "2016-11-26T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Kotlin"
      ]
    },
    {
      "title": "Kotlin 函数",
      "url": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E5%87%BD%E6%95%B0/",
      "id": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E5%87%BD%E6%95%B0/",
      "summary": "<h2 id=\"_1-声明\"> 1. 声明</h2>\n<p>函数使用 <code>fun</code> 关键字进行声明。</p>\n<div><pre><code><span>fun</span> <span>double</span><span>(</span>x<span>:</span> Int<span>)</span><span>:</span> Int <span>{</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div>",
      "content_html": "<h2 id=\"_1-声明\"> 1. 声明</h2>\n<p>函数使用 <code>fun</code> 关键字进行声明。</p>\n<div><pre><code><span>fun</span> <span>double</span><span>(</span>x<span>:</span> Int<span>)</span><span>:</span> Int <span>{</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div>\n<h2 id=\"_2-调用\"> 2. 调用</h2>\n<p>函数的调用和其他语言一样</p>\n<div><pre><code><span>val</span> result <span>=</span> <span>double</span><span>(</span><span>2</span><span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_2-1-类成员函数调用\"> 2.1 类成员函数调用</h3>\n<p>类成员函数使用 <code>.</code> 进行调用。</p>\n<div><pre><code><span>Sample</span><span>(</span><span>)</span><span>.</span><span>foo</span><span>(</span><span>)</span> <span>// create instance of class Sample and calls foo</span>\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_2-2-中继调用\"> 2.2 中继调用</h3>\n<p>使用了 <code>infix</code> 标识符的函数可以进行中继调用</p>\n<h4 id=\"_2-2-1-条件\"> 2.2.1 条件</h4>\n<ul>\n<li>函数是成员函数或者扩展</li>\n<li>函数只有一个参数</li>\n<li>使用 <code>infix</code> 进行标识</li>\n</ul>\n<h4 id=\"_2-2-2-例子\"> 2.2.2 例子</h4>\n<div><pre><code><span>// Define extension to Int</span>\n<span>infix</span> <span>fun</span> Int<span>.</span><span>shl</span><span>(</span>x<span>:</span> Int<span>)</span><span>:</span> Int <span>{</span>\n<span>..</span><span>.</span>\n<span>}</span>\n\n<span>// call extension function using infix notation</span>\n\n<span>1</span> <span>shl</span> <span>2</span>\n\n<span>// is the same as</span>\n\n<span>1</span><span>.</span><span>shl</span><span>(</span><span>2</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h2 id=\"_3-参数\"> 3. 参数</h2>\n<p>函数的参数使用 Pascal 的形式进行调用。(<code>name: Type</code>)</p>\n<p>使用逗号分隔不同的参数。</p>\n<p>每个参数都<strong>必须显式指明类型</strong></p>\n<div><pre><code><span>fun</span> <span>powerOf</span><span>(</span>number<span>:</span> Int<span>,</span> exponent<span>:</span> Int<span>)</span> <span>{</span>\n<span>..</span><span>.</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"_3-1-默认参数\"> 3.1 默认参数</h3>\n<p>Kotlin 中允许使用默认参数，这样相比 Java 就减少了函数重载的使用。</p>\n<blockquote>\n<p>在 Java 中，如果出现多个重载函数，开销将迅速增长。\n但是 Kotlin 相对于 Python 来说仍然支持函数重载特性</p>\n</blockquote>\n<p>使用 <code>=</code> 来指定参数的默认值，而且 Kotlin 不对默认参数的位置进行要求。</p>\n<div><pre><code><span>fun</span> <span>read</span><span>(</span>b<span>:</span> Array<span>&lt;</span>Byte<span>></span><span>,</span> off<span>:</span> Int <span>=</span> <span>0</span><span>,</span> len<span>:</span> Int <span>=</span> b<span>.</span><span>size</span><span>(</span><span>)</span><span>)</span> <span>{</span>\n<span>..</span><span>.</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>通过类重载的方法<strong>不允许拥有默认参数</strong></p>\n<div><pre><code><span>open</span> <span>class</span> A <span>{</span>\n    <span>open</span> <span>fun</span> <span>foo</span><span>(</span>i<span>:</span> Int <span>=</span> <span>10</span><span>)</span> <span>{</span> <span>..</span><span>.</span> <span>}</span>\n<span>}</span>\n\n<span>class</span> B <span>:</span> <span>A</span><span>(</span><span>)</span> <span>{</span>\n    <span>override</span> <span>fun</span> <span>foo</span><span>(</span>i<span>:</span> Int<span>)</span> <span>{</span> <span>..</span><span>.</span> <span>}</span>  <span>// no default value allowed</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h3 id=\"_3-2-参数指定\"> 3.2 参数指定</h3>\n<p>在函数调用时，Kotlin 支持参数的指定，类似 Python</p>\n<p>例如，对如下函数：</p>\n<div><pre><code><span>fun</span> <span>reformat</span><span>(</span>str<span>:</span> String<span>,</span>\n             normalizeCase<span>:</span> Boolean <span>=</span> <span>true</span><span>,</span>\n             upperCaseFirstLetter<span>:</span> Boolean <span>=</span> <span>true</span><span>,</span>\n             divideByCamelHumps<span>:</span> Boolean <span>=</span> <span>false</span><span>,</span>\n             wordSeparator<span>:</span> Char <span>=</span> <span>' '</span><span>)</span> <span>{</span>\n<span>..</span><span>.</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>在<strong>调用时</strong>使用 <code>=</code> 来指定参数。</p>\n<div><pre><code><span>reformat</span><span>(</span>str<span>,</span>\n    normalizeCase <span>=</span> <span>true</span><span>,</span>\n    upperCaseFirstLetter <span>=</span> <span>true</span><span>,</span>\n    divideByCamelHumps <span>=</span> <span>false</span><span>,</span>\n    wordSeparator <span>=</span> <span>'_'</span>\n  <span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>当然我们也可以不指定所有的参数，如果参数有默认值的话。\n此时，没有被指定的实参按照顺序赋予形参。</p>\n<div><pre><code><span>reformat</span><span>(</span>str<span>,</span> wordSeparator <span>=</span> <span>'_'</span><span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>需要注意的是，<strong>调用 Java 的方法时，不能使用参数指定。</strong></p>\n<h3 id=\"_3-3-不定参数\"> 3.3 不定参数</h3>\n<p>Kotlin 同样支持不定参数，只需要给参数标识上 <code>vararg</code> 即可。</p>\n<p>例如：</p>\n<div><pre><code><span>fun</span> <span>&lt;</span>T<span>></span> <span>asList</span><span>(</span><span>vararg</span> ts<span>:</span> T<span>)</span><span>:</span> List<span>&lt;</span>T<span>></span> <span>{</span>\n  <span>val</span> result <span>=</span> ArrayList<span>&lt;</span>T<span>></span><span>(</span><span>)</span>\n  <span>for</span> <span>(</span>t <span>in</span> ts<span>)</span> <span>// ts is an Array</span>\n    result<span>.</span><span>add</span><span>(</span>t<span>)</span>\n  <span>return</span> result\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>与 Java 一样，不定参数会被视作一个 <code>Array</code> 对象来进行处理。</p>\n<p><strong>只有一个参数能被标记为 <code>vararg</code></strong>。</p>\n<p>不定参数可以不处于最后位置，此时，只能通过<strong>参数指定</strong>的形式对剩下的参数进行赋值，或者如果其中一个参数是函数，那么可以在<strong>括号外</strong>使用 lambda 表达式。</p>\n<p>此外，Kotlin 中可以将一个 <code>Array</code> 对象传给不定参数，通过使用 spread operator (<code>*</code>) 来实现。</p>\n<div><pre><code><span>val</span> a <span>=</span> <span>arrayOf</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>)</span>\n<span>val</span> list <span>=</span> <span>asList</span><span>(</span><span>-</span><span>1</span><span>,</span> <span>0</span><span>,</span> <span>*</span>a<span>,</span> <span>4</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h2 id=\"_4-返回值\"> 4. 返回值</h2>\n<p>如果一个函数没有指明返回值或者没有使用 <code>return</code> 语句，那么默认返回 <code>Unit</code>。</p>\n<blockquote>\n<p><code>Unit</code> 是一种特有类型，只具有 <code>Unit</code> 一个值。\n使用 <code>Unit</code> 的原因在于，Kotlin 一切都是对象，使用一个具体类型能使泛型更好的工作</p>\n</blockquote>\n<blockquote>\n<p>不使用 <code>Void</code> 的原因：因为已经存在了一个 <code>Nothing</code> 类，为了防止意思冲突，所以使用 <code>Unit</code> 来指代 Java 中的 <code>void</code></p>\n</blockquote>\n<div><pre><code><span>fun</span> <span>printHello</span><span>(</span>name<span>:</span> String<span>?</span><span>)</span><span>:</span> Unit <span>{</span>\n    <span>if</span> <span>(</span>name <span>!=</span> <span>null</span><span>)</span>\n        <span>println</span><span>(</span><span>\"Hello <span><span>${</span>name<span>}</span></span>\"</span><span>)</span>\n    <span>else</span>\n        <span>println</span><span>(</span><span>\"Hi there!\"</span><span>)</span>\n    <span>// `return Unit` or `return` is optional</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>当然，<code>Unit</code> 的返回值声明也是可以省略的。</p>\n<blockquote>\n<p>实际上，在编码规范中，要求对其省略。</p>\n</blockquote>\n<div><pre><code><span>fun</span> <span>printHello</span><span>(</span>name<span>:</span> String<span>?</span><span>)</span> <span>{</span>\n    <span>..</span><span>.</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"_4-1-单一表达式函数\"> 4.1 单一表达式函数</h3>\n<p>当一个函数只具有一条表达式时，花括号可以被省略。</p>\n<div><pre><code><span>fun</span> <span>double</span><span>(</span>x<span>:</span> Int<span>)</span><span>:</span> Int <span>=</span> x <span>*</span> <span>2</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>此时，如果编译器能推断出表达式的值，那么返回类型的声明也是可以省略的。</p>\n<div><pre><code><span>fun</span> <span>double</span><span>(</span>x<span>:</span> Int<span>)</span> <span>=</span> x <span>*</span> <span>2</span>\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_4-2-非单一表达式函数\"> 4.2 非单一表达式函数</h3>\n<p>如果函数不是单一表达式，而且具有返回值，那么返回类型就必须被声明。</p>\n<h2 id=\"_5-函数作用域\"> 5. 函数作用域</h2>\n<p>在 Kotlin 中，函数可以在 Top-level 声明，也就是说不需要用类来包裹函数。</p>\n<p>函数同样也可以是<strong>局部的</strong>，也就是说它可以是成员函数或者函数的扩展。</p>\n<h3 id=\"_5-1-局部函数\"> 5.1 局部函数</h3>\n<p>Kotlin 支持局部函数，例如<strong>嵌套函数</strong></p>\n<div><pre><code><span>fun</span> <span>dfs</span><span>(</span>graph<span>:</span> Graph<span>)</span> <span>{</span>\n  <span>fun</span> <span>dfs</span><span>(</span>current<span>:</span> Vertex<span>,</span> visited<span>:</span> Set<span>&lt;</span>Vertex<span>></span><span>)</span> <span>{</span>\n    <span>if</span> <span>(</span><span>!</span>visited<span>.</span><span>add</span><span>(</span>current<span>)</span><span>)</span> <span>return</span>\n    <span>for</span> <span>(</span>v <span>in</span> current<span>.</span>neighbors<span>)</span>\n      <span>dfs</span><span>(</span>v<span>,</span> visited<span>)</span>\n  <span>}</span>\n\n  <span>dfs</span><span>(</span>graph<span>.</span>vertices<span>[</span><span>0</span><span>]</span><span>,</span> <span>HashSet</span><span>(</span><span>)</span><span>)</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>同时，内部函数可以访问外部函数的局部变量，也就是<strong>闭包</strong>属性。</p>\n<p>所以对于上面的例子，<code>visited</code> 可以作为一个局部变量。</p>\n<div><pre><code><span>fun</span> <span>dfs</span><span>(</span>graph<span>:</span> Graph<span>)</span> <span>{</span>\n  <span>val</span> visited <span>=</span> HashSet<span>&lt;</span>Vertex<span>></span><span>(</span><span>)</span>\n  <span>fun</span> <span>dfs</span><span>(</span>current<span>:</span> Vertex<span>)</span> <span>{</span>\n    <span>if</span> <span>(</span><span>!</span>visited<span>.</span><span>add</span><span>(</span>current<span>)</span><span>)</span> <span>return</span>\n    <span>for</span> <span>(</span>v <span>in</span> current<span>.</span>neighbors<span>)</span>\n      <span>dfs</span><span>(</span>v<span>)</span>\n  <span>}</span>\n\n  <span>dfs</span><span>(</span>graph<span>.</span>vertices<span>[</span><span>0</span><span>]</span><span>)</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h2 id=\"_6-尾调用\"> 6. 尾调用</h2>\n<p>对于一些算法实现来说，使用递归实现会令算法过程更加明晰。</p>\n<p>对此，Kotlin 拥有一个特殊的关键字 <code>tailrec</code>，使用它可以支持使用尾调用(tail recursion)形式的函数。</p>\n<p>使用 <code>tailrec</code> 关键字的原因在于：\n虽然不使用这个关键字也可以实现尾调用形式的函数，\n但是 <code>tailrec</code> 会指示编译器将其优化为相应的循环形式，\n从而避免了因递归调用过多造成的 <code>StackOverflow</code>。</p>\n<div><pre><code><span>tailrec</span> <span>fun</span> <span>findFixPoint</span><span>(</span>x<span>:</span> Double <span>=</span> <span>1.0</span><span>)</span><span>:</span> Double\n        <span>=</span> <span>if</span> <span>(</span>x <span>==</span> Math<span>.</span><span>cos</span><span>(</span>x<span>)</span><span>)</span> x <span>else</span> <span>findFixPoint</span><span>(</span>Math<span>.</span><span>cos</span><span>(</span>x<span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>使用 <code>tailrec</code> 的函数必须满足尾调用形式，即<strong>函数的最后一个操作就是调用其自身。</strong></p>\n<p>当你的递归调用操作之后还存在更多代码时，不能对函数使用 <code>tailrec</code></p>\n",
      "date_published": "2016-11-26T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Kotlin"
      ]
    },
    {
      "title": "Kotlin 可见性修饰符",
      "url": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E5%8F%AF%E8%A7%81%E6%80%A7%E4%BF%AE%E9%A5%B0%E7%AC%A6/",
      "id": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E5%8F%AF%E8%A7%81%E6%80%A7%E4%BF%AE%E9%A5%B0%E7%AC%A6/",
      "summary": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>Kotlin 的可见性修饰符和 Java 及 C++ 有比较大的区别。</p>\n<p>首先，Kotlin 拥有<strong>四种</strong>可见性修饰符:\n<code>public</code> <code>private</code> <code>protected</code> <code>internal</code></p>\n<p><strong>默认的可见性修饰符为 <code>public</code></strong>。</p>\n",
      "content_html": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>Kotlin 的可见性修饰符和 Java 及 C++ 有比较大的区别。</p>\n<p>首先，Kotlin 拥有<strong>四种</strong>可见性修饰符:\n<code>public</code> <code>private</code> <code>protected</code> <code>internal</code></p>\n<p><strong>默认的可见性修饰符为 <code>public</code></strong>。</p>\n\n<h2 id=\"_2-包级别\"> 2. 包级别</h2>\n<p>函数，变量，类都可以在 &quot;top-level&quot; 级别声明，即<strong>直接在包内声明</strong>。</p>\n<div><pre><code><span>// file name: example.kt</span>\n<span>package</span> foo\n\n<span>fun</span> <span>baz</span><span>(</span><span>)</span> <span>{</span><span>}</span>\n<span>class</span> Bar <span>{</span><span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>在包级别中的可见性规则如下：</p>\n<ul>\n<li>如果没有显式指定，那么 <code>public</code> 是默认的可见性，即你声明的内容在<strong>任意地方</strong>均可见</li>\n<li>如果指定了 <code>private</code>，那么只有<strong>同文件</strong>可见</li>\n<li>如果指定了 <code>internal</code>，那么只有在<strong>同一个模块</strong>可见</li>\n<li><code>protected</code> 修饰符不支持在包级别使用</li>\n</ul>\n<p>例如：</p>\n<div><pre><code><span>// file name: example.kt</span>\n<span>package</span> foo\n\n<span>private</span> <span>fun</span> <span>foo</span><span>(</span><span>)</span> <span>{</span><span>}</span> <span>// visible inside example.kt</span>\n\n<span>public</span> <span>var</span> bar<span>:</span> Int <span>=</span> <span>5</span> <span>// property is visible everywhere</span>\n    <span>private</span> <span>set</span>         <span>// setter is visible only in example.kt</span>\n\n<span>internal</span> <span>val</span> baz <span>=</span> <span>6</span>    <span>// visible inside the same module</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h2 id=\"_3-类级别\"> 3. 类级别</h2>\n<p>当在类或者接口中声明属性或方法时，也同样有可见性的修饰符作用。\n此时，规则如下。</p>\n<ul>\n<li>如果没有显式指定，那么默认为 <code>public</code>，此时，内容对<strong>所有能看见这个类的对象</strong>都是可见的</li>\n<li>如果指定了 <code>private</code>，那么只有在类的内部才可见</li>\n<li>如果指定了 <code>protected</code>，那么只在类内部和其子类可见，如果 override 了一个 <code>protected</code> 变量，那么 override 后的变量自动具有 <code>protected</code> 属性</li>\n<li>如果指定了 <code>internal</code>，那么在模块内可见</li>\n</ul>\n<blockquote>\n<p>需要注意的是，不像 Java，\n外部类<strong>不能</strong>看见内部类的 <code>private</code> 变量。</p>\n</blockquote>\n<div><pre><code><span>open</span> <span>class</span> Outer <span>{</span>\n    <span>private</span> <span>val</span> a <span>=</span> <span>1</span>\n    <span>protected</span> <span>open</span> <span>val</span> b <span>=</span> <span>2</span>\n    <span>internal</span> <span>val</span> c <span>=</span> <span>3</span>\n    <span>val</span> d <span>=</span> <span>4</span>  <span>// public by default</span>\n\n    <span>protected</span> <span>class</span> Nested <span>{</span>\n        <span>public</span> <span>val</span> e<span>:</span> Int <span>=</span> <span>5</span>\n    <span>}</span>\n<span>}</span>\n\n<span>class</span> Subclass <span>:</span> <span>Outer</span><span>(</span><span>)</span> <span>{</span>\n    <span>// a is not visible</span>\n    <span>// b, c and d are visible</span>\n    <span>// Nested and e are visible</span>\n\n    <span>override</span> <span>val</span> b <span>=</span> <span>5</span>   <span>// 'b' is protected</span>\n<span>}</span>\n\n<span>class</span> <span>Unrelated</span><span>(</span>o<span>:</span> Outer<span>)</span> <span>{</span>\n    <span>// o.a, o.b are not visible</span>\n    <span>// o.c and o.d are visible (same module)</span>\n    <span>// Outer.Nested is not visible, and Nested::e is not visible either</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><h2 id=\"_4-构造器\"> 4. 构造器</h2>\n<p>同样的，构造器也可以指定可见性，但是如果可见性被指定了，那么 <code>constructor</code> 关键字就必须存在。</p>\n<div><pre><code><span>class</span> C <span>private</span> <span>constructor</span><span>(</span>a<span>:</span> Int<span>)</span> <span>{</span> <span>..</span><span>.</span> <span>}</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>构造器的默认可见性为 <code>public</code>，即能看到类，就能看到构造器。</p>\n<h2 id=\"_5-关于模块\"> 5. 关于模块</h2>\n<p>一个具有 <code>internal</code> 可见性的变量，方法，类，函数在其模块内可见。</p>\n<p>所谓的模块，更通俗一点来说就是<strong>在一起编译的 Kotlin 文件</strong>，比如说：</p>\n<ul>\n<li>一个 IntelliJ IDEA module</li>\n<li>一个 Maven 或者 Gradle 工程</li>\n<li>一个使用同一个 Ant Task 调用的文件集合</li>\n</ul>\n",
      "date_published": "2016-11-26T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Kotlin"
      ]
    },
    {
      "title": "Kotlin 基本类型",
      "url": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/",
      "id": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/",
      "summary": "<p><strong>Kotlin 中，任何事物都是对象。</strong></p>\n<h2 id=\"_1-数字类型\"> 1. 数字类型</h2>\n<p>Kotlin 中的数字类型有 <code>Double</code>、<code>Float</code>、<code>Long</code>、<code>Int</code>、<code>Short</code>、<code>Byte</code></p>\n",
      "content_html": "<p><strong>Kotlin 中，任何事物都是对象。</strong></p>\n<h2 id=\"_1-数字类型\"> 1. 数字类型</h2>\n<p>Kotlin 中的数字类型有 <code>Double</code>、<code>Float</code>、<code>Long</code>、<code>Int</code>、<code>Short</code>、<code>Byte</code></p>\n\n<h3 id=\"_1-1-位宽\"> 1.1 位宽</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Type</th>\n<th style=\"text-align:center\">BitWidth</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Double</td>\n<td style=\"text-align:center\">64</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Float</td>\n<td style=\"text-align:center\">32</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Long</td>\n<td style=\"text-align:center\">64</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Int</td>\n<td style=\"text-align:center\">32</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Short</td>\n<td style=\"text-align:center\">16</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Byte</td>\n<td style=\"text-align:center\">8</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>注意，在 Kotlin 中，<strong>字符不是一种数字类型</strong></p>\n</blockquote>\n<h3 id=\"_1-2-字面常量\"> 1.2 字面常量</h3>\n<p>数字类型可以有多种字面表示形式。</p>\n<ol>\n<li>整数</li>\n</ol>\n<ul>\n<li>十进制数字 <code>123</code>\n<ul>\n<li><code>Long</code> 类型通过加 <code>L</code> 后缀实现: <code>123L</code></li>\n</ul>\n</li>\n<li>十六进制 <code>0x0F</code></li>\n<li>二进制 <code>0b00001011</code></li>\n</ul>\n<ol start=\"2\">\n<li>浮点数\n<ul>\n<li>默认为 <code>Double</code> 类型: <code>123.5</code>, <code>123.5e10</code></li>\n<li>使用 <code>f</code> 或者 <code>F</code> 后缀来表示 <code>Float</code>: <code>123.5f</code></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"_1-3-表示法\"> 1.3 表示法</h3>\n<p>Kotlin 中，任何数字都会被<strong>自动装箱</strong></p>\n<div><pre><code><span>val</span> a<span>:</span> Int <span>=</span> <span>10000</span>\n<span>print</span><span>(</span>a <span>===</span> a<span>)</span> <span>// true</span>\n<span>val</span> boxedA<span>:</span> Int<span>?</span> <span>=</span> a <span>// 在类型后加 ? 表示一个 Nullable 对象</span>\n<span>val</span> anotherBoxedA<span>:</span> Int<span>?</span> <span>=</span> a\n<span>print</span><span>(</span>boxedA <span>===</span> anotherBoxedA<span>)</span> <span>// false</span>\n<span>print</span><span>(</span>boxedA <span>==</span> anotherBoxedA<span>)</span> <span>// true</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><blockquote>\n<p>上面是一个很好的例子，由于所有的数字都会被自动装箱，所以 <strong><code>boxedA</code> 与 <code>anotherBoxedA</code> 不一致</strong>。\n但是由于两者均指向 <code>a</code>，所以保持了相等性。</p>\n</blockquote>\n<blockquote>\n<p>这里的 <code>Int</code> 与 Java 的 <code>Integer</code> 相同</p>\n</blockquote>\n<h3 id=\"_1-4-转换\"> 1.4 转换</h3>\n<p>Kotlin 的原则之一就是尽量让事务明显化。\n所以，Kotlin <strong>禁止隐式转换</strong>，就算是隐式向上转换也是不允许的。</p>\n<div><pre><code><span>val</span> a<span>:</span> Int<span>?</span> <span>=</span> <span>1</span>\n<span>val</span> b<span>:</span> Long<span>?</span> <span>=</span> a\n<span>print</span><span>(</span>a <span>==</span> b<span>)</span> <span>// false</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><blockquote>\n<p>由于 <code>Int</code> 不是 <code>Long</code> 的子类，而且禁止隐式转换，所以即使 <code>b</code> 指向了 <code>a</code>，它们也不相等。</p>\n</blockquote>\n<div><pre><code><span>val</span> b<span>:</span> Byte <span>=</span> <span>1</span> <span>// OK</span>\n<span>val</span> i<span>:</span> Int <span>=</span> b <span>// ERROR</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><blockquote>\n<p>字面值会经编译器静态检查赋值给整数形式的变量，但是由于禁止隐式转换，第二个语句会产生 ERROR。</p>\n</blockquote>\n<p>需要转换时，应采用内置的转换方法</p>\n<ul>\n<li><code>toByte()</code></li>\n<li><code>toShort()</code></li>\n<li><code>toInt()</code></li>\n<li><code>toLong()</code></li>\n<li><code>toFloat()</code></li>\n<li><code>toDouble()</code></li>\n<li><code>toChar()</code></li>\n</ul>\n<h3 id=\"_1-5-位运算符\"> 1.5 位运算符</h3>\n<p>Kotlin 支持全套 Java 的普通数字运算符。\n但关于位运算符则稍有不同，Kotlin 采用<strong>单词型</strong>而非 Java 的<strong>符号型</strong>位运算符。</p>\n<p>下面是 Kotlin 的位运算符列表</p>\n<ul>\n<li><code>shl(bits)</code> =&gt; 位左移，相当于 Java 的 <code>&lt;&lt;</code></li>\n<li><code>shr(bits)</code> =&gt; 位右移，相当于 Java 的 <code>&gt;&gt;</code></li>\n<li><code>ushr(bits)</code> =&gt; 无符号数右移，相当于 Java 的 <code>&gt;&gt;&gt;</code></li>\n<li><code>and(bits)</code> =&gt; 按位取与操作，相当于 Java 的 <code>&amp;</code></li>\n<li><code>or(bits)</code> =&gt; 按位取或操作，相当于 Java 的 <code>|</code></li>\n<li><code>xor(bits)</code> =&gt; 按位取异或操作，相当于 Java 的 <code>^</code></li>\n<li><code>inv()</code> =&gt; 按位取反操作，相当于 Java 的 <code>~</code></li>\n</ul>\n<h2 id=\"_2-字符类型\"> 2. 字符类型</h2>\n<p>字符类型使用 <code>Char</code> 来表示，<strong>字符不是数字</strong>。</p>\n<div><pre><code><span>fun</span> <span>check</span><span>(</span>c<span>:</span> Char<span>)</span> <span>{</span>\n    <span>if</span> <span>(</span>c <span>==</span> <span>1</span><span>)</span> <span>// ERROR</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>字符使用单引号括起来<code>'1'</code>，反斜杠 <code>\\</code> 表示转义，转义字符和 Java 相同。</p>\n<p>和数字类型一样，字符类型也被自动装箱，保持相等性，而不保持一致性。</p>\n<h2 id=\"_3-布尔类型\"> 3. 布尔类型</h2>\n<p>使用 <code>Boolean</code> 来表示布尔类型，布尔类型有两个值，<code>true</code> 和 <code>false</code>。</p>\n<p>内置的逻辑布尔操作与 Java 相同。</p>\n<h2 id=\"_4-数组\"> 4. 数组</h2>\n<p>使用 <code>Array</code> 表示数组，这是一个泛型类，类似于 Java 中的 <code>ArrayList&lt;T&gt;</code>，但并不完全相同。</p>\n<p>数组是 <strong>invariant</strong> 的，也就是说不能把 <code>Array&lt;String&gt;</code> 的数组赋予 <code>Array&lt;Any&gt;</code> 的实例，这会产生一个<strong>runtime failure</strong></p>\n<blockquote>\n<p>Kotlin 同样拥有 <code>List</code> 和 <code>ArrayList</code> 类型，在 JVM 上，<code>Array</code> 会被替换成 Java array。</p>\n</blockquote>\n<blockquote>\n<p>所以，事实上 <code>Array</code> 只是</p>\n</blockquote>\n<h3 id=\"_4-1-创建数组\"> 4.1 创建数组</h3>\n<p>使用 <code>arrayOf()</code> 创建数组。</p>\n<div><pre><code><span>val</span> array <span>=</span> <span>arrayOf</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>)</span>\n<span>val</span> nullArray <span>=</span> <span>arrayOfNulls</span><span>(</span><span>5</span><span>)</span> <span>// Array with 5 null elements</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><blockquote>\n<p>注意变量具有自动推断功能，类似 C++ 中的 <code>auto</code></p>\n</blockquote>\n<p>也可以使用 <code>Array()</code> 创建数组。</p>\n<div><pre><code><span>// Crates an Array&lt;String> with values</span>\n<span>// [\"0\", \"1\", \"4\", \"9\", \"16\"]</span>\n<span>val</span> asc <span>=</span> <span>Array</span><span>(</span><span>5</span><span>,</span> <span>{</span>i <span>-></span> <span>(</span>i <span>*</span> i<span>)</span><span>.</span><span>toString</span><span>(</span><span>)</span><span>}</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>Kotlin 内置了一些特定的数组类型，如 <code>IntArray</code>, <code>ByteArray</code> 等。</p>\n<div><pre><code><span>val</span> x<span>:</span> IntArray <span>=</span> <span>intArrayOf</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_4-2-访问数组\"> 4.2 访问数组</h3>\n<p><code>Array</code> 内置了 <code>get()</code> 和 <code>set()</code> 方法和 <code>size</code> 属性。\n但是也支持使用方括号进行访问的操作 <code>[]</code></p>\n<h3 id=\"_4-3-多维数组\"> 4.3 多维数组</h3>\n<div><pre><code><span>val</span> int2d<span>:</span> Array<span>&lt;</span>IntArray<span>></span>\nint2d <span>=</span> <span>arrayOf</span><span>(</span><span>intArrayOf</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>)</span><span>,</span> <span>intArrayOf</span><span>(</span><span>4</span><span>,</span> <span>5</span><span>,</span> <span>6</span><span>)</span><span>,</span> <span>intArrayOf</span><span>(</span><span>7</span><span>,</span> <span>8</span><span>,</span> <span>9</span><span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h2 id=\"_5-字符串\"> 5. 字符串</h2>\n<p>使用 <code>String</code> 来表示字符串。与 Java 一样，字符串是一个不可变对象。</p>\n<h3 id=\"_5-1-相对-java-增加的新特性\"> 5.1 相对 Java 增加的新特性</h3>\n<p>与 Java 不同的是，Kotlin 支持使用方括号 <code>[]</code> 来获取字符串中的字符，同时也支持对字符串字符进行遍历。</p>\n<div><pre><code><span>for</span> <span>(</span>c <span>in</span> str<span>)</span> <span>{</span>\n    <span>println</span><span>(</span>c<span>)</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"_5-2-raw-string\"> 5.2 raw string</h3>\n<p>此外，Kotlin 还吸收了 Python 的多行字符串特性，使用三个双引号来表示一个 <strong>raw string</strong>，raw string 不接受转义，其中任何的字符都是字面字符。</p>\n<div><pre><code><span>val</span> rawString <span>=</span> <span>\"\"\"\n    This is a raw string.\n    \\n and \\t will be displayed as\n    its literal stirng.\n\"\"\"</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id=\"_5-3-字符串模板\"> 5.3 字符串模板</h3>\n<p>Kotlin 字符串具有模板功能，使用 <code>$</code> 来指定参数\n例如：</p>\n<div><pre><code><span>val</span> i <span>=</span> <span>10</span>\n<span>val</span> s <span>=</span> <span>\"i = <span>$i</span>\"</span> <span>// evaluates to \"i = 10\"</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>也可以使用花括号 <code>{}</code> 来获取<strong>对象的属性</strong>填充到字符串中。\n例如：</p>\n<div><pre><code><span>val</span> s <span>=</span> <span>\"abc\"</span>\n<span>val</span> str <span>=</span> <span>\"<span>$s</span>.lenth is <span><span>${</span>s<span>.</span>lenth<span>}</span></span>\"</span> <span>//  evaluates to \"abc.length is 3\"</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>需要注意的是，字符串的模板功能不仅可以在普通字符串中使用，同时<strong>也可以在 raw string 中使用。</strong></p>\n<p>此时，如果需要表示 <code>$</code> 美元符号，必须使用以下表达式：</p>\n<div><pre><code><span>var</span> price <span>=</span> <span>\"\"\"\n<span><span>${</span><span>'$'</span><span>}</span></span>9.99\n\"\"\"</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><blockquote>\n<p>这里使用双引号<code>${&quot;$&quot;}</code>也是可以的，模板引用一个字面量时，结果就是它本身。</p>\n</blockquote>\n",
      "date_published": "2017-03-17T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Kotlin"
      ]
    },
    {
      "title": "Kotlin 基础",
      "url": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E5%9F%BA%E7%A1%80/",
      "id": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E5%9F%BA%E7%A1%80/",
      "summary": "<h2 id=\"_1-基本语法\"> 1. 基本语法</h2>\n<h3 id=\"_1-1-变量定义\"> 1.1 变量定义</h3>\n<ol>\n<li>\n<p>使用 <code>val</code> 定义<strong>常量</strong>（只读）</p>\n<div><pre><code><span>val</span> a<span>:</span> Int <span>=</span> <span>1</span>\n<span>val</span> b <span>=</span> <span>1</span>   <span>// 类型可以被自动推断</span>\n<span>val</span> c<span>:</span> Int  <span>// 如果没有进行变量初始化，则需要指定变量类型</span>\nc <span>=</span> <span>1</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><blockquote>\n<p>注意，kotlin 取消了分号</p>\n</blockquote>\n</li>\n</ol>\n",
      "content_html": "<h2 id=\"_1-基本语法\"> 1. 基本语法</h2>\n<h3 id=\"_1-1-变量定义\"> 1.1 变量定义</h3>\n<ol>\n<li>\n<p>使用 <code>val</code> 定义<strong>常量</strong>（只读）</p>\n<div><pre><code><span>val</span> a<span>:</span> Int <span>=</span> <span>1</span>\n<span>val</span> b <span>=</span> <span>1</span>   <span>// 类型可以被自动推断</span>\n<span>val</span> c<span>:</span> Int  <span>// 如果没有进行变量初始化，则需要指定变量类型</span>\nc <span>=</span> <span>1</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><blockquote>\n<p>注意，kotlin 取消了分号</p>\n</blockquote>\n</li>\n</ol>\n\n<ol start=\"2\">\n<li>\n<p>使用 <code>var</code> 定义变量</p>\n<div><pre><code><span>var</span> x <span>=</span> <span>5</span>\nx <span>+=</span> <span>1</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div></li>\n</ol>\n<h3 id=\"_1-2-注释\"> 1.2 注释</h3>\n<p>与 Java 相同，单行注释使用 <code>//</code> ，多行注释使用 <code>/* */</code></p>\n<p>不同的是，kotlin 中允许注释块嵌套。</p>\n<h2 id=\"_2-编码规范\"> 2. 编码规范</h2>\n<h3 id=\"_2-1-命名风格\"> 2.1 命名风格</h3>\n<p>命名风格和 Java 相同。</p>\n<ul>\n<li>类名采用大驼峰</li>\n<li>函数、方法、变量采用小驼峰</li>\n<li>使用 4 空格缩进</li>\n<li>公有方法和函数必须加上 KDoc</li>\n</ul>\n<h3 id=\"_2-2-关于冒号\"> 2.2 关于冒号</h3>\n<p>冒号在分隔两个类型的时候，<strong>前后都要有空格</strong></p>\n<p>其余情况，只需后有空格即可。</p>\n<div><pre><code><span>interface</span> Foo<span>&lt;</span><span>out</span> T <span>:</span> Any<span>></span> <span>:</span> Bar <span>{</span>\n    <span>fun</span> <span>foo</span><span>(</span>a<span>:</span> Int<span>)</span><span>:</span> T\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"_2-3-lambda-表达式\"> 2.3 Lambda 表达式</h3>\n<p>在使用 lambda 表达式时，lambda 表达式应与花括号有空格分隔。</p>\n<p>lambda 表达式应尽量的短。</p>\n<div><pre><code>list<span>.</span><span>filter</span> <span>{</span> it <span>></span> <span>10</span> <span>}</span><span>.</span><span>map</span> <span>{</span> element <span>-></span> element <span>*</span> <span>2</span> <span>}</span>\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_2-4-关于-unit\"> 2.4 关于 Unit</h3>\n<p>当一个函数返回 <code>Unit</code> 类型时，应将其省略。</p>\n<p>类似于 Java 中的返回值为 <code>void</code></p>\n<h2 id=\"_3-包和导入\"> 3. 包和导入</h2>\n<p>Kotlin 中的包和导入与 Java 区别不大。</p>\n<p>另外增加了 <code>as</code> 关键字用于赋予别名给类和函数，以防出现名称冲突。\n同时，Kotlin 中没有 Java 中的 <code>import static</code> 语句，所有的导入均使用 <code>import</code> 进行。</p>\n",
      "date_published": "2017-03-17T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Kotlin"
      ]
    },
    {
      "title": "Kotlin 委托属性",
      "url": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E5%A7%94%E6%89%98%E5%B1%9E%E6%80%A7/",
      "id": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E5%A7%94%E6%89%98%E5%B1%9E%E6%80%A7/",
      "summary": "<h2 id=\"_1-使用场景\"> 1. 使用场景</h2>\n<p>有些时候，对于一些特殊的变量，虽然我们每次都去手动生成它们，但是如果一次性生成它们，然后存进库中会更加方便，例如：</p>\n<ul>\n<li>lazy 属性：只在第一次访问它们的时候计算它们。</li>\n<li>observable 属性：当它被修改的时候，会通知它的监听者。</li>\n<li>将属性储存在一个 Map 中，而不是用字段存储。</li>\n</ul>\n<p>对于这些使用场景，Kotlin 支持使用<strong>委托属性</strong></p>\n",
      "content_html": "<h2 id=\"_1-使用场景\"> 1. 使用场景</h2>\n<p>有些时候，对于一些特殊的变量，虽然我们每次都去手动生成它们，但是如果一次性生成它们，然后存进库中会更加方便，例如：</p>\n<ul>\n<li>lazy 属性：只在第一次访问它们的时候计算它们。</li>\n<li>observable 属性：当它被修改的时候，会通知它的监听者。</li>\n<li>将属性储存在一个 Map 中，而不是用字段存储。</li>\n</ul>\n<p>对于这些使用场景，Kotlin 支持使用<strong>委托属性</strong></p>\n\n<h2 id=\"_2-声明\"> 2. 声明</h2>\n<div><pre><code><span>class</span> Example <span>{</span>\n  <span>var</span> p<span>:</span> String <span>by</span> <span>Delegate</span><span>(</span><span>)</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>声明委托属性的语法为：<code>val/var &lt;property name&gt;: &lt;Type&gt; by &lt;expression&gt;</code>。</p>\n<p>其中，在 <code>by</code> 之后的表达式就是<strong>委托操作</strong>。</p>\n<p>上面的例子说明了 <code>p</code> 变量的操作将会委托给 <code>Delegate</code> 类来进行。</p>\n<p>为了替代 <code>p</code> 的 getter 和 setter，<code>Delegate</code> 类必须提供 <code>getValue()</code> 和 <code>setValue()</code> 方法，委托之后，对 <code>p</code> 的调用操作<strong>将会由这两个方法来完成</strong>。</p>\n<div><pre><code><span>class</span> Delegate <span>{</span>\n  <span>operator</span> <span>fun</span> <span>getValue</span><span>(</span>thisRef<span>:</span> Any<span>?</span><span>,</span> property<span>:</span> KProperty<span>&lt;</span><span>*</span><span>></span><span>)</span><span>:</span> String <span>{</span>\n    <span>return</span> <span>\"<span>$thisRef</span>, thank you for delegating '<span><span>${</span>property<span>.</span>name<span>}</span></span>' to me!\"</span>\n  <span>}</span>\n\n  <span>operator</span> <span>fun</span> <span>setValue</span><span>(</span>thisRef<span>:</span> Any<span>?</span><span>,</span> property<span>:</span> KProperty<span>&lt;</span><span>*</span><span>></span><span>,</span> value<span>:</span> String<span>)</span> <span>{</span>\n    <span>println</span><span>(</span><span>\"<span>$value</span> has been assigned to '<span><span>${</span>property<span>.</span>name<span>}</span></span> in <span>$thisRef</span>.'\"</span><span>)</span>\n  <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>那么当我们进行如下调用：</p>\n<div><pre><code><span>val</span> e <span>=</span> <span>Example</span><span>(</span><span>)</span>\n<span>println</span><span>(</span>e<span>.</span>p<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>打印结果为</p>\n<div><pre><code><span>Example@</span>33a17727<span>,</span> thank you <span>for</span> delegating ‘p’ <span>to</span> me<span>!</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>同理，进行如下操作</p>\n<div><pre><code>e<span>.</span>p <span>=</span> <span>\"NEW\"</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>将会打印如下结果：</p>\n<div><pre><code>NEW has been assigned <span>to</span> ‘p’ <span>in</span> <span>Example@</span>33a17727<span>.</span>\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"_3-需要满足的条件\"> 3. 需要满足的条件</h2>\n<p>对于只读属性(<code>val</code>)，被委派的类必须提供 <code>getValue()</code> 方法，该方法必须拥有如下参数</p>\n<ul>\n<li>接收者：必须是<strong>当前属性的拥有者</strong>（属性所属的类）或者其<strong>超类</strong>的实例对象。</li>\n<li>元数据：必须是 <code>KProperty&lt;*&gt;</code> 或者它的超类</li>\n</ul>\n<p><code>getValue()</code> 必须拥有返回值，而且类型与当前委托的属性类型相同。</p>\n<p>对于可变属性(<code>var</code>)，被委托的类必须<strong>额外提供</strong>一个 <code>setValue()</code> 方法，该方法必须拥有如下参数：</p>\n<ul>\n<li>接收者：和 <code>getValue()</code> 相同</li>\n<li>元数据：和 <code>getValue()</code> 相同</li>\n<li>新值：其类型必须和所委托的类型相同，或者是它的超类。</li>\n</ul>\n<p><code>getValue()</code> 和 <code>setValue()</code> 方法既可以是被委托类的成员，也可以是它的<strong>扩展</strong>。</p>\n<p><strong>两个方法都需要使用 <code>operator</code> 来修饰。</strong></p>\n<h2 id=\"_4-一般的委托场景\"> 4. 一般的委托场景</h2>\n<p>Kotlin 的标准库提供了一些工厂方法，用来实现篇头所说的几种场景。</p>\n<h3 id=\"_4-1-lazy-变量\"> 4.1 lazy 变量</h3>\n<p>Kotlin 提供了一个 <code>lazy()</code> 方法用于 lazy 变量的生成。</p>\n<p><code>lazy()</code> 方法接受一个 lambda 表达式，返回一个 <code>Lazy&lt;T&gt;</code> 实例，用于委托属性。</p>\n<div><pre><code><span>val</span> lazyValue<span>:</span> String <span>by</span> lazy <span>{</span>\n    <span>println</span><span>(</span><span>\"computed!\"</span><span>)</span>\n    <span>\"Hello\"</span>\n<span>}</span>\n\n<span>fun</span> <span>main</span><span>(</span>args<span>:</span> Array<span>&lt;</span>String<span>></span><span>)</span> <span>{</span>\n    <span>println</span><span>(</span>lazyValue<span>)</span>\n    <span>println</span><span>(</span>lazyValue<span>)</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p><code>main</code> 中的第一个调用会**触发 <code>lazy()</code>**进行 <code>lazyValue</code> 的计算，而第二个调用只会返回 <code>lazyValue</code> 的值。</p>\n<p>结果为</p>\n<div><pre><code>computed<span>!</span>\nHello\nHello\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>默认情况下，<code>lazy()</code> 的调用是<strong>同步的</strong>。也就是说，只有一个线程会进行变量的计算，完成后，所有的线程都能看到其结果。</p>\n<p>如果不需要初始化同步，那么可以通过将 <code>LazyThreadSafetyMode.PUBLICATION</code> 作为参数传给 <code>lazy()</code> 方法来实现。</p>\n<p>如果确保变量的初始化只会有一个线程来完成，那么可以将 <code>LazyThreadSafetyMode.NONE</code> 作为参数传给 <code>lazy()</code>，这样一来，Kotlin 就不会对该变量的生成启用线程安全机制。</p>\n<h3 id=\"_4-2-observable\"> 4.2 Observable</h3>\n<p>Kotlin 标准库用 <code>Delegates.observable()</code> 来实现可观察属性(observable property)。</p>\n<div><pre><code><span>import</span> kotlin<span>.</span>properties<span>.</span>Delegates\n\n<span>class</span> User <span>{</span>\n    <span>var</span> name<span>:</span> String <span>by</span> Delegates<span>.</span><span>observable</span><span>(</span><span>\"&lt;no name>\"</span><span>)</span> <span>{</span>\n        prop<span>,</span> old<span>,</span> new <span>-></span>\n        <span>println</span><span>(</span><span>\"<span>$old</span> -> <span>$new</span>\"</span><span>)</span>\n    <span>}</span>\n<span>}</span>\n\n<span>fun</span> <span>main</span><span>(</span>args<span>:</span> Array<span>&lt;</span>String<span>></span><span>)</span> <span>{</span>\n    <span>val</span> user <span>=</span> <span>User</span><span>(</span><span>)</span>\n    user<span>.</span>name <span>=</span> <span>\"first\"</span>\n    user<span>.</span>name <span>=</span> <span>\"second\"</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p><code>Delegates.observable()</code> 接受两个参数：一个是<strong>初始化值</strong>，另一个是 handler。</p>\n<p>Handler 会在每次我们对变量进行<strong>赋值操作后</strong>被调用。\n它具有三个参数：</p>\n<ul>\n<li>被赋值的变量</li>\n<li>旧的变量值</li>\n<li>新的变量值</li>\n</ul>\n<p>上面的例子的打印结果为：</p>\n<div><pre><code><span>&lt;</span>no name<span>></span> <span>-></span> first\nfirst <span>-></span> second\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>使用 <code>vetoable()</code> 代替 <code>observable()</code> 方法可以对变量赋值进行<strong>拦截操作</strong>。</p>\n<p><code>vetoable()</code> 的 handler 会在每次<strong>赋值操作前</strong>被调用。</p>\n<h3 id=\"_4-3-在-map-中储存属性\"> 4.3 在 Map 中储存属性</h3>\n<p>这个场景通常在进行 JSON 解析或者对其他数据进行动态解析时常用的。</p>\n<p>对于 JSON 数据，我们通常将其解析为一个 Map，所以，我们可以通过对 Map 进行委派，从而实现反序列化操作。</p>\n<div><pre><code><span>class</span> <span>User</span><span>(</span><span>val</span> map<span>:</span> Map<span>&lt;</span>String<span>,</span> Any<span>?</span><span>></span><span>)</span> <span>{</span>\n    <span>val</span> name<span>:</span> String <span>by</span> map\n    <span>val</span> age<span>:</span> Int     <span>by</span> map\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>一个调用的例子：</p>\n<div><pre><code><span>val</span> user <span>=</span> <span>User</span><span>(</span><span>mapOf</span><span>(</span>\n    <span>\"name\"</span> <span>to</span> <span>\"John Doe\"</span><span>,</span>\n    <span>\"age\"</span>  <span>to</span> <span>25</span>\n<span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><div><pre><code><span>println</span><span>(</span>user<span>.</span>name<span>)</span> <span>// Prints \"John Doe\"</span>\n<span>println</span><span>(</span>user<span>.</span>age<span>)</span>  <span>// Prints 25</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p><code>User</code> 类会通过 Map 将数据取出。</p>\n<p>这个方法同样适用于 <code>var</code> 变量，只要把 <code>Map</code> 改成 <code>MutableMap</code> 即可。</p>\n",
      "date_published": "2016-11-26T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Kotlin"
      ]
    },
    {
      "title": "Kotlin 委托模式",
      "url": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E5%A7%94%E6%89%98%E6%A8%A1%E5%BC%8F/",
      "id": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E5%A7%94%E6%89%98%E6%A8%A1%E5%BC%8F/",
      "summary": "<h2 id=\"_1-委托模式\"> 1. 委托模式</h2>\n<blockquote>\n<p>委托模式是软件设计模式中的一项基本技巧。\n在委托模式中，有两个对象参与处理同一个请求，接受请求的对象将请求委托给另一个对象来处理。\n委托模式是一项基本技巧，许多其他的模式，如状态模式、策略模式、访问者模式本质上是在更特殊的场合采用了委托模式。\n委托模式使得我们可以用聚合来替代继承。</p>\n</blockquote>\n",
      "content_html": "<h2 id=\"_1-委托模式\"> 1. 委托模式</h2>\n<blockquote>\n<p>委托模式是软件设计模式中的一项基本技巧。\n在委托模式中，有两个对象参与处理同一个请求，接受请求的对象将请求委托给另一个对象来处理。\n委托模式是一项基本技巧，许多其他的模式，如状态模式、策略模式、访问者模式本质上是在更特殊的场合采用了委托模式。\n委托模式使得我们可以用聚合来替代继承。</p>\n</blockquote>\n\n<h2 id=\"_2-java-例子\"> 2. Java 例子</h2>\n<div><pre><code><span>interface</span> I <span>{</span>\n     void <span>f</span><span>(</span><span>)</span><span>;</span>\n     void <span>g</span><span>(</span><span>)</span><span>;</span>\n <span>}</span>\n\n <span>class</span> A implements I <span>{</span>\n     <span>public</span> void <span>f</span><span>(</span><span>)</span> <span>{</span> System<span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"A: doing f()\"</span><span>)</span><span>;</span> <span>}</span>\n     <span>public</span> void <span>g</span><span>(</span><span>)</span> <span>{</span> System<span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"A: doing g()\"</span><span>)</span><span>;</span> <span>}</span>\n <span>}</span>\n\n <span>class</span> B implements I <span>{</span>\n     <span>public</span> void <span>f</span><span>(</span><span>)</span> <span>{</span> System<span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"B: doing f()\"</span><span>)</span><span>;</span> <span>}</span>\n     <span>public</span> void <span>g</span><span>(</span><span>)</span> <span>{</span> System<span>.</span>out<span>.</span><span>println</span><span>(</span><span>\"B: doing g()\"</span><span>)</span><span>;</span> <span>}</span>\n <span>}</span>\n\n <span>class</span> C implements I <span>{</span>\n     <span>// delegation</span>\n     I i <span>=</span> new <span>A</span><span>(</span><span>)</span><span>;</span>\n\n     <span>public</span> void <span>f</span><span>(</span><span>)</span> <span>{</span> i<span>.</span><span>f</span><span>(</span><span>)</span><span>;</span> <span>}</span>\n     <span>public</span> void <span>g</span><span>(</span><span>)</span> <span>{</span> i<span>.</span><span>g</span><span>(</span><span>)</span><span>;</span> <span>}</span>\n\n     <span>// normal attributes</span>\n     <span>public</span> void <span>toA</span><span>(</span><span>)</span> <span>{</span> i <span>=</span> new <span>A</span><span>(</span><span>)</span><span>;</span> <span>}</span>\n     <span>public</span> void <span>toB</span><span>(</span><span>)</span> <span>{</span> i <span>=</span> new <span>B</span><span>(</span><span>)</span><span>;</span> <span>}</span>\n <span>}</span>\n\n\n <span>public</span> <span>class</span> Main <span>{</span>\n     <span>public</span> static void <span>main</span><span>(</span>String<span>[</span><span>]</span> args<span>)</span> <span>{</span>\n         C c <span>=</span> new <span>C</span><span>(</span><span>)</span><span>;</span>\n         c<span>.</span><span>f</span><span>(</span><span>)</span><span>;</span>     <span>// output: A: doing f()</span>\n         c<span>.</span><span>g</span><span>(</span><span>)</span><span>;</span>     <span>// output: A: doing g()</span>\n         c<span>.</span><span>toB</span><span>(</span><span>)</span><span>;</span>\n         c<span>.</span><span>f</span><span>(</span><span>)</span><span>;</span>     <span>// output: B: doing f()</span>\n         c<span>.</span><span>g</span><span>(</span><span>)</span><span>;</span>     <span>// output: B: doing g()</span>\n     <span>}</span>\n <span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br></div></div><p><code>C</code> 将 <code>I</code> 接口的工作委托给 <code>A</code> 或者 <code>B</code> 来做。</p>\n<p>可以看出，Java 中的委托模式的缺点在于要求比较多的代码。</p>\n<h2 id=\"_3-kotlin-的委托模式\"> 3. Kotlin 的委托模式</h2>\n<p>而在 Kotlin 中，委托模式要求的代码量非常低。</p>\n<p>只需要一个 <code>by</code> 表达式就能实现委托模式</p>\n<div><pre><code><span>interface</span> Base <span>{</span>\n  <span>fun</span> <span>print</span><span>(</span><span>)</span>\n<span>}</span>\n\n<span>class</span> <span>BaseImpl</span><span>(</span><span>val</span> x<span>:</span> Int<span>)</span> <span>:</span> Base <span>{</span>\n  <span>override</span> <span>fun</span> <span>print</span><span>(</span><span>)</span> <span>{</span> <span>print</span><span>(</span>x<span>)</span> <span>}</span>\n<span>}</span>\n\n<span>class</span> <span>Derived</span><span>(</span>b<span>:</span> Base<span>)</span> <span>:</span> Base <span>by</span> b\n\n<span>fun</span> <span>main</span><span>(</span>args<span>:</span> Array<span>&lt;</span>String<span>></span><span>)</span> <span>{</span>\n  <span>val</span> b <span>=</span> <span>BaseImpl</span><span>(</span><span>10</span><span>)</span>\n  <span>Derived</span><span>(</span>b<span>)</span><span>.</span><span>print</span><span>(</span><span>)</span> <span>// prints 10</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>在这里 <code>by</code> 表达式表示，变量 <code>b</code> 会储存在类 <code>Derived</code> 中，\n编译器会在 <code>Derived</code> 生成所有的 <code>Base</code> 的方法，并将它们都用 <code>b</code> 来执行。</p>\n<h2 id=\"_4-注意事项\"> 4. 注意事项</h2>\n<p>不过需要注意的是，Kotlin 的委托目前只支持<strong>初始值</strong>。</p>\n<p>也就是一旦类被建立，那么委托就不可改变，即使委托的对象是 <code>var</code>。</p>\n<p>只有通过重新建立类才能改变委托。</p>\n",
      "date_published": "2016-11-26T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Kotlin"
      ]
    },
    {
      "title": "Kotlin 对象",
      "url": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E5%AF%B9%E8%B1%A1/",
      "id": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E5%AF%B9%E8%B1%A1/",
      "summary": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>Kotlin 提供了一个 Object 属性用来实现在 Java 中很常见的三个功能：</p>\n<ul>\n<li>匿名类对象</li>\n<li>单例模式(Singleton)</li>\n<li>静态类成员</li>\n</ul>\n<p>它们分别被称为 <strong>对象表达式</strong>，<strong>对象声明</strong>，<strong>companion object</strong></p>\n",
      "content_html": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>Kotlin 提供了一个 Object 属性用来实现在 Java 中很常见的三个功能：</p>\n<ul>\n<li>匿名类对象</li>\n<li>单例模式(Singleton)</li>\n<li>静态类成员</li>\n</ul>\n<p>它们分别被称为 <strong>对象表达式</strong>，<strong>对象声明</strong>，<strong>companion object</strong></p>\n\n<h2 id=\"_2-对象表达式\"> 2. 对象表达式</h2>\n<p>Kotlin 使用 对象表达式 来实现 Java 中常用的匿名类对象功能。</p>\n<div><pre><code>window<span>.</span><span>addMouseListener</span><span>(</span><span>object</span> <span>:</span> <span>MouseAdapter</span><span>(</span><span>)</span> <span>{</span>\n  <span>override</span> <span>fun</span> <span>mouseClicked</span><span>(</span>e<span>:</span> MouseEvent<span>)</span> <span>{</span>\n    <span>// ...</span>\n  <span>}</span>\n\n  <span>override</span> <span>fun</span> <span>mouseEntered</span><span>(</span>e<span>:</span> MouseEvent<span>)</span> <span>{</span>\n    <span>// ...</span>\n  <span>}</span>\n<span>}</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>如果类拥有一个构造器，那么就必须传入相应的参数</p>\n<div><pre><code><span>open</span> <span>class</span> <span>A</span><span>(</span>x<span>:</span> Int<span>)</span> <span>{</span>\n  <span>public</span> <span>open</span> <span>val</span> y<span>:</span> Int <span>=</span> x\n<span>}</span>\n\n<span>interface</span> B <span>{</span><span>..</span><span>.</span><span>}</span>\n\n<span>val</span> ab<span>:</span> A <span>=</span> <span>object</span> <span>:</span> <span>A</span><span>(</span><span>1</span><span>)</span><span>,</span> B <span>{</span>\n  <span>override</span> <span>val</span> y <span>=</span> <span>15</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>当然，我们也可以<strong>只声明一个 object</strong></p>\n<div><pre><code><span>val</span> adHoc <span>=</span> <span>object</span> <span>{</span>\n  <span>var</span> x<span>:</span> Int <span>=</span> <span>0</span>\n  <span>var</span> y<span>:</span> Int <span>=</span> <span>0</span>\n<span>}</span>\n<span>print</span><span>(</span>adHoc<span>.</span>x <span>+</span> adHoc<span>.</span>y<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>和 Java 的匿名类一样，对象表达式 也可以访问外部的变量，但和 Java 不同的是，变量<strong>并没有要求必须是 <code>final</code></strong></p>\n<div><pre><code><span>fun</span> <span>countClicks</span><span>(</span>window<span>:</span> JComponent<span>)</span> <span>{</span>\n  <span>var</span> clickCount <span>=</span> <span>0</span>\n  <span>var</span> enterCount <span>=</span> <span>0</span>\n\n  window<span>.</span><span>addMouseListener</span><span>(</span><span>object</span> <span>:</span> <span>MouseAdapter</span><span>(</span><span>)</span> <span>{</span>\n    <span>override</span> <span>fun</span> <span>mouseClicked</span><span>(</span>e<span>:</span> MouseEvent<span>)</span> <span>{</span>\n      clickCount<span>++</span>\n    <span>}</span>\n\n    <span>override</span> <span>fun</span> <span>mouseEntered</span><span>(</span>e<span>:</span> MouseEvent<span>)</span> <span>{</span>\n      enterCount<span>++</span>\n    <span>}</span>\n  <span>}</span><span>)</span>\n  <span>// ...</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><h2 id=\"_3-对象声明\"> 3. 对象声明</h2>\n<p>Kotlin 使用 对象声明 来实现 Java 中常用的<strong>单例模式</strong></p>\n<div><pre><code><span>object</span> DataProviderManager <span>{</span>\n  <span>fun</span> <span>registerDataProvider</span><span>(</span>provider<span>:</span> DataProvider<span>)</span> <span>{</span>\n    <span>// ...</span>\n  <span>}</span>\n\n  <span>val</span> allDataProviders<span>:</span> Collection<span>&lt;</span>DataProvider<span>></span>\n    <span>get</span><span>(</span><span>)</span> <span>=</span> <span>// ...</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>这虽然和 对象表达式 很相似，但是要注意的是 object 关键字后面跟一个名字后，我们不能再叫它表达式，也不能给他赋值，但是可以通过它的名字访问它。</p>\n<p>调用 object</p>\n<div><pre><code>DataProviderManager<span>.</span><span>registerDataProvider</span><span>(</span><span>..</span><span>.</span><span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>对象声明 可以拥有超类。</p>\n<div><pre><code><span>object</span> DefaultListener <span>:</span> <span>MouseAdapter</span><span>(</span><span>)</span> <span>{</span>\n  <span>override</span> <span>fun</span> <span>mouseClicked</span><span>(</span>e<span>:</span> MouseEvent<span>)</span> <span>{</span>\n    <span>// ...</span>\n  <span>}</span>\n\n  <span>override</span> <span>fun</span> <span>mouseEntered</span><span>(</span>e<span>:</span> MouseEvent<span>)</span> <span>{</span>\n    <span>// ...</span>\n  <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>同时， 对象声明 不能是局部变量，比如直接嵌套在一个方法里，但是可以嵌套在其他的对象声明或者非内部类里面。</p>\n<h2 id=\"_4-伴生对象-companion-object\"> 4. 伴生对象(companion object)</h2>\n<p>这个在类的章节中也有所介绍，用于实现 Java 的静态成员功能。</p>\n<p>使用 <code>companion</code> 关键字来声明一个伴生对象</p>\n<div><pre><code><span>class</span> MyClass <span>{</span>\n  <span>companion</span> <span>object</span> Factory <span>{</span>\n    <span>fun</span> <span>create</span><span>(</span><span>)</span><span>:</span> MyClass <span>=</span> <span>MyClass</span><span>(</span><span>)</span>\n  <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>伴生对象的成员可以直接使用其名字来调用</p>\n<div><pre><code><span>val</span> instance <span>=</span> MyClass<span>.</span><span>create</span><span>(</span><span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>我们也可以调用伴生对象本身，通过使用 <code>Companion</code></p>\n<div><pre><code><span>val</span> x <span>=</span> MyClass<span>.</span>Companion\n</code></pre>\n<div><span>1</span><br></div></div><blockquote>\n<p>由于没有名字区分，一个类<strong>只能拥有一个伴生对象</strong></p>\n</blockquote>\n<p>虽然说伴生对象看起来是静态的，但是在实际执行过程中，它依旧会实例化，所以它也可以拥有超类和重载方法。</p>\n<div><pre><code><span>interface</span> Factory<span>&lt;</span>T<span>></span> <span>{</span>\n  <span>fun</span> <span>create</span><span>(</span><span>)</span><span>:</span> T\n<span>}</span>\n\n\n<span>class</span> MyClass <span>{</span>\n  <span>companion</span> <span>object</span> <span>:</span> Factory<span>&lt;</span>MyClass<span>></span> <span>{</span>\n    <span>override</span> <span>fun</span> <span>create</span><span>(</span><span>)</span><span>:</span> MyClass <span>=</span> <span>MyClass</span><span>(</span><span>)</span>\n  <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><blockquote>\n<p>当然，你也可以让 JVM 将伴生对象真正的<strong>静态化</strong>，使用 <code>@JvmStatic</code> 注解即可。</p>\n</blockquote>\n<h2 id=\"_5-对象表达式-和-对象声明-的不同点\"> 5. 对象表达式 和 对象声明 的不同点</h2>\n<ul>\n<li>当 对象表达式 被声明时，它将会被立即执行。</li>\n<li>而 对象声明 会被延迟初始化，它将会在第一次调用它的时候进行初始化，而不是声明它的时候。</li>\n<li>伴生对象会在对应的类第一次被加载之后使用 java 的静态初始化器生成</li>\n</ul>\n",
      "date_published": "2017-03-17T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Kotlin"
      ]
    },
    {
      "title": "Kotlin 异常",
      "url": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E5%BC%82%E5%B8%B8/",
      "id": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E5%BC%82%E5%B8%B8/",
      "summary": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>和 Java 一样，Kotlin 的异常都继承于 <code>Throwable</code> 类。</p>\n<p>每个异常都拥有 <code>message</code> <code>stacktrace</code> 和 <code>cause</code></p>\n",
      "content_html": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>和 Java 一样，Kotlin 的异常都继承于 <code>Throwable</code> 类。</p>\n<p>每个异常都拥有 <code>message</code> <code>stacktrace</code> 和 <code>cause</code></p>\n\n<h2 id=\"_2-抛出异常\"> 2. 抛出异常</h2>\n<p>使用 <code>throw</code> 抛出一个异常</p>\n<div><pre><code><span>throw</span> <span>MyException</span><span>(</span><span>\"Hi There!\"</span><span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div><blockquote>\n<p>注意到，没有 <code>new</code></p>\n</blockquote>\n<h2 id=\"_3-捕获异常\"> 3. 捕获异常</h2>\n<p>使用 <code>try-catch-finally</code> 来进行异常捕获和处理。</p>\n<div><pre><code><span>try</span> <span>{</span>\n  <span>// some code</span>\n<span>}</span>\n<span>catch</span> <span>(</span>e<span>:</span> SomeException<span>)</span> <span>{</span>\n  <span>// handler</span>\n<span>}</span>\n<span>finally</span> <span>{</span>\n  <span>// optional finally block</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>可以有多个 <code>catch</code> 块，<code>finally</code> 块是可选的；\n但是必须存在至少一个 <code>catch</code> 块，否则就必须有 <code>finally</code>。</p>\n<h2 id=\"_4-try-表达式\"> 4. <code>try</code> 表达式</h2>\n<p><code>try</code> 也可以是一个表达式，也就是说它可以拥有<strong>返回值</strong></p>\n<div><pre><code><span>val</span> a<span>:</span> Int<span>?</span> <span>=</span> <span>try</span> <span>{</span> <span>parseInt</span><span>(</span>input<span>)</span> <span>}</span> <span>catch</span> <span>(</span>e<span>:</span> NumberFormatException<span>)</span> <span>{</span> <span>null</span> <span>}</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>表达式的返回值不是 <code>try</code> 块的最后一个值，就是 <code>catch</code> 块的最后一个值。\n<code>finally</code> 块中的语句不会被作为返回值返回。</p>\n<h2 id=\"_5-已检查异常\"> 5. 已检查异常</h2>\n<p>不像 Java，Kotlin 中<strong>没有已检查异常</strong>；\n也就说它不需要也不会在函数头进行 <code>throws</code> 声明。</p>\n<p>原因在于，如果类似 Java 拥有已检查异常，那么：</p>\n<div><pre><code>Appendable <span>append</span><span>(</span>CharSequence csq<span>)</span> throws IOException<span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>当我在调用这个方法时，我就必须进行异常捕获（有很多方法内部不允许再次抛出异常）。</p>\n<div><pre><code><span>try</span> <span>{</span>\n  log<span>.</span><span>append</span><span>(</span>message<span>)</span>\n<span>}</span>\n<span>catch</span> <span>(</span>IOException e<span>)</span> <span>{</span>\n  <span>// Must be safe</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>很多时候，就会写出上面的代码，由于生吞了异常，这是一种非常不好的写法，同时这也违反了《Effective Java》中的条款。</p>\n<blockquote>\n<p>《Effective Java》第六十五条：不要忽略异常</p>\n</blockquote>\n<p>同样也有很多关于已检查异常的批评意见\nsee <a href=\"https://kotlinlang.org/docs/reference/exceptions.html#checked-exceptions\" target=\"_blank\" rel=\"noopener noreferrer\">here</a></p>\n",
      "date_published": "2016-11-26T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Kotlin"
      ]
    },
    {
      "title": "Kotlin 扩展类型",
      "url": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E6%89%A9%E5%B1%95%E7%B1%BB%E5%9E%8B/",
      "id": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E6%89%A9%E5%B1%95%E7%B1%BB%E5%9E%8B/",
      "summary": "<h2 id=\"_1-介绍\"> 1. 介绍</h2>\n<p>Kotlin 支持类似 C# 的对类进行扩展，而<strong>不需要</strong>对该类进行继承操作。\n这个特性被称作扩展(extension)。</p>\n",
      "content_html": "<h2 id=\"_1-介绍\"> 1. 介绍</h2>\n<p>Kotlin 支持类似 C# 的对类进行扩展，而<strong>不需要</strong>对该类进行继承操作。\n这个特性被称作扩展(extension)。</p>\n\n<h2 id=\"_2-方法的扩展\"> 2. 方法的扩展</h2>\n<p>给类写一个扩展方法很简单，只需要使用类成员运算符(<code>.</code>)即可。</p>\n<div><pre><code><span>fun</span> MutableList<span>&lt;</span>Int<span>></span><span>.</span><span>swap</span><span>(</span>index1<span>:</span> Int<span>,</span> index2<span>:</span> Int<span>)</span> <span>{</span>\n  <span>val</span> tmp <span>=</span> <span>this</span><span>[</span>index1<span>]</span> <span>// 'this' corresponds to the list</span>\n  <span>this</span><span>[</span>index1<span>]</span> <span>=</span> <span>this</span><span>[</span>index2<span>]</span>\n  <span>this</span><span>[</span>index2<span>]</span> <span>=</span> tmp\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>上面的例子中，我们给 <code>MutableList&lt;Int&gt;</code> 类扩展了一个方法 <code>swap()</code>。\n此时，我们称 <code>MutableList&lt;Int&gt;</code> 为<strong>接收者类型</strong>，例子中的 <code>this</code> 标识符指的就是接收者类型的对象本身。</p>\n<p>对类进行方法扩展后，我们就可以调用普通方法一样调用这个方法。</p>\n<div><pre><code><span>val</span> l <span>=</span> <span>mutableListOf</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>)</span>\nl<span>.</span><span>swap</span><span>(</span><span>0</span><span>,</span> <span>2</span><span>)</span> <span>// 'this' inside 'swap()' will hold the value of 'l'</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>当然，可以看出 <code>MutableList</code> 是个泛型类，同样的，我们的扩展方法也支持泛型特性。</p>\n<div><pre><code><span>fun</span> <span>&lt;</span>T<span>></span> MutableList<span>&lt;</span>T<span>></span><span>.</span><span>swap</span><span>(</span>index1<span>:</span> Int<span>,</span> index2<span>:</span> Int<span>)</span> <span>{</span>\n  <span>val</span> tmp <span>=</span> <span>this</span><span>[</span>index1<span>]</span> <span>// 'this' corresponds to the list</span>\n  <span>this</span><span>[</span>index1<span>]</span> <span>=</span> <span>this</span><span>[</span>index2<span>]</span>\n  <span>this</span><span>[</span>index2<span>]</span> <span>=</span> tmp\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id=\"_3-方法的扩展是静态的\"> 3. 方法的扩展是静态的</h2>\n<p>这指的是决定扩展方法调用的，是形式上的调用对象类型，而非实际的调用对象类型。</p>\n<p>例如：</p>\n<div><pre><code><span>open</span> <span>class</span> C\n\n<span>class</span> D<span>:</span> <span>C</span><span>(</span><span>)</span>\n\n<span>fun</span> C<span>.</span><span>foo</span><span>(</span><span>)</span> <span>=</span> <span>\"c\"</span>\n\n<span>fun</span> D<span>.</span><span>foo</span><span>(</span><span>)</span> <span>=</span> <span>\"d\"</span>\n\n<span>fun</span> <span>printFoo</span><span>(</span>c<span>:</span> C<span>)</span> <span>{</span>\n    <span>println</span><span>(</span>c<span>.</span><span>foo</span><span>(</span><span>)</span><span>)</span>\n<span>}</span>\n\n<span>printFoo</span><span>(</span><span>D</span><span>(</span><span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>此时，<code>printFoo()</code> 的结果是 <strong>&quot;c&quot;</strong> 而不是 <strong>&quot;d&quot;</strong>。\n虽然传入 <code>printFoo()</code> 方法的是 D 对象，但是在该方法定义中，使用的是 C 的 <code>foo()</code> 方法，\n所以即使传入的是 D，而结果却依然是 C 的打印结果。</p>\n<p>这就是扩展方法的静态特性。</p>\n<h2 id=\"_4-方法扩展的优先级和重载\"> 4. 方法扩展的优先级和重载</h2>\n<h3 id=\"_4-1-优先级\"> 4.1 优先级</h3>\n<p>如果类中已经存在了一个和我们扩展方法相同的成员，那么在方法调用时，<strong>优先调用类成员</strong></p>\n<div><pre><code><span>class</span> C <span>{</span>\n    <span>fun</span> <span>foo</span><span>(</span><span>)</span> <span>{</span> <span>println</span><span>(</span><span>\"member\"</span><span>)</span> <span>}</span>\n<span>}</span>\n\n<span>fun</span> C<span>.</span><span>foo</span><span>(</span><span>)</span> <span>{</span> <span>println</span><span>(</span><span>\"extension\"</span><span>)</span> <span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>如果我们调用对于一个任意的 <code>C</code> 对象调用 <code>c.foo()</code> ，结果都会是 <strong>&quot;menber&quot;</strong> ，而不是 <strong>&quot;extension&quot;</strong>。</p>\n<h3 id=\"_4-2-重载\"> 4.2 重载</h3>\n<p>但是，如果我们的扩展方法和类成员拥有不同的<strong>函数签名</strong>，那么两者互不干涉，就像函数重载一样。</p>\n<div><pre><code><span>class</span> C <span>{</span>\n    <span>fun</span> <span>foo</span><span>(</span><span>)</span> <span>{</span> <span>println</span><span>(</span><span>\"member\"</span><span>)</span> <span>}</span>\n<span>}</span>\n\n<span>fun</span> C<span>.</span><span>foo</span><span>(</span>i<span>:</span> Int<span>)</span> <span>{</span> <span>println</span><span>(</span><span>\"extension\"</span><span>)</span> <span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>如果我们调用 <code>C().foo(1)</code>，则依旧会打印 <strong>&quot;extension&quot;</strong></p>\n<h2 id=\"_5-可以为空的接收者\"> 5. 可以为空的接收者</h2>\n<p>扩展可以使用一个为空的接收者类型，这样的扩展方法在对象为 <code>null</code> 的时候仍然能被调用，此时可以在扩展方法中进行 <code>null</code> 检查，对于调用者来说，就直接调用方法即可。</p>\n<div><pre><code><span>fun</span> Any<span>?</span><span>.</span><span>toString</span><span>(</span><span>)</span><span>:</span> String <span>{</span>\n    <span>if</span> <span>(</span><span>this</span> <span>==</span> <span>null</span><span>)</span> <span>return</span> <span>\"null\"</span>\n    <span>// after the null check, 'this' is autocast to a non-null type, so the toString() below</span>\n    <span>// resolves to the member function of the Any class</span>\n    <span>return</span> <span>toString</span><span>(</span><span>)</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>注意到，Kotlin 在经过 <code>if(this == null)</code> 这一 <code>null</code> 检查之后，会自动将对象 cast 成为一个非空对象。</p>\n<h2 id=\"_6-属性的扩展\"> 6. 属性的扩展</h2>\n<p>与方法的扩展一样，Kotlin 中同样可以对属性进行扩展。</p>\n<div><pre><code><span>val</span> <span>&lt;</span>T<span>></span> List<span>&lt;</span>T<span>></span><span>.</span>lastIndex<span>:</span> Int\n  <span>get</span><span>(</span><span>)</span> <span>=</span> size <span>-</span> <span>1</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>需要注意的是，由于扩展采用静态处理，而不是插入一个新成员，\n所以，扩展的属性没有 <strong>backing field</strong> 的支持，\n因此，<strong>扩展属性不能被初始化</strong>，它们只能用显式的 getter 和 setter 来进行初始化。</p>\n<h2 id=\"_7-友元对象的扩展\"> 7. 友元对象的扩展</h2>\n<p>如果一个类具有友元对象(Companion Object)，那么，也可以对其进行扩展。</p>\n<div><pre><code><span>class</span> MyClass <span>{</span>\n  <span>companion</span> <span>object</span> <span>{</span> <span>}</span>  <span>// will be called \"Companion\"</span>\n<span>}</span>\n\n<span>fun</span> MyClass<span>.</span>Companion<span>.</span><span>foo</span><span>(</span><span>)</span> <span>{</span>\n  <span>// ...</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>扩展的友元对象就像类的友元对象一样，使用类名进行调用。</p>\n<h2 id=\"_8-扩展类型的作用域\"> 8. 扩展类型的作用域</h2>\n<p>通常，我们会将扩展定义在 top-level，此时就需要使用 <code>import</code> 语句来调用这个扩展。</p>\n<h2 id=\"_9-将扩展作为类成员\"> 9. 将扩展作为类成员</h2>\n<p>我们可以在一个类中定义另一个类的扩展方法</p>\n<div><pre><code><span>class</span> D <span>{</span>\n    <span>fun</span> <span>bar</span><span>(</span><span>)</span> <span>{</span> <span>..</span><span>.</span> <span>}</span>\n<span>}</span>\n\n<span>class</span> C <span>{</span>\n    <span>fun</span> <span>baz</span><span>(</span><span>)</span> <span>{</span> <span>..</span><span>.</span> <span>}</span>\n\n    <span>fun</span> D<span>.</span><span>foo</span><span>(</span><span>)</span> <span>{</span>\n        <span>bar</span><span>(</span><span>)</span>   <span>// calls D.bar</span>\n        <span>baz</span><span>(</span><span>)</span>   <span>// calls C.baz</span>\n    <span>}</span>\n\n    <span>fun</span> <span>caller</span><span>(</span>d<span>:</span> D<span>)</span> <span>{</span>\n        d<span>.</span><span>foo</span><span>(</span><span>)</span>   <span>// call the extension function</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>此时，我们称 C 为<strong>调度接收者</strong>，D 为<strong>扩展接收者</strong>。</p>\n<p>当扩展名称和类成员冲突时，此时，在<strong>扩展内部</strong>，扩展接收者具有更高优先级；而在<strong>扩展外部</strong>，调度接收者具有更高优先级。</p>\n<div><pre><code><span>class</span> C <span>{</span>\n    <span>fun</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>\n        <span>println</span><span>(</span><span>\"C foo\"</span><span>)</span>\n    <span>}</span>\n<span>}</span>\n\n<span>class</span> D <span>{</span>\n    <span>fun</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>\n        <span>println</span><span>(</span><span>\"D foo\"</span><span>)</span>\n    <span>}</span>\n\n    <span>fun</span> C<span>.</span><span>fooBar</span><span>(</span><span>)</span> <span>{</span>\n        <span>foo</span><span>(</span><span>)</span>           <span>// \"C foo\"</span>\n        <span>this</span><span>@D</span><span>.</span><span>foo</span><span>(</span><span>)</span>    <span>// \"D foo\"</span>\n    <span>}</span>\n\n    <span>fun</span> <span>caller</span><span>(</span>c<span>:</span> C<span>)</span> <span>{</span>\n        c<span>.</span><span>fooBar</span><span>(</span><span>)</span>\n    <span>}</span>\n<span>}</span>\n\n<span>fun</span> <span>main</span><span>(</span>args<span>:</span> Array<span>&lt;</span>String<span>></span><span>)</span> <span>{</span>\n    <span>val</span> d <span>=</span> <span>D</span><span>(</span><span>)</span>\n    <span>val</span> c <span>=</span> <span>C</span><span>(</span><span>)</span>\n\n    d<span>.</span><span>foo</span><span>(</span><span>)</span> <span>// \"D foo\"</span>\n    c<span>.</span><span>foo</span><span>(</span><span>)</span> <span>// \"C foo\"</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div><p>如果需要在扩展内部访问外部类（即 D），则需要一个带标签的 <code>this</code> 来进行。</p>\n<p>带标签的 <code>this</code> 通常用于内部类来访问外部类。</p>\n<p>注意，扩展成员需要使用一个另外的调用器来执行。\n在类的外部它是不可见的。</p>\n<h2 id=\"_10-扩展成员的继承\"> 10. 扩展成员的继承</h2>\n<p>与其他成员一样，扩展成员也可以进行继承和重载操作。\n但需要注意的是，<strong>扩展接收者</strong>是静态的，而<strong>调度接收者</strong>是动态的。</p>\n<p>即，<strong>扩展接收者不受多态影响</strong></p>\n<div><pre><code><span>open</span> <span>class</span> D <span>{</span>\n<span>}</span>\n\n<span>class</span> D1 <span>:</span> <span>D</span><span>(</span><span>)</span> <span>{</span>\n<span>}</span>\n\n<span>open</span> <span>class</span> C <span>{</span>\n    <span>open</span> <span>fun</span> D<span>.</span><span>foo</span><span>(</span><span>)</span> <span>{</span>\n        <span>println</span><span>(</span><span>\"D.foo in C\"</span><span>)</span>\n    <span>}</span>\n\n    <span>open</span> <span>fun</span> D1<span>.</span><span>foo</span><span>(</span><span>)</span> <span>{</span>\n        <span>println</span><span>(</span><span>\"D1.foo in C\"</span><span>)</span>\n    <span>}</span>\n\n    <span>fun</span> <span>caller</span><span>(</span>d<span>:</span> D<span>)</span> <span>{</span>\n        d<span>.</span><span>foo</span><span>(</span><span>)</span>   <span>// call the extension function</span>\n    <span>}</span>\n<span>}</span>\n\n<span>class</span> C1 <span>:</span> <span>C</span><span>(</span><span>)</span> <span>{</span>\n    <span>override</span> <span>fun</span> D<span>.</span><span>foo</span><span>(</span><span>)</span> <span>{</span>\n        <span>println</span><span>(</span><span>\"D.foo in C1\"</span><span>)</span>\n    <span>}</span>\n\n    <span>override</span> <span>fun</span> D1<span>.</span><span>foo</span><span>(</span><span>)</span> <span>{</span>\n        <span>println</span><span>(</span><span>\"D1.foo in C1\"</span><span>)</span>\n    <span>}</span>\n<span>}</span>\n\n<span>C</span><span>(</span><span>)</span><span>.</span><span>caller</span><span>(</span><span>D</span><span>(</span><span>)</span><span>)</span>   <span>// prints \"D.foo in C\"</span>\n<span>C1</span><span>(</span><span>)</span><span>.</span><span>caller</span><span>(</span><span>D</span><span>(</span><span>)</span><span>)</span>  <span>// prints \"D.foo in C1\" - dispatch receiver is resolved virtually</span>\n<span>C</span><span>(</span><span>)</span><span>.</span><span>caller</span><span>(</span><span>D1</span><span>(</span><span>)</span><span>)</span>  <span>// prints \"D.foo in C\" - extension receiver is resolved statically</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br></div></div><h2 id=\"_11-开发扩展的动机\"> 11. 开发扩展的动机</h2>\n<p>提供扩展这一特性主要是为了简化 Java 代码中关于工具类的调用。</p>\n<p>将这样的代码</p>\n<div><pre><code><span>// Java</span>\nCollections<span>.</span><span>swap</span><span>(</span>\n    list<span>,</span>\n    Collections<span>.</span><span>binarySearch</span><span>(</span>list<span>,</span>Collections<span>.</span><span>max</span><span>(</span>otherList<span>)</span><span>)</span><span>,</span>\n    Collections<span>.</span><span>max</span><span>(</span>list<span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>转换成这样的</p>\n<div><pre><code><span>// Java</span>\nlist<span>.</span><span>swap</span><span>(</span>list<span>.</span><span>binarySearch</span><span>(</span>otherList<span>.</span><span>max</span><span>(</span><span>)</span><span>)</span><span>,</span> list<span>.</span><span>max</span><span>(</span><span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div>",
      "date_published": "2016-11-26T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Kotlin"
      ]
    },
    {
      "title": "Kotlin 接口",
      "url": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E6%8E%A5%E5%8F%A3/",
      "id": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E6%8E%A5%E5%8F%A3/",
      "summary": "<h2 id=\"_1-基本形式\"> 1. 基本形式</h2>\n<p>Kotlin 的接口和 Java 8 中很相似。</p>\n<div><pre><code><span>interface</span> MyInterface <span>{</span>\n    <span>fun</span> <span>bar</span><span>(</span><span>)</span>\n    <span>fun</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>\n      <span>// optional body</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div>",
      "content_html": "<h2 id=\"_1-基本形式\"> 1. 基本形式</h2>\n<p>Kotlin 的接口和 Java 8 中很相似。</p>\n<div><pre><code><span>interface</span> MyInterface <span>{</span>\n    <span>fun</span> <span>bar</span><span>(</span><span>)</span>\n    <span>fun</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>\n      <span>// optional body</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div>\n<h2 id=\"_2-实现接口\"> 2. 实现接口</h2>\n<p>和类继承一样，使用同样的语法进行接口的实现</p>\n<div><pre><code><span>class</span> Child <span>:</span> MyInterface <span>{</span>\n   <span>override</span> <span>fun</span> <span>bar</span><span>(</span><span>)</span> <span>{</span>\n      <span>// body</span>\n   <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id=\"_3-声明属性\"> 3. 声明属性</h2>\n<p>在接口中可以声明属性。\n需要注意的是，接口中的属性不具备 <strong>backing field</strong>，所以<strong>不能进行初始化</strong>。</p>\n<p>接口中的属性可以是 <code>abstract</code> 的，或者提供一个自定义 getter。</p>\n<div><pre><code><span>interface</span> MyInterface <span>{</span>\n    <span>val</span> property<span>:</span> Int <span>// abstract</span>\n\n    <span>val</span> propertyWithImplementation<span>:</span> String\n        <span>get</span><span>(</span><span>)</span> <span>=</span> <span>\"foo\"</span>\n\n    <span>fun</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>\n        <span>print</span><span>(</span>property<span>)</span>\n    <span>}</span>\n<span>}</span>\n\n<span>class</span> Child <span>:</span> MyInterface <span>{</span>\n    <span>override</span> <span>val</span> property<span>:</span> Int <span>=</span> <span>29</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h2 id=\"_4-解决冲突\"> 4. 解决冲突</h2>\n<p>和类继承一样，如果实现的多个接口方法出现冲突，就必须赋予 <code>override</code> 属性进行重载。</p>\n<div><pre><code><span>interface</span> A <span>{</span>\n  <span>fun</span> <span>foo</span><span>(</span><span>)</span> <span>{</span> <span>print</span><span>(</span><span>\"A\"</span><span>)</span> <span>}</span>\n  <span>fun</span> <span>bar</span><span>(</span><span>)</span>\n<span>}</span>\n\n<span>interface</span> B <span>{</span>\n  <span>fun</span> <span>foo</span><span>(</span><span>)</span> <span>{</span> <span>print</span><span>(</span><span>\"B\"</span><span>)</span> <span>}</span>\n  <span>fun</span> <span>bar</span><span>(</span><span>)</span> <span>{</span> <span>print</span><span>(</span><span>\"bar\"</span><span>)</span> <span>}</span>\n<span>}</span>\n\n<span>class</span> C <span>:</span> A <span>{</span>\n  <span>override</span> <span>fun</span> <span>bar</span><span>(</span><span>)</span> <span>{</span> <span>print</span><span>(</span><span>\"bar\"</span><span>)</span> <span>}</span>\n<span>}</span>\n\n<span>class</span> D <span>:</span> A<span>,</span> B <span>{</span>\n  <span>override</span> <span>fun</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>\n    <span>super</span><span>&lt;</span>A<span>></span><span>.</span><span>foo</span><span>(</span><span>)</span>\n    <span>super</span><span>&lt;</span>B<span>></span><span>.</span><span>foo</span><span>(</span><span>)</span>\n  <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><p>在这里，D 不需要 override <code>bar()</code>，\n这是因为 D 同时实现了 A，B，\n而 B 中对 <code>bar()</code> 方法进行了实现，同时 <code>bar()</code> 的实现中没有冲突。</p>\n",
      "date_published": "2017-03-17T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Kotlin"
      ]
    },
    {
      "title": "Kotlin 控制流程",
      "url": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E6%8E%A7%E5%88%B6%E6%B5%81%E7%A8%8B/",
      "id": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E6%8E%A7%E5%88%B6%E6%B5%81%E7%A8%8B/",
      "summary": "<h2 id=\"_1-if\"> 1. If</h2>\n<p>Kotlin 中 <code>if</code> 语句是一个表达式，<strong>有返回值</strong>，功能和 C++ 和 Java 中的<strong>条件表达式</strong>相同。</p>\n<p>所以，Kotlin 中不支持条件表达式，因为 <code>if</code> 语句已经具备了这个功能。</p>\n<div><pre><code><span>// Traditional usage</span>\n<span>var</span> max <span>=</span> a <span>if</span> <span>(</span>a <span>&lt;</span> b<span>)</span>\nmax <span>=</span> b\n<span>// With else</span>\n<span>var</span> max<span>:</span> Int <span>if</span> <span>(</span>a <span>></span> b<span>)</span>\nmax <span>=</span> a\n<span>else</span>\nmax <span>=</span> b\n<span>// As expression</span>\n<span>val</span> max <span>=</span> <span>if</span> <span>(</span>a <span>></span> b<span>)</span> a <span>else</span> b\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div>",
      "content_html": "<h2 id=\"_1-if\"> 1. If</h2>\n<p>Kotlin 中 <code>if</code> 语句是一个表达式，<strong>有返回值</strong>，功能和 C++ 和 Java 中的<strong>条件表达式</strong>相同。</p>\n<p>所以，Kotlin 中不支持条件表达式，因为 <code>if</code> 语句已经具备了这个功能。</p>\n<div><pre><code><span>// Traditional usage</span>\n<span>var</span> max <span>=</span> a <span>if</span> <span>(</span>a <span>&lt;</span> b<span>)</span>\nmax <span>=</span> b\n<span>// With else</span>\n<span>var</span> max<span>:</span> Int <span>if</span> <span>(</span>a <span>></span> b<span>)</span>\nmax <span>=</span> a\n<span>else</span>\nmax <span>=</span> b\n<span>// As expression</span>\n<span>val</span> max <span>=</span> <span>if</span> <span>(</span>a <span>></span> b<span>)</span> a <span>else</span> b\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div>\n<p>同时，<code>if</code> 表达式也支持<strong>语句块</strong>，语句块中的<strong>最后一个</strong>变量或常量的值就是语句块的返回值。</p>\n<div><pre><code><span>val</span> max <span>=</span> <span>if</span> <span>(</span>a <span>></span> b<span>)</span> <span>{</span> <span>print</span><span>(</span><span>\"Choose a\"</span><span>)</span> a\n<span>}</span>\n<span>else</span> <span>{</span>\n    <span>print</span><span>(</span><span>\"Choose b\"</span><span>)</span>\nb <span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>需要注意的是，<strong>如果 <code>if</code> 作为一个表达式（需要其返回值），那么 <code>else</code> 语句就必须存在</strong>。</p>\n<h2 id=\"_2-when\"> 2. When</h2>\n<p>Kotlin 用 <code>when</code> 表达式替代了 Java 和 C++ 中的 <code>switch</code> 语句的功能。</p>\n<p>一个简单的 <code>when</code> 语句如下：</p>\n<div><pre><code><span>when</span> <span>(</span>x<span>)</span> <span>{</span>\n<span>1</span> <span>-></span> <span>print</span><span>(</span><span>\"x == 1\"</span><span>)</span>\n<span>2</span> <span>-></span> <span>print</span><span>(</span><span>\"x == 2\"</span><span>)</span>\n<span>else</span> <span>-></span> <span>{</span> <span>// Note the block</span>\n    <span>print</span><span>(</span><span>\"x is neither 1 nor 2\"</span><span>)</span>\n  <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>与 <code>if</code> 语句一样，<code>when</code> 语句也可以作为表达式；当 <code>when</code> 作为表达式时，它的返回值是与其 case 相符的值。</p>\n<p>同样，<code>when</code> 作为表达式时，也可以使用<strong>块语句。</strong></p>\n<p>与 Java 不同的是，<code>when</code> 语句可以对于一些不同的 case 进行一些相同的相应，而使用较少的代码量。</p>\n<div><pre><code><span>when</span> <span>(</span>x<span>)</span> <span>{</span>\n    <span>0</span><span>,</span> <span>1</span> <span>-></span> <span>print</span><span>(</span><span>\"x == 0 or x == 1\"</span><span>)</span>\n    <span>else</span> <span>-></span> <span>print</span><span>(</span><span>\"otherwise\"</span><span>)</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>同时， <code>when</code> 语句的 case 可以使用<strong>随意的表达式</strong>，而不是 Java 中的仅能使用常量。</p>\n<div><pre><code><span>when</span> <span>(</span>x<span>)</span> <span>{</span>\n    <span>parseInt</span><span>(</span>s<span>)</span> <span>-></span> <span>print</span><span>(</span><span>\"s encodes x\"</span><span>)</span>\n    <span>else</span> <span>-></span> <span>print</span><span>(</span><span>\"s does not encode x\"</span><span>)</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>此外，也可以使用 <code>in</code>、<code>!in</code>、<code>is</code>、<code>!is</code> 进行<strong>范围</strong>和<strong>类型</strong>检测。</p>\n<div><pre><code><span>when</span> <span>(</span>x<span>)</span> <span>{</span>\n    <span>in</span> <span>1</span><span>..</span><span>10</span> <span>-></span> <span>print</span><span>(</span><span>\"x is in the range\"</span><span>)</span>\n    <span>in</span> validNumbers <span>-></span> <span>print</span><span>(</span><span>\"x is valid\"</span><span>)</span>\n    <span>!</span><span>in</span> <span>10</span><span>..</span><span>20</span> <span>-></span> <span>print</span><span>(</span><span>\"x is outside the range\"</span><span>)</span>\n    <span>else</span> <span>-></span>     <span>print</span><span>(</span><span>\"none of the above\"</span><span>)</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><div><pre><code><span>val</span> hasPrefix <span>=</span> <span>when</span><span>(</span>x<span>)</span> <span>{</span>\n    <span>is</span> String <span>-></span> x<span>.</span><span>startsWith</span><span>(</span><span>\"prefix\"</span><span>)</span>\n    <span>else</span> <span>-></span> <span>false</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>Kotlin 在这里拥有一个非常好的特性叫 <strong>smart casts</strong>，\n当一个 <code>is</code> 表达式满足时，变量 <code>x</code> 将被**自动 cast 到相应的类型，**调用相应类型的方法。</p>\n<p>最后，<code>when</code> 也可以不接受参数使用，此时，<code>when</code> 的各个分支条件就变成了简单的<strong>布尔表达式</strong>，可以用于替代 <code>if-else-if</code> 结构。</p>\n<div><pre><code><span>when</span> <span>{</span>\n    x<span>.</span><span>isOdd</span><span>(</span><span>)</span> <span>-></span> <span>print</span><span>(</span><span>\"x is odd\"</span><span>)</span>\n    x<span>.</span><span>isEven</span><span>(</span><span>)</span> <span>-></span> <span>print</span><span>(</span><span>\"x is even\"</span><span>)</span>\n    <span>else</span> <span>-></span> <span>print</span><span>(</span><span>\"x is funny\"</span><span>)</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id=\"_3-for\"> 3. For</h2>\n<p>Kotlin 中的 <code>for</code> 类似 Python 和 Java 中的 <code>for-each</code> 结构，使用 <code>in</code> 标识符来分隔 <code>item</code> 和 <code>collection</code>。</p>\n<div><pre><code><span>for</span> <span>(</span>item <span>in</span> collection<span>)</span> <span>[</span><span>}</span>\n    <span>print</span><span>(</span>item<span>)</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>如果需要使用一个索引值，则可以使用 <code>indices</code>，它内置在 Kotlin 中的所有 <code>collection</code> 中。</p>\n<div><pre><code><span>for</span> <span>(</span>i <span>in</span> array<span>.</span>indices<span>)</span>\n    <span>print</span><span>(</span>array<span>[</span>i<span>]</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>同时也可以使用 <code>withIndex()</code> 方法。</p>\n<div><pre><code><span>for</span> <span>(</span><span>(</span>index<span>,</span> value<span>)</span> <span>in</span> array<span>.</span><span>withIndex</span><span>(</span><span>)</span><span>)</span>\n    <span>print</span><span>(</span><span>\"<span>$index</span>, <span>$value</span>\"</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h2 id=\"_4-while-和-do-while\"> 4. While 和 do-while</h2>\n<p>这两者和 Java 没有区别。</p>\n<h2 id=\"_5-跳转\"> 5. 跳转</h2>\n<p>Kotlin 支持三种形式的跳转：</p>\n<ul>\n<li><code>return</code>：在最近的函数（包括匿名函数）返回</li>\n<li><code>break</code>：跳出当前最近的循环</li>\n<li><code>continue</code>：结束当前最近循环内工作，并从下一次最近循环开始</li>\n</ul>\n<p>与 Java 一样，Kotlin 也支持<strong>带标签的跳转</strong>，标签使用 <code>@</code> 符号来指定。</p>\n<div><pre><code><span>loop@</span> <span>for</span> <span>(</span>i <span>in</span> <span>1</span><span>..</span><span>100</span><span>)</span> <span>{</span>\n    <span>for</span> <span>(</span>j <span>in</span> <span>1</span><span>..</span><span>100</span><span>)</span> <span>{</span>\n        <span>if</span> <span>(</span><span>..</span><span>.</span><span>)</span> <span>break</span><span>@loop</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>带标签的 <code>break</code> 用于跳出指定的循环结构，而带标签的 <code>continue</code> 则用于开始下一次指定的循环。</p>\n<h2 id=\"_6-带标签的-return\"> 6. 带标签的 return</h2>\n<p>不仅如此，Kotlin 还支持带标签的 <code>return</code>，这主要是因为 Kotlin 允许<strong>函数的嵌套。</strong></p>\n<p>一个比较普遍的使用场景是在 Lamda 表达式上。</p>\n<div><pre><code><span>fun</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>\n    ints<span>.</span><span>forEach</span> <span>{</span>\n        <span>if</span> <span>(</span>it <span>==</span> <span>0</span><span>)</span> <span>return</span>\n        <span>print</span><span>(</span>it<span>)</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>类似如上的语句，<code>return</code> 的作用对象是其最近的<strong>函数</strong>，在这里是 <code>foo()</code>。</p>\n<p>但是如果我们要只从 Lambda 函数中返回(<code>forEach</code>)，则需要指定一个标签。</p>\n<div><pre><code><span>fun</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>\n    ints<span>.</span>forEach <span>lit@</span> <span>{</span>\n        <span>if</span> <span>(</span>it <span>==</span> <span>0</span><span>)</span> re <span>turn@</span>lit\n        <span>print</span><span>(</span>it<span>)</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>一个更为常用的形式是<strong>直接使用 Lambda 表达式的名字</strong>。</p>\n<div><pre><code><span>fun</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>\n    ints<span>.</span><span>forEach</span> <span>{</span>\n        <span>if</span> <span>(</span>it <span>==</span> <span>0</span><span>)</span> <span>return</span><span>@forEach</span>\n        <span>print</span><span>(</span>it<span>)</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>另外的，我们也可以使用传统的匿名函数，来实现这个功能。</p>\n<div><pre><code><span>fun</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>\n    ints<span>.</span><span>forEach</span><span>(</span><span>fun</span><span>(</span>value<span>:</span> Int<span>)</span> <span>{</span>\n        <span>if</span> <span>(</span>value <span>==</span> <span>0</span><span>)</span> <span>return</span>\n        <span>print</span><span>(</span>value<span>)</span>\n    <span>}</span><span>)</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>当需要返回某个值时，标签的解析具有更高优先权。</p>\n<p>例如：</p>\n<div><pre><code><span>return</span><span>@a</span> <span>1</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>表示在 <code>a</code> 标签中返回 <code>1</code>，而不是返回 <code>@a 1</code></p>\n",
      "date_published": "2017-03-17T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Kotlin"
      ]
    },
    {
      "title": "Kotlin 操作符重载",
      "url": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E6%93%8D%E4%BD%9C%E7%AC%A6%E9%87%8D%E8%BD%BD/",
      "id": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E6%93%8D%E4%BD%9C%E7%AC%A6%E9%87%8D%E8%BD%BD/",
      "summary": "\n<p> <br>\n <br>\n  <br>\n  <br>\n   <br>\n   <br>\n   <br>\n   <br>\n   <br>\n   <br>\n   <br>\n </p>\n\n<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>Kotlin 中的操作符都是由函数实现的，包括成员函数、扩展函数和中缀函数。</p>\n<p>重载一个操作符，我们只要给对应的类提供一个成员函数或者扩展函数即可。</p>\n<p>重载操作符的函数必须使用 <code>operator</code> 进行标识。</p>\n<p>遗憾的是，Kotlin 不支持自定义操作符，只能对现有的操作符进行重载。</p>\n",
      "content_html": "\n<p> <br>\n <br>\n  <br>\n  <br>\n   <br>\n   <br>\n   <br>\n   <br>\n   <br>\n   <br>\n   <br>\n </p>\n\n<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>Kotlin 中的操作符都是由函数实现的，包括成员函数、扩展函数和中缀函数。</p>\n<p>重载一个操作符，我们只要给对应的类提供一个成员函数或者扩展函数即可。</p>\n<p>重载操作符的函数必须使用 <code>operator</code> 进行标识。</p>\n<p>遗憾的是，Kotlin 不支持自定义操作符，只能对现有的操作符进行重载。</p>\n\n<h2 id=\"_2-公约\"> 2. 公约</h2>\n<p>这里阐述的是 Kotlin 中各种操作符的对应函数和重载约定。</p>\n<p>没有在以下列出的操作符，不允许被重载。</p>\n<blockquote>\n<p>关于 Kotlin 中所有的操作符，请查看<a href=\"https://kotlinlang.org/docs/reference/grammar.html#precedence\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a></p>\n</blockquote>\n<h3 id=\"_2-1-一元操作符\"> 2.1 一元操作符</h3>\n<table>\n<thead>\n<tr>\n<th>Expression</th>\n<th>Translated to</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>+a</td>\n<td>a.unaryPlus()</td>\n</tr>\n<tr>\n<td>-a</td>\n<td>a.unaryMinus()</td>\n</tr>\n<tr>\n<td>!a</td>\n<td>a.not()</td>\n</tr>\n</tbody>\n</table>\n<p>当编译时，上面的操作符会被替换为对应的函数，步骤如下:</p>\n<ol>\n<li>确定 <code>a</code> 的类型，比如 <code>T</code></li>\n<li>在 <code>T</code> 中寻找方法，比如说 <code>unaryPlus()</code></li>\n<li>当寻找不到方法时，报错</li>\n<li>如果 <code>unaryPlus()</code> 返回类型 <code>R</code>，那么 <code>+a</code> 的类型为 <code>R</code></li>\n</ol>\n<p>注意，所有的操作符都会对基本类型进行优化，以减少函数调用的开支。</p>\n<table>\n<thead>\n<tr>\n<th>Expression</th>\n<th>Translated to</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>a++</code></td>\n<td><code>a.inc()</code> + see below</td>\n</tr>\n<tr>\n<td><code>a--</code></td>\n<td><code>a.dec()</code> + see below</td>\n</tr>\n</tbody>\n</table>\n<p>这些操作符是用来改变它们的接收者的。</p>\n<blockquote>\n<p>注意，所谓的改变接收者指的是<strong>改变其内部的值</strong>，而不是改变其对象。\n事实上，应该<strong>创建并返回一个拥有新值的对象</strong>，而不是对对象本身进行操作。</p>\n</blockquote>\n<p>编译器会对这样的操作符采取以下步骤的操作：</p>\n<ol>\n<li>确定 <code>a</code> 的类型 <code>T</code></li>\n<li>在 <code>a</code> 中寻找 <code>inc()</code> 方法</li>\n<li>如果 <code>inc()</code> 返回类型为 <code>R</code>，那么它必须是 <code>T</code> 的子类</li>\n</ol>\n<p>对于<strong>后缀</strong>操作符的计算过程如下(<code>a++</code>)：</p>\n<ol>\n<li>将 <code>a</code> 的初始值存储在临时对象 <code>a0</code> 中</li>\n<li>将 <code>a.inc()</code> 的结果赋予 <code>a</code></li>\n<li>返回 <code>a0</code></li>\n</ol>\n<p><code>a--</code> 与之相同</p>\n<p>对于<strong>前缀</strong>操作符的计算过程如下(<code>++a</code>)：</p>\n<ol>\n<li>将 <code>a.inc()</code> 的结果赋予 <code>a</code></li>\n<li>返回 <code>a</code></li>\n</ol>\n<h3 id=\"_2-2-二元操作符\"> 2.2 二元操作符</h3>\n<h4 id=\"_2-2-1-数学运算与范围\"> 2.2.1 数学运算与范围</h4>\n<table>\n<thead>\n<tr>\n<th>Expression</th>\n<th>Translated to</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>a + b</code></td>\n<td><code>a.plus(b)</code></td>\n</tr>\n<tr>\n<td><code>a - b</code></td>\n<td><code>a.minus(b)</code></td>\n</tr>\n<tr>\n<td><code>a * b</code></td>\n<td><code>a.times(b)</code></td>\n</tr>\n<tr>\n<td><code>a / b</code></td>\n<td><code>a.div(b)</code></td>\n</tr>\n<tr>\n<td><code>a % b</code></td>\n<td><code>a.mod(b)</code></td>\n</tr>\n<tr>\n<td><code>a..b</code></td>\n<td><code>a.rangeTo(b)</code></td>\n</tr>\n</tbody>\n</table>\n<p>这些操作符在执行时会自动翻译成相应的函数执行。</p>\n<h4 id=\"_2-2-2-in-操作符\"> 2.2.2 <code>in</code> 操作符</h4>\n<table>\n<thead>\n<tr>\n<th>Expression</th>\n<th>Translated to</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>a in b</code></td>\n<td><code>b.contains(a)</code></td>\n</tr>\n<tr>\n<td><code>a !in b</code></td>\n<td><code>!b.contains(a)</code></td>\n</tr>\n</tbody>\n</table>\n<p>对于这些方法，执行的步骤一样，但是只不过把调用关系颠倒了过来。</p>\n<h4 id=\"_2-2-3-方括号操作符\"> 2.2.3 方括号操作符</h4>\n<table>\n<thead>\n<tr>\n<th>Symbol</th>\n<th>Translated to</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>a[i]</code></td>\n<td><code>a.get(i)</code></td>\n</tr>\n<tr>\n<td><code>a[i, j]</code></td>\n<td><code>a.get(i, j)</code></td>\n</tr>\n<tr>\n<td><code>a[i_1, ..., i_n]</code></td>\n<td><code>a.get(i_1, ..., i_n)</code></td>\n</tr>\n<tr>\n<td><code>a[i] = b</code></td>\n<td><code>a.set(i, b)</code></td>\n</tr>\n<tr>\n<td><code>a[i, j] = b</code></td>\n<td><code>a.set(i, j, b)</code></td>\n</tr>\n<tr>\n<td><code>a[i_1, ..., i_n] = b</code></td>\n<td><code>a.set(i_1, ..., i_n, b)</code></td>\n</tr>\n</tbody>\n</table>\n<p>方括号操作符的对应方法为 <code>get()</code>，根据参数个数来调用不同的 <code>get()</code> 方法，如果有赋值操作则调用 <code>set()</code> 方法。</p>\n<h4 id=\"_2-2-4-圆括号操作符\"> 2.2.4 圆括号操作符</h4>\n<table>\n<thead>\n<tr>\n<th>Symbol</th>\n<th>Translated to</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>a()</code></td>\n<td><code>a.invoke()</code></td>\n</tr>\n<tr>\n<td><code>a(i)</code></td>\n<td><code>a.invoke(i)</code></td>\n</tr>\n<tr>\n<td><code>a(i, j)</code></td>\n<td><code>a.invoke(i, j)</code></td>\n</tr>\n<tr>\n<td><code>a(i_1, ..., i_n)</code></td>\n<td><code>a.invoke(i_1, ..., i_n)</code></td>\n</tr>\n</tbody>\n</table>\n<p>圆括号操作符会根据参数调用相应的 <code>invoke()</code> 方法</p>\n<h4 id=\"_2-2-5-复合赋值操作\"> 2.2.5 复合赋值操作</h4>\n<table>\n<thead>\n<tr>\n<th>Expression</th>\n<th>Translated to</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>a += b</code></td>\n<td><code>a.plusAssign(b)</code></td>\n</tr>\n<tr>\n<td><code>a -= b</code></td>\n<td><code>a.minusAssign(b)</code></td>\n</tr>\n<tr>\n<td><code>a *= b</code></td>\n<td><code>a.timesAssign(b)</code></td>\n</tr>\n<tr>\n<td><code>a /= b</code></td>\n<td><code>a.divAssign(b)</code></td>\n</tr>\n<tr>\n<td><code>a %= b</code></td>\n<td><code>a.modAssign(b)</code></td>\n</tr>\n</tbody>\n</table>\n<p>对于复合赋值操作，编译器做以下处理(<code>a += b</code>)：</p>\n<ul>\n<li>\n<p>如果右边一列中的函数在类中存在，那么：</p>\n<ul>\n<li>检查对应的二元函数是否存在，比如 <code>plus()</code> 对应 <code>plusAssign()</code>，如果存在，报错</li>\n<li>检查函数的返回值是否为 <code>Unit</code>，如果不是，报错</li>\n<li>上面检查通过后，生成相应代码</li>\n</ul>\n</li>\n<li>\n<p>如果右边一列中的函数在类中不存在，那么<strong>尝试生成 <code>a = a + b</code></strong>，包括类型检查（<code>a + b</code> 的返回值必须是 <code>A</code> 或其子类型）</p>\n</li>\n</ul>\n<blockquote>\n<p>不允许 <code>plus()</code> 和 <code>plusAssign()</code> 同时存在的原因：\n这是因为编译器会默认转为 <code>a = a + b</code> 进行处理，所以当存在 <code>plus()</code> 时，就没必要编写重复代码。</p>\n</blockquote>\n<p>需要注意的是，复合赋值是赋值语句的一种，而在 Kotlin 中，\n<strong>赋值不是一个表达式</strong></p>\n<p>这主要是为了避免赋值语句和单行函数的冲突</p>\n<div><pre><code>fun attachView(view: View) = this.view = view\n</code></pre>\n<div><span>1</span><br></div></div><p>上面的代码出现了二义性。</p>\n<p>但是在 Java 中，赋值是一种表达式，也就是说 Java 允许</p>\n<div><pre><code>int a = 1, b = 1, c = 1;\nif ((a = b) != c) {\n    ....\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>而 Kotlin 只能将赋值语句移到括号外。</p>\n<blockquote>\n<p><a href=\"http://stackoverflow.com/questions/36879236/how-to-convert-java-assignment-expression-to-kotlin\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a>中还有更多方法</p>\n</blockquote>\n<h4 id=\"_2-2-6-相等性检查\"> 2.2.6 相等性检查</h4>\n<table>\n<thead>\n<tr>\n<th>Expression</th>\n<th>Translated to</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>a == b</code></td>\n<td><code>a?.equals(b) ?: b === null</code></td>\n</tr>\n<tr>\n<td><code>a != b</code></td>\n<td><code>!(a?.equals(b) ?: b === null)</code></td>\n</tr>\n</tbody>\n</table>\n<p>相等性检查只需要提供 <code>equals()</code> 方法即可。</p>\n<p>注意：引用相等性检查 <code>===</code> 和 <code>!==</code> 是不允许重载的。</p>\n<p>相等性检查被转换成如此复杂的表达式是为了筛选 <code>null</code> 值，而且保证 <code>null == null</code> 返回 <code>true</code></p>\n<h4 id=\"_2-2-7-比较运算符\"> 2.2.7 比较运算符</h4>\n<table>\n<thead>\n<tr>\n<th>Symbol</th>\n<th>Translated to</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>a &gt; b</code></td>\n<td><code>a.compareTo(b) &gt; 0</code></td>\n</tr>\n<tr>\n<td><code>a &lt; b</code></td>\n<td><code>a.compareTo(b) &lt; 0</code></td>\n</tr>\n<tr>\n<td><code>a &gt;= b</code></td>\n<td><code>a.compareTo(b) &gt;= 0</code></td>\n</tr>\n<tr>\n<td><code>a &lt;= b</code></td>\n<td><code>a.compareTo(b) &lt;= 0</code></td>\n</tr>\n</tbody>\n</table>\n<p>所有的比较运算符都会被转换成 <code>compareTo()</code> 方法；\n<code>compareTo()</code> 方法必须返回一个 <code>Int</code> 值。</p>\n<h2 id=\"_3-中缀函数\"> 3. 中缀函数</h2>\n<p>除此之外，我们还可以通过定义中缀函数来定义新的**“运算符”**</p>\n<p>比如数字类型的位运算就是通过中缀函数实现的。</p>\n",
      "date_published": "2016-10-14T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Kotlin"
      ]
    },
    {
      "title": "Kotlin 数据类",
      "url": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E6%95%B0%E6%8D%AE%E7%B1%BB/",
      "id": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E6%95%B0%E6%8D%AE%E7%B1%BB/",
      "summary": "<h2 id=\"_1-介绍\"> 1. 介绍</h2>\n<p>我们经常要使用容器类结构，所以 Kotlin 提供了一种新特性，专门用于生成容器类，称为数据类(data class)</p>\n",
      "content_html": "<h2 id=\"_1-介绍\"> 1. 介绍</h2>\n<p>我们经常要使用容器类结构，所以 Kotlin 提供了一种新特性，专门用于生成容器类，称为数据类(data class)</p>\n\n<h2 id=\"_2-创建\"> 2. 创建</h2>\n<p>Kotlin 使用 <code>data</code> 定义一个数据类</p>\n<div><pre><code><span>data</span> <span>class</span> <span>User</span><span>(</span><span>val</span> name<span>:</span> String<span>,</span> <span>val</span> age<span>:</span> Int<span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>编译器会自动为这个类生成如下方法：</p>\n<ul>\n<li><code>equal()</code> 和 <code>hashCode()</code></li>\n<li><code>toString()</code>：生成 <code>&quot;User(name=John, age=42)&quot;</code></li>\n<li><code>componentN()</code> 方法，用于类的解构</li>\n<li><code>copy()</code> 方法，用于复制这个类</li>\n</ul>\n<p>如果这些方法已经被显式声明了，那么则不进行生成。</p>\n<h2 id=\"_3-需要满足的条件\"> 3. 需要满足的条件</h2>\n<p>一个 Kotlin 数据类需要满足如下条件：</p>\n<ul>\n<li>primary constructor 必须具有至少一个参数</li>\n<li>所有的 primary constructor 参数必须使用 <code>val</code> 或 <code>var</code></li>\n<li>数据类不能具有 <code>open</code> <code>abstract</code> <code>sealed</code> 修饰符，而且不能是内部类。</li>\n<li>数据类不能继承其他类，但是可以实现接口</li>\n</ul>\n<blockquote>\n<p>如果需要在 JVM 上使得类具有一个无参数的构造器，那么所有的 primary constructor 参数都必须有默认值</p>\n</blockquote>\n<h2 id=\"_4-复制\"> 4. 复制</h2>\n<p>数据类自动实现了 <code>copy()</code> 方法，可以进行数据类的深拷贝。</p>\n<div><pre><code><span>val</span> jack <span>=</span> <span>User</span><span>(</span>name <span>=</span> <span>\"Jack\"</span><span>,</span> age <span>=</span> <span>1</span><span>)</span>\n<span>val</span> olderJack <span>=</span> jack<span>.</span><span>copy</span><span>(</span>age <span>=</span> <span>2</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p><code>copy()</code> 方法的声明如下：</p>\n<div><pre><code><span>fun</span> <span>copy</span><span>(</span>name<span>:</span> String <span>=</span> <span>this</span><span>.</span>name<span>,</span> age<span>:</span> Int <span>=</span> <span>this</span><span>.</span>age<span>)</span> <span>=</span> <span>User</span><span>(</span>name<span>,</span> age<span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"_5-数据类的解构\"> 5. 数据类的解构</h2>\n<p>数据类自动生成了 <code>componentN()</code> 方法，因此可以用作数据类的解构。</p>\n<blockquote>\n<p>解构指的是类似 Python 中的返回元组，将数据类中的数据拆分开，用不同的变量来承接的特性。</p>\n</blockquote>\n<div><pre><code><span>val</span> jane <span>=</span> <span>User</span><span>(</span><span>\"Jane\"</span><span>,</span> <span>35</span><span>)</span>\n<span>val</span> <span>(</span>name<span>,</span> age<span>)</span> <span>=</span> jane\n<span>println</span><span>(</span><span>\"<span>$name</span>, <span>$age</span> years of age\"</span><span>)</span> <span>// prints \"Jane, 35 years of age\"</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>上面这个例子实际上在编译过程中会被自动转换成</p>\n<div><pre><code><span>val</span> name <span>=</span> jane<span>.</span><span>component1</span><span>(</span><span>)</span>\n<span>val</span> age <span>=</span> jane<span>.</span><span>component2</span><span>(</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>所以 <code>name</code> 和 <code>age</code> 可以直接被使用</p>\n<div><pre><code><span>println</span><span>(</span>name<span>)</span>\n<span>println</span><span>(</span>age<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p><code>componentN()</code> 方法的顺序和 primary constructor 中<strong>参数的顺序</strong>相同。</p>\n<blockquote>\n<p><code>componentN()</code> 方法的自定义\n实际上，为了支持上面的类似元组的操作，需要使用 <code>operator</code> 标识符来声明 <code>componentN()</code> 方法。</p>\n</blockquote>\n<blockquote>\n<div><pre><code></code></pre>\n<div></div></div></blockquote>\n<p>operator fun &lt;K, V&gt; Map&lt;K, V&gt;.iterator(): Iterator&lt;Map.Entry&lt;K, V&gt;&gt; = entrySet().iterator()\noperator fun &lt;K, V&gt; Map.Entry&lt;K, V&gt;.component1() = getKey()\noperator fun &lt;K, V&gt; Map.Entry&lt;K, V&gt;.component2() = getValue()</p>\n<blockquote>\n<div><pre><code></code></pre>\n<div></div></div></blockquote>\n<blockquote>\n<p>定义之后，就可以像这样调用</p>\n</blockquote>\n<blockquote>\n<div><pre><code></code></pre>\n<div></div></div></blockquote>\n<p>for ((key, value) in map) {\n// do something with the key and the value\n}</p>\n<blockquote>\n<div><pre><code></code></pre>\n<div></div></div></blockquote>\n",
      "date_published": "2016-11-26T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Kotlin"
      ]
    },
    {
      "title": "Kotlin 枚举类",
      "url": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E6%9E%9A%E4%B8%BE%E7%B1%BB/",
      "id": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E6%9E%9A%E4%B8%BE%E7%B1%BB/",
      "summary": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>事实上，Kotlin 的枚举和 Java 一样，只是提供了一个类型限定范围。</p>\n<p>而如果要使用在 <code>switch</code>，都必须使用 <code>valueOf()</code> 方法，同时使用 try-catch。</p>\n<blockquote>\n<p>当然，在 Kotlin 中，可以使用 sealed clasdd 来方便的实现需要 switch 的情景。</p>\n</blockquote>\n",
      "content_html": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>事实上，Kotlin 的枚举和 Java 一样，只是提供了一个类型限定范围。</p>\n<p>而如果要使用在 <code>switch</code>，都必须使用 <code>valueOf()</code> 方法，同时使用 try-catch。</p>\n<blockquote>\n<p>当然，在 Kotlin 中，可以使用 sealed clasdd 来方便的实现需要 switch 的情景。</p>\n</blockquote>\n\n<h2 id=\"_2-声明\"> 2. 声明</h2>\n<div><pre><code><span>enum</span> <span>class</span> Direction <span>{</span>\n  NORTH<span>,</span> SOUTH<span>,</span> WEST<span>,</span> EAST\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id=\"_3-初始化\"> 3. 初始化</h2>\n<p>与 Java 一样，枚举类也可以被初始化</p>\n<div><pre><code><span>enum</span> <span>class</span> <span>Color</span><span>(</span><span>val</span> rgb<span>:</span> Int<span>)</span> <span>{</span>\n    <span>RED</span><span>(</span><span>0xFF0000</span><span>)</span><span>,</span>\n    <span>GREEN</span><span>(</span><span>0x00FF00</span><span>)</span><span>,</span>\n    <span>BLUE</span><span>(</span><span>0x0000FF</span><span>)</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id=\"_4-匿名类\"> 4. 匿名类</h2>\n<p>每一个枚举项都能拥有它自己的匿名类和重载方法。</p>\n<div><pre><code><span>enum</span> <span>class</span> ProtocolState <span>{</span>\n  WAITING <span>{</span>\n    <span>override</span> <span>fun</span> <span>signal</span><span>(</span><span>)</span> <span>=</span> TALKING\n  <span>}</span><span>,</span>\n\n  TALKING <span>{</span>\n    <span>override</span> <span>fun</span> <span>signal</span><span>(</span><span>)</span> <span>=</span> WAITING\n  <span>}</span><span>;</span>\n\n  <span>abstract</span> <span>fun</span> <span>signal</span><span>(</span><span>)</span><span>:</span> ProtocolState\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h2 id=\"_5-创建枚举\"> 5. 创建枚举</h2>\n<p>创建枚举和 Java 相同，只能使用 <code>valueOf()</code> 方法。\n而且，此方法在参数不符合枚举值时，会抛出异常。</p>\n<p>同时 Kotlin 也提供了 <code>values()</code> 方法来遍历所有的枚举值。</p>\n",
      "date_published": "2016-11-26T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Kotlin"
      ]
    },
    {
      "title": "Kotlin 泛型",
      "url": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E6%B3%9B%E5%9E%8B/",
      "id": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E6%B3%9B%E5%9E%8B/",
      "summary": "<h2 id=\"_1-声明和实例化\"> 1. 声明和实例化</h2>\n<p>和 Java 一样，Kotlin 使用类型参数来声明一个泛型类</p>\n<div><pre><code><span>class</span> Box<span>&lt;</span>T<span>></span><span>(</span>t<span>:</span> T<span>)</span> <span>{</span>\n  <span>var</span> value <span>=</span> t\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>而在实例化时，我们需要显式给出类型参数</p>\n<div><pre><code><span>val</span> box<span>:</span> Box<span>&lt;</span>Int<span>></span> <span>=</span> Box<span>&lt;</span>Int<span>></span><span>(</span><span>1</span><span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>但是，如果类型能够被推断出，那么类型参数可以被省略</p>\n<div><pre><code><span>val</span> box <span>=</span> <span>Box</span><span>(</span><span>1</span><span>)</span> <span>// 1 has type Int, so the compiler figures out that we are talking about Box&lt;Int></span>\n</code></pre>\n<div><span>1</span><br></div></div>",
      "content_html": "<h2 id=\"_1-声明和实例化\"> 1. 声明和实例化</h2>\n<p>和 Java 一样，Kotlin 使用类型参数来声明一个泛型类</p>\n<div><pre><code><span>class</span> Box<span>&lt;</span>T<span>></span><span>(</span>t<span>:</span> T<span>)</span> <span>{</span>\n  <span>var</span> value <span>=</span> t\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>而在实例化时，我们需要显式给出类型参数</p>\n<div><pre><code><span>val</span> box<span>:</span> Box<span>&lt;</span>Int<span>></span> <span>=</span> Box<span>&lt;</span>Int<span>></span><span>(</span><span>1</span><span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>但是，如果类型能够被推断出，那么类型参数可以被省略</p>\n<div><pre><code><span>val</span> box <span>=</span> <span>Box</span><span>(</span><span>1</span><span>)</span> <span>// 1 has type Int, so the compiler figures out that we are talking about Box&lt;Int></span>\n</code></pre>\n<div><span>1</span><br></div></div>\n<h2 id=\"_2-java-中的泛型可变性\"> 2. Java 中的泛型可变性</h2>\n<p>在 Java 中，泛型是不可变的。\n也就是说 <code>List&lt;Object&gt;</code> 不能接受一个 <code>String</code> 对象。</p>\n<div><pre><code><span>// Java</span>\n<span>List</span><span><span>&lt;</span><span>String</span><span>></span></span> strs <span>=</span> <span>new</span> <span>ArrayList</span><span><span>&lt;</span><span>String</span><span>></span></span><span>(</span><span>)</span><span>;</span>\n<span>List</span><span><span>&lt;</span><span>Object</span><span>></span></span> objs <span>=</span> strs<span>;</span> <span>// !!! The cause of the upcoming problem sits here. Java prohibits this!</span>\n\nobjs<span>.</span><span>add</span><span>(</span><span>1</span><span>)</span><span>;</span> <span>// Here we put an Integer into a list of Strings</span>\n\n<span>String</span> s <span>=</span> strs<span>.</span><span>get</span><span>(</span><span>0</span><span>)</span><span>;</span> <span>// !!! ClassCastException: Cannot cast Integer to String</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>但是我们又需要实现一个接受泛型对象的方法，例如 <code>addAll()</code></p>\n<div><pre><code><span>// Java</span>\n<span>// Wrong implementation</span>\n<span>interface</span> <span>Collection</span><span><span>&lt;</span><span>E</span><span>></span></span> <span>.</span><span>.</span><span>.</span> <span>{</span>\n  <span>void</span> <span>addAll</span><span>(</span><span>Collection</span><span><span>&lt;</span><span>E</span><span>></span></span> items<span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>但是由于泛型不可变，这样的实现实际上是错误的。</p>\n<p>所以 Java 引入了<strong>通配符</strong>(<code>?</code>)，使用 <code>extends</code> 和 <code>super</code> 来对通配符进行限制。</p>\n<div><pre><code><span>// Java</span>\n<span>// Correct implementation</span>\n<span>interface</span> <span>Collection</span><span><span>&lt;</span><span>E</span><span>></span></span> <span>.</span><span>.</span><span>.</span> <span>{</span>\n  <span>void</span> <span>addAll</span><span>(</span><span>Collection</span><span><span>&lt;</span><span>?</span> <span>extends</span> <span>E</span><span>></span></span> items<span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id=\"_2-1-1-extends-t-和-super-t-的区别\"> 2.1.1 <code>&lt;? extends T&gt;</code> 和 <code>&lt;? super T&gt;</code> 的区别</h3>\n<p>何时使用 <code>extends</code> 和 <code>super</code>，Java 有一个 PECS 原则。</p>\n<p>PECS 的意思是 <b>P</b>roducer <b>E</b>xtends, <b>C</b>onsumer <b>S</b>uper。</p>\n<p>即对于生产者，使用 <code>extends</code>，\n对于消费者，使用 <code>super</code>，\n如果一个类既要生产，也要消费，那么就不对通配符进行限制。</p>\n<p>究其原因，还是得从这两者特性说起。</p>\n<h4 id=\"_2-1-1-1-extends-t\"> 2.1.1.1 <code>&lt;? extends T&gt;</code></h4>\n<p>实际上，对于使用了 <code>&lt;? extends T&gt;</code> 的类，编译器会阻止向其加入任何的元素。</p>\n<p>例如：</p>\n<div><pre><code><span>List</span><span><span>&lt;</span><span>Apple</span><span>></span></span> apples <span>=</span> <span>new</span> <span>ArrayList</span><span><span>&lt;</span><span>Apple</span><span>></span></span><span>(</span><span>)</span><span>;</span>\n<span>List</span><span><span>&lt;</span><span>?</span> <span>extends</span> <span>Fruit</span><span>></span></span> fruits <span>=</span> apples<span>;</span> <span>//works, apple is a subclass of Fruit.</span>\nfruits<span>.</span><span>add</span><span>(</span><span>new</span> <span>Strawberry</span><span>(</span><span>)</span><span>)</span><span>;</span>        <span>//compile error</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p><code>fruits</code> 是一个 <code>Fruit</code> 的子类的 <code>List</code> ,由于 <code>Apple</code> 是 <code>Fruit</code> 的子类，因此将 <code>apples</code> 赋给 <code>fruits</code> 是合法的。</p>\n<p>但是编译器会阻止将 <code>Strawberry</code> 加入 <code>fruits</code>。\n因为编译器只知道 <code>fruits</code> 是 <code>Fruit</code> 的某个子类的 <code>List</code>，\n但并不知道<strong>究竟是哪个子类</strong>，为了类型安全，只好阻止向其中加入任何子类。</p>\n<p>那么可不可以加入 <code>Fruit</code> 呢？\n很遗憾，也不可以。</p>\n<p>但是由于编译器知道 <code>fruits</code> 中的元素总是 <code>Fruit</code> 的子类，\n所以可以安全的将其取出。</p>\n<div><pre><code><span>Fruit</span> fruit <span>=</span> fruits<span>.</span><span>get</span><span>(</span><span>0</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div><h4 id=\"_2-1-1-2-super-t\"> 2.1.1.2 <code>&lt;? super T&gt;</code></h4>\n<p>使用 <code>super</code> 的原因其实并不如使用 <code>extends</code> 的原因那样复杂。</p>\n<p>使用 <code>super</code> 只是为了为了保证能向其加入 <code>T</code>，或者是对其调用<strong>接受 <code>T</code> 作为参数的方法。</strong></p>\n<p>有趣的是，编译器并没有禁止在这种类型上调用 <code>get()</code> 方法，\n但是需要注意的是，如果调用 <code>get()</code>，返回的是 <code>Object</code> 而不是具体的 <code>T</code> 类型。</p>\n<p>所以在 <code>&lt;? super T&gt;</code> 对象上，只能进行消费，即调用以 <code>T</code> 为参数的方法。</p>\n<blockquote>\n<p>神奇的是，虽然类型是 <code>super</code>，但是却不能加入一个具体的超类，而可以加入一个具体的子类。</p>\n</blockquote>\n<blockquote>\n<p>其原因就是编译器无法确定加入的超类究竟是哪一个，而 <code>T</code> 作为参数时，可以接受一个子类。</p>\n</blockquote>\n<h2 id=\"_3-kotlin-的改进-declaration-site-variance\"> 3. Kotlin 的改进： Declaration-site variance</h2>\n<p>在 Java 中，如果一个接口<strong>只返回泛型，而不对泛型进行操作</strong>，那么将其赋给超类泛型就是安全的。</p>\n<div><pre><code><span>// Java</span>\n<span>interface</span> <span>Source</span><span><span>&lt;</span><span>T</span><span>></span></span> <span>{</span>\n  <span>T</span> <span>nextT</span><span>(</span><span>)</span><span>;</span>\n<span>}</span>\n\n<span>void</span> <span>demo</span><span>(</span><span>Source</span><span><span>&lt;</span><span>String</span><span>></span></span> strs<span>)</span> <span>{</span>\n  <span>Source</span><span><span>&lt;</span><span>Object</span><span>></span></span> objects <span>=</span> strs<span>;</span> <span>// !!! Not allowed in Java</span>\n  <span>// ...</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>由于 <code>Source&lt;T&gt;</code> 中只有<strong>返回 <code>T</code></strong> 的方法，所以即使对 <code>objects</code> 进行操作，也只能返回 <code>T</code>，\n而 <code>Object</code> 是 <code>T</code> 的超类或者它本身，所以这是安全的。</p>\n<p>但是在 Java 中不允许这样的写法，你依旧要使用 <code>Sorce&lt;? extends String&gt;</code>，这显得毫无意义。</p>\n<p>在 Kotlin 中，对于这样的情形，定义了 <code>out</code> 标识符，使用 <code>out</code> 标识符来说明，类、接口<strong>只会返回泛型，而不会接受泛型作为参数。</strong></p>\n<div><pre><code><span>abstract</span> <span>class</span> Source<span>&lt;</span><span>out</span> T<span>></span> <span>{</span>\n  <span>abstract</span> <span>fun</span> <span>nextT</span><span>(</span><span>)</span><span>:</span> T\n<span>}</span>\n\n<span>fun</span> <span>demo</span><span>(</span>strs<span>:</span> Source<span>&lt;</span>String<span>></span><span>)</span> <span>{</span>\n  <span>val</span> objects<span>:</span> Source<span>&lt;</span>Any<span>></span> <span>=</span> strs <span>// This is OK, since T is an out-parameter</span>\n  <span>// ...</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>同样的，定义了 <code>in</code> 标识符，用于表明类、接口<strong>只会接受 <code>T</code> 作为参数，而不会返回它。</strong></p>\n<div><pre><code><span>abstract</span> <span>class</span> Comparable<span>&lt;</span><span>in</span> T<span>></span> <span>{</span>\n  <span>abstract</span> <span>fun</span> <span>compareTo</span><span>(</span>other<span>:</span> T<span>)</span><span>:</span> Int\n<span>}</span>\n\n<span>fun</span> <span>demo</span><span>(</span>x<span>:</span> Comparable<span>&lt;</span>Number<span>></span><span>)</span> <span>{</span>\n  x<span>.</span><span>compareTo</span><span>(</span><span>1.0</span><span>)</span> <span>// 1.0 has type Double, which is a subtype of Number</span>\n  <span>// Thus, we can assign x to a variable of type Comparable&lt;Double></span>\n  <span>val</span> y<span>:</span> Comparable<span>&lt;</span>Double<span>></span> <span>=</span> x <span>// OK!</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>与 Java 不同的是，Kotlin 并没有定义一个口诀来帮助记忆，<code>out</code> 和 <code>in</code> 已经足够说明其属性。</p>\n<blockquote>\n<p><code>out</code> 代表着类、接口只会<strong>给出</strong><code>T</code>，相当于 <code>T</code> 的生产者；\n<code>in</code> 代表着类、接口只会<strong>接受</strong> <code>T</code>，相当于 <code>T</code> 的消费者。</p>\n</blockquote>\n<blockquote>\n<p>这些词语的表意性已经十分明确了。</p>\n</blockquote>\n<h2 id=\"_4-类型预测\"> 4. 类型预测</h2>\n<p>对于一个既能生产又能消费的类，我们就不能在声明阶段限定它的泛型类型。例如：</p>\n<div><pre><code><span>class</span> Array<span>&lt;</span>T<span>></span><span>(</span><span>val</span> size<span>:</span> Int<span>)</span> <span>{</span>\n  <span>fun</span> <span>get</span><span>(</span>index<span>:</span> Int<span>)</span><span>:</span> T <span>{</span> <span>/* ... */</span> <span>}</span>\n  <span>fun</span> <span>set</span><span>(</span>index<span>:</span> Int<span>,</span> value<span>:</span> T<span>)</span> <span>{</span> <span>/* ... */</span> <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>但是对于如下方法</p>\n<div><pre><code><span>fun</span> <span>copy</span><span>(</span>from<span>:</span> Array<span>&lt;</span>Any<span>></span><span>,</span> <span>to</span><span>:</span> Array<span>&lt;</span>Any<span>></span><span>)</span> <span>{</span>\n  <span>assert</span><span>(</span>from<span>.</span>size <span>==</span> <span>to</span><span>.</span>size<span>)</span>\n  <span>for</span> <span>(</span>i <span>in</span> from<span>.</span>indices<span>)</span>\n    <span>to</span><span>[</span>i<span>]</span> <span>=</span> from<span>[</span>i<span>]</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>这个方法的目的是将一个类的元素复制到另一个类中去，如果进行如下的调用：</p>\n<div><pre><code><span>val</span> ints<span>:</span> Array<span>&lt;</span>Int<span>></span> <span>=</span> <span>arrayOf</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>)</span>\n<span>val</span> any <span>=</span> Array<span>&lt;</span>Any<span>></span><span>(</span><span>3</span><span>)</span>\n<span>copy</span><span>(</span>ints<span>,</span> any<span>)</span> <span>// Error: expects (Array&lt;Any>, Array&lt;Any>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>一个 <code>Array&lt;Any&gt;</code> 当然可以接受一个 <code>Int</code> 的值，理论上来说这段代码是完全没有问题的。</p>\n<p>但是编译器阻止这么使用的原因在于：\n<code>Array&lt;T&gt;</code> 类既可以生产又可以消费，\n如果我们向 <code>from</code> 中<strong>添加一个 <code>Any</code> 对象</strong>（因为 <code>from</code> 的形参是 <code>Array&lt;Any&gt;</code>），\n但是当前 <code>from</code> 是 <code>Int</code>， 当然这就会导致 <code>ClassCastException</code>。</p>\n<p>为了防止这种不安全的事情发生，编译器就禁止了上述操作。</p>\n<p>但是，<strong>只要 <code>from</code> 不进行消费操作，那么这段代码就是类型安全的。</strong></p>\n<p>所以，Kotlin 除了提供在声明阶段进行泛型限制以外，还可以在调用阶段进行泛型限制。</p>\n<p>在 <code>copy()</code> 方法中，如果我们限制 <code>from</code> 只会生产，而不会消费，那么上面的调用就是安全的了。</p>\n<div><pre><code><span>fun</span> <span>copy</span><span>(</span>from<span>:</span> Array<span>&lt;</span><span>out</span> Any<span>></span><span>,</span> <span>to</span><span>:</span> Array<span>&lt;</span>Any<span>></span><span>)</span> <span>{</span>\n <span>// ...</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>Kotlin 的这种特性，我们称之为<strong>类型预测</strong>：<code>from</code> 不仅仅只是一个简单的 <code>Array</code>，而且它受到了限制，它的类型已经被预测了。</p>\n<p>同样，我们也可以使用 <code>in</code> 来指明一个变量只会消费，而不会生产。</p>\n<div><pre><code><span>fun</span> <span>fill</span><span>(</span>dest<span>:</span> Array<span>&lt;</span><span>in</span> String<span>></span><span>,</span> value<span>:</span> String<span>)</span> <span>{</span>\n  <span>// ...</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><blockquote>\n<p>事实上， <code>&lt;out T&gt;</code> 相当于 Java 的 <code>&lt;? extends T&gt;</code>；<code>&lt;in T&gt;</code> 相当于 Java 的 <code>&lt;? super T&gt;</code></p>\n</blockquote>\n<h2 id=\"_5-星号\"> 5. 星号</h2>\n<p>除了上述的泛型类型限制外，Kotlin 还提供了一个星号类型(<code>*</code>)。\n这和 Java 的通配符(<code>?</code>)很相似，当你不知道具体的泛型类型，而又想使用它时，那么就可以使用星号类型。</p>\n<p>具体来说：</p>\n<ul>\n<li>对于 <code>Foo&lt;out T&gt;</code>，<code>Foo&lt;*&gt;</code> 意味着 <code>Foo&lt;out TUpper&gt;</code>，<code>TUpper</code> 指的是 <code>Foo()</code> 方法所给定的泛型上界。也就是说当 <code>T</code> 是未知的时候，你可以从 <code>Foo&lt;*&gt;</code>读取**<code>T</code> 的上界**</li>\n<li>对于 <code>Foo&lt;in T&gt;</code>，<code>Foo&lt;*&gt;</code> 指的是 <code>Foo&lt;in Nothing&gt;</code>，意思是当 <code>T</code> 未知时，你不能向 <code>Foo&lt;*&gt;</code> 中写入任何东西。</li>\n<li>对于 <code>Foo&lt;T&gt;</code>，<code>T</code> 是一个不可变的泛型类型，所以 <code>Foo&lt;*&gt;</code> 表示 <code>Foo&lt;out TUpper&gt;</code> 和 <code>Foo&lt;in Nothing&gt;</code></li>\n</ul>\n<p>一个更为通俗的解释如下：</p>\n<p>对于接口声明 <code>interface Function&lt;in T, out U&gt;</code>：</p>\n<ul>\n<li><code>Function&lt;*, String&gt;</code> 表示 <code>Function&lt;in Nothing, String&gt;</code></li>\n<li><code>Function&lt;String, *&gt;</code> 表示 <code>Function&lt;String, out Any?&gt;</code></li>\n<li><code>Function&lt;*, *&gt;</code> 表示 <code>Function&lt;in Nothing, out Any?&gt;</code></li>\n</ul>\n<h2 id=\"_6-泛型方法\"> 6. 泛型方法</h2>\n<p>与 Java 一样，Kotlin 中的方法也可以有泛型。</p>\n<div><pre><code><span>fun</span> <span>&lt;</span>T<span>></span> <span>singletonList</span><span>(</span>item<span>:</span> T<span>)</span><span>:</span> List<span>&lt;</span>T<span>></span> <span>{</span>\n  <span>// ...</span>\n<span>}</span>\n\n<span>fun</span> <span>&lt;</span>T<span>></span> T<span>.</span><span>basicToString</span><span>(</span><span>)</span> <span>:</span> String <span>{</span>  <span>// extension function</span>\n  <span>// ...</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>调用方法：</p>\n<div><pre><code><span>val</span> l <span>=</span> singletonList<span>&lt;</span>Int<span>></span><span>(</span><span>1</span><span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"_7-泛型约束\"> 7. 泛型约束</h2>\n<p>与 Java 一样，Kotlin 也拥有泛型约束，这用在当泛型参数 <code>T</code> 未知时，用于对 <code>T</code> 的类型做出限制，即 <code>TUpper</code></p>\n<p>最常用的泛型约束就是上界，Java 中使用 <code>extends</code> 来指明上界。</p>\n<p>Kotlin 使用 冒号(<code>:</code>) 来指明上界。</p>\n<div><pre><code><span>fun</span> <span>&lt;</span>T <span>:</span> Comparable<span>&lt;</span>T<span>></span><span>></span> <span>sort</span><span>(</span>list<span>:</span> List<span>&lt;</span>T<span>></span><span>)</span> <span>{</span>\n  <span>// ...</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>用法举例：</p>\n<div><pre><code><span>sort</span><span>(</span><span>listOf</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>)</span><span>)</span> <span>// OK. Int is a subtype of Comparable&lt;Int></span>\n<span>sort</span><span>(</span><span>listOf</span><span>(</span>HashMap<span>&lt;</span>Int<span>,</span> String<span>></span><span>(</span><span>)</span><span>)</span><span>)</span> <span>// Error: HashMap&lt;Int, String> is not a subtype of Comparable&lt;HashMap&lt;Int, String>></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>默认的上界是 <code>Any?</code>（<code>?</code> 说明可以为空<code>nullable</code>）。</p>\n<p>只有<strong>一个</strong>上界可以在尖括号中被指定，如果需要对同一个泛型参数指定多个上界，则需要使用 <code>where</code> 语句。</p>\n<div><pre><code><span>fun</span> <span>&lt;</span>T<span>></span> <span>cloneWhenGreater</span><span>(</span>list<span>:</span> List<span>&lt;</span>T<span>></span><span>,</span> threshold<span>:</span> T<span>)</span><span>:</span> List<span>&lt;</span>T<span>></span>\n    <span>where</span> T <span>:</span> Comparable<span>,</span>\n          T <span>:</span> Cloneable <span>{</span>\n  <span>return</span> list<span>.</span><span>filter</span> <span>{</span> it <span>></span> threshold <span>}</span><span>.</span><span>map</span> <span>{</span> it<span>.</span><span>clone</span><span>(</span><span>)</span> <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>注意 <code>Comparable</code> 和 <code>Cloneable</code> 都是接口。</p>\n",
      "date_published": "2016-11-26T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Kotlin"
      ]
    },
    {
      "title": "Kotlin 相等性",
      "url": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E7%9B%B8%E7%AD%89%E6%80%A7/",
      "id": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E7%9B%B8%E7%AD%89%E6%80%A7/",
      "summary": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>Kotlin 中拥有两种相等性类型</p>\n<ul>\n<li>引用相等性：两个引用是否指向同一个对象</li>\n<li>结构相等性：类似 Java 中的 <code>equals()</code></li>\n</ul>\n",
      "content_html": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>Kotlin 中拥有两种相等性类型</p>\n<ul>\n<li>引用相等性：两个引用是否指向同一个对象</li>\n<li>结构相等性：类似 Java 中的 <code>equals()</code></li>\n</ul>\n\n<h2 id=\"_2-引用相等性\"> 2. 引用相等性</h2>\n<p>引用相等性使用 <code>===</code>（其否定判断为 <code>!==</code>）， 来进行判别，它只判断两个引用是否指向了同一个对象。</p>\n<p><code>a === b</code> 为真当且仅当 <code>a</code> 和 <code>b</code> 指向了同一个对象。</p>\n<h2 id=\"_3-结构相等性\"> 3. 结构相等性</h2>\n<p>结构相等性的判断类似 Java 中的 <code>equals()</code>，\n在 Kotlin 中，使用 <code>==</code> 操作符来进行判断（其否定为 <code>!=</code>）。</p>\n<p>一个 <code>==</code> 操作符会被转换成以下的相应代码</p>\n<div><pre><code>a<span>?</span><span>.</span><span>equals</span><span>(</span>b<span>)</span> <span>?:</span> <span>(</span>b <span>===</span> <span>null</span><span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>也就是说，当 <code>a</code> 非空时，它会调用 <code>equal(Any?)</code>，当 <code>a</code> 为空时，它会检查 <code>b</code> 是否也为空。</p>\n<p>注意，在空检查时，没有必要转换你的代码，编译器会自动将 <code>a == null</code> 优化为 <code>a === null</code></p>\n",
      "date_published": "2016-11-26T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Kotlin"
      ]
    },
    {
      "title": "Kotlin 空安全",
      "url": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E7%A9%BA%E5%AE%89%E5%85%A8/",
      "id": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E7%A9%BA%E5%AE%89%E5%85%A8/",
      "summary": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>Kotlin 对于 Java 的一个很大的改进在于，Kotlin 的类型系统目标在于要**消除 <code>NullPointerException</code>**或者 NPE。</p>\n<p>所以 Kotlin 提供了一个健壮的 Null 检查系统。</p>\n",
      "content_html": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>Kotlin 对于 Java 的一个很大的改进在于，Kotlin 的类型系统目标在于要**消除 <code>NullPointerException</code>**或者 NPE。</p>\n<p>所以 Kotlin 提供了一个健壮的 Null 检查系统。</p>\n\n<h2 id=\"_2-产生-npe-的原因\"> 2. 产生 NPE 的原因</h2>\n<p>可能产生 NPE 的原因如下：</p>\n<ul>\n<li>显式调用 <code>throw NullPointerException()</code></li>\n<li>使用 <code>!!</code> 操作符</li>\n<li>Java 代码造成的</li>\n<li>一些前后矛盾的初始化（在构造函数中没有初始化的 <code>this</code> 在其他地方使用）</li>\n</ul>\n<h2 id=\"_3-kotlin-类型系统\"> 3. Kotlin 类型系统</h2>\n<p>在 Kotlin 中，类型系统将变量引用分成了<strong>两种类型</strong>：可以为 <code>null</code> 的类型（nullable），和不能为 <code>null</code> 的类型（non-null）</p>\n<div><pre><code><span>var</span> a<span>:</span> String <span>=</span> <span>\"abc\"</span>\na <span>=</span> <span>null</span> <span>// compilation error</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>在类型后添加一个问号(<code>?</code>)来表明它是可以为空的。</p>\n<div><pre><code><span>var</span> b<span>:</span> String<span>?</span> <span>=</span> <span>\"abc\"</span>\nb <span>=</span> <span>null</span> <span>// ok</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>此时，对于 <code>a</code>，由于它不会产生 NPE，你可以安全的访问它的成员。</p>\n<div><pre><code><span>val</span> l <span>=</span> a<span>.</span>length\n</code></pre>\n<div><span>1</span><br></div></div><p>但是对于 <code>b</code>，由于它可能为空，所以直接访问它，编译器会报错</p>\n<div><pre><code><span>val</span> l <span>=</span> b<span>.</span>length <span>// error: variable 'b' can be null</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>但是我们依旧需要访问 <code>b</code> 啊！</p>\n<h2 id=\"_4-访问可能为空变量的方法\"> 4. 访问可能为空变量的方法</h2>\n<p>下面就介绍几种方法来进行 <code>b</code> 的安全访问。</p>\n<h3 id=\"_4-1-显式检查\"> 4.1 显式检查</h3>\n<p>首先你可以直接对 <code>b</code> 进行空检查</p>\n<div><pre><code><span>val</span> l <span>=</span> <span>if</span> <span>(</span>b <span>!=</span> <span>null</span><span>)</span> b<span>.</span>length <span>else</span> <span>-</span><span>1</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>由于 Kotlin 具有智能造型特性，还可以直接在 <code>if</code> 语句中访问 <code>b</code> 的成员。</p>\n<div><pre><code><span>if</span> <span>(</span>b <span>!=</span> <span>null</span> <span>&amp;&amp;</span> b<span>.</span>length <span>></span> <span>0</span><span>)</span>\n  <span>print</span><span>(</span><span>\"String of length <span><span>${</span>b<span>.</span>length<span>}</span></span>\"</span><span>)</span>\n<span>else</span>\n  <span>print</span><span>(</span><span>\"Empty string\"</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>当然，这只适用于当 <code>b</code> 符合智能造型条件的情景，否则，<code>b</code> 有可能在检查之后再次变为空。</p>\n<h3 id=\"_4-2-使用安全访问\"> 4.2 使用安全访问</h3>\n<p>第二个方法是采用安全访问操作符(<code>?.</code>)，即在点号(<code>.</code>)前加一个问号(<code>?</code>)</p>\n<div><pre><code>b<span>?</span><span>.</span>length\n</code></pre>\n<div><span>1</span><br></div></div><p>这个表达式当 <code>b</code> 不为空时返回 <code>b.length</code>；\n当 <code>b</code> 为空时，返回 <code>null</code>。</p>\n<p>表达式的返回结果是 <code>Int?</code></p>\n<p>安全访问在链式操作中很有用。\n比如说，<code>bob</code> 是一个 <code>Employee</code>，他有可能被派往一个 <code>Department</code>，这个部门也许会存在一个主管。\n那么我们通过以下调用链来获取 <code>bob</code> 所在部门主管的名字。</p>\n<div><pre><code>bob<span>?</span><span>.</span>department<span>?</span><span>.</span>head<span>?</span><span>.</span>name\n</code></pre>\n<div><span>1</span><br></div></div><p>当调用链上的任何一个值为 <code>null</code> 时，表达式的返回值都为 <code>null</code>。</p>\n<p>如果你想对集合中的非空元素进行某种操作，可以结合安全访问和 <code>let()</code></p>\n<div><pre><code><span>val</span> listWithNulls<span>:</span> List<span>&lt;</span>String<span>?</span><span>></span> <span>=</span> <span>listOf</span><span>(</span><span>\"A\"</span><span>,</span> <span>null</span><span>)</span>\n<span>for</span> <span>(</span>item <span>in</span> listWithNulls<span>)</span> <span>{</span>\n     item<span>?</span><span>.</span><span>let</span> <span>{</span> <span>println</span><span>(</span>it<span>)</span> <span>}</span> <span>// prints A and ignores null</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><blockquote>\n<p><code>let</code> 操作接受一个 lambda 表达式，并返回 lambda 表达式的值。<a href=\"https://github.com/JetBrains/kotlin/blob/1.0.3/libraries/stdlib/src/kotlin/util/Standard.kt#L55\" target=\"_blank\" rel=\"noopener noreferrer\">源代码</a></p>\n</blockquote>\n<h3 id=\"_4-3-elvis-表达式\"> 4.3 Elvis 表达式</h3>\n<p>如果对于一个引用 <code>r</code>，我们需要：\n当 <code>r</code> 不为空时，使用它；否则我们就使用一个其他的值(<code>x</code>)</p>\n<p>我们可以使用如下的语句：</p>\n<div><pre><code><span>val</span> l<span>:</span> Int <span>=</span> <span>if</span> <span>(</span>b <span>!=</span> <span>null</span><span>)</span> b<span>.</span>length <span>else</span> <span>-</span><span>1</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>一个更为简单的方法是使用 Elvis 表达式(<code>?:</code>)</p>\n<div><pre><code><span>val</span> l <span>=</span> b<span>?</span><span>.</span>length <span>?:</span> <span>-</span><span>1</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>如果在 <code>?:</code> 的左边的值不为空，那么 Elvis 操作符就返回这个值，否则就返回右边的值。</p>\n<p>与 Java 中的条件操作符不同的是，只有当 <code>?:</code> 的左边的值<strong>为空</strong>时，才会执行右边的语句；\n所以这个操作符不能像条件操作符一样执行一般的判断。</p>\n<blockquote>\n<p>想要实现条件操作符的功能，请使用单行的 <code>if-else</code> 表达式。</p>\n</blockquote>\n<h3 id=\"_4-4-操作符\"> 4.4 <code>!!</code> 操作符</h3>\n<p>第三个方法是给 NPE 爱好者们使用的，我们可以使用 <code>b!!</code>，使用它来进行调用，结果就会和 Java 一样，会抛出 NPE。</p>\n<div><pre><code><span>val</span> l <span>=</span> b<span>!!</span><span>.</span>length\n</code></pre>\n<div><span>1</span><br></div></div><p>也就是说，如果你需要 NPE，就使用这个操作符。</p>\n<h2 id=\"_5-安全的造型\"> 5. 安全的造型</h2>\n<p>一般的造型 <code>as</code> 在对象不相符的时候，会产生一个 <code>ClassCastException</code>。</p>\n<p>一个更好的选择是使用 <code>as?</code>，一种更为安全的造型，当造型失败时，将会返回 <code>null</code></p>\n<div><pre><code><span>val</span> aInt<span>:</span> Int<span>?</span> <span>=</span> a <span>as</span><span>?</span> Int  <span>// return null if failure</span>\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"_6-空类型的集合\"> 6. 空类型的集合</h2>\n<p>如果你拥有一个可空类型的集合，想要过滤出非空类型。只需要写如下语句：</p>\n<div><pre><code><span>val</span> nullableList<span>:</span> List<span>&lt;</span>Int<span>?</span><span>></span> <span>=</span> <span>listOf</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>null</span><span>,</span> <span>4</span><span>)</span>\n<span>val</span> intList<span>:</span> List<span>&lt;</span>Int<span>></span> <span>=</span> nullableList<span>.</span><span>filterNotNull</span><span>(</span><span>)</span> <span>// non-null</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div>",
      "date_published": "2017-03-17T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Kotlin"
      ]
    },
    {
      "title": "Kotlin 类型检查和造型",
      "url": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%9F%A5%E5%92%8C%E9%80%A0%E5%9E%8B/",
      "id": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%9F%A5%E5%92%8C%E9%80%A0%E5%9E%8B/",
      "summary": "<h2 id=\"_1-类型检查\"> 1. 类型检查</h2>\n<p>使用 <code>is</code> 和 <code>!is</code> 来检查一个变量的类型</p>\n<div><pre><code><span>if</span> <span>(</span>obj <span>is</span> String<span>)</span> <span>{</span>\n  <span>print</span><span>(</span>obj<span>.</span>length<span>)</span>\n<span>}</span>\n<p><span>if</span> <span>(</span>obj <span>!</span><span>is</span> String<span>)</span> <span>{</span> <span>// same as !(obj is String)</span>\n<span>print</span><span>(</span><span>&quot;Not a String&quot;</span><span>)</span>\n<span>}</span>\n<span>else</span> <span>{</span>\n<span>print</span><span>(</span>obj<span>.</span>length<span>)</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div></p>\n",
      "content_html": "<h2 id=\"_1-类型检查\"> 1. 类型检查</h2>\n<p>使用 <code>is</code> 和 <code>!is</code> 来检查一个变量的类型</p>\n<div><pre><code><span>if</span> <span>(</span>obj <span>is</span> String<span>)</span> <span>{</span>\n  <span>print</span><span>(</span>obj<span>.</span>length<span>)</span>\n<span>}</span>\n\n<span>if</span> <span>(</span>obj <span>!</span><span>is</span> String<span>)</span> <span>{</span> <span>// same as !(obj is String)</span>\n  <span>print</span><span>(</span><span>\"Not a String\"</span><span>)</span>\n<span>}</span>\n<span>else</span> <span>{</span>\n  <span>print</span><span>(</span>obj<span>.</span>length<span>)</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div>\n<h2 id=\"_2-智能造型-smart-cast\"> 2. 智能造型(Smart Cast)</h2>\n<p>智能造型指的是，当一个对象满足一个 <code>is</code> 表达式时，它就会被自动转换成这个类型。</p>\n<div><pre><code><span>fun</span> <span>demo</span><span>(</span>x<span>:</span> Any<span>)</span> <span>{</span>\n  <span>if</span> <span>(</span>x <span>is</span> String<span>)</span> <span>{</span>\n    <span>print</span><span>(</span>x<span>.</span>length<span>)</span> <span>// x is automatically cast to String</span>\n  <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>同样的，它也支持<strong>否定</strong>检查</p>\n<div><pre><code><span>if</span> <span>(</span>x <span>!</span><span>is</span> String<span>)</span> <span>return</span>\n<span>print</span><span>(</span>x<span>.</span>length<span>)</span> <span>// x is automatically cast to String</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>也支持 <code>&amp;&amp;</code> 和 <code>||</code> 表达式</p>\n<div><pre><code>  <span>// x is automatically cast to string on the right-hand side of `||`</span>\n  <span>if</span> <span>(</span>x <span>!</span><span>is</span> String <span>||</span> x<span>.</span>length <span>==</span> <span>0</span><span>)</span> <span>return</span>\n\n  <span>// x is automatically cast to string on the right-hand side of `&amp;&amp;`</span>\n  <span>if</span> <span>(</span>x <span>is</span> String <span>&amp;&amp;</span> x<span>.</span>length <span>></span> <span>0</span><span>)</span>\n      <span>print</span><span>(</span>x<span>.</span>length<span>)</span> <span>// x is automatically cast to String</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>同样，在 <code>when</code> 和 <code>while</code> 语句中也支持这个特性</p>\n<div><pre><code><span>when</span> <span>(</span>x<span>)</span> <span>{</span>\n  <span>is</span> Int <span>-></span> <span>print</span><span>(</span>x <span>+</span> <span>1</span><span>)</span>\n  <span>is</span> String <span>-></span> <span>print</span><span>(</span>x<span>.</span>length <span>+</span> <span>1</span><span>)</span>\n  <span>is</span> IntArray <span>-></span> <span>print</span><span>(</span>x<span>.</span><span>sum</span><span>(</span><span>)</span><span>)</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>但是，智能造型在编译器<strong>无法保证</strong>在检查和使用的过程中类型不会发生变化时，不能使用。</p>\n<p>具体来说，智能造型在以下场景中有效：</p>\n<ul>\n<li><code>val</code> 局部变量：<strong>总是有效</strong></li>\n<li><code>val</code> 属性\n<ul>\n<li>这个属性是 <code>private</code> 或者 <code>internal</code>；</li>\n<li>对于它的检查代码与它的声明在同一个模块中时</li>\n<li>注意，智能造型不适用于具有自定义 getter 或者开放的变量(<code>public</code>)</li>\n</ul>\n</li>\n<li><code>var</code> 局部变量\n<ul>\n<li>这个变量没有在检查和使用代码间进行改动</li>\n<li>这个变量没有被修改它的 lambda 表达式捕获</li>\n</ul>\n</li>\n<li><code>var</code> 属性：<strong>总是无效</strong></li>\n</ul>\n<h2 id=\"_3-不安全的造型\"> 3. 不安全的造型</h2>\n<p>通常来说，当一个造型操作会丢出异常时，说明这个造型操作是不安全的。</p>\n<p>对于这种造型操作，Kotlin 使用 <code>as</code> 关键字。</p>\n<div><pre><code><span>val</span> x<span>:</span> String <span>=</span> y <span>as</span> String\n</code></pre>\n<div><span>1</span><br></div></div><p>注意，<code>null</code> 不能强制转换成 <code>String</code>，如果 <code>y</code> 是 <code>null</code>，那么上述代码将会抛出异常。</p>\n<p>我们可以使用一个 <code>nullable</code> 对象来进行造型</p>\n<div><pre><code><span>val</span> x<span>:</span> String<span>?</span> <span>=</span> y <span>as</span> String<span>?</span>\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"_4-安全的造型\"> 4. 安全的造型</h2>\n<p>为了避免在造型中抛出异常，我们可以使用一个安全的造型操作符 <code>as?</code>。</p>\n<p>它会在造型失败时返回 <code>null</code></p>\n<div><pre><code><span>val</span> x<span>:</span> String<span>?</span> <span>=</span> y <span>as</span><span>?</span> String\n</code></pre>\n<div><span>1</span><br></div></div><p>注意，虽然 <code>as?</code> 右边是一个非空类型，但是造型返回的结果也可以为空。</p>\n",
      "date_published": "2016-11-26T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Kotlin"
      ]
    },
    {
      "title": "Kotlin 类属性和域",
      "url": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E7%B1%BB%E5%B1%9E%E6%80%A7%E5%92%8C%E5%9F%9F/",
      "id": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E7%B1%BB%E5%B1%9E%E6%80%A7%E5%92%8C%E5%9F%9F/",
      "summary": "<h2 id=\"_1-声明和调用\"> 1. 声明和调用</h2>\n<p>声明类中的属性和值很简单，类似 Java，使用 <code>var</code> 声明变量，使用 <code>val</code> 声明常量。</p>\n<div><pre><code><span>public</span> <span>class</span> Address <span>{</span>\n  <span>public</span> <span>var</span> name<span>:</span> String <span>=</span> <span>..</span><span>.</span>\n  <span>public</span> <span>var</span> street<span>:</span> String <span>=</span> <span>..</span><span>.</span>\n  <span>public</span> <span>var</span> city<span>:</span> String <span>=</span> <span>..</span><span>.</span>\n  <span>public</span> <span>var</span> state<span>:</span> String<span>?</span> <span>=</span> <span>..</span><span>.</span>\n  <span>public</span> <span>var</span> zip<span>:</span> String <span>=</span> <span>..</span><span>.</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div>",
      "content_html": "<h2 id=\"_1-声明和调用\"> 1. 声明和调用</h2>\n<p>声明类中的属性和值很简单，类似 Java，使用 <code>var</code> 声明变量，使用 <code>val</code> 声明常量。</p>\n<div><pre><code><span>public</span> <span>class</span> Address <span>{</span>\n  <span>public</span> <span>var</span> name<span>:</span> String <span>=</span> <span>..</span><span>.</span>\n  <span>public</span> <span>var</span> street<span>:</span> String <span>=</span> <span>..</span><span>.</span>\n  <span>public</span> <span>var</span> city<span>:</span> String <span>=</span> <span>..</span><span>.</span>\n  <span>public</span> <span>var</span> state<span>:</span> String<span>?</span> <span>=</span> <span>..</span><span>.</span>\n  <span>public</span> <span>var</span> zip<span>:</span> String <span>=</span> <span>..</span><span>.</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div>\n<blockquote>\n<p>注意，变量默认为 <code>public</code> 属性。</p>\n</blockquote>\n<p>由于变量默认为 <code>public</code>，所以直接使用类成员运算符(<code>.</code>)，即可调用其属性和方法。</p>\n<div><pre><code><span>fun</span> <span>copyAddress</span><span>(</span>address<span>:</span> Address<span>)</span><span>:</span> Address <span>{</span>\n  <span>val</span> result <span>=</span> <span>Address</span><span>(</span><span>)</span> <span>// there's no 'new' keyword in Kotlin</span>\n  result<span>.</span>name <span>=</span> address<span>.</span>name <span>// accessors are called</span>\n  result<span>.</span>street <span>=</span> address<span>.</span>street\n  <span>// ...</span>\n  <span>return</span> result\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>需要说明的是，在编译时，系统会<strong>自动生成默认的 Getter 和 Setter</strong>。</p>\n<p>下面的写法</p>\n<div><pre><code><span>class</span> Foo <span>{</span>\n    <span>var</span> bar<span>:</span> Int <span>=</span> <span>1</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>和以下 Java 代码是<strong>等同的。</strong></p>\n<div><pre><code><span>class</span> Foo <span>{</span>\n    <span>private</span> int bar <span>=</span> <span>1</span><span>;</span>\n\n    <span>public</span> int <span>getBar</span><span>(</span><span>)</span> <span>{</span>\n        <span>return</span> bar<span>;</span>\n    <span>}</span>\n\n    <span>public</span> void <span>setBar</span><span>(</span>int value<span>)</span> <span>{</span>\n        <span>this</span><span>.</span>bar <span>=</span> value<span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>同时，在访问和修改时，系统会调用变量的 getter 和 setter 来进行，<strong>而不是直接取值和改值。</strong></p>\n<p>除此之外，Kotlin 的变量在使用前必须被初始化，否则编译器将报错。</p>\n<h2 id=\"_2-getter-和-setter\"> 2. Getter 和 Setter</h2>\n<p>定义一个类属性的完整语法如下：</p>\n<div><pre><code><span>var</span> <span>&lt;</span>propertyName<span>></span><span>:</span> <span>&lt;</span>PropertyType<span>></span> <span>[</span><span>=</span> <span>&lt;</span>property_initializer<span>></span><span>]</span>\n  <span>[</span><span>&lt;</span>getter<span>></span><span>]</span>\n  <span>[</span><span>&lt;</span>setter<span>></span><span>]</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>可以看到，初始化，Getter 和 Setter 都是可选项。</p>\n<p>需要注意的是，虽然在这里，初始化是可选项，但是这并不意味着变量不需要被初始化。</p>\n<p>实际上，Kotlin 中的变量在被使用前<strong>必须被初始化！</strong>\n特别的，一个类中的属性无论何时都要被初始化。</p>\n<blockquote>\n<p>这实际上是 Kotlin 的主旨之一，即，尽量使得过程显式化。</p>\n</blockquote>\n<div><pre><code><span>var</span> allByDefault<span>:</span> Int<span>?</span> <span>// error: explicit initializer required, default getter and setter implied</span>\n<span>var</span> initialized <span>=</span> <span>1</span> <span>// has type Int, default getter and setter</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h3 id=\"_2-1-改变-getter-和-setter-的可见性\"> 2.1 改变 Getter 和 Setter 的可见性</h3>\n<p>如果只需要改变可见性而不需要改变默认的 getter 和 setter，只需要在 <code>get</code> 或者 <code>set</code> 之前加上可见性修饰符即可，\n而不需要定义其主体。</p>\n<div><pre><code><span>var</span> setterVisibility<span>:</span> String <span>=</span> <span>\"abc\"</span>\n  <span>private</span> <span>set</span> <span>// the setter is private and has the default implementation</span>\n\n<span>var</span> setterWithAnnotation<span>:</span> Any<span>?</span> <span>=</span> <span>null</span>\n  <span>@Inject</span> <span>set</span> <span>// annotate the setter with Inject</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id=\"_2-2-自定义-getter-和-setter\"> 2.2 自定义 Getter 和 Setter</h3>\n<p>自定义 getter 和 setter 很简单，只需要在变量下方使用 <code>get</code> 和 <code>set</code> 即可。</p>\n<div><pre><code><span>var</span> stringRepresentation<span>:</span> String\n  <span>get</span><span>(</span><span>)</span> <span>=</span> <span>this</span><span>.</span><span>toString</span><span>(</span><span>)</span>\n  <span>set</span><span>(</span>value<span>)</span> <span>{</span>\n    <span>setDataFromString</span><span>(</span>value<span>)</span> <span>// parses the string and assigns values to other properties</span>\n  <span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>事实上， Kotlin 没有<strong>域</strong>这一属性，即<strong>不允许直接取值和赋值。</strong></p>\n<p>但为了自定义 getter 和 setter，又必须提供一个直接的取值和赋值的途径，\n对此，Kotlin 采用了一个名为 <strong>backing field</strong> 的特性，\n即，只允许在 getter 和 setter 中使用 <code>field</code> 这一变量作为直接取值和赋值的途径。</p>\n<p>backing field 会在如下条件下生成：</p>\n<ul>\n<li>变量进行了初始化</li>\n<li>使用了 <code>field</code> 变量</li>\n</ul>\n<div><pre><code><span>var</span> counter <span>=</span> <span>0</span> <span>// the initializer value is written directly to the backing field</span>\n  <span>set</span><span>(</span>value<span>)</span> <span>{</span>\n    <span>if</span> <span>(</span>value <span>>=</span> <span>0</span><span>)</span>\n      field <span>=</span> value\n  <span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>如果 backing field 不能满足需求，Kotlin 还提供了 <strong>backing property</strong> 特性。</p>\n<div><pre><code><span>private</span> <span>var</span> _table<span>:</span> Map<span>&lt;</span>String<span>,</span> Int<span>></span><span>?</span> <span>=</span> <span>null</span>\n<span>public</span> <span>val</span> table<span>:</span> Map<span>&lt;</span>String<span>,</span> Int<span>></span>\n  <span>get</span><span>(</span><span>)</span> <span>{</span>\n    <span>if</span> <span>(</span>_table <span>==</span> <span>null</span><span>)</span>\n      _table <span>=</span> <span>HashMap</span><span>(</span><span>)</span> <span>// Type parameters are inferred</span>\n    <span>return</span> _table <span>?:</span> <span>throw</span> <span>AssertionError</span><span>(</span><span>\"Set to null by another thread\"</span><span>)</span>\n  <span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>实际上就是使用另一个 <code>private</code> 变量来帮助实现自定义的 getter 和 setter。</p>\n<h2 id=\"_3-编译时常量\"> 3. 编译时常量</h2>\n<blockquote>\n<p>编译时常量指的是，<strong>在编译时就能确定的常量</strong>，也就是<strong>不需要依赖其他类的常量</strong></p>\n</blockquote>\n<blockquote>\n<p>以Java为例， <code>static final int a = 1</code> 将是一个编译时常量，编译后的符号表中将找不到 <code>a</code> ，所有对 <code>a</code>的引用都被替换成了 <code>1</code>。\n而 <code>static final int b = &quot;test&quot;.length()</code> 将是一个运行时常量。</p>\n</blockquote>\n<p>Kotlin 中使用 <code>const</code> 标识符来指定编译时常量，JVM 将对这些变量进行优化，提高它们的运行速度。</p>\n<p>编译时常量必须满足如下条件：</p>\n<ul>\n<li>声明在 Top-level，或者是一个 object 的成员</li>\n<li>使用原始类型或者 <code>String</code> 进行初始化</li>\n<li>没有自定义的 getter</li>\n</ul>\n<p>编译时常量可以使用在注解中。</p>\n<div><pre><code><span>const</span> <span>val</span> SUBSYSTEM_DEPRECATED<span>:</span> String <span>=</span> <span>\"This subsystem is deprecated\"</span>\n\n<span>@Deprecated</span><span>(</span>SUBSYSTEM_DEPRECATED<span>)</span> <span>fun</span> <span>foo</span><span>(</span><span>)</span> <span>{</span> <span>..</span><span>.</span> <span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id=\"_4-延迟初始化\"> 4. 延迟初始化</h2>\n<p>一般来说，类中的属性必须被初始化，但是也有时需要通过注入或者 <code>@SetUp</code> 在 JUnit 中进行初始化。</p>\n<p>对此 Kotlin 提供一种特性称作<strong>延迟初始化</strong>，使用 <code>lateinit</code> 标识符可以指明一个变量需要延迟初始化。</p>\n<div><pre><code><span>public</span> <span>class</span> MyTest <span>{</span>\n    <span>lateinit</span> <span>var</span> subject<span>:</span> TestSubject\n\n    <span>@SetUp</span> <span>fun</span> <span>setup</span><span>(</span><span>)</span> <span>{</span>\n        subject <span>=</span> <span>TestSubject</span><span>(</span><span>)</span>\n    <span>}</span>\n\n    <span>@Test</span> <span>fun</span> <span>test</span><span>(</span><span>)</span> <span>{</span>\n        subject<span>.</span><span>method</span><span>(</span><span>)</span>  <span>// dereference directly</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>延迟初始化只能应用在 <code>var</code> 中（而不能在 primary constructor 中）。\n延迟初始化的变量不能拥有自定义的 getter 和 setter，同时，它的类型也不能是原始类型。</p>\n",
      "date_published": "2017-03-17T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Kotlin"
      ]
    },
    {
      "title": "Kotlin 类基础",
      "url": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E7%B1%BB%E5%9F%BA%E7%A1%80/",
      "id": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E7%B1%BB%E5%9F%BA%E7%A1%80/",
      "summary": "<h2 id=\"_1-声明\"> 1. 声明</h2>\n<p>使用 <code>class</code> 来声明一个类。</p>\n<div><pre><code><span>class</span> Invoice <span>{</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>如果一个类是空的，那么大括号可以省略。</p>\n<div><pre><code><span>class</span> Empty\n</code></pre>\n<div><span>1</span><br></div></div>",
      "content_html": "<h2 id=\"_1-声明\"> 1. 声明</h2>\n<p>使用 <code>class</code> 来声明一个类。</p>\n<div><pre><code><span>class</span> Invoice <span>{</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>如果一个类是空的，那么大括号可以省略。</p>\n<div><pre><code><span>class</span> Empty\n</code></pre>\n<div><span>1</span><br></div></div>\n<h2 id=\"_2-创建\"> 2. 创建</h2>\n<p>Kotlin 类使用 <code>constructor</code> 来指定构建方法。</p>\n<h3 id=\"_2-1-primary-constructor\"> 2.1 primary constructor</h3>\n<p><strong>一个类必须拥有一个 primary constructor。</strong>\n<strong>primary constructor 是类头的一部分。</strong></p>\n<div><pre><code><span>class</span> Person <span>constructor</span><span>(</span>name<span>:</span> String<span>)</span> <span>{</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>如果一个 primary constructor 没有任何的可见性或者注解来修饰，则 <code>constructor</code> 可以省略。</p>\n<div><pre><code><span>class</span> <span>Person</span><span>(</span>name<span>:</span> String<span>)</span> <span>{</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>一个 primary constructor 不能包含任何代码，对应的，使用 <code>init</code> 块来进行初始化构建。</p>\n<div><pre><code><span>class</span> <span>Person</span><span>(</span>name<span>:</span> String<span>)</span> <span>{</span>\n    <span>init</span> <span>{</span>\n        logger<span>.</span><span>info</span><span>(</span><span>\"Person construction.\"</span><span>)</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>类头的参数可以在 <code>init</code> 块中使用，而且，也可以在声明类域时使用。</p>\n<div><pre><code><span>class</span> <span>Customer</span><span>(</span>name<span>:</span> String<span>)</span> <span>{</span>\n    <span>val</span> customerKey <span>=</span> name<span>.</span><span>toUpperCase</span><span>(</span><span>)</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>实际上，也可以直接在 primary constructor 中进行类域的初始化。</p>\n<div><pre><code><span>class</span> <span>Person</span><span>(</span><span>val</span> firstName<span>:</span> String<span>,</span> <span>val</span> lastName<span>:</span> String<span>,</span> <span>var</span> age<span>:</span> Int<span>)</span> <span>{</span>\n<span>// ...</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>通过添加 <code>val</code> 或者 <code>var</code>，primary constructor 中的参数就可以自动成为类的域。</p>\n<p>当如果 primary constructor 中存在<strong>可见性修饰符</strong>或者<strong>注解</strong>时，<code>constructor</code> 标识符<strong>必须存在</strong>。</p>\n<div><pre><code><span>class</span> Customer <span>public</span> <span>@Inject</span> <span>constructor</span><span>(</span>name<span>:</span> String<span>)</span> <span>{</span> <span>..</span><span>.</span> <span>}</span>\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_2-2-secondary-constructor\"> 2.2 secondary constructor</h3>\n<p>类也可以声明一个次要的构造器，相当于 Java 的重载构造函数。</p>\n<div><pre><code><span>class</span> Person <span>{</span>\n    <span>constructor</span><span>(</span>parent<span>:</span> Person<span>)</span> <span>{</span>\n        parent<span>.</span>children<span>.</span><span>add</span><span>(</span><span>this</span><span>)</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>如果一个类拥有 primary constructor，则每一个 secondary 都需要包含 primary constructor 的参数。</p>\n<p>语法类似于 C++ 的 <code>super</code> 继承，使用 <code>this</code>，通过参数来表示不同的所继承的 constructor。</p>\n<div><pre><code><span>class</span> <span>Person</span><span>(</span>firstName<span>:</span> String<span>)</span> <span>{</span>\n    <span>constructor</span><span>(</span>firstName<span>:</span> String<span>,</span>lastName<span>:</span> String<span>)</span> <span>:</span> <span>this</span><span>(</span>firstName<span>)</span> <span>{</span>\n\n    <span>}</span>\n\n    <span>constructor</span><span>(</span>firstName<span>:</span> String<span>,</span> lastName<span>:</span> String<span>,</span> middleName<span>:</span> String<span>)</span> <span>:</span> <span>this</span><span>(</span>firstName<span>,</span> lastName<span>)</span> <span>{</span>\n\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>注意，不是每个 constructor 都要<strong>直接继承</strong> primary constructor，只需要包含其参数即可。</p>\n<h3 id=\"_2-3-默认参数\"> 2.3 默认参数</h3>\n<p>一个类的构造器可以拥有默认参数，默认参数使用 <code>=</code> 来指定。</p>\n<div><pre><code><span>class</span> <span>Customer</span><span>(</span>name<span>:</span> String <span>=</span> <span>\"\"</span><span>)</span> <span>{</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><blockquote>\n<p>当 primary constructor 中的参数都有默认值后，编译器会自动生成一个没有参数的 constructor。</p>\n</blockquote>\n<h2 id=\"_3-实例化\"> 3. 实例化</h2>\n<p>将一个类实例化很简单，只需要像一个方法去调用即可。</p>\n<div><pre><code><span>val</span> customer <span>=</span> <span>Customer</span><span>(</span><span>\"hehe\"</span><span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>注意，Kotlin 中没有 <code>new</code> 标识符。</p>\n<h2 id=\"_4-继承\"> 4. 继承</h2>\n<p>任何的类都有一个默认的超类 <code>Any</code>，但 <code>Any</code> 不是 Java 中的 <code>java.lang.Object</code>。</p>\n<p>实际上，<code>Any</code> 只含有 <code>Object</code> 中的 <code>equals()</code> <code>toString()</code> <code>hashCode()</code> 方法。</p>\n<h3 id=\"_4-1-声明超类\"> 4.1 声明超类</h3>\n<p>Kotlin 中使用冒号用于声明超类</p>\n<div><pre><code><span>open</span> <span>class</span> <span>Base</span><span>(</span>p<span>:</span> Int<span>)</span>\n\n<span>class</span> <span>Derived</span><span>(</span>p<span>:</span> Int<span>)</span> <span>:</span> <span>Base</span><span>(</span>p<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>如果子类拥有 primary constructor，那么超类就必须在 primary constructor 中立即进行实例化。</p>\n<blockquote>\n<p>所谓的立即实例化就是在冒号之后<strong>构建出基类的实例</strong></p>\n</blockquote>\n<p>如果子类中没有 primary constructor，那么需要在其他 constructor 中使用 <code>super</code> 关键字进行基类构建。</p>\n<div><pre><code><span>class</span> MyView <span>:</span> View <span>{</span>\n    <span>constructor</span><span>(</span>ctx<span>:</span> Context<span>)</span> <span>:</span> <span>super</span><span>(</span>ctx<span>)</span> <span>{</span>\n    <span>}</span>\n\n    <span>constructor</span><span>(</span>ctx<span>:</span> Context<span>,</span> attrs<span>:</span> AttributeSet<span>)</span> <span>:</span> <span>super</span><span>(</span>ctx<span>,</span> attrs<span>)</span> <span>{</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>注意到，对于不同的 constructor，也可以使用<strong>不同的基类 constructor</strong> 进行构建。</p>\n<p>注意到，Kotlin 在基类前使用了 <code>open</code> 关键字，这是用来指明 <code>Base</code> 类是<strong>可以被继承的</strong>。</p>\n<p>默认情况下，<strong>Kotlin 中的类全部都是 final 类，不允许被继承。</strong>\n需要被继承的类使用 <code>open</code> 来指定。</p>\n<blockquote>\n<p>这主要基于 《Effective Java》中的第 17 条：设计并为你的继承写文档，否则就禁止它。</p>\n</blockquote>\n<h3 id=\"_4-2-override-成员\"> 4.2 Override 成员</h3>\n<p>Kotlin 的一个主要原则是尽量将操作显式化。\n所以，如果一个成员是 override 基类成员而来的，则需要显式指明 <code>override</code> 。</p>\n<div><pre><code><span>open</span> <span>class</span> Base <span>{</span>\n  <span>open</span> <span>fun</span> <span>v</span><span>(</span><span>)</span> <span>{</span><span>}</span>\n  <span>fun</span> <span>nv</span><span>(</span><span>)</span> <span>{</span><span>}</span>\n<span>}</span>\n<span>class</span> <span>Derived</span><span>(</span><span>)</span> <span>:</span> <span>Base</span><span>(</span><span>)</span> <span>{</span>\n  <span>override</span> <span>fun</span> <span>v</span><span>(</span><span>)</span> <span>{</span><span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>注意，<strong>不仅类是 final 的，成员也是 final 的</strong>。\n被 override 成员在基类中的 <code>open</code> 和在子类中的 <code>override</code> 标识符**<span style=\"font-size:25px\">缺一不可</span>**</p>\n<p>如果一个成员被指定了 <code>override</code>，那么它**默认不再带有 final 属性。**如果不允许再次 override，那么就需要给它指定 <code>final</code></p>\n<div><pre><code><span>open</span> <span>class</span> <span>AnotherDerived</span><span>(</span><span>)</span> <span>:</span> <span>Base</span><span>(</span><span>)</span> <span>{</span>\n  <span>final</span> <span>override</span> <span>fun</span> <span>v</span><span>(</span><span>)</span> <span>{</span><span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>Override 一个变量和 override 方法一样，不过比较有趣的是，你可以在 primary constructor 中使用 <code>override</code> 关键字。</p>\n<div><pre><code><span>open</span> <span>class</span> Foo <span>{</span>\n    <span>open</span> <span>val</span> x<span>:</span> Int <span>get</span> <span>{</span> <span>..</span><span>.</span> <span>}</span>\n<span>}</span>\n\n<span>class</span> <span>Bar1</span><span>(</span><span>override</span> <span>val</span> x<span>:</span> Int<span>)</span> <span>:</span> <span>Foo</span><span>(</span><span>)</span> <span>{</span>\n\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>注意，可以将 <code>val</code> 常量使用 <code>var</code> 进行 override，但<strong>反之不行</strong>。</p>\n<p>这主要是因为 <code>val</code> 只拥有 getter，当使用 <code>var</code> 时，相当于给它赋上了 setter，但是反过来则不行了，<code>val</code> 不具备 setter。</p>\n<h3 id=\"_4-3-关于-override-的规则\"> 4.3 关于 override 的规则</h3>\n<p>如果一个类继承了具有同一个域的不同基类和接口，那么，这个类就必须 override 这个域。</p>\n<blockquote>\n<p>域指的是变量、常量、方法等类成员</p>\n</blockquote>\n<div><pre><code><span>open</span> <span>class</span> A <span>{</span>\n  <span>open</span> <span>fun</span> <span>f</span><span>(</span><span>)</span> <span>{</span> <span>print</span><span>(</span><span>\"A\"</span><span>)</span> <span>}</span>\n  <span>fun</span> <span>a</span><span>(</span><span>)</span> <span>{</span> <span>print</span><span>(</span><span>\"a\"</span><span>)</span> <span>}</span>\n<span>}</span>\n\n<span>interface</span> B <span>{</span>\n  <span>fun</span> <span>f</span><span>(</span><span>)</span> <span>{</span> <span>print</span><span>(</span><span>\"B\"</span><span>)</span> <span>}</span> <span>// interface members are 'open' by default</span>\n  <span>fun</span> <span>b</span><span>(</span><span>)</span> <span>{</span> <span>print</span><span>(</span><span>\"b\"</span><span>)</span> <span>}</span>\n<span>}</span>\n\n<span>class</span> <span>C</span><span>(</span><span>)</span> <span>:</span> <span>A</span><span>(</span><span>)</span><span>,</span> B <span>{</span>\n  <span>// The compiler requires f() to be overridden:</span>\n  <span>override</span> <span>fun</span> <span>f</span><span>(</span><span>)</span> <span>{</span>\n    <span>super</span><span>&lt;</span>A<span>></span><span>.</span><span>f</span><span>(</span><span>)</span> <span>// call to A.f()</span>\n    <span>super</span><span>&lt;</span>B<span>></span><span>.</span><span>f</span><span>(</span><span>)</span> <span>// call to B.f()</span>\n  <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h2 id=\"_5-抽象类\"> 5. 抽象类</h2>\n<p>一个声明了 <code>abstract</code> 的类是一个抽象类。</p>\n<p>一个抽象类，<strong>其本身和其所有的方法都必须声明 <code>abstract</code></strong></p>\n<p><code>abstract</code> 类中不允许存在没有声明 <code>abstract</code> 的方法。</p>\n<p>声明了 <code>abstract</code> 的方法不能存在于没有声明 <code>abstract</code> 的类中。</p>\n<div><pre><code><span>open</span> <span>class</span> Base <span>{</span>\n  <span>open</span> <span>fun</span> <span>f</span><span>(</span><span>)</span> <span>{</span><span>}</span>\n<span>}</span>\n\n<span>abstract</span> <span>class</span> Derived <span>:</span> <span>Base</span><span>(</span><span>)</span> <span>{</span>\n  <span>override</span> <span>abstract</span> <span>fun</span> <span>f</span><span>(</span><span>)</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id=\"_6-伴生对象-companion-objects\"> 6. 伴生对象(Companion Objects)</h2>\n<p>Kotlin 不像 Java，没有静态成员对象。</p>\n<p><strong>Kotlin 推荐使用包级别的函数来实现工具类。</strong></p>\n<p>但是，缺少静态成员也有缺点，其一就是无法实现静态工厂。</p>\n<p>为了实现这一特性，Kotlin 通过所谓的伴生对象(Companion Objects)来实现。</p>\n<div><pre><code><span>class</span> MyClass <span>{</span>\n  <span>companion</span> <span>object</span> Factory <span>{</span>\n    <span>fun</span> <span>create</span><span>(</span><span>)</span><span>:</span> MyClass <span>=</span> <span>MyClass</span><span>(</span><span>)</span>\n  <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>伴生对象是<strong>对象声明</strong>的一种，在另一篇文章会有所介绍。</p>\n<h2 id=\"_7-封闭类-sealed-class\"> 7. 封闭类(Sealed Class)</h2>\n<p>封闭类(Sealed class)用来表示对类阶层的限制, 可以限定一个值只允许是某些指定的类型之一, 而不允许是其他类型. 感觉上, 封闭类是枚举类(enum class)的一种扩展: 枚举类的值也是有限的, 但每一个枚举值常数都只存在唯一的一个实例, 封闭类则不同, 它允许的子类类型是有限的, 但子类可以有多个实例, 每个实例都可以包含它自己的状态数据.</p>\n<p>要声明一个封闭类, 需要将 sealed 修饰符放在类名之前. 封闭类可以有子类, 但所有的子类声明都必须嵌套在封闭类的声明部分之内.</p>\n<div><pre><code><span>sealed</span> <span>class</span> Expr <span>{</span>\n    <span>class</span> <span>Const</span><span>(</span><span>val</span> number<span>:</span> Double<span>)</span> <span>:</span> <span>Expr</span><span>(</span><span>)</span>\n    <span>class</span> <span>Sum</span><span>(</span><span>val</span> e1<span>:</span> Expr<span>,</span> <span>val</span> e2<span>:</span> Expr<span>)</span> <span>:</span> <span>Expr</span><span>(</span><span>)</span>\n    <span>object</span> NotANumber <span>:</span> <span>Expr</span><span>(</span><span>)</span>\n<span>}</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><blockquote>\n<p>注：从封闭类的子类再继承的子类(间接继承者)可以放在任何地方, 不必在封闭类的声明部分之内.</p>\n</blockquote>\n<p>使用封闭类的主要好处在于, 当使用 when expression 时, 可以验证分支语句覆盖了所有的可能情况, 因此就不必通过 else 分支来处理例外情况.</p>\n<div><pre><code><span>fun</span> <span>eval</span><span>(</span>expr<span>:</span> Expr<span>)</span><span>:</span> Double <span>=</span> <span>when</span><span>(</span>expr<span>)</span> <span>{</span>\n    <span>is</span> Expr<span>.</span>Const <span>-></span> expr<span>.</span>number\n    <span>is</span> Expr<span>.</span>Sum <span>-></span> <span>eval</span><span>(</span>expr<span>.</span>e1<span>)</span> <span>+</span> <span>eval</span><span>(</span>expr<span>.</span>e2<span>)</span>\n    Expr<span>.</span>NotANumber <span>-></span> Double<span>.</span>NaN\n    <span>// 不需要 `else` 分支, 因为我们已经覆盖了所有的可能情况</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div>",
      "date_published": "2017-03-17T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Kotlin"
      ]
    },
    {
      "title": "Kotlin 范围",
      "url": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E8%8C%83%E5%9B%B4/",
      "id": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E8%8C%83%E5%9B%B4/",
      "summary": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>虽然 Kotlin 支持了简单易用的 <code>foreach</code> 语法，但是，有些时候也有必要获取下标，并显式的限定其范围，或者你需要判定一个值是否在一个范围内。</p>\n<p>Kotlin 对此支持 Range 语法，它就是简单的使用 <code>..</code> 来表示范围，并且支持使用 <code>in</code> 和 <code>!in</code> 来进行判定；以及 <code>for</code> 进行遍历。</p>\n",
      "content_html": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>虽然 Kotlin 支持了简单易用的 <code>foreach</code> 语法，但是，有些时候也有必要获取下标，并显式的限定其范围，或者你需要判定一个值是否在一个范围内。</p>\n<p>Kotlin 对此支持 Range 语法，它就是简单的使用 <code>..</code> 来表示范围，并且支持使用 <code>in</code> 和 <code>!in</code> 来进行判定；以及 <code>for</code> 进行遍历。</p>\n\n<h2 id=\"_2-判定\"> 2. 判定</h2>\n<div><pre><code><span>if</span> <span>(</span>i <span>in</span> <span>1</span><span>..</span><span>10</span><span>)</span> <span>{</span> <span>// equivalent of 1 &lt;= i &amp;&amp; i &lt;= 10</span>\n  <span>println</span><span>(</span>i<span>)</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id=\"_3-遍历\"> 3. 遍历</h2>\n<p>对于标准库中的范围（<code>IntRange</code> <code>LongRange</code> <code>CharRange</code>），Kotlin 支持遍历操作。</p>\n<div><pre><code><span>for</span> <span>(</span>i <span>in</span> <span>1</span><span>..</span><span>4</span><span>)</span> <span>print</span><span>(</span>i<span>)</span> <span>// prints \"1234\"</span>\n\n<span>for</span> <span>(</span>i <span>in</span> <span>4</span><span>..</span><span>1</span><span>)</span> <span>print</span><span>(</span>i<span>)</span> <span>// prints nothing</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>上面的第二种写法不会打印出值，但是，如果你需要逆序遍历也很简单，只需要使用 <code>downTo()</code> 方法即可。</p>\n<div><pre><code><span>for</span> <span>(</span>i <span>in</span> <span>4</span> downTo <span>1</span><span>)</span> <span>print</span><span>(</span>i<span>)</span> <span>// prints \"4321\"</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>如果需要定义步长，使用 <code>step()</code> 方法</p>\n<div><pre><code><span>for</span> <span>(</span>i <span>in</span> <span>1</span><span>..</span><span>4</span> step <span>2</span><span>)</span> <span>print</span><span>(</span>i<span>)</span> <span>// prints \"13\"</span>\n\n<span>for</span> <span>(</span>i <span>in</span> <span>4</span> downTo <span>1</span> step <span>2</span><span>)</span> <span>print</span><span>(</span>i<span>)</span> <span>// prints \"42\"</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id=\"_4-原理\"> 4. 原理</h2>\n<p>范围需要实现一个 <code>ClosedRange&lt;T&gt;</code> 接口。</p>\n<p><code>ClosedRange&lt;T&gt;</code> 代表着一个<strong>闭区间</strong>，\n它有两个变量 <code>start</code> 和 <code>endInclusive</code>，分别代表着区间的两端。\n它主要的方法是 <code>contains()</code> 一般应用在 <code>in</code> 和 <code>!in</code> 的范围检查中。</p>\n<p>对于步长和逆序方法，它们主要是通过 <code>*Progression</code> 来实现的；\n目前 Kotlin 拥有 <code>IntProgression</code>, <code>LongProgression</code>, <code>CharProgression</code></p>\n<p><code>Progresssion</code> 接受三个参数，<code>first</code> 、<code>last</code> 和一个非零的 <code>increment</code>。</p>\n<p><code>Progression</code> 主要实现了 <code>Iterable&lt;N&gt;</code> 接口，进行遍历的操作和以下的 Java 代码类似</p>\n<div><pre><code><span>for</span> <span>(</span>int i <span>=</span> first<span>;</span> i <span>!=</span> last<span>;</span> i <span>+=</span> increment<span>)</span> <span>{</span>\n  <span>// ...</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p><code>Progression</code> 类主要通过以下方法进行构建</p>\n<div><pre><code>IntProgression<span>.</span><span>fromClosedRange</span><span>(</span>start<span>,</span> end<span>,</span> increment<span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>注意 <code>increment</code> 不能是<strong>负的</strong>，也就是说不允许出现</p>\n<div><pre><code><span>(</span>last <span>-</span> first<span>)</span> <span>%</span> increment <span>==</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"_5-其他有用的方法\"> 5. 其他有用的方法</h2>\n<p>除了上面介绍的有用的方法外，还有一些比较有用的方法。</p>\n<h3 id=\"_5-1-reversed\"> 5.1 <code>reversed()</code></h3>\n<p>很简单，用于反转整个流程。</p>\n<div><pre><code><span>fun</span> IntProgression<span>.</span><span>reversed</span><span>(</span><span>)</span><span>:</span> IntProgression <span>{</span>\n  <span>return</span> IntProgression<span>.</span><span>fromClosedRange</span><span>(</span>last<span>,</span> first<span>,</span> <span>-</span>increment<span>)</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div>",
      "date_published": "2016-11-26T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Kotlin"
      ]
    },
    {
      "title": "Kotlin 调用 Java 代码",
      "url": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E8%B0%83%E7%94%A8%20Java%20%E4%BB%A3%E7%A0%81/",
      "id": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E8%B0%83%E7%94%A8%20Java%20%E4%BB%A3%E7%A0%81/",
      "summary": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>Kotlin 完美支持 Java，你可以无缝地在 Kotlin 中引入 Java 库，调用 Java 类等。</p>\n<div><pre><code><span>import</span> java<span>.</span>util<span>.</span><span>*</span>\n<p><span>fun</span> <span>demo</span><span>(</span>source<span>:</span> List<span>&lt;</span>Int<span>&gt;</span><span>)</span> <span>{</span>\n<span>val</span> list <span>=</span> ArrayList<span>&lt;</span>Int<span>&gt;</span><span>(</span><span>)</span>\n<span>// 'for'-loops work for Java collections:</span>\n<span>for</span> <span>(</span>item <span>in</span> source<span>)</span>\nlist<span>.</span><span>add</span><span>(</span>item<span>)</span>\n<span>// Operator conventions work as well:</span>\n<span>for</span> <span>(</span>i <span>in</span> <span>0</span><span>..</span>source<span>.</span><span>size</span><span>(</span><span>)</span> <span>-</span> <span>1</span><span>)</span>\nlist<span>[</span>i<span>]</span> <span>=</span> source<span>[</span>i<span>]</span> <span>// get and set are called</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div></p>\n",
      "content_html": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>Kotlin 完美支持 Java，你可以无缝地在 Kotlin 中引入 Java 库，调用 Java 类等。</p>\n<div><pre><code><span>import</span> java<span>.</span>util<span>.</span><span>*</span>\n\n<span>fun</span> <span>demo</span><span>(</span>source<span>:</span> List<span>&lt;</span>Int<span>></span><span>)</span> <span>{</span>\n  <span>val</span> list <span>=</span> ArrayList<span>&lt;</span>Int<span>></span><span>(</span><span>)</span>\n  <span>// 'for'-loops work for Java collections:</span>\n  <span>for</span> <span>(</span>item <span>in</span> source<span>)</span>\n    list<span>.</span><span>add</span><span>(</span>item<span>)</span>\n  <span>// Operator conventions work as well:</span>\n  <span>for</span> <span>(</span>i <span>in</span> <span>0</span><span>..</span>source<span>.</span><span>size</span><span>(</span><span>)</span> <span>-</span> <span>1</span><span>)</span>\n    list<span>[</span>i<span>]</span> <span>=</span> source<span>[</span>i<span>]</span> <span>// get and set are called</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div>\n<h2 id=\"_2-调用-getter-和-setter\"> 2. 调用 getter 和 setter</h2>\n<p>Java 中的 getter 和 setter 在 Kotlin 中都会被转换为 Kotlin 的格式，即只需要直接引用属性值即可。</p>\n<div><pre><code><span>import</span> java<span>.</span>util<span>.</span>Calendar\n\n<span>fun</span> <span>calendarDemo</span><span>(</span><span>)</span> <span>{</span>\n    <span>val</span> calendar <span>=</span> Calendar<span>.</span><span>getInstance</span><span>(</span><span>)</span>\n    <span>if</span> <span>(</span>calendar<span>.</span>firstDayOfWeek <span>==</span> Calendar<span>.</span>SUNDAY<span>)</span> <span>{</span>  <span>// call getFirstDayOfWeek()</span>\n        calendar<span>.</span>firstDayOfWeek <span>=</span> Calendar<span>.</span>MONDAY       <span>// call setFirstDayOfWeek()</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id=\"_3-返回-void-的方法\"> 3. 返回 <code>void</code> 的方法</h2>\n<p>Java 中返回 <code>void</code> 的方法，在 Kotlin 中会转换为返回 <code>Unit</code></p>\n<h2 id=\"_4-转义-java-方法\"> 4. 转义 Java 方法</h2>\n<p>Kotlin 中拥有一些 Java 没有的关键字（比如 <code>is</code> <code>in</code> <code>object</code> 等）。\n对于这些关键字，如果 Java 代码中有相同的方法名或变量名，可以通过对其进行转义来调用它。</p>\n<p>使用 <code>``</code> 来进行转义工作。</p>\n<div><pre><code>foo<span>.</span><span>`is`</span><span>(</span>bar<span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"_5-null-safety-和-platform-type\"> 5. Null Safety 和 Platform Type</h2>\n<p>在 Java 中，任何引用都有可能为空，但是在 Kotlin 中，严格的类型系统不允许空值。</p>\n<p>对于这种冲突，Kotlin 采用 Platform Type，也就是说在 Java 代码中的引用，Kotlin 类型系统会对其放松限制。</p>\n<p>所以它们的安全性保障就和在 Java 代码中一样。</p>\n<p>对于 Platform Type，我们可以使用一个 nullable 的 Kotlin 类型来承接它，也可以使用 non-nullable 对象。</p>\n<div><pre><code><span>val</span> nullable<span>:</span> String<span>?</span> <span>=</span> item <span>// allowed, always works</span>\n<span>val</span> notNull<span>:</span> String <span>=</span> item <span>// allowed, may fail at runtime</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>当我们使用 non-null 对象来承接 Platform Type 时，\nKotlin 会自动在赋值语句上方插入断言，来保证 Kotlin 变量的非空性。</p>\n<p>同样的，当我们把 Platform Type 传个一个接受非空类型的函数参数时，\nKotlin 也会自动在函数调用前插入断言语句。</p>\n<p>不过有时候也不一定会进行断言，特别是在使用泛型的时候。</p>\n<h2 id=\"_6-platform-type-的符号\"> 6. Platform Type 的符号</h2>\n<p>由于 Platform Type 不能被显式确定，所以没有关于它们的语法。</p>\n<p>但是有时候 IDE 需要生成函数提示，所以对于 Platfrom Type 也有一些符号用于说明。</p>\n<ul>\n<li><code>T!</code> 表示 <code>T</code> 或者 <code>T?</code></li>\n<li><code>(Mutable)Collection&lt;T&gt;!</code> 表示关于 <code>T</code> 的 Java 集合，可能会被修改，也可能不会；可能为空，也可能不会</li>\n<li><code>Array&lt;(out) T&gt;!</code>  表示关于 <code>T</code> 或者其子类型的 Java 数组，有可能为空，也可能不为空。</li>\n</ul>\n<h2 id=\"_7-nullability-注解\"> 7. Nullability 注解</h2>\n<p>使用了注解表明 nullability 的 Platform Type 会被当做真正的 Kotlin 变量来处理。</p>\n<p>Kotlin 目前支持以下注解：</p>\n<ul>\n<li>JetBrains (<code>@Nullable</code> and <code>@NotNull</code> from the  <code>org.jetbrains.annotations package</code>)</li>\n<li>Android (<code>com.android.annotations</code> and <code>android.support.annotations</code>)</li>\n<li>JSR-305 (<code>javax.annotation</code>)</li>\n<li>FindBugs (<code>edu.umd.cs.findbugs.annotations</code>)</li>\n<li>Eclipse (<code>org.eclipse.jdt.annotation</code>)</li>\n<li>Lombok (<code>lombok.NonNull</code>).</li>\n</ul>\n<h2 id=\"_8-类型的对应关系\"> 8. 类型的对应关系</h2>\n<p>由于 Kotlin 中没有原始类型，所以对于 Java 的原始类型，会被自动转换成对应的 Kotlin 类。</p>\n<p>这个转换只会发生在<strong>编译期间</strong>，在运行期间是不变的，会保持 Platfrom Type。</p>\n<table>\n<thead>\n<tr>\n<th>Java type</th>\n<th>Kotlin type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>byte</code></td>\n<td><code>kotlin.Byte</code></td>\n</tr>\n<tr>\n<td><code>short</code></td>\n<td><code>kotlin.Short</code></td>\n</tr>\n<tr>\n<td><code>int</code></td>\n<td><code>kotlin.Int</code></td>\n</tr>\n<tr>\n<td><code>long</code></td>\n<td><code>kotlin.Long</code></td>\n</tr>\n<tr>\n<td><code>char</code></td>\n<td><code>kotlin.Char</code></td>\n</tr>\n<tr>\n<td><code>float</code></td>\n<td><code>kotlin.Float</code></td>\n</tr>\n<tr>\n<td><code>double</code></td>\n<td><code>kotlin.Double</code></td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td><code>kotlin.Boolean</code></td>\n</tr>\n</tbody>\n</table>\n<p>一些非原始类型的类也会被转换</p>\n<table>\n<thead>\n<tr>\n<th>Java type</th>\n<th>Kotlin type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>java.lang.Object</code></td>\n<td><code>kotlin.Any!</code></td>\n</tr>\n<tr>\n<td><code>java.lang.Cloneable</code></td>\n<td><code>kotlin.Cloneable!</code></td>\n</tr>\n<tr>\n<td><code>java.lang.Comparable</code></td>\n<td><code>kotlin.Comparable!</code></td>\n</tr>\n<tr>\n<td><code>java.lang.Enum</code></td>\n<td><code>kotlin.Enum!</code></td>\n</tr>\n<tr>\n<td><code>java.lang.Annotation</code></td>\n<td><code>kotlin.Annotation!</code></td>\n</tr>\n<tr>\n<td><code>java.lang.Deprecated</code></td>\n<td><code>kotlin.Deprecated!</code></td>\n</tr>\n<tr>\n<td><code>java.lang.Void</code></td>\n<td><code>kotlin.Nothing!</code></td>\n</tr>\n<tr>\n<td><code>java.lang.CharSequence</code></td>\n<td><code>kotlin.CharSequence!</code></td>\n</tr>\n<tr>\n<td><code>java.lang.String</code></td>\n<td><code>kotlin.String!</code></td>\n</tr>\n<tr>\n<td><code>java.lang.Number</code></td>\n<td><code>kotlin.Number!</code></td>\n</tr>\n<tr>\n<td><code>java.lang.Throwable</code></td>\n<td><code>kotlin.Throwable!</code></td>\n</tr>\n</tbody>\n</table>\n<p>集合类型在 Kotlin 有可变和不可变两种类型，\n所以 Java 的集合类型也会进行相应的转换。</p>\n<table>\n<thead>\n<tr>\n<th>Java type</th>\n<th>Kotlin read-only type</th>\n<th>Kotlin mutable type</th>\n<th>Loaded platform type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Iterator&lt;T&gt;</code></td>\n<td><code>Iterator&lt;T&gt;</code></td>\n<td><code>MutableIterator&lt;T&gt;</code></td>\n<td><code>(Mutable)Iterator&lt;T&gt;!</code></td>\n</tr>\n<tr>\n<td><code>Iterable&lt;T&gt;</code></td>\n<td><code>Iterable&lt;T&gt;</code></td>\n<td><code>MutableIterable&lt;T&gt;</code></td>\n<td><code>(Mutable)Iterable&lt;T&gt;!</code></td>\n</tr>\n<tr>\n<td><code>Collection&lt;T&gt;</code></td>\n<td><code>Collection&lt;T&gt;</code></td>\n<td><code>MutableCollection&lt;T&gt;</code></td>\n<td><code>(Mutable)Collection&lt;T&gt;!</code></td>\n</tr>\n<tr>\n<td><code>Set&lt;T&gt;</code></td>\n<td><code>Set&lt;T&gt;</code></td>\n<td><code>MutableSet&lt;T&gt;</code></td>\n<td><code>(Mutable)Set&lt;T&gt;!</code></td>\n</tr>\n<tr>\n<td><code>List&lt;T&gt;</code></td>\n<td><code>List&lt;T&gt;</code></td>\n<td><code>MutableList&lt;T&gt;</code></td>\n<td><code>(Mutable)List&lt;T&gt;!</code></td>\n</tr>\n<tr>\n<td><code>ListIterator&lt;T&gt;</code></td>\n<td><code>ListIterator&lt;T&gt;</code></td>\n<td><code>MutableListIterator&lt;T&gt;</code></td>\n<td><code>(Mutable)ListIterator&lt;T&gt;!</code></td>\n</tr>\n<tr>\n<td><code>Map&lt;K, V&gt;</code></td>\n<td><code>Map&lt;K, V&gt;</code></td>\n<td><code>MutableMap&lt;K, V&gt;</code></td>\n<td><code>(Mutable)Map&lt;K, V&gt;!</code></td>\n</tr>\n<tr>\n<td><code>Map.Entry&lt;K, V&gt;</code></td>\n<td><code>Map.Entry&lt;K, V&gt;</code></td>\n<td><code>MutableMap.MutableEntry&lt;K,V&gt;</code></td>\n<td><code>(Mutable)Map.(Mutable)Entry&lt;K, V&gt;!</code></td>\n</tr>\n</tbody>\n</table>\n<p>同样的，Java 的数组也会进行转换</p>\n<table>\n<thead>\n<tr>\n<th>Java type</th>\n<th>Kotlin type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>int[]</code></td>\n<td><code>kotlin.IntArray!</code></td>\n</tr>\n<tr>\n<td><code>String[]</code></td>\n<td><code>kotlin.Array&lt;(out) String&gt;!</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"_9-java-泛型\"> 9. Java 泛型</h2>\n<p>Kotlin 中的泛型系统和 Java 有些不同，所以当使用的 Java 代码存在泛型时，做如下转换：</p>\n<ul>\n<li>\n<p>Java 泛型通配符被转换成类型预测</p>\n<ul>\n<li><code>Foo&lt;? extends Bar&gt;</code>  转换为 <code>Foo&lt;out Bar!&gt;!</code></li>\n<li><code>Foo&lt;? super Bar&gt;</code> 转换为 <code>Foo&lt;in Bar!&gt;!</code></li>\n</ul>\n</li>\n<li>\n<p>Java 的原始类型被转换成星形预测</p>\n<ul>\n<li><code>List</code> 转换为 <code>List&lt;*&gt;!</code>，也就是 <code>List&lt;out Any?&gt;!</code></li>\n</ul>\n</li>\n</ul>\n<p>和 Java 一样，Kotlin 的泛型在运行期间是不会保留的。\n也就是说对象在构建的时候不会携带泛型的真正类型的信息。\n也就说说 Kotlin 不能区分 <code>ArrayList&lt;Integer&gt;</code> 和 <code>ArrayList&lt;Character&gt;</code>。</p>\n<p>这限制了 <code>is</code> 语句的使用，对于泛型，<code>is</code> 只能用于星形预测类型的检查，而不能应用于其他普通泛型类型的检查。</p>\n<div><pre><code><span>if</span> <span>(</span>a <span>is</span> List<span>&lt;</span>Int<span>></span><span>)</span> <span>// Error: cannot check if it is really a List of Ints</span>\n<span>// but</span>\n<span>if</span> <span>(</span>a <span>is</span> List<span>&lt;</span><span>*</span><span>></span><span>)</span> <span>// OK: no guarantees about the contents of the list</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id=\"_10-java-数组\"> 10. Java 数组</h2>\n<p>与 Java 不同，数组在 Kotlin 中是不可变的。\n也就是说 Kotlin 不允许将 <code>Array&lt;Int&gt;</code> 赋予 <code>Array&lt;Any&gt;</code>，这避免了一些运行期间的错误。</p>\n<p>同样的，Kotlin 也不允许一个子类的数组传入一个超类数组的形参中。</p>\n<p>在 Java 平台中，使用原生类型的数组能避免装箱和拆箱所带来的性能损失；\n但是在 Kotlin 中，这些细节被隐藏了起来，所以在调用 Java 代码时就需要一些特殊方法来进行沟通。</p>\n<p>Kotlin 对此为每个原始类型都提供了一个对应的数组类型，例如 <code>IntArray</code> <code>LongArray</code> <code>CharArray</code> 等，这些类和 <code>Array</code> 类<strong>没有关系</strong>。</p>\n<p>在编译时，这些数组类型会被编译为 Java 的原生类型数组，以提高性能。</p>\n<blockquote>\n<p><code>IntArray</code> 和 <code>Array&lt;Int&gt;</code> 的区别：</p>\n</blockquote>\n<blockquote>\n<p><code>IntArray</code> 相当于 Java 中的 <code>int[]</code>，不进行装箱和拆箱操作；\n<code>Array&lt;Int&gt;</code> 相当于 Java 中的 <code>Integer[]</code>，进行装箱和拆箱操作。</p>\n</blockquote>\n<blockquote>\n<p>see <a href=\"http://stackoverflow.com/a/35253626/5730641\" target=\"_blank\" rel=\"noopener noreferrer\">here</a></p>\n</blockquote>\n<p>所以对于一个接受 <code>int[]</code> 的 Java 方法</p>\n<div><pre><code><span>public</span> <span>class</span> <span>JavaArrayExample</span> <span>{</span>\n\n    <span>public</span> <span>void</span> <span>removeIndices</span><span>(</span><span>int</span><span>[</span><span>]</span> indices<span>)</span> <span>{</span>\n        <span>// code here...</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>我们可以使用 <code>IntArray</code> 将参数传入：</p>\n<div><pre><code><span>val</span> javaObj <span>=</span> <span>JavaArrayExample</span><span>(</span><span>)</span>\n<span>val</span> array <span>=</span> <span>intArrayOf</span><span>(</span><span>0</span><span>,</span> <span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>)</span>\njavaObj<span>.</span><span>removeIndices</span><span>(</span>array<span>)</span>  <span>// passes int[] to method</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>当代码被编译为 JVM 字节码时，编译器会对以上类型进行优化，取消 getter 和 setter 的使用，而是<strong>直接取值赋值</strong>。</p>\n<div><pre><code><span>val</span> array <span>=</span> <span>arrayOf</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>)</span>\narray<span>[</span>x<span>]</span> <span>=</span> array<span>[</span>x<span>]</span> <span>*</span> <span>2</span> <span>// no actual calls to get() and set() generated</span>\n<span>for</span> <span>(</span>x <span>in</span> array<span>)</span> <span>// no iterator created</span>\n  <span>print</span><span>(</span>x<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>同样，在遍历这样的一个数组时，不会创建 <code>iterator</code>。</p>\n<div><pre><code><span>for</span> <span>(</span>i <span>in</span> array<span>.</span>indices<span>)</span> <span>// no iterator created</span>\n  array<span>[</span>i<span>]</span> <span>+=</span> <span>2</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>最后，在 <code>in</code> 语句中，对于这样的数组也不会调用 <code>contains()</code> 方法。</p>\n<div><pre><code><span>if</span> <span>(</span>i <span>in</span> array<span>.</span>indices<span>)</span> <span>{</span> <span>// same as (i >= 0 &amp;&amp; i &lt; array.size)</span>\n  <span>print</span><span>(</span>array<span>[</span>i<span>]</span><span>)</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id=\"_11-java-不定参数\"> 11. Java 不定参数</h2>\n<p>对于 Java 的不定参数，你需要像 Kotlin 中一样，使用 spread operator(<code>*</code>) 来传入一个数组。</p>\n<div><pre><code><span>public</span> <span>class</span> <span>JavaArrayExample</span> <span>{</span>\n\n    <span>public</span> <span>void</span> <span>removeIndices</span><span>(</span><span>int</span><span>.</span><span>.</span><span>.</span> indices<span>)</span> <span>{</span>\n        <span>// code here...</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><div><pre><code><span>val</span> javaObj <span>=</span> <span>JavaArray</span><span>(</span><span>)</span>\n<span>val</span> array <span>=</span> <span>intArrayOf</span><span>(</span><span>0</span><span>,</span> <span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>)</span>\njavaObj<span>.</span><span>removeIndicesVarArg</span><span>(</span><span>*</span>array<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id=\"_12-操作符\"> 12. 操作符</h2>\n<p>由于 Java 没有操作符重载，所以 Kotlin 允许将任何的拥有正确命名和函数参数的 Java 方法<strong>当做操作符重载使用</strong>。</p>\n<p>不过不允许在中缀函数中调用 Java 方法。</p>\n<h2 id=\"_13-已检查异常\"> 13. 已检查异常</h2>\n<p>由于 Kotlin 没有已检查异常，所以 Kotlin 不会强制要求你进行异常捕获；\n即使你调用的 Java 方法声明了已检查异常<strong>也一样</strong>。</p>\n<h2 id=\"_14-java-object-类方法\"> 14. Java Object 类方法</h2>\n<p>引用 Java 代码时，Java 的 <code>Object</code> 类会被转换成 <code>Any</code>；\n但是 <code>Any</code> 类只声明了 <code>toString()</code>，<code>hashCode()</code> 和 <code>equals()</code>方法，\n所以，为了完整实现 <code>Object</code> 类的功能，我们使用<strong>扩展</strong>来实现。</p>\n<h3 id=\"_14-1-wait-和-notify\"> 14.1 <code>wait()</code> 和 <code>notify()</code></h3>\n<p>《Effective Java》第 69 条中强调：尽量使用多线程工具而不是使用 <code>wait()</code> 和 <code>notify()</code> 方法；\n所以 <code>Any</code> 类中并没有实现这两个方法。</p>\n<p>但是如果你真的需要使用这两个方法，可以把 <code>Any</code> 造型为 <code>Object</code> 来使用。</p>\n<div><pre><code><span>(</span>foo <span>as</span> java<span>.</span>lang<span>.</span>Object<span>)</span><span>.</span><span>wait</span><span>(</span><span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_14-2-getclass-方法\"> 14.2 <code>getClass()</code> 方法</h3>\n<p>在 Kotlin 中，我们使用 <code>javaClass</code> 变量来获取对应的 <code>Class</code> 变量。</p>\n<div><pre><code><span>val</span> fooClass <span>=</span> foo<span>.</span>javaClass\n</code></pre>\n<div><span>1</span><br></div></div><p>对于 Java 中的 <code>Foo.class</code>，Kotlin 中使用 <code>Foo::class.java</code></p>\n<div><pre><code><span>val</span> fooClass <span>=</span> Foo<span>::</span><span>class</span><span>.</span>java\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_14-3-clone-方法\"> 14.3 <code>clone()</code> 方法</h3>\n<p>要重载 <code>clone()</code> 方法，你的类必须实现 <code>kotlin.Cloneable</code>：</p>\n<div><pre><code><span>class</span> Example <span>:</span> Cloneable <span>{</span>\n  <span>override</span> <span>fun</span> <span>clone</span><span>(</span><span>)</span><span>:</span> Any <span>{</span> <span>..</span><span>.</span> <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>不要忘记 《Effective Java》的忠告，第 11 条：<strong>明智地重载 <code>clone()</code> 方法</strong></p>\n<h3 id=\"_14-4-finalize-方法\"> 14.4 <code>finalize()</code> 方法</h3>\n<p>要重载 <code>finalize()</code> 方法，你只需要声明它即可，而不需要使用 <code>override</code> 。</p>\n<div><pre><code><span>class</span> C <span>{</span>\n  <span>protected</span> <span>fun</span> <span>finalize</span><span>(</span><span>)</span> <span>{</span>\n    <span>// finalization logic</span>\n  <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>注意，<code>finalize()</code> 不能是 <code>private</code> 的。</p>\n<h2 id=\"_15-继承-java-类\"> 15. 继承 Java 类</h2>\n<p>只能继承一个基类；\n可以实现多个接口。</p>\n<h2 id=\"_16-访问静态成员\"> 16. 访问静态成员</h2>\n<p>Java 类的静态成员会被自动转换成这个类的伴生对象。</p>\n<p>我们不能直接将这个伴生对象作为参数或者变量；\n但是我们依旧可以显式的调用它的静态成员。</p>\n<div><pre><code><span>if</span> <span>(</span><span>Character</span><span>.</span><span>isLetter</span><span>(</span>a<span>)</span><span>)</span> <span>{</span>\n  <span>// ...</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id=\"_17-java-反射\"> 17. Java 反射</h2>\n<p>Java 的反射机制可以应用于 Kotlin 上，反之亦然。\n刚才也提到，你可以使用 <code>instance.javaClass</code> 或者 <code>ClassName::class.java</code> 来使用 Java 的反射机制。</p>\n<p>同样的，Kotlin 也支持使用 Java 方法来生成 getter、setter 和 backing field。\n<code>KProperty</code> 指代 Java 的字段，<code>KFunction</code> 指代 Java 方法，反之亦然。</p>\n<h2 id=\"_18-sam-方法\"> 18. SAM 方法</h2>\n<p>和 Java 8 一样，Kotlin 也支持 SAM 类型，这意味着 Kotlin 的直接函数定义（lambda 函数主体）可以被转换为一个只有单个方法的接口实现，只要函数接口能够对应的上的话，转换就能成功。</p>\n<div><pre><code><span>val</span> runnable <span>=</span> Runnable <span>{</span> <span>println</span><span>(</span><span>\"This runs in a runnable\"</span><span>)</span> <span>}</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>也可以应用于方法调用中：</p>\n<div><pre><code><span>val</span> executor <span>=</span> <span>ThreadPoolExecutor</span><span>(</span><span>)</span>\n<span>// Java signature: void execute(Runnable command)</span>\nexecutor<span>.</span><span>execute</span> <span>{</span> <span>println</span><span>(</span><span>\"This runs in a thread pool\"</span><span>)</span> <span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>如果一个 Java 类有多个这种方法的重载，那么我们可以通过对 SAM 类型指定对应的转换器。</p>\n<div><pre><code>executor<span>.</span><span>execute</span><span>(</span>Runnable <span>{</span> <span>println</span><span>(</span><span>\"This runs in a thread pool\"</span><span>)</span> <span>}</span><span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>注意，SAM 只能应用于<strong>接口</strong>，而不能应用于抽象类，即使这个类只有一个方法。</p>\n<p>还有，这个特性只支持 Java 代码，\nKotlin 拥有相应的函数类型，所以将其转换为 Kotlin 接口的实现是非必须的，所以也没有实现这个特性。</p>\n<h2 id=\"_19-使用-jni\"> 19. 使用 JNI</h2>\n<p>通过 <code>external</code> 关键字来指明一个方法会调用 native 的 C 或者 C++ 代码。</p>\n<div><pre><code><span>external</span> <span>fun</span> <span>foo</span><span>(</span>x<span>:</span> Int<span>)</span><span>:</span> Double\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"_20-其他方面\"> 20. 其他方面</h2>\n<p>在其他方面，Kotlin 和 Java 工作程序一致。</p>\n",
      "date_published": "2016-11-26T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Kotlin"
      ]
    },
    {
      "title": "Kotlin 集合",
      "url": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E9%9B%86%E5%90%88/",
      "id": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E9%9B%86%E5%90%88/",
      "summary": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>和许多其他语言不同的是， Kotlin 将集合分成了<strong>可变</strong>和<strong>不可变</strong>两大类。</p>\n<p>理解和区分可变集合和不可变集合是很重要的，Kotlin 致力于尽量将事务显式化，所以 Kotlin 对这两种集合进行了区分。</p>\n",
      "content_html": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>和许多其他语言不同的是， Kotlin 将集合分成了<strong>可变</strong>和<strong>不可变</strong>两大类。</p>\n<p>理解和区分可变集合和不可变集合是很重要的，Kotlin 致力于尽量将事务显式化，所以 Kotlin 对这两种集合进行了区分。</p>\n\n<h2 id=\"_2-与-java-的区别\"> 2. 与 Java 的区别</h2>\n<p>与 Java 相比的很大的不同点在于，Kotlin 的 <code>List</code> 是 <code>List&lt;out T&gt;</code>，而不是 <code>List&lt;T&gt;</code>，也就是说 Kotlin 的 <code>List</code> 是只读的，而对应的 <code>MutableList&lt;T&gt;</code> 才是可写的。</p>\n<p>其他的集合类型如 <code>Set</code>、<code>Map</code> 同样继承了这个特点。</p>\n<div><pre><code><span>val</span> numbers<span>:</span> MutableList<span>&lt;</span>Int<span>></span> <span>=</span> <span>mutableListOf</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>)</span>\n<span>val</span> readOnlyView<span>:</span> List<span>&lt;</span>Int<span>></span> <span>=</span> numbers\n<span>println</span><span>(</span>numbers<span>)</span>        <span>// prints \"[1, 2, 3]\"</span>\nnumbers<span>.</span><span>add</span><span>(</span><span>4</span><span>)</span>\n<span>println</span><span>(</span>readOnlyView<span>)</span>   <span>// prints \"[1, 2, 3, 4]\"</span>\nreadOnlyView<span>.</span><span>clear</span><span>(</span><span>)</span>    <span>// -> does not compile</span>\n\n<span>val</span> strings <span>=</span> <span>hashSetOf</span><span>(</span><span>\"a\"</span><span>,</span> <span>\"b\"</span><span>,</span> <span>\"c\"</span><span>,</span> <span>\"c\"</span><span>)</span>\n<span>assert</span><span>(</span>strings<span>.</span>size <span>==</span> <span>3</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h2 id=\"_3-创建\"> 3. 创建</h2>\n<p>Kotlin 没有专门的语法或者构造器来构建一个集合类型；反之，Kotlin 使用标准库中的方法对集合类型进行构建，比如说  <code>listOf()</code> <code>mutableListOf()</code> <code>setOf()</code> <code>mutableSetOf()</code></p>\n<p>需要注意的是，上面的 <code>readOnlyView</code> 引用指向的是<strong>同一个列表</strong>，如果一个列表只有一个引用指向它，而且该引用是不可变类型的话，那么这个列表就是<strong>不可变的</strong>。</p>\n<blockquote>\n<p>也就说一个不可变的集合可以接受一个可变集合的引用</p>\n</blockquote>\n<p>生成这样的一个列表的简易方法是：</p>\n<div><pre><code><span>val</span> items <span>=</span> <span>listOf</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div><blockquote>\n<p>目前，<code>listOf()</code> 方法返回的是一个 array list，以后可能会采用更为节省内存的实现方法。</p>\n</blockquote>\n<p>需要注意的是，不可变集合是<strong>协变的</strong>，也就是说一个 <code>List&lt;Shape&gt;</code> 可以接受一个 <code>List&lt;Rectangle&gt;</code> 变量，如果 <code>Rectangle</code> 是继承于 <code>Shape</code> 的话。</p>\n<p>相反，可变类型的集合没有这个特性。</p>\n<h2 id=\"_4-返回一个只读列表的快照\"> 4. 返回一个只读列表的快照</h2>\n<p>有时候，虽然类中的列表在不断变动，但是你只想给调用者呈现一个<strong>某时刻的只读列表</strong>，可以使用如下方法</p>\n<div><pre><code><span>class</span> Controller <span>{</span>\n    <span>private</span> <span>val</span> _items <span>=</span> mutableListOf<span>&lt;</span>String<span>></span><span>(</span><span>)</span>\n    <span>val</span> items<span>:</span> List<span>&lt;</span>String<span>></span> <span>get</span><span>(</span><span>)</span> <span>=</span> _items<span>.</span><span>toList</span><span>(</span><span>)</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p><code>toList()</code> 方法只是简单的复制了列表中的元素，而且保证它是只读的，这样调用者就可以得到调用时列表的状态，而且是只读的。</p>\n<h2 id=\"_5-其他有用的方法\"> 5. 其他有用的方法</h2>\n<p>列表类中还拥有其他十分有用的扩展方法。</p>\n<div><pre><code><span>val</span> items <span>=</span> <span>listOf</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>)</span>\nitems<span>.</span><span>first</span><span>(</span><span>)</span> <span>==</span> <span>1</span>\nitems<span>.</span><span>last</span><span>(</span><span>)</span> <span>==</span> <span>4</span>\nitems<span>.</span><span>filter</span> <span>{</span> it <span>%</span> <span>2</span> <span>==</span> <span>0</span> <span>}</span>   <span>// returns [2, 4]</span>\n\n<span>val</span> rwList <span>=</span> <span>mutableListOf</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>)</span>\nrwList<span>.</span><span>requireNoNulls</span><span>(</span><span>)</span>        <span>// returns [1, 2, 3]</span>\n<span>if</span> <span>(</span>rwList<span>.</span><span>none</span> <span>{</span> it <span>></span> <span>6</span> <span>}</span><span>)</span> <span>println</span><span>(</span><span>\"No items above 6\"</span><span>)</span>  <span>// prints \"No items above 6\"</span>\n<span>val</span> item <span>=</span> rwList<span>.</span><span>firstOrNull</span><span>(</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>同样，<code>Map</code> 也继承了这个特点</p>\n<div><pre><code><span>val</span> readWriteMap <span>=</span> <span>hashMapOf</span><span>(</span><span>\"foo\"</span> <span>to</span> <span>1</span><span>,</span> <span>\"bar\"</span> <span>to</span> <span>2</span><span>)</span>\n<span>println</span><span>(</span>readWriteMap<span>[</span><span>\"foo\"</span><span>]</span><span>)</span>  <span>// prints \"1\"</span>\n<span>val</span> snapshot<span>:</span> Map<span>&lt;</span>String<span>,</span> Int<span>></span> <span>=</span> <span>HashMap</span><span>(</span>readWriteMap<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div>",
      "date_published": "2016-11-26T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Kotlin"
      ]
    },
    {
      "title": "Kotlin 高阶函数和 Lambda",
      "url": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%E5%92%8C%20Lambda/",
      "id": "https://wafer.li/blog-corners/langroad/Kotlin/Kotlin%20%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%E5%92%8C%20Lambda/",
      "summary": "<h2 id=\"_1-高阶函数\"> 1. 高阶函数</h2>\n<p>Kotlin 允许函数接受一个<strong>函数引用</strong>作为参数，这样的函数被称作<strong>高阶函数</strong>。</p>\n<p>这使得回调机制在 Kotlin 中更容易被实现。</p>\n",
      "content_html": "<h2 id=\"_1-高阶函数\"> 1. 高阶函数</h2>\n<p>Kotlin 允许函数接受一个<strong>函数引用</strong>作为参数，这样的函数被称作<strong>高阶函数</strong>。</p>\n<p>这使得回调机制在 Kotlin 中更容易被实现。</p>\n\n<h3 id=\"_1-1-声明\"> 1.1 声明</h3>\n<div><pre><code><span>fun</span> <span>&lt;</span>T<span>></span> <span>lock</span><span>(</span>lock<span>:</span> Lock<span>,</span> body<span>:</span> <span>(</span><span>)</span> <span>-></span> T<span>)</span><span>:</span> T <span>{</span>\n  lock<span>.</span><span>lock</span><span>(</span><span>)</span>\n  <span>try</span> <span>{</span>\n    <span>return</span> <span>body</span><span>(</span><span>)</span>\n  <span>}</span>\n  <span>finally</span> <span>{</span>\n    lock<span>.</span><span>unlock</span><span>(</span><span>)</span>\n  <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>上面的这个例子中，<code>body</code> 就是一个函数引用，它的类型是 <code>() -&gt; T</code>，表示该函数不接受参数，返回类型是 <code>T</code>。</p>\n<p>可以看到，在这个高阶函数中，可以直接使用 <code>body()</code> 对 <code>body</code> 函数进行调用。</p>\n<h3 id=\"_1-2-调用\"> 1.2 调用</h3>\n<p>调用高阶函数需要传入另一个函数作为其参数，这是 Kotlin 反射机制中的一部分。</p>\n<p>Kotlin 使用<strong>函数引用</strong>来指明一个函数对象，其形式是 <code>::functionName</code>，例如：</p>\n<div><pre><code><span>fun</span> <span>toBeSynchronized</span><span>(</span><span>)</span> <span>=</span> sharedResource<span>.</span><span>operation</span><span>(</span><span>)</span>\n\n<span>val</span> result <span>=</span> <span>lock</span><span>(</span>lock<span>,</span> <span>::</span>toBeSynchronized<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>这个例子中 <code>::toBeSynchronized</code> 就是函数 <code>toBeSynchronized()</code> 的函数引用。</p>\n<p>除此之外，高阶函数还可以接受一个 Lambda 表达式作为其函数参数。</p>\n<div><pre><code><span>val</span> result <span>=</span> <span>lock</span><span>(</span>lock<span>,</span> <span>{</span> sharedResource<span>.</span><span>operation</span><span>(</span><span>)</span> <span>}</span><span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div><blockquote>\n<p>Lambda 会在接下来的章节介绍，但是为了更好地理解高阶函数，先来几点简单的概述：</p>\n</blockquote>\n<ul>\n<li>Lambda 表达式无论何时都使用 <code>{}</code> 和其他表达式分隔</li>\n<li><code>-&gt;</code> 之前的是 Lambda 表达式的参数</li>\n<li><code>-&gt;</code> 之后的是 Lambda 表达式的主体</li>\n</ul>\n<p>特别的，如果一个高阶函数的函数引用参数在最后一位，那么该参数能在括号外被指定。</p>\n<div><pre><code><span>lock</span> <span>(</span>lock<span>)</span> <span>{</span>\n  sharedResource<span>.</span><span>operation</span><span>(</span><span>)</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>另一个高阶函数的例子是 <code>map()</code> 函数。</p>\n<div><pre><code><span>fun</span> <span>&lt;</span>T<span>,</span> R<span>></span> List<span>&lt;</span>T<span>></span><span>.</span><span>map</span><span>(</span>transform<span>:</span> <span>(</span>T<span>)</span> <span>-></span> R<span>)</span><span>:</span> List<span>&lt;</span>R<span>></span> <span>{</span>\n  <span>val</span> result <span>=</span> arrayListOf<span>&lt;</span>R<span>></span><span>(</span><span>)</span>\n  <span>for</span> <span>(</span>item <span>in</span> <span>this</span><span>)</span>\n    result<span>.</span><span>add</span><span>(</span><span>transform</span><span>(</span>item<span>)</span><span>)</span>\n  <span>return</span> result\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>它可以这样被调用：</p>\n<div><pre><code><span>val</span> doubled <span>=</span> ints<span>.</span><span>map</span> <span>{</span> it <span>-></span> it <span>*</span> <span>2</span> <span>}</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>注意到，如果高阶函数只有唯一的一个参数，而且这个参数是一个函数类型的，那么调用它的圆括号也可以被省略。</p>\n<h3 id=\"_1-3-it-参数\"> 1.3 <code>it</code> 参数</h3>\n<p>如果一个 Lambda 表达式只拥有一个参数，那么其参数的声明和箭头符号(<code>-&gt;</code>)都可以省略。</p>\n<div><pre><code>ints<span>.</span><span>map</span> <span>{</span> it <span>*</span> <span>2</span> <span>}</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>这个唯一的参数被命名为 <code>it</code>，这是一个隐式的默认单参数名称。\n当 Lambda 表达式像上面那样被调用时，不能使用 <code>it</code> 以外的名称来指代唯一的参数。</p>\n<h2 id=\"_2-lambda-表达式\"> 2. Lambda 表达式</h2>\n<p>Lambda 表达式是一种<strong>匿名的函数</strong>，它只有<strong>文字上的函数定义</strong>，而没有实际的名称。</p>\n<p>也就是说 Lambda 表达式是一种没有被声明，却会被立即执行的函数。</p>\n<p>考虑如下的高阶函数</p>\n<div><pre><code><span>max</span><span>(</span>strings<span>,</span> <span>{</span> a<span>,</span> b <span>-></span> a<span>.</span>length <span>&lt;</span> b<span>.</span>length <span>}</span><span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>其中的 Lambda 表达式和 <code>compare()</code> 方法是等价的。</p>\n<div><pre><code><span>fun</span> <span>compare</span><span>(</span>a<span>:</span> String<span>,</span> b<span>:</span> String<span>)</span><span>:</span> Boolean <span>=</span> a<span>.</span>length <span>&lt;</span> b<span>.</span>length\n</code></pre>\n<div><span>1</span><br></div></div><blockquote>\n<p>注意到，lambda 是一个表达式，所以它最后一个语句的执行结果就是它的返回值。</p>\n</blockquote>\n<h3 id=\"_2-1-函数类型\"> 2.1 函数类型</h3>\n<p>对于上面的 <code>max()</code> 方法，定义如下：</p>\n<div><pre><code><span>fun</span> <span>&lt;</span>T<span>></span> <span>max</span><span>(</span>collection<span>:</span> Collection<span>&lt;</span>T<span>></span><span>,</span> less<span>:</span> <span>(</span>T<span>,</span> T<span>)</span> <span>-></span> Boolean<span>)</span><span>:</span> T<span>?</span> <span>{</span>\n  <span>var</span> max<span>:</span> T<span>?</span> <span>=</span> <span>null</span>\n  <span>for</span> <span>(</span>it <span>in</span> collection<span>)</span>\n    <span>if</span> <span>(</span>max <span>==</span> <span>null</span> <span>||</span> <span>less</span><span>(</span>max<span>,</span> it<span>)</span><span>)</span>\n      max <span>=</span> it\n  <span>return</span> max\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>它是一个高阶函数，其中， <code>less</code> 的类型是一个<strong>函数</strong><code>(T, T) -&gt; Boolean</code>，意味着 <code>less</code> 函数接受两个 <code>T</code> 类型的参数，返回布尔值。</p>\n<p>对于函数类型，除了上面的这种声明方法外，也可以给函数类型中的各个变量赋上名称。这将有助于说明该函数类型的调用方法和作用。</p>\n<div><pre><code><span>val</span> compare<span>:</span> <span>(</span>x<span>:</span> T<span>,</span> y<span>:</span> T<span>)</span> <span>-></span> Int <span>=</span> <span>..</span><span>.</span>\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_2-2-lambda-表达式的语法\"> 2.2 Lambda 表达式的语法</h3>\n<p>一个 lambda 表达式总是在花括号内；\n参数的定义在括号之内，<code>-&gt;</code> 之前，而且可以省略类型；\n函数的主题在 <code>-&gt;</code> 之后。</p>\n<div><pre><code><span>val</span> sum<span>:</span> <span>(</span>Int<span>,</span> Int<span>)</span> <span>-></span> Int <span>=</span> <span>{</span> x<span>,</span> y <span>-></span> x <span>+</span> y <span>}</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>同时，只有一个参数的 lambda 表达式可以直接省略参数声明和 <code>-&gt;</code></p>\n<p>如果高阶函数的函数类型参数在最后一位，那么 lambda 表达式可以在圆括号之外。</p>\n<h3 id=\"_2-3-匿名函数\"> 2.3 匿名函数</h3>\n<p>lambda 表达式语法中缺少对返回类型的指定，\n在通常情况下，这是非必须的，因为大多数的返回类型都可以被自动推断出来。</p>\n<p>当然，如果你需要<strong>显式地声明返回类型</strong>，可以使用<strong>匿名函数</strong></p>\n<div><pre><code><span>fun</span><span>(</span>x<span>:</span> Int<span>,</span> y<span>:</span> Int<span>)</span><span>:</span> Int <span>=</span> x <span>+</span> y\n</code></pre>\n<div><span>1</span><br></div></div><p>一个匿名函数和常规的函数声明很像，只不过它的名字被省略了。</p>\n<p>匿名函数除了表达式之外，也可以使用语句块作为函数主体。</p>\n<div><pre><code><span>fun</span><span>(</span>x<span>:</span> Int<span>,</span> y<span>:</span> Int<span>)</span><span>:</span> Int <span>{</span>\n  <span>return</span> x <span>+</span> y\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>当匿名函数的参数类型能够被推断得出时，其参数类型可以被省略。</p>\n<div><pre><code>ints<span>.</span><span>filter</span><span>(</span><span>fun</span><span>(</span>item<span>)</span> <span>=</span> item <span>></span> <span>0</span><span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>同样的，匿名函数的返回类型也可以不显式指明，直接由函数主体推断得出。</p>\n<p>需要注意的是，匿名函数的参数<strong>必须在圆括号之中</strong>，只有 Lambda 表达式材才允许在圆括号外传递参数。</p>\n<p>匿名函数和 Lambda 表达式的一个主要区别是：\n在 Lambda 表达式中的 <code>return</code> 语句会从其外部函数返回（即对应的高阶函数）；\n而在匿名函数中的 <code>return</code> 将会在匿名函数自身返回。</p>\n<blockquote>\n<p>实际上，<code>return</code> 所对应的是<strong>最近的 <code>fun</code> 函数</strong>（这称为 local return），\n但是根据<a href=\"https://discuss.kotlinlang.org/t/return-from-outer-function/590/2\" target=\"_blank\" rel=\"noopener noreferrer\">这个帖子</a>，<strong>非本地返回特性</strong>只支持内联函数，\n所以从一个非内联的 lambda 使用 <code>return</code>，是不可能的。</p>\n</blockquote>\n<blockquote>\n<p>但是匿名函数可以进行这种操作，当你需要从 lambda 使用 <code>return</code> 时，使用匿名函数来代替它。</p>\n</blockquote>\n<blockquote>\n<p>https://www.reddit.com/r/Kotlin/comments/3yybyf/returning_from_lambda_functions/</p>\n</blockquote>\n<h3 id=\"_2-4-闭包\"> 2.4 闭包</h3>\n<p>闭包指的是内部函数可以访问外部变量，Kotlin 的 lambda 表达式、匿名函数、局部函数和 object expression 都支持这一特性。</p>\n<div><pre><code><span>var</span> sum <span>=</span> <span>0</span>\nints<span>.</span><span>filter</span> <span>{</span> it <span>></span> <span>0</span> <span>}</span><span>.</span><span>forEach</span> <span>{</span>\n  sum <span>+=</span> it\n<span>}</span>\n<span>print</span><span>(</span>sum<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>而且和 Java 不同的是，被闭包捕获的外部变量是可以改变的。</p>\n<h3 id=\"_2-5-带接收者的函数\"> 2.5 带接收者的函数</h3>\n<p>Kotlin 还支持定义一个带<strong>接收者</strong>的函数字面量，这样就可以在 lambda 表达式和匿名函数内部调用接收者的成员。</p>\n<div><pre><code>sum <span>:</span> Int<span>.</span><span>(</span>other<span>:</span> Int<span>)</span> <span>-></span> Int\n</code></pre>\n<div><span>1</span><br></div></div><blockquote>\n<p>与扩展函数的区别：带接收者的函数没有名字，只能通过匿名函数或者 lambda 表达式来使用</p>\n</blockquote>\n<p>这里定义了一个 <code>sum()</code> 函数，它的接收者是一个 <code>Int</code> 对象。</p>\n<p>那么就可以像这样调用：</p>\n<div><pre><code><span>1</span><span>.</span><span>sum</span><span>(</span><span>2</span><span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>通过匿名函数，我们可以定义一个带接收者函数的变量。</p>\n<div><pre><code><span>val</span> sum <span>=</span> <span>fun</span> Int<span>.</span><span>(</span>other<span>:</span> Int<span>)</span><span>:</span> Int <span>=</span> <span>this</span> <span>+</span> other\n</code></pre>\n<div><span>1</span><br></div></div><p>当接收者能从上下文被推断出来时，可以使用 lambda 表达式来调用接收者成员。</p>\n<div><pre><code><span>class</span> HTML <span>{</span>\n    <span>fun</span> <span>body</span><span>(</span><span>)</span> <span>{</span> <span>..</span><span>.</span> <span>}</span>\n<span>}</span>\n\n<span>fun</span> <span>html</span><span>(</span><span>init</span><span>:</span> HTML<span>.</span><span>(</span><span>)</span> <span>-></span> Unit<span>)</span><span>:</span> HTML <span>{</span>\n  <span>val</span> html <span>=</span> <span>HTML</span><span>(</span><span>)</span>  <span>// create the receiver object</span>\n  html<span>.</span><span>init</span><span>(</span><span>)</span>        <span>// pass the receiver object to the lambda</span>\n  <span>return</span> html\n<span>}</span>\n\n\nhtml <span>{</span>       <span>// lambda with receiver begins here</span>\n    <span>body</span><span>(</span><span>)</span>   <span>// calling a method on the receiver object</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div>",
      "date_published": "2016-11-26T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Kotlin"
      ]
    },
    {
      "title": "Python 3 Advanced Skill",
      "url": "https://wafer.li/blog-corners/langroad/Python/Python%203%20Advanced%20Skill/",
      "id": "https://wafer.li/blog-corners/langroad/Python/Python%203%20Advanced%20Skill/",
      "summary": "<h2 id=\"_1-函数返回多个值\"> 1. 函数返回多个值</h2>\n<p>函数可以通过返回一个<strong>元组</strong>来达到返回多个值的目的。</p>\n<div><pre><code><span>def</span> <span>get_error_details</span><span>(</span><span>)</span><span>:</span>\n    <span>return</span> <span>(</span><span>2</span><span>,</span> <span>'second error details'</span><span>)</span>\n<p>errnum<span>,</span> errstr <span>=</span> get_error_details<span>(</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><blockquote>\n<p>上面运用到了<strong>元组解包</strong>技术，通过使用逗号分隔变量，就可以分别取出对应位置的元组元素。</p>\n</blockquote></p>\n",
      "content_html": "<h2 id=\"_1-函数返回多个值\"> 1. 函数返回多个值</h2>\n<p>函数可以通过返回一个<strong>元组</strong>来达到返回多个值的目的。</p>\n<div><pre><code><span>def</span> <span>get_error_details</span><span>(</span><span>)</span><span>:</span>\n    <span>return</span> <span>(</span><span>2</span><span>,</span> <span>'second error details'</span><span>)</span>\n\nerrnum<span>,</span> errstr <span>=</span> get_error_details<span>(</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><blockquote>\n<p>上面运用到了<strong>元组解包</strong>技术，通过使用逗号分隔变量，就可以分别取出对应位置的元组元素。</p>\n</blockquote>\n\n<h2 id=\"_2-特殊方法\"> 2. 特殊方法</h2>\n<p>Python 的类中有许多内置的特殊方法，例如 <code>__init__()</code> 和 <code>__del__()</code></p>\n<p>可以在 Python 的参考手册中找到它们以及对应的作用。</p>\n<h2 id=\"_3-单行语句块\"> 3. 单行语句块</h2>\n<p>如果一个语句块只有一个逻辑行，则可以把它置于条件语句或者循环语句的同一行</p>\n<div><pre><code><span>if</span> flag<span>:</span> <span>print</span> <span>'Yes'</span>\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"_4-lambda-表达式\"> 4. Lambda 表达式</h2>\n<p><code>lambda</code> 语句用来创建新的<strong>函数对象</strong>，并且在运行时返回它们。</p>\n<div><pre><code><span>def</span> <span>make_repeater</span><span>(</span>n<span>)</span><span>:</span>\n    <span>return</span> <span>lambda</span> s<span>:</span> s<span>*</span>n\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><blockquote>\n<p>本质上, <code>lambda</code> 需要一个参数,后面仅跟单个表达 式作为函数体,而表达式的值被这个新建的函数返回。注意,即便是 <code>print</code> 语句也不 能用在 <code>lambda</code> 形式中,只能使用表达式。</p>\n</blockquote>\n<h2 id=\"_5-列表综合\"> 5. 列表综合</h2>\n<p>通过列表综合，可以从一个已有的列表导出一个新的列表。</p>\n<div><pre><code><span>#!/usr/bin/python</span>\n<span># Filename: list_comprehension.py</span>\n\nlistone <span>=</span> <span>[</span><span>2</span><span>,</span><span>3</span><span>,</span><span>4</span><span>]</span>\nlisttwo <span>=</span> <span>[</span><span>2</span><span>*</span>i <span>for</span> i <span>in</span> listone <span>if</span> i <span>></span> <span>2</span><span>]</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><blockquote>\n<p>通过在列表中使用这样的语句就可以对符合条件的每个列表元素进行处理\n注意原有的列表并没有改变，这个操作实际上是<strong>生成了一个新列表</strong></p>\n</blockquote>\n<h2 id=\"_6-exec-和-eval\"> 6. <code>exec</code> 和 <code>eval</code></h2>\n<p><code>exec</code> 语句用来执行<strong>字符串形式</strong>的 Python 语句</p>\n<div><pre><code>&gt;&gt;&gt; exec(&#39;print(&quot;Hello, World&quot;)&#39;)\nHello, World\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p><code>eval</code> 语句用来执行<strong>字符串形式</strong>的 Python 表达式</p>\n<div><pre><code><span>>></span><span>></span> <span>eval</span><span>(</span><span>'2*3'</span><span>)</span>\n<span>6</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><blockquote>\n<p>两者看似相同，但是也有细微区别：</p>\n</blockquote>\n<blockquote>\n<ol>\n<li><code>eval</code> 只接受<strong>单行字符串表达式</strong>，<code>exec</code> 可以接受一个语句和语句块</li>\n</ol>\n<blockquote>\n<p>“表达式”所指的就是<strong>可以放在等号右边的东西</strong>，<code>break</code> <code>if</code> <code>pass</code> 等不是表达式</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li><code>eval</code> 会<strong>返回表达式的结果</strong>，<code>exec</code> 则会忽略该结果</li>\n</ol>\n</blockquote>\n<h2 id=\"_7-assert-语句\"> 7. <code>assert</code> 语句</h2>\n<p>同 Java 中的 <code>assert</code> 语句一样，以调试为目的。\n但是 Python 的 <code>assert</code> 语句功能是默认启动的\n当 <code>assert</code> 失败时，会引发一个 <code>AssertionError</code></p>\n<h2 id=\"_8-repr-函数\"> 8. repr 函数</h2>\n<p>该函数用来取得对象的规范字符串表示，实际上它的作用就是<strong>为对象包了一层<code>&quot;&quot;</code></strong></p>\n<div><pre><code><span>>></span><span>></span> i <span>=</span> <span>[</span><span>]</span>\n<span>>></span><span>></span> i<span>.</span>append<span>(</span><span>'item'</span><span>)</span>\n<span>>></span><span>></span> i\n<span>[</span><span>'item'</span><span>]</span>\n<span>>></span><span>></span> <span>repr</span><span>(</span>i<span>)</span>\n<span>\"['item']\"</span>\n<span>>></span><span>></span> <span>eval</span><span>(</span><span>repr</span><span>(</span>i<span>)</span><span>)</span>\n<span>[</span><span>'item'</span><span>]</span>\n<span>>></span><span>></span> <span>eval</span><span>(</span><span>repr</span><span>(</span>i<span>)</span><span>)</span> <span>==</span> i\n<span>True</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div>",
      "date_published": "2016-12-12T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Python"
      ]
    },
    {
      "title": "Python 3 Basic",
      "url": "https://wafer.li/blog-corners/langroad/Python/Python%203%20Basic/",
      "id": "https://wafer.li/blog-corners/langroad/Python/Python%203%20Basic/",
      "summary": "<h2 id=\"_1-注释\"> 1. 注释</h2>\n<ol>\n<li>注释以 <code>#</code> 开头</li>\n<li>以 <code>#!</code> 开头的称为<strong>组织行</strong>，表明了执行脚本的<strong>解释器</strong></li>\n</ol>\n<blockquote>\n<p>Linux/Unix 中，如果不清楚 Python 的位置，可以使用 <code>#!/usr/bin/env python</code>，<code>env</code> 会自动寻找 Python 的解释器路径进行执行。</p>\n</blockquote>\n",
      "content_html": "<h2 id=\"_1-注释\"> 1. 注释</h2>\n<ol>\n<li>注释以 <code>#</code> 开头</li>\n<li>以 <code>#!</code> 开头的称为<strong>组织行</strong>，表明了执行脚本的<strong>解释器</strong></li>\n</ol>\n<blockquote>\n<p>Linux/Unix 中，如果不清楚 Python 的位置，可以使用 <code>#!/usr/bin/env python</code>，<code>env</code> 会自动寻找 Python 的解释器路径进行执行。</p>\n</blockquote>\n\n<h2 id=\"_2-字面意义的常量\"> 2. 字面意义的常量</h2>\n<p>如同 5, 1.23, 9.25e-3 这样的<strong>数</strong>，以及 &quot;This is a string&quot; 等<strong>字符串</strong>被称作字面意义上的<strong>常量</strong></p>\n<h3 id=\"_2-1-数\"> 2.1 数</h3>\n<p>数的类型有三种——整数、浮点数和复数</p>\n<ol>\n<li><code>2</code> 是整数</li>\n<li><code>3.23</code> 和 <code>52.3E-4</code> 是浮点数</li>\n<li><code>(-5+4j)</code> 和 <code>(2.3-4.6j)</code> 是复数</li>\n</ol>\n<blockquote>\n<p>Python 3 只有一种整数类型，不区分 <code>long</code> 和 <code>int</code>\nPython 2 中区分 <code>long</code> 类型\n布尔型(<code>bool</code>) 属于整型(<code>integer</code>)的一种</p>\n</blockquote>\n<h3 id=\"_2-2-字符串\"> 2.2 字符串</h3>\n<ol>\n<li>\n<p>字符串是字符的<strong>序列</strong>，其编码默认为 <strong>Unicode</strong>。</p>\n<blockquote>\n<p>可以使用 <code>str.encode(&quot;ascii&quot;)</code> 将字符串编码转换为 ASCII</p>\n</blockquote>\n</li>\n<li>\n<p>可以用<strong>单引号</strong>和<strong>双引号</strong>来指定字符串，<strong>单引号和双引号的意义完全相同</strong></p>\n</li>\n<li>\n<p>利用<strong>三引号</strong> <code>&quot;&quot;&quot;</code> 或者 <code>'''</code> 可以指定一个<strong>多行字符串</strong></p>\n<div><pre><code><span>'''This is a multi-line-string. This is the first line.\nAnd this is the second line.\n\"What's your name?\" I asked.\nHe said \"Bond, James Bond.\"\n'''</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><blockquote>\n<p>在三引号中，可以自由使用单引号和双引号</p>\n</blockquote>\n</li>\n<li>\n<p>使用<strong>转义</strong>来表示原有字符</p>\n<blockquote>\n<p>例如 <code>'What's your name?'</code> 中，由于（<strong>使用单引号界定的</strong>）字符串中有单引号，会使 Python 解释出现错误，此时需要用转义来表示原有的单引号。\n正确的应该是 <code>'What\\'s your name?'</code>。\n但是，<strong>可以在用双引号界定的字符串中使用单引号。</strong>\n这个也是正确的 <code>&quot;What's your name?&quot;</code></p>\n</blockquote>\n<blockquote>\n<p>另外，在一行的末尾的反斜杠 <code>\\</code> 仅仅表示下一行的字符串是上一行的<strong>继续</strong>，<strong>并不增加新的行</strong></p>\n</blockquote>\n<div><pre><code><span># 以下字符串是等价的</span>\n\"This <span>is</span> the first line<span>.</span>\\\nThis <span>is</span> also the first line<span>.</span>\"\n\n<span>\"This is the firstline. This is also the first line.\"</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div></li>\n<li>\n<p>原始字符串</p>\n<blockquote>\n<p>当需要指定一些字符不被特殊处理时，可以使用 <code>r</code> 或者 <code>R</code> 附加在字符串前面指定<strong>原始字符串</strong>。\n例如： <code>r&quot;Newlines are indicated by \\n&quot;</code>\n此时，<strong>字符串中的所有字符都不会被转义</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>在正则表达式使用的时候，请尽量使用原始字符串</strong></p>\n</blockquote>\n</li>\n<li>\n<p>字符串是<strong>不可变</strong>的</p>\n</li>\n<li>\n<p>字符串按字面意义连接</p>\n<blockquote>\n<p>如果将两个字符串按字面意义相邻放着，会被自动转为一个字符串</p>\n</blockquote>\n</li>\n<li>\n<p><code>format()</code> 方法</p>\n<blockquote>\n<p>可以使用 <code>format()</code> 方法来通过使用其他信息构建字符串</p>\n</blockquote>\n<div><pre><code><span>#!/usr/bin/python</span>\nage <span>=</span> <span>25</span>\nname <span>=</span> <span>'Swaroop'</span>\n<span>print</span><span>(</span><span>'{0} is {1} years old'</span><span>.</span><span>format</span><span>(</span>name<span>,</span> age<span>)</span><span>)</span>\n\n<span># 输出为</span>\n<span># Swaroop is 25 years old.</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><blockquote>\n<p>也可以使用 <code>format()</code> 进行格式化输出</p>\n</blockquote>\n<div><pre><code><span>>></span><span>></span> <span>'{0:.3}'</span><span>.</span><span>format</span><span>(</span><span>1</span><span>/</span><span>3</span><span>)</span>\n<span>'0.333'</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div></li>\n</ol>\n<h2 id=\"_3-变量\"> 3. 变量</h2>\n<h3 id=\"_3-1-命名\"> 3.1 命名</h3>\n<p>同其他语言的变量命名无多大差别。</p>\n<ol>\n<li>不允许数字开头</li>\n<li>大小写敏感</li>\n</ol>\n<h3 id=\"_3-2-类型\"> 3.2 类型</h3>\n<p>Python 变量<strong>不需要声明类型</strong>，但仍然是<strong>强类型</strong>\n实际上，Python 的任何一切都称为<strong>对象</strong></p>\n<h2 id=\"_4-逻辑行和物理行\"> 4. 逻辑行和物理行</h2>\n<p>Python 中<strong>一个逻辑行对应一个物理行</strong>，虽然 Python 也可以使用分号，但是<strong>一般不使用分号</strong></p>\n<blockquote>\n<p>其他语言一般强制要求行尾分号，Python 不推荐分号的使用。</p>\n</blockquote>\n<h2 id=\"_5-缩进\"> 5. 缩进</h2>\n<p>Python 有着严格的缩进区分，不能随意缩进，<strong>缩进用来标明语句块</strong>\n<strong>同一个语句块具有相同的缩进层次</strong></p>\n<blockquote>\n<p>Python 使用缩进来表示代码块，<strong>不再使用花括号</strong></p>\n</blockquote>\n<h2 id=\"_6-操作符\"> 6. 操作符</h2>\n<ol>\n<li>\n<p>Python 中的 <code>//</code> 符号表示<strong>向下取整相除</strong>，而不是单行注释。注释使用 <code>#</code> 来开头。</p>\n<blockquote>\n<p>注意这里是<strong>向下取整</strong>，而不是<strong>趋零取整</strong></p>\n</blockquote>\n</li>\n<li>\n<p>布尔操作</p>\n<ul>\n<li><code>not</code> 表示布尔非（相当于 <code>!</code>）</li>\n<li><code>and</code> 表示布尔与（相当于 <code>&amp;&amp;</code>）</li>\n<li><code>or</code> 表示布尔或（相当于 <code>||</code>）</li>\n</ul>\n<blockquote>\n<p>有趣的是，不等于仍然使用 <code>!=</code> 来表示</p>\n</blockquote>\n</li>\n<li>\n<p>相等性判别</p>\n<blockquote>\n<p>Python 3 中有两种相等性判别，一种是变量相等性(equality)，另一种是实例相等性(identity)</p>\n</blockquote>\n<blockquote>\n<p><code>is</code> 用作判断实例相等性\n否定操作为 <code>is not</code></p>\n</blockquote>\n<blockquote>\n<p>而 <code>==</code> 用于判断变量相等性</p>\n</blockquote>\n<p>区别：</p>\n<div><pre><code>a <span>=</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span>\nb <span>=</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span>\na <span>==</span> b <span># True</span>\na <span>is</span> b <span># False</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div></li>\n<li>\n<p>优先级</p>\n<blockquote>\n<p>在 Python 中，<code>lambda</code> 表达式处在最高优先级，而并非布尔运算</p>\n</blockquote>\n</li>\n</ol>\n",
      "date_published": "2016-12-12T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Python"
      ]
    },
    {
      "title": "Python 3 Class",
      "url": "https://wafer.li/blog-corners/langroad/Python/Python%203%20Class/",
      "id": "https://wafer.li/blog-corners/langroad/Python/Python%203%20Class/",
      "summary": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>Python 是高度面向对象的语言，事实上，任何的变量类型都是<strong>类</strong></p>\n",
      "content_html": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>Python 是高度面向对象的语言，事实上，任何的变量类型都是<strong>类</strong></p>\n\n<h2 id=\"_2-创建类\"> 2. 创建类</h2>\n<p>类由 <code>class</code> 关键词定义，后面加冒号表示类的作用域</p>\n<div><pre><code><span>class</span> <span>Person</span><span>:</span>\n    <span>pass</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h2 id=\"_3-self-参数\"> 3. self 参数</h2>\n<p>Python 的 <code>self</code> 参数类似于 Java 的 <code>this</code>，但是这个参数在 Python 中的作用则更为重要，具体可以看下面的内容</p>\n<h2 id=\"_4-类域\"> 4. 类域</h2>\n<p>Python 类的域与 Java 不同</p>\n<ol>\n<li>\n<p>不带 <code>self</code> 参数修饰的普通变量为<strong>静态变量</strong></p>\n</li>\n<li>\n<p>只有带 <code>self</code> 修饰的才是对象变量</p>\n<blockquote>\n<p>例如 <code>self.name</code> 是对象变量，<code>name</code> 是静态变量</p>\n</blockquote>\n</li>\n<li>\n<p><strong>成员都是公有的，包括数据成员</strong></p>\n<blockquote>\n<p>但是以双下划线 <code>__</code> 开头的成员会被 Python 的名称管理体系作为<strong>私有变量</strong>，这是 Python 的名称管理体系做出的，而不是类的特性</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"_5-类方法\"> 5. 类方法</h2>\n<p>Python 的类方法和 Java 稍有不同</p>\n<ol>\n<li>\n<p>类的普通方法必须定义 <code>self</code> 参数</p>\n</li>\n<li>\n<p>类块中不带 <code>self</code> 参数的方法一般为<strong>静态方法</strong>，需要用 <code>staticmethod()</code> 修饰</p>\n<div><pre><code><span>class</span> <span>Robot</span><span>:</span>\n    <span>'''Represent a robot, with a name'''</span>\n\n    <span>def</span> <span>sayHi</span><span>(</span>self<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>\"hehe\"</span><span>)</span>\n\n    <span>def</span> <span>howMany</span><span>(</span><span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'We have {0:d} robot'</span><span>.</span><span>format</span><span>(</span>Robot<span>.</span>population<span>)</span> <span>)</span>\n    howMany <span>=</span> <span>staticmethod</span><span>(</span>howMany<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><blockquote>\n<p>静态方法也可以用以下语句修饰</p>\n</blockquote>\n<div><pre><code><span>@staticmethod</span>\n<span>def</span> <span>howMany</span><span>(</span><span>)</span><span>:</span>\n    <span>print</span><span>(</span><span>'We have {0:d} robot'</span><span>.</span><span>format</span><span>(</span>Robot<span>.</span>population<span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>\n</ol>\n<h2 id=\"_6-构造函数和析构函数\"> 6. 构造函数和析构函数</h2>\n<p>Python 拥有构造函数和析构函数。工作原理和 C++ 的构造函数和析构函数相同。</p>\n<div><pre><code><span>class</span> <span>Person</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> name<span>)</span><span>:</span>\n        self<span>.</span>name <span>=</span> name\n\n    <span>def</span> <span>sayHi</span><span>(</span>self<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'Hello, my name is'</span><span>,</span> self<span>.</span>name<span>)</span>\n\n    <span>def</span> <span>__del__</span><span>(</span>self<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>\"I am dying.\"</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h2 id=\"_7-继承\"> 7. 继承</h2>\n<p>Python 的继承通过在类名称后面添加括号实现。\n括号中为父类的名字</p>\n<div><pre><code><span>class</span> <span>SchoolMember</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span>name<span>,</span>age<span>)</span><span>:</span>\n        self<span>.</span>name <span>=</span> name\n        self<span>.</span>age <span>=</span> age\n        <span>print</span><span>(</span><span>'(Initialize SchoolMember:{0})'</span><span>.</span><span>format</span><span>(</span>self<span>.</span>name<span>)</span><span>)</span>\n    <span>def</span> <span>tell</span><span>(</span>self<span>)</span><span>:</span>\n        <span>'''Tell my details.'''</span>\n        <span>print</span><span>(</span><span>'Name:\"{0}\" Age:\"{1}\"'</span><span>.</span><span>format</span><span>(</span>self<span>.</span>name<span>,</span>self<span>.</span>age<span>)</span><span>,</span>end <span>=</span><span>''</span><span>)</span>\n\n<span>class</span> <span>Teacher</span><span>(</span>SchoolMember<span>)</span><span>:</span>\n    <span>'''Repressent a teacher.'''</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span>name<span>,</span>age<span>,</span>salary<span>)</span><span>:</span>\n        SchoolMember<span>.</span>__init__<span>(</span>self<span>,</span>name<span>,</span>age<span>)</span>\n        self<span>.</span>salary <span>=</span> salary\n        <span>print</span><span>(</span><span>'(Initialized Teacher:{0})'</span><span>.</span><span>format</span><span>(</span>self<span>.</span>name<span>)</span><span>)</span>\n\n    <span>def</span> <span>tell</span><span>(</span>self<span>)</span><span>:</span>\n        SchoolMember<span>.</span>tell<span>(</span>self<span>)</span>\n        <span>print</span><span>(</span><span>'Salary:\"{0:d}\"'</span><span>.</span><span>format</span><span>(</span>self<span>.</span>salary<span>)</span><span>)</span>\n\n<span>class</span> <span>Student</span><span>(</span>SchoolMember<span>)</span><span>:</span>\n    <span>'''Represents a student'''</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span>name<span>,</span>age<span>,</span>marks<span>)</span><span>:</span>\n        SchoolMember<span>.</span>__init__<span>(</span>self<span>,</span>name<span>,</span>age<span>)</span>\n        self<span>.</span>marks <span>=</span> marks\n        <span>print</span><span>(</span><span>'(Initialized Student:{0})'</span><span>.</span><span>format</span><span>(</span>self<span>.</span>name<span>)</span><span>)</span>\n\n    <span>def</span> <span>tell</span><span>(</span>self<span>)</span><span>:</span>\n        SchoolMember<span>.</span>tell<span>(</span>self<span>)</span>\n        <span>print</span><span>(</span><span>'Marks:\"{0:d}\"'</span><span>.</span><span>format</span><span>(</span>self<span>.</span>marks<span>)</span><span>)</span>\n\nt <span>=</span> Teacher<span>(</span><span>'Mrs.Shrividya'</span><span>,</span><span>30</span><span>,</span><span>30000</span><span>)</span>\ns <span>=</span> Student<span>(</span><span>'Swaroop'</span><span>,</span><span>25</span><span>,</span><span>75</span><span>)</span>\n<span>print</span><span>(</span><span>)</span> <span># print a blank line</span>\n\nmembers <span>=</span> <span>[</span>t<span>,</span>s<span>]</span>\n<span>for</span> member <span>in</span> members<span>:</span>\n    member<span>.</span>tell<span>(</span><span>)</span> <span># work for both Teacher and Students</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br></div></div><blockquote>\n<p>上面的例子中，<code>Student</code> 和 <code>Teacher</code> 都继承自 <code>SchoolMenber</code>\n通过 <code>SchoolMenber</code> 调用父类方法</p>\n</blockquote>\n",
      "date_published": "2016-12-12T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Python"
      ]
    },
    {
      "title": "Python 3 Collection",
      "url": "https://wafer.li/blog-corners/langroad/Python/Python%203%20Collection/",
      "id": "https://wafer.li/blog-corners/langroad/Python/Python%203%20Collection/",
      "summary": "<h2 id=\"_1-列表-list\"> 1. 列表(list)</h2>\n<p>列表是用于处理<strong>有序项目</strong>的数据结构，与 Java 的<strong>数组</strong>类似，自带排序方法，可以使用 <code>[]</code> 进行<strong>随机访问</strong></p>\n<p>列表使用方括号定义，使用 <code>len()</code> 函数来获取列表长度</p>\n<div><pre><code><span>#!/usr/bin/python</span>\n<p><span># This is my shopping list</span>\nshoplist <span>=</span> <span>[</span><span>'apple'</span><span>,</span> <span>'mango'</span><span>,</span> <span>'carrot'</span><span>,</span> <span>'banana'</span><span>]</span></p>\n<p><span>print</span><span>(</span><span>len</span><span>(</span>shoplist<span>)</span><span>)</span></p>\n<p>olditem <span>=</span> shoplist<span>[</span><span>0</span><span>]</span>\n<span>del</span> shoplist<span>[</span><span>0</span><span>]</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><blockquote>\n<p><code>del</code> 类似 C++ 中的 <code>delete</code>，用于释放一个对象。\n这里使用 <code>del</code> 来将列表元素移除</p>\n</blockquote></p>\n",
      "content_html": "<h2 id=\"_1-列表-list\"> 1. 列表(list)</h2>\n<p>列表是用于处理<strong>有序项目</strong>的数据结构，与 Java 的<strong>数组</strong>类似，自带排序方法，可以使用 <code>[]</code> 进行<strong>随机访问</strong></p>\n<p>列表使用方括号定义，使用 <code>len()</code> 函数来获取列表长度</p>\n<div><pre><code><span>#!/usr/bin/python</span>\n\n<span># This is my shopping list</span>\nshoplist <span>=</span> <span>[</span><span>'apple'</span><span>,</span> <span>'mango'</span><span>,</span> <span>'carrot'</span><span>,</span> <span>'banana'</span><span>]</span>\n\n<span>print</span><span>(</span><span>len</span><span>(</span>shoplist<span>)</span><span>)</span>\n\nolditem <span>=</span> shoplist<span>[</span><span>0</span><span>]</span>\n<span>del</span> shoplist<span>[</span><span>0</span><span>]</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><blockquote>\n<p><code>del</code> 类似 C++ 中的 <code>delete</code>，用于释放一个对象。\n这里使用 <code>del</code> 来将列表元素移除</p>\n</blockquote>\n\n<h2 id=\"_2-元组-tupple\"> 2. 元组(tupple)</h2>\n<p>元组和列表相似，唯一的区别是<strong>元组不可改变</strong></p>\n<p>元组使用<strong>圆括号来定义</strong></p>\n<div><pre><code><span>#!/usr/bin/python</span>\n\n<span># 圆括号是可选的，但是还是加上圆括号为好</span>\nzoo <span>=</span> <span>(</span><span>'python'</span><span>,</span> <span>'elephant'</span><span>,</span> <span>'penguin'</span><span>)</span>\n<span>print</span><span>(</span><span>'Number of annimal in the zoo is'</span><span>,</span> <span>len</span><span>(</span>zoo<span>)</span><span>)</span>\n\nnew_zoo <span>=</span> <span>(</span><span>'monkey'</span><span>,</span> <span>'camel'</span><span>,</span> zoo<span>)</span>\n<span>print</span><span>(</span><span>'Last annimal in the zoo is'</span><span>,</span> new_zoo<span>[</span><span>2</span><span>]</span><span>[</span><span>2</span><span>]</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><blockquote>\n<p>注意到，元组是<strong>可以嵌套的</strong>，有点类似于 Java 中的<strong>二维数组</strong>，但<strong>并不完全相同</strong>。</p>\n</blockquote>\n<blockquote>\n<p><code>new_zoo[0]</code> ==&gt; <code>'monkey'</code>\n<code>new_zoo[2]</code> ==&gt; <code>zoo</code> ==&gt; <code>('python', 'elephant', 'penguin')</code>\n<code>new_zoo[2][2]</code> ==&gt; <code>zoo[2]</code> ==&gt; <code>'penguin'</code></p>\n</blockquote>\n<blockquote>\n<p>含有 0 个或者 1 个元素的元组\n含有 0 个元素的元组用<strong>空圆括号</strong>表示，<code>empty = ()</code>\n含有 1 个元素的元组<strong>要在元素后面接一个逗号</strong> <code>singleton = (2, )</code></p>\n</blockquote>\n<h2 id=\"_3-字典-dict\"> 3. 字典(dict)</h2>\n<p>字典是一个<strong>键值对</strong>的表，类似于 Java 中的哈希表，一个项目具有 <code>Key</code> 和 <code>Value</code></p>\n<p>只能用<strong>不可变</strong>对象作为项目的<strong>键</strong>，值则可以是可变的也可以是不可变的。</p>\n<p>字典使用<strong>花括号</strong>定义，用<strong>冒号</strong>分隔键和值，用<strong>逗号</strong>分隔项目，使用 <code>[]</code> 来取值。</p>\n<div><pre><code>ab <span>=</span> <span>{</span>\n        <span>'Swaroop'</span>   <span>:</span>   <span>'swaroop@swaroopch.com'</span>\n        <span>'Larry'</span>     <span>:</span>   <span>'larry@wall.org'</span>\n     <span>}</span>\n\n\n<span>print</span><span>(</span><span>\"Swaroop's address is\"</span><span>,</span> ab<span>[</span><span>'Swaroop'</span><span>]</span><span>)</span>\n\n<span>for</span> name<span>,</span> adderss <span>in</span> ab<span>:</span>\n    <span># iterate the dict</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><blockquote>\n<p>在字典中，使用<strong>键</strong>来充当索引成分。\n字典可以通过 <code>items()</code> 方法来返回键值对的列表，但是是无序的。\n注意字典是没有顺序的（不能维持插入时的顺序），要使用时最好先排序。</p>\n</blockquote>\n<h2 id=\"_4-序列\"> 4. 序列</h2>\n<p>列表，元组和字符串都是序列，序列具有以下特点：</p>\n<ol>\n<li>\n<p>支持索引操作符 <code>[]</code> 随机访问</p>\n<blockquote>\n<p>索引从 0 开始，可以<strong>支持负数</strong>\n当索引是负数时，它会抓取倒数的项目</p>\n</blockquote>\n</li>\n<li>\n<p>可以采取<strong>切片操作</strong></p>\n<blockquote>\n<p>即返回一个序列的子集，例如子数组等\n切片操作通过冒号完成，例如下面的 <code>shoplist[1:3]</code>。\n切片操作的区间是<strong>左闭右开</strong>，上面返回的是 <code>shoplist[1]</code> 和 <code>shoplist[2]</code> 组成的子列表\n假如前一个为空，切片从<strong>序列头</strong>开始，后一个为空，切片在<strong>序列尾</strong>停止。（后一个为空，最后结果<strong>包括最后一个元素</strong>，<code>shoplist[:]</code> 返回整个列表）</p>\n</blockquote>\n<blockquote>\n<p>也可以使用<strong>负数</strong>作切片，此时的负数只作为一个定位元素的<strong>索引</strong>，例如 <code>shoplist[:-1]</code> 会在<strong>倒数第一个停止</strong>，也就是<strong>不包括最后一个元素的子列表</strong></p>\n</blockquote>\n<blockquote>\n<p>也可以给切片定义第三个参数——切片的<strong>步长</strong>。其实就是切片操作在遍历数组时的步长。\n步长通过两个冒号的最后一个参数定义\n<code>shoplist[::3]</code> ==&gt; <code>shoplist[0], shoplist[3], shoplist[6]...</code></p>\n</blockquote>\n</li>\n</ol>\n<div><pre><code><span># Indexing or 'Subscription' operation</span>\n<span>print</span><span>(</span><span>'Item 0 is'</span><span>,</span> shoplist<span>[</span><span>0</span><span>]</span><span>)</span>\n<span>print</span><span>(</span><span>'Item 1 is'</span><span>,</span> shoplist<span>[</span><span>1</span><span>]</span><span>)</span>\n<span>print</span><span>(</span><span>'Item 2 is'</span><span>,</span> shoplist<span>[</span><span>2</span><span>]</span><span>)</span>\n<span>print</span><span>(</span><span>'Item 3 is'</span><span>,</span> shoplist<span>[</span><span>3</span><span>]</span><span>)</span>\n<span>print</span><span>(</span><span>'Item -1 is'</span><span>,</span> shoplist<span>[</span><span>-</span><span>1</span><span>]</span><span>)</span>\n<span>print</span><span>(</span><span>'Item -2 is'</span><span>,</span> shoplist<span>[</span><span>-</span><span>2</span><span>]</span><span>)</span>\n<span>print</span><span>(</span><span>'Character 0 is'</span><span>,</span> name<span>[</span><span>0</span><span>]</span><span>)</span>\n\n<span># Slicing on a list</span>\n<span>print</span><span>(</span><span>'Item 1 to 3 is'</span><span>,</span> shoplist<span>[</span><span>1</span><span>:</span><span>3</span><span>]</span><span>)</span>\n<span>print</span><span>(</span><span>'Item 2 to end is'</span><span>,</span> shoplist<span>[</span><span>2</span><span>:</span><span>]</span><span>)</span>\n<span>print</span><span>(</span><span>'Item 1 to -1 is'</span><span>,</span> shoplist<span>[</span><span>1</span><span>:</span><span>-</span><span>1</span><span>]</span><span>)</span>\n<span>print</span><span>(</span><span>'Item start to end is'</span><span>,</span> shoplist<span>[</span><span>:</span><span>]</span><span>)</span>\n\n<span># Slicing on a string</span>\n<span>print</span><span>(</span><span>'characters 1 to 3 is'</span><span>,</span> name<span>[</span><span>1</span><span>:</span><span>3</span><span>]</span><span>)</span>\n<span>print</span><span>(</span><span>'characters 2 to end is'</span><span>,</span> name<span>[</span><span>2</span><span>:</span><span>]</span><span>)</span>\n<span>print</span><span>(</span><span>'characters 1 to -1 is'</span><span>,</span> name<span>[</span><span>1</span><span>:</span><span>-</span><span>1</span><span>]</span><span>)</span>\n<span>print</span><span>(</span><span>'characters start to end is'</span><span>,</span> name<span>[</span><span>:</span><span>]</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><h2 id=\"_5-集合\"> 5. 集合</h2>\n<p>集合是无顺序的简单对象的聚集。</p>\n<p>使用集合，可以<strong>检查是否是成员</strong>，<strong>是否是另一个集合的子集</strong>，<strong>得到两个集合的交集</strong></p>\n<div><pre><code><span>>></span><span>></span> bri <span>=</span> <span>set</span><span>(</span><span>[</span><span>'brazil'</span><span>,</span> <span>'russia'</span><span>,</span> <span>'india'</span><span>]</span><span>)</span>\n<span>>></span><span>></span> <span>'india'</span> <span>in</span> bri\n<span>True</span>\n<span>>></span><span>></span> <span>'usa'</span> <span>in</span> bri\n<span>False</span>\n<span>>></span><span>></span> bric <span>=</span> bri<span>.</span>copy<span>(</span><span>)</span> <span>>></span><span>></span> bric<span>.</span>add<span>(</span><span>'china'</span><span>)</span>\n<span>>></span><span>></span> bric<span>.</span>issuperset<span>(</span>bri<span>)</span>\n<span>True</span>\n<span>>></span><span>></span> bri<span>.</span>remove<span>(</span><span>'russia'</span><span>)</span>\n<span>>></span><span>></span> bri <span>&amp;</span> bric <span># OR bri.intersection(bric)</span>\n<span>{</span><span>'brazil'</span><span>,</span> <span>'india'</span><span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h2 id=\"_6-引用\"> 6. 引用</h2>\n<p>这个概念和 Java 中的引用相同。</p>\n<p>注意切片操作可以对一个序列进行<strong>深拷贝(deep copy)</strong></p>\n",
      "date_published": "2016-12-12T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Python"
      ]
    },
    {
      "title": "Python 3 Control Flow",
      "url": "https://wafer.li/blog-corners/langroad/Python/Python%203%20Control%20Flow/",
      "id": "https://wafer.li/blog-corners/langroad/Python/Python%203%20Control%20Flow/",
      "summary": "\n<p> <br>\n <br>\n <br>\n <br>\n </p>\n\n<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>控制流程包括 <code>if</code> <code>for</code> 和 <code>while</code></p>\n<p>Python 的流程控制语句有些特殊</p>\n<ol>\n<li>首先，关于流程控制<strong>不使用括号</strong>，只有函数和表达式才使用小括号</li>\n<li>使用冒号指示语句块的开头</li>\n</ol>\n",
      "content_html": "\n<p> <br>\n <br>\n <br>\n <br>\n </p>\n\n<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>控制流程包括 <code>if</code> <code>for</code> 和 <code>while</code></p>\n<p>Python 的流程控制语句有些特殊</p>\n<ol>\n<li>首先，关于流程控制<strong>不使用括号</strong>，只有函数和表达式才使用小括号</li>\n<li>使用冒号指示语句块的开头</li>\n</ol>\n\n<h2 id=\"_2-if-语句\"> 2. if 语句</h2>\n<p>下面是一个 <code>if</code> 语句的例子</p>\n<div><pre><code><span>#!/usr/bin/python</span>\n<span># Filename: if.py</span>\n\nnumber <span>=</span> <span>23</span>\nguess <span>=</span> <span>int</span><span>(</span><span>input</span><span>(</span><span>'Enter an integer : '</span><span>)</span><span>)</span>\n\n<span>if</span> guess <span>==</span> number<span>:</span>\n    <span>print</span><span>(</span><span>'Congratualtions, you guessed it!'</span><span>)</span>\n    <span>print</span><span>(</span><span>'But you do not win any prizes!'</span><span>)</span>\n<span>elif</span> guess <span>&lt;</span> number<span>:</span>\n    <span>print</span><span>(</span><span>'No, it is a little higher than that'</span><span>)</span>\n<span>else</span><span>:</span>\n    <span>print</span><span>(</span><span>'No, it is a little lower than that'</span><span>)</span>\n<span>print</span><span>(</span><span>'Done'</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><blockquote>\n<p>几个注意要点：</p>\n</blockquote>\n<ol>\n<li>Python 中为了减少缩进，使用 <code>elif</code> 来代替 <code>if...else if...else</code></li>\n<li>注意缩进，同样的缩进等级表示了同一个代码块</li>\n<li><strong>Python 中没有 <code>switch</code> 语句，使用相应的 <code>if..eles</code> 结构来替代</strong></li>\n<li><strong>注意不要漏掉冒号</strong></li>\n</ol>\n<h2 id=\"_3-while-语句\"> 3. while 语句</h2>\n<p>while 语句与其他语言无太大差别，讲几个注意事项</p>\n<ol>\n<li><strong>注意不要漏掉 <code>while</code> 语句末尾的冒号</strong></li>\n<li><code>Ture</code> 和 <code>False</code> 代表布尔类型</li>\n<li><code>while</code> 可以有 <code>else</code> 语句，但一般不使用</li>\n</ol>\n<h2 id=\"_4-for-语句\"> 4. for 语句</h2>\n<p><code>for</code> 语句和其他语言有较大区别，以下是 Python 和 Java 语言的对比</p>\n<div><pre><code><span># Python</span>\n<span>for</span> i <span>in</span> <span>range</span><span>(</span><span>0</span><span>,</span> <span>4</span><span>)</span><span>:</span>\n    <span>print</span><span>(</span>i<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>下面是等价的 Java</p>\n<div><pre><code><span>// Java</span>\n<span>for</span><span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>4</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>\n    <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>i<span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>实际上 Python 的 <code>for</code> 语句更像 Java 中的 <code>foreach</code> 语句，下面是两种等价的语法形式</p>\n<div><pre><code><span># Python</span>\n<span>for</span> word <span>in</span> wordList<span>:</span>\n    <span>print</span><span>(</span>word<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>下面是 Java 语法表述</p>\n<div><pre><code><span>// Java</span>\n<span>for</span><span>(</span>word <span>:</span> wordList<span>)</span> <span>{</span>\n    <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>word<span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>需要注意的几个要点：</p>\n<ol>\n<li>\n<p><code>range()</code> 函数的指示区间为<strong>左闭右开</strong></p>\n</li>\n<li>\n<p><code>print()</code> 函数会<strong>默认打印换行符</strong></p>\n<blockquote>\n<p>通过指示 <code>end</code> 来进行单行打印\n<code>print(word, end='')</code>\n如果缓冲区中有字符，那么指定 <code>flush</code> 为 <code>True</code> 来清除缓冲区\n<code>print(word, end='', flush=True)</code></p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"_5-其他流程控制\"> 5. 其他流程控制</h2>\n<p><code>break</code> 和 <code>continue</code> 都和其他语言无异</p>\n",
      "date_published": "2016-12-12T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Python"
      ]
    },
    {
      "title": "Python 3 Exception",
      "url": "https://wafer.li/blog-corners/langroad/Python/Python%203%20Exception/",
      "id": "https://wafer.li/blog-corners/langroad/Python/Python%203%20Exception/",
      "summary": "\n<p> <br>\n <br>\n <br>\n <br>\n </p>\n\n<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>Python 的异常处理和 Java 相似，函数拼写错误等也会触发异常。</p>\n",
      "content_html": "\n<p> <br>\n <br>\n <br>\n <br>\n </p>\n\n<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>Python 的异常处理和 Java 相似，函数拼写错误等也会触发异常。</p>\n\n<h2 id=\"_2-处理异常\"> 2. 处理异常</h2>\n<p>通过 <code>try...except</code> 语句来处理异常</p>\n<div><pre><code><span>try</span><span>:</span>\n    text <span>=</span> <span>input</span><span>(</span><span>'Enter something --> '</span><span>)</span>\n\n<span>except</span> EOFError<span>:</span>\n    <span>print</span><span>(</span><span>'Why did you do an EOF on me?'</span><span>)</span>\n<span>except</span> KeyboardInterrupt<span>:</span>\n    <span>print</span><span>(</span><span>'You cancelled the operation.'</span><span>)</span>\n<span>else</span><span>:</span>\n    <span>print</span><span>(</span><span>'You entered {0}'</span><span>.</span><span>format</span><span>(</span>text<span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><blockquote>\n<p><code>try</code> 还可以带一个 <code>else</code> 语句，作用与 <code>while</code> 的语句类似</p>\n</blockquote>\n<h2 id=\"_3-引发异常\"> 3. 引发异常</h2>\n<p>通过 <code>raise</code> 语句来引发异常</p>\n<div><pre><code><span>class</span> <span>ShortInputException</span><span>(</span>Exception<span>)</span><span>:</span>\n<span>'''A user-defined exception class'''</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> length<span>,</span>atleast<span>)</span><span>:</span>\n        Exception<span>.</span>__init__<span>(</span>self<span>)</span>\n        self<span>.</span>length <span>=</span> length\n        self<span>.</span>atleast <span>=</span> atleast\n<span>try</span><span>:</span>\n    text <span>=</span> <span>input</span><span>(</span><span>'Enter something-->'</span><span>)</span>\n    <span>if</span> <span>len</span><span>(</span>text<span>)</span> <span>&lt;</span> <span>3</span><span>:</span>\n        <span>raise</span> ShortInputException<span>(</span><span>len</span><span>(</span>text<span>)</span><span>,</span><span>3</span><span>)</span>\n    <span>#other work can continue as usual here</span>\n\n<span>except</span> EOFError<span>:</span>\n    <span>print</span><span>(</span><span>'Why did you do an EOF on me'</span><span>)</span>\n\n<span>except</span> ShortInputException <span>as</span> ex<span>:</span>\n    <span>print</span><span>(</span>'ShortInputException The <span>input</span> was <span>{</span><span>0</span><span>}</span> <span>long</span><span>,</span> excepted \\\natleast <span>{</span><span>1</span><span>}</span>'<span>.</span><span>format</span><span>(</span>ex<span>.</span>length<span>,</span> ex<span>.</span>atleast<span>)</span><span>)</span>\n\n<span>else</span><span>:</span>\n    <span>print</span><span>(</span><span>'No exception was raised.'</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><h2 id=\"_4-try-finally-语句\"> 4. Try...Finally 语句</h2>\n<p>这点与 Java 相似，Python 使用 <code>finally</code> 语句来对流进行一些收尾操作</p>\n<div><pre><code><span>#!/usr/bin/python</span>\n<span># Filename: finally.py</span>\n\n<span>import</span> time\n\n<span>try</span><span>:</span>\n    f <span>=</span> <span>open</span><span>(</span><span>'poem.txt'</span><span>)</span>\n    <span>while</span> <span>True</span><span>:</span> <span># our usual file-reading idiom</span>\n        line <span>=</span> f<span>.</span>readline<span>(</span><span>)</span>\n        <span>if</span> <span>len</span><span>(</span>line<span>)</span> <span>==</span> <span>0</span><span>:</span>\n            <span>break</span>\n        <span>print</span><span>(</span>line<span>,</span> end <span>=</span> <span>''</span><span>)</span>\n        time<span>.</span>sleep<span>(</span><span>2</span><span>)</span> <span># To make sure it runs for a while</span>\n\n<span>except</span> KeyboardInterrupt<span>:</span>\n    <span>print</span><span>(</span><span>'!! You cancelled the reading from the file.'</span><span>)</span>\n\n<span>finally</span><span>:</span>\n    f<span>.</span>close<span>(</span><span>)</span>\n    <span>print</span><span>(</span><span>'(Cleanig up: closed the file)'</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><h2 id=\"_5-with-语句\"> 5. with 语句</h2>\n<p>这个语句类似 Java 中的<strong>带资源的 <code>try</code> 块</strong>\n通过使用 <code>with</code> 来打开一个带资源的操作，则其会自动在最后将资源关闭</p>\n<div><pre><code><span>#!/usr/bin/python</span>\n<span># Filename: using_with.py</span>\n<span>with</span> <span>open</span><span>(</span><span>\"poem.txt\"</span><span>)</span> <span>as</span> f<span>:</span>\n    <span>for</span> line <span>in</span> f<span>:</span>\n        <span>print</span><span>(</span>line<span>,</span>end<span>=</span><span>''</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div>",
      "date_published": "2016-12-12T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Python"
      ]
    },
    {
      "title": "Python 3 Function",
      "url": "https://wafer.li/blog-corners/langroad/Python/Python%203%20Function/",
      "id": "https://wafer.li/blog-corners/langroad/Python/Python%203%20Function/",
      "summary": "<h2 id=\"_1-函数的定义\"> 1. 函数的定义</h2>\n<p>函数通过 <code>def</code> 关键字来定义。\n<code>def</code> 后跟一个函数名称，<strong>然后跟一对圆括号</strong>，表示函数。\n<strong>注意不要漏掉括号</strong></p>\n<div><pre><code><span>#!/usr/bin/python</span>\n<span># Filename: function1.py</span>\n<p><span>def</span> <span>sayHello</span><span>(</span><span>)</span><span>:</span>\n<span>print</span><span>(</span><span>'Hello, World!'</span><span>)</span></p>\n<p>sayHello<span>(</span><span>)</span> <span># 调用函数</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div></p>\n",
      "content_html": "<h2 id=\"_1-函数的定义\"> 1. 函数的定义</h2>\n<p>函数通过 <code>def</code> 关键字来定义。\n<code>def</code> 后跟一个函数名称，<strong>然后跟一对圆括号</strong>，表示函数。\n<strong>注意不要漏掉括号</strong></p>\n<div><pre><code><span>#!/usr/bin/python</span>\n<span># Filename: function1.py</span>\n\n<span>def</span> <span>sayHello</span><span>(</span><span>)</span><span>:</span>\n    <span>print</span><span>(</span><span>'Hello, World!'</span><span>)</span>\n\nsayHello<span>(</span><span>)</span> <span># 调用函数</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div>\n<h2 id=\"_2-函数参数\"> 2. 函数参数</h2>\n<p>在函数定义的圆括号中可以指定形参。\n<strong>注意，不需要声明形参类型</strong></p>\n<div><pre><code><span>def</span> <span>printMax</span><span>(</span>a<span>,</span> b<span>)</span><span>:</span>\n    <span>if</span> a <span>></span> b<span>:</span>\n        <span>print</span><span>(</span>a<span>,</span> <span>'is maximum'</span><span>)</span>\n    <span>elif</span> a <span>==</span> b<span>:</span>\n        <span>print</span><span>(</span>a<span>,</span> <span>'is equal to'</span><span>,</span> b<span>)</span>\n    <span>else</span><span>:</span>\n        <span>print</span><span>(</span>b<span>,</span> <span>'is maximum'</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><blockquote>\n<p>注意，Python 的方法是 <strong>Pass by reference</strong></p>\n</blockquote>\n<p>其中 a, b 是形参</p>\n<blockquote>\n<p>这里由于形参类型不确定，一般的 IDE 无法进行提示。所以可以使用冒号指明其类型</p>\n</blockquote>\n<div><pre><code><span>def</span> <span>printMax</span><span>(</span>a<span>:</span><span>int</span><span>,</span> b<span>:</span><span>int</span><span>)</span><span>:</span>\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"_3-变量作用域\"> 3. 变量作用域</h2>\n<ol>\n<li>\n<p>函数内声明的变量称作<strong>局部变量</strong></p>\n</li>\n<li>\n<p>可以使用 <code>global</code> 语句来调用和<strong>修改函数外部声明的变量</strong></p>\n<blockquote>\n<p>但是，<strong>不建议使用</strong> <code>global</code> 语句。\n应通过其他方式实现。</p>\n</blockquote>\n</li>\n<li>\n<p>非局部变量</p>\n<blockquote>\n<p>在嵌套定义函数的情况下会遇到。\n通过 <code>nonlocal</code> 来调用外部函数定义的变量</p>\n</blockquote>\n<div><pre><code><span>def</span> <span>funcOuter</span><span>(</span><span>)</span><span>:</span>\n    x <span>=</span> <span>2</span>\n    <span>print</span><span>(</span><span>'x is '</span><span>,</span> x<span>)</span>\n\n    <span>def</span> <span>funcInner</span><span>(</span><span>)</span><span>:</span>\n        <span>nonlocal</span> x\n        x <span>=</span> <span>5</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><blockquote>\n<p>有毒性，最好不要这么搞</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"_4-默认参数\"> 4. 默认参数</h2>\n<p>通过在<strong>函数定义</strong>的时候对<strong>形参进行指定</strong>，可以指定默认参数</p>\n<div><pre><code><span>def</span> <span>say</span><span>(</span>message<span>,</span> times <span>=</span> <span>1</span><span>)</span><span>:</span>\n    <span>print</span><span>(</span>message <span>*</span> times<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p><strong>只有形参表末尾的形参才能有默认参数</strong></p>\n<div><pre><code><span>def</span> <span>func</span><span>(</span>a<span>,</span> b <span>=</span> <span>5</span><span>)</span> <span># Correct</span>\n<span>def</span> <span>func</span><span>(</span>a <span>=</span> <span>5</span><span>,</span> b<span>)</span> <span># Wrong</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h2 id=\"_5-关键参数\"> 5. 关键参数</h2>\n<p>在<strong>函数调用</strong>的时候对<strong>形参进行指定</strong>，可以<strong>忽略形参顺序</strong>指定实参</p>\n<div><pre><code><span>def</span> <span>func</span><span>(</span>a<span>,</span> b <span>=</span> <span>5</span><span>,</span> c <span>=</span> <span>10</span><span>)</span><span>:</span>\n    <span>print</span><span>(</span><span>'a is '</span><span>,</span> a<span>,</span> <span>'and b is '</span><span>,</span> b<span>,</span> <span>'and c is '</span><span>,</span> c<span>)</span>\n\nfunc<span>(</span><span>3</span><span>,</span> <span>7</span><span>)</span>\nfunc<span>(</span><span>25</span><span>,</span> c <span>=</span> <span>24</span><span>)</span>\nfunc<span>(</span>c <span>=</span> <span>50</span><span>,</span> a <span>=</span> <span>100</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id=\"_6-不定参数\"> 6. 不定参数</h2>\n<p>通过在<strong>函数定义</strong>的时候使用<strong>星号</strong>标识形参</p>\n<div><pre><code><span>#!/usr/bin/python</span>\n<span># Filename: total.py</span>\n\n<span>def</span> <span>total</span><span>(</span>initial <span>=</span> <span>5</span><span>,</span> <span>*</span>numbers<span>,</span> <span>**</span>keywords<span>)</span><span>:</span>\n    count <span>=</span> initial\n    <span>for</span> number <span>in</span> numbers<span>:</span>\n        count <span>+=</span> number\n    <span>for</span> key <span>in</span> keywords<span>:</span>\n        count <span>+=</span> keywords<span>[</span>key<span>]</span>\n    <span>return</span> count\n\n<span>print</span><span>(</span>total<span>(</span><span>10</span><span>,</span> <span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> vegetables <span>=</span> <span>50</span><span>,</span> fruits <span>=</span> <span>100</span><span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><blockquote>\n<p>带一个星号的参数范围内的参数会被收集为一个<strong>列表</strong>\n如上面的函数会将 <code>1, 2, 3</code> 收集为一个叫做 <code>numbers</code> 的列表。</p>\n</blockquote>\n<blockquote>\n<p>带两个星号的参数范围内的参数会被收集为一个<strong>字典</strong>\n如上面的函数会将 <code>vegetables = 50, fruits = 100</code> 收集为一个叫做 <code>keywords</code> 的字典。</p>\n</blockquote>\n<h2 id=\"_7-keyword-only-参数\"> 7. Keyword-only 参数</h2>\n<p>在<strong>带星参数</strong>之后的<strong>普通参数</strong>会成为 Keyword-only 参数，即<strong>只能通过关键参数形式来传递实参</strong></p>\n<p>假如不需要不定参数而又想使用 Keyword-only 参数，那么可以使用<strong>没有名字的空星</strong>，如下所示</p>\n<div><pre><code><span>>></span><span>></span> <span>def</span> <span>foo</span><span>(</span>a<span>,</span>b<span>,</span><span>*</span><span>,</span>c<span>,</span>d<span>)</span><span>:</span>\n<span>.</span><span>.</span><span>.</span>     <span>print</span><span>(</span>a<span>,</span>b<span>,</span>c<span>,</span>d<span>)</span>\n<span>.</span><span>.</span><span>.</span>\n<span>>></span><span>></span> foo<span>(</span><span>1</span><span>,</span><span>2</span><span>,</span><span>3</span><span>,</span><span>4</span><span>)</span>\nTraceback <span>(</span>most recent call last<span>)</span><span>:</span>\nFile <span>\"&lt;stdin>\"</span><span>,</span> line <span>1</span><span>,</span> <span>in</span> <span>&lt;</span>module<span>></span>\nTypeError<span>:</span> foo<span>(</span><span>)</span> takes exactly <span>2</span> positional arguments <span>(</span><span>4</span> given<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id=\"_8-return-语句\"> 8. return 语句</h2>\n<p>Python 的函数<strong>默认为没有返回值</strong>\n一个没有返回值的函数的 <code>return</code> 语句等价于 <code>return None</code></p>\n<h2 id=\"_9-docstrings\"> 9. DocStrings</h2>\n<p>这一特性很类似 Java 的 javadoc。与 Java 不同的是，Python 的 DocStrings 在<strong>函数的第一个逻辑行处定义</strong></p>\n<p>特点如下：</p>\n<ol>\n<li>一个<strong>多行字符串</strong></li>\n<li>以大写字母开头，句号结尾</li>\n<li><strong>第二行是空行</strong></li>\n</ol>\n<blockquote>\n<p>Python 的每个函数都拥有 <code>__doc__</code> 属性，可以通过调用这个属性来显示 DocStrings\n在 DocStrings 中可以使用 reStructureText 的格式来实现 Javadoc 中的 <code>@parma</code> <code>@retrun</code> 功能</p>\n</blockquote>\n<div><pre><code><span>def</span> <span>foo</span><span>(</span>a<span>,</span> b<span>)</span><span>:</span>\n    <span>'''This is the foo function\n\n    It is just a foo function\n    :parma a: This is the parma a\n    :type a: int\n    :parma b: This is the parma b\n    :type b: int\n    '''</span>\n\n    <span>pass</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>也可以使用 Google 的规范</p>\n<div><pre><code><span>def</span> <span>module_level_function</span><span>(</span>param1<span>,</span> param2<span>=</span><span>None</span><span>,</span> <span>*</span>args<span>,</span> <span>**</span>kwargs<span>)</span><span>:</span>\n    <span>\"\"\"This is an example of a module level function.\n\n    Function parameters should be documented in the ``Args`` section. The name\n    of each parameter is required. The type and description of each parameter\n    is optional, but should be included if not obvious.\n\n    Parameter types -- if given -- should be specified according to\n    `PEP 484`_, though `PEP 484`_ conformance isn't required or enforced.\n\n    If \\*args or \\*\\*kwargs are accepted,\n    they should be listed as ``*args`` and ``**kwargs``.\n\n    The format for a parameter is::\n\n        name (type): description\n            The description may span multiple lines. Following\n            lines should be indented. The \"(type)\" is optional.\n\n            Multiple paragraphs are supported in parameter\n            descriptions.\n\n    Args:\n        param1 (int): The first parameter.\n        param2 (Optional[str]): The second parameter. Defaults to None.\n            Second line of description should be indented.\n        *args: Variable length argument list.\n        **kwargs: Arbitrary keyword arguments.\n\n    Returns:\n        bool: True if successful, False otherwise.\n\n        The return type is optional and may be specified at the beginning of\n        the ``Returns`` section followed by a colon.\n\n        The ``Returns`` section may span multiple lines and paragraphs.\n        Following lines should be indented to match the first line.\n\n        The ``Returns`` section supports any reStructuredText formatting,\n        including literal blocks::\n\n            {\n                'param1': param1,\n                'param2': param2\n            }\n\n    Raises:\n        AttributeError: The ``Raises`` section is a list of all exceptions\n            that are relevant to the interface.\n        ValueError: If `param2` is equal to `param1`.\n\n\n    .. _PEP 484:\n       https://www.python.org/dev/peps/pep-0484/\n\n    \"\"\"</span>\n    <span>if</span> param1 <span>==</span> param2<span>:</span>\n        <span>raise</span> ValueError<span>(</span><span>'param1 may not be equal to param2'</span><span>)</span>\n    <span>return</span> <span>True</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br></div></div><h2 id=\"_10-注解-annotations\"> 10. 注解(Annotations)</h2>\n<h3 id=\"_10-1-参数注解\"> 10.1 参数注解</h3>\n<p>Python 的参数注解定义在<strong>形参声明的位置，与形参以括号间隔，置于参数默认值之前</strong></p>\n<div><pre><code><span>def</span> <span>foo</span><span>(</span>a<span>:</span> <span>\"This is param a\"</span><span>,</span> b<span>:</span> <span>\"This is param b\"</span> <span>=</span> <span>5</span><span>)</span><span>:</span>\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_10-2-返回值注解\"> 10.2 返回值注解</h3>\n<p>Python 的返回值注解定义在<strong>函数头末尾的冒号之前，使用 <code>-&gt;</code> 和函数头分隔</strong></p>\n<div><pre><code>def haul(item: Haulable, *vargs: PackAnimal) -&gt; Distance:\n</code></pre>\n<div><span>1</span><br></div></div><blockquote>\n<p>注意，注解可以是字符串，也可以是类型。\n可以通过注解实现类型检查</p>\n</blockquote>\n<h3 id=\"_10-3-lambda-表达式\"> 10.3 Lambda 表达式</h3>\n<p>Lambda 表达式不支持注解</p>\n",
      "date_published": "2016-12-12T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Python"
      ]
    },
    {
      "title": "Python 3 IO",
      "url": "https://wafer.li/blog-corners/langroad/Python/Python%203%20IO/",
      "id": "https://wafer.li/blog-corners/langroad/Python/Python%203%20IO/",
      "summary": "<h2 id=\"_1-使用-input-进行输入\"> 1. 使用 <code>input()</code> 进行输入</h2>\n<p>Python3 使用 <code>input()</code> 函数获取用户输入。</p>\n<p><code>input()</code> 函数会返回一个字符串，随后可以使用 <code>int()</code> <code>float()</code> 等方法将字符串转为对应的类型或者格式</p>\n<blockquote>\n<p>在 Python 3 中，<code>raw_input()</code> 被整合到 <code>input()</code> 函数中，Python 2 的 <code>input()</code> 函数的功能被抛弃了。</p>\n</blockquote>\n",
      "content_html": "<h2 id=\"_1-使用-input-进行输入\"> 1. 使用 <code>input()</code> 进行输入</h2>\n<p>Python3 使用 <code>input()</code> 函数获取用户输入。</p>\n<p><code>input()</code> 函数会返回一个字符串，随后可以使用 <code>int()</code> <code>float()</code> 等方法将字符串转为对应的类型或者格式</p>\n<blockquote>\n<p>在 Python 3 中，<code>raw_input()</code> 被整合到 <code>input()</code> 函数中，Python 2 的 <code>input()</code> 函数的功能被抛弃了。</p>\n</blockquote>\n\n<h2 id=\"_2-文件输入输出\"> 2. 文件输入输出</h2>\n<p>与 C++ 和 Java 读取文件流的形式一样，Python 通过使用 <code>file</code> 类的函数来对文件进行读取写入</p>\n<div><pre><code>poem <span>=</span> <span>'''\\ Programming is fun\nWhen the work is done\nif you wanna make your work also fun:\n    use Python!\n'''</span>\n\nf <span>=</span> <span>open</span><span>(</span><span>'poem.txt'</span><span>,</span> <span>'w'</span><span>)</span> <span># open for 'w'riting</span>\nf<span>.</span>write<span>(</span>poem<span>)</span> <span># write text to file</span>\nf<span>.</span>close<span>(</span><span>)</span> <span># close the file</span>\nf <span>=</span> <span>open</span><span>(</span><span>'poem.txt'</span><span>)</span> <span># if no mode is specified, 'r'ead mode is assumed by default</span>\n\n<span>while</span> <span>True</span><span>:</span>\n    line <span>=</span> f<span>.</span>readline<span>(</span><span>)</span>\n    <span>if</span> <span>len</span><span>(</span>line<span>)</span> <span>==</span> <span>0</span><span>:</span> <span># Zero length indicates EOF</span>\n        <span>break</span>\n    <span>print</span><span>(</span>line<span>,</span> end<span>=</span><span>''</span><span>)</span>\n\nf<span>.</span>close<span>(</span><span>)</span> <span># close the file</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><blockquote>\n<p>使用 <code>open()</code> 打开文件，模式规则和 C++ 的相同\n文件交互完毕后，使用 <code>close()</code> 来关闭文件流</p>\n</blockquote>\n<h2 id=\"_3-pickle-模块\"> 3. pickle 模块</h2>\n<p>Python 提供了一个 <code>pickle</code> 的标准模块，用于将对象储存在文件中，称为对象的持久化保存</p>\n<div><pre><code><span>#!/usr/bin/python</span>\n<span># Filename: pickling.py</span>\n\n<span>import</span> pickle\n\n<span># the name of the file where we will store the object</span>\nshoplistfile <span>=</span> <span>'shoplist.data'</span>\n<span># the list of things to buy</span>\nshoplist <span>=</span> <span>[</span><span>'apple'</span><span>,</span><span>'mango'</span><span>,</span><span>'carrot'</span><span>]</span>\n\n<span># Write to the file</span>\nf <span>=</span> <span>open</span><span>(</span>shoplistfile<span>,</span><span>'wb'</span><span>)</span>\npickle<span>.</span>dump<span>(</span>shoplist<span>,</span> f<span>)</span> <span>#dump the object to a file f.close()</span>\n\n<span>del</span> shoplist <span># detroy the shoplist variable</span>\n\n<span># Read back from the storage</span>\nf <span>=</span> <span>open</span><span>(</span>shoplistfile<span>,</span><span>'rb'</span><span>)</span>\nstoredlist <span>=</span> pickle<span>.</span>load<span>(</span>f<span>)</span> <span># load the object from the file</span>\n<span>print</span><span>(</span>storedlist<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><blockquote>\n<p>注意，持久化保存要求使用<strong>二进制模式</strong>\n通过 <code>dump()</code> 和 <code>load()</code> 就可以对对象进行导入和导出</p>\n</blockquote>\n",
      "date_published": "2016-12-12T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Python"
      ]
    },
    {
      "title": "Python 3 Module",
      "url": "https://wafer.li/blog-corners/langroad/Python/Python%203%20Module/",
      "id": "https://wafer.li/blog-corners/langroad/Python/Python%203%20Module/",
      "summary": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>模块有点类似 C++ 中的 Namespace，但并不完全相同</p>\n",
      "content_html": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>模块有点类似 C++ 中的 Namespace，但并不完全相同</p>\n\n<h2 id=\"_2-导入模块\"> 2. 导入模块</h2>\n<p>通过使用 <code>import</code> 语句来导入一个模块进行使用</p>\n<div><pre><code><span>#!/usr/bin/python</span>\n<span># Filename: using_sys.py</span>\n\n<span>import</span> sys\n\n<span>print</span> <span>(</span><span>'The conmmand line arguments are:'</span><span>)</span>\n<span>for</span> i <span>in</span> sys<span>.</span>argv<span>:</span>\n    <span>print</span><span>(</span>i<span>)</span>\n\n<span>print</span><span>(</span><span>'\\n\\nThe PYTHONPATH is'</span><span>,</span> sys<span>.</span>path<span>,</span> <span>'\\n'</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><blockquote>\n<p>在上面的例子中，通过使用 <code>import sys</code> 就可以通过 <code>sys.function</code> 的形式来调用 sys 模块中的函数和变量。</p>\n</blockquote>\n<blockquote>\n<p>用户自定义模块在第一次导入时，会编译成<strong>字节码</strong>文件，这是 Python 处理的，可以提高模块导入的效率。\n这些文件以 <code>.pyc</code> 为扩展名，如果 Python 没有当前目录的访问权限，那么就不会创建 <code>.pyc</code> 文件</p>\n</blockquote>\n<blockquote>\n<p>第三方模块可以通过 Python 自带的 <code>pip</code> 进行安装</p>\n</blockquote>\n<p>另外，还可以通过使用 <code>from...import...</code> 语句来导入语句；\n它和 <code>import</code> 语句的唯一区别就是在模块导入之后，不用再在调用的时候填写模块名称。</p>\n<div><pre><code><span># Import statement</span>\n<span>import</span> sys\n<span>print</span><span>(</span>sys<span>.</span>path<span>)</span>\n\n<span># From...import... statement</span>\n<span>from</span> sys <span>import</span> argv\n<span>print</span><span>(</span>argv<span>)</span>\n\n<span># If you want to import all the identifiers,</span>\n<span># use this statement.</span>\nform sys <span>import</span> <span>*</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><blockquote>\n<p>注意，<code>from...import *</code> 语句<strong>不会导入以双下划线开头的标识符</strong>，如 <code>__version__</code></p>\n</blockquote>\n<blockquote>\n<p>一般来说，<strong>不建议使用 <code>from...import...</code> 语句</strong></p>\n</blockquote>\n<h2 id=\"_3-创建模块\"> 3. 创建模块</h2>\n<p>创建模块最简单的方法就是<strong>编写 .py 文件</strong>；\n一个 <code>.py</code> 文件就是一个 Python 模块。\n例如：</p>\n<div><pre><code><span>#!/usr/bin/python</span>\n<span># Filename: mymodule.py</span>\n\n__version__ <span>=</span> <span>'0.1'</span>\n\n<span>def</span> <span>sayHi</span><span>(</span><span>)</span><span>:</span>\n    <span>print</span><span>(</span><span>'Hi'</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>Module Demo:</p>\n<div><pre><code><span>#!/usr/bin/python</span>\n<span># Filename: mymodule_demo.py</span>\n\n<span>import</span> mymodule\n\nmymodule<span>.</span>sayHi<span>(</span><span>)</span>\n<span>print</span><span>(</span><span>'Version'</span><span>,</span> mymodule<span>.</span>__version__<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id=\"_4-模块的默认变量\"> 4. 模块的默认变量</h2>\n<p>每个模块都有几个默认变量，它们是由 Python 自动构建的；\n如 <code>__name__</code> 变量，这是<strong>模块的名字</strong>（即 <code>.py</code> 文件的名字）</p>\n<p>可以使用 <code>__name__</code> 变量来检测其自身是否是作为主程序运行</p>\n<div><pre><code><span>#!/usr/bin/python</span>\n<span># Filename: using_name.py</span>\n\n<span>if</span> __name__ <span>==</span> <span>'__main__'</span><span>:</span>\n    <span>print</span><span>(</span><span>'This program is being run by itself'</span><span>)</span>\n<span>else</span><span>:</span>\n    <span>print</span><span>(</span><span>'I am being imported from another module'</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><blockquote>\n<p><code>'__main__'</code> 是主模块的名字，也就是<strong>主程序的文件名</strong></p>\n</blockquote>\n<h2 id=\"_5-dir-函数\"> 5. <code>dir()</code> 函数</h2>\n<p><code>dir()</code> 函数是内建函数，可以通过它来列出模块定义的标识符，包括<strong>函数、类和变量</strong>\n如果不提供参数，则返回<strong>当前模块</strong>中定义的名称列表</p>\n<div><pre><code><span>>></span><span>></span> a <span>=</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span>\n<span>>></span><span>></span> <span>import</span> fibo\n<span>>></span><span>></span> fib <span>=</span> fibo<span>.</span>fib\n<span>>></span><span>></span> <span>dir</span><span>(</span><span>)</span>\n<span>[</span><span>'__builtins__'</span><span>,</span> <span>'__name__'</span><span>,</span> <span>'a'</span><span>,</span> <span>'fib'</span><span>,</span> <span>'fibo'</span><span>,</span> <span>'sys'</span><span>]</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><blockquote>\n<p>由此可以看出，主模块具有 <code>__buitins__</code> 对象，实际上这就是 Python 的内建函数和类\n<code>dir()</code> 函数一般不会将内建函数列出，如果需要查看，可以通过 <code>dir(builtins)</code> 查看</p>\n</blockquote>\n<h2 id=\"_6-包-package\"> 6. 包(Package)</h2>\n<p>包是模块的文件夹，其中包含了很多模块；\n同时一个包也可以包含<strong>另一个包</strong>。</p>\n<p><strong>一个包必须包含 <code>__init__.py</code> 文件，以免 Python 将包识别为普通目录</strong></p>\n<p>可以使用点号来访问到包中的模块</p>\n<p>例如：</p>\n<div><pre><code>sound<span>/</span>                          Top<span>-</span>level package\n      __init__<span>.</span>py               Initialize the sound package\n      formats<span>/</span>                  Subpackage <span>for</span> <span>file</span> <span>format</span> conversions\n              __init__<span>.</span>py\n              wavread<span>.</span>py\n              wavwrite<span>.</span>py\n              aiffread<span>.</span>py\n              aiffwrite<span>.</span>py\n              auread<span>.</span>py\n              auwrite<span>.</span>py\n              <span>.</span><span>.</span><span>.</span>\n      effects<span>/</span>                  Subpackage <span>for</span> sound effects\n              __init__<span>.</span>py\n              echo<span>.</span>py\n              surround<span>.</span>py\n              reverse<span>.</span>py\n              <span>.</span><span>.</span><span>.</span>\n      filters<span>/</span>                  Subpackage <span>for</span> filters\n              __init__<span>.</span>py\n              equalizer<span>.</span>py\n              vocoder<span>.</span>py\n              karaoke<span>.</span>py\n              <span>.</span><span>.</span><span>.</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><blockquote>\n<p>关于 <code>__init__.py</code>:</p>\n</blockquote>\n<blockquote>\n<ol>\n<li>一个包必须包含这个文件</li>\n<li>这个文件可以是空的，也可以做一些包的初始化工作，比如定义 <code>__all__</code> 变量</li>\n</ol>\n</blockquote>\n<h3 id=\"_6-1-导入包\"> 6.1 导入包</h3>\n<p>包的导入有如下几种形式：</p>\n<ol>\n<li>\n<p>使用 <code>import</code> 语句</p>\n<blockquote>\n<p>例如 <code>import sound.effects.echo</code>, 将 <code>sound/effects/echo</code> 模块导入；\n使用方法为 <code>sound.effects.echo.echofilter(input, output, delay = 0.7, atten = 4</code></p>\n</blockquote>\n</li>\n<li>\n<p>使用 <code>from package import item</code></p>\n<blockquote>\n<p>在包(Package)层面，<strong>Python 推荐这么导入</strong>，主要的优点在于能够减少没有必要的前缀修饰。\n例如： <code>from sound.effects import echo</code> 将 <code>echo</code> 模块导入\n使用方法为：<code>echo.echofilter(input, output, delay = 0.7, atten = 4)</code></p>\n</blockquote>\n</li>\n<li>\n<p>补充：关于 <code>from package import *</code> 和 <code>__all__</code> 变量</p>\n<blockquote>\n<p><code>__all__</code> 变量通常在 <code>__init__.py</code> 文件中定义，用于指定<strong>允许 <code>import *</code> 识别的标识符</strong>，即允许导出的标识符；\n如果没有指定这个变量，那么在使用 <code>import *</code> 时便会自动<strong>忽略以下划线开头的标识符</strong></p>\n</blockquote>\n</li>\n<li>\n<p>内包导入</p>\n<blockquote>\n<p>对于<strong>包中的模块</strong>，在可能需要到另一个兄弟包模块的时候，由于它们处在同一个目录结构中，所以可以简单地省略一些前缀。\nPython 在导入包时，首先会搜寻<strong>当前目录</strong>，如果搜索不到，则再到系统 PATH 中进行搜索\n例如 <code>srround</code> 想要利用 <code>echo</code> 模块，则直接简单地 <code>import echo</code> 即可。</p>\n</blockquote>\n<blockquote>\n<p>在 Python 2.5 之后，可以使用<strong>相对路径</strong>进行包导入，例如：</p>\n</blockquote>\n<div><pre><code><span># 一个点代表当前目录</span>\n<span># 两个点代表父目录</span>\n<span>from</span> <span>.</span> <span>import</span> echo\n<span>from</span> <span>.</span><span>.</span> <span>import</span> formats\n<span>from</span> <span>.</span><span>.</span>filters <span>import</span> equalizer\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div></li>\n</ol>\n<blockquote>\n<p>目前，Python 推荐使用 <code>from package import item</code> 的包层面导入，和 <code>import module</code> 的模块层面导入方法，能更好地避免冗余和变量名称冲突。</p>\n</blockquote>\n",
      "date_published": "2016-12-12T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Python"
      ]
    },
    {
      "title": "Scala Hello World",
      "url": "https://wafer.li/blog-corners/langroad/Scala/Scala%20Hello%20World/",
      "id": "https://wafer.li/blog-corners/langroad/Scala/Scala%20Hello%20World/",
      "summary": "<h2 id=\"_1-简介\"> 1. 简介</h2>\n<p>Scala 既可以使用交互式命令行来编程，也可以将其写成一个独立的程序；</p>\n<p>其中，关于构建独立程序的写法一共有两种。</p>\n",
      "content_html": "<h2 id=\"_1-简介\"> 1. 简介</h2>\n<p>Scala 既可以使用交互式命令行来编程，也可以将其写成一个独立的程序；</p>\n<p>其中，关于构建独立程序的写法一共有两种。</p>\n\n<h2 id=\"_2-main-方法\"> 2. <code>main()</code> 方法</h2>\n<p>使用 <code>main()</code> 方法是通常各种语言的程序入口，Scala 也不例外：</p>\n<div><pre><code><span>def</span> main<span>(</span>args<span>:</span> Array<span>[</span><span>String</span><span>]</span><span>)</span> <span>{</span>\n    println<span>(</span><span>\"Hello, World!\"</span><span>)</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id=\"_3-使用-application-特质\"> 3. 使用 <code>Application</code> 特质</h2>\n<div><pre><code><span>object</span> Hello <span>extends</span> Application <span>{</span>\n    println<span>(</span><span>\"Hello, World!\"</span><span>)</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div>",
      "date_published": "2017-04-03T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Scala"
      ]
    },
    {
      "title": "Scala for-comprehension",
      "url": "https://wafer.li/blog-corners/langroad/Scala/Scala%20for-comprehension/",
      "id": "https://wafer.li/blog-corners/langroad/Scala/Scala%20for-comprehension/",
      "summary": "<p>Scala 作为函数式语言，提供了很多用于高阶函数来解决一类范式问题；</p>\n<p>但是，使用过多的高阶函数就会让代码的可读性变差；</p>\n<p>所以，对此 Scala 提供了一种类 Python 的简便的语法糖，用来解决代码的可读性问题。</p>\n",
      "content_html": "<p>Scala 作为函数式语言，提供了很多用于高阶函数来解决一类范式问题；</p>\n<p>但是，使用过多的高阶函数就会让代码的可读性变差；</p>\n<p>所以，对此 Scala 提供了一种类 Python 的简便的语法糖，用来解决代码的可读性问题。</p>\n\n<h2 id=\"_1-问题背景\"> 1. 问题背景</h2>\n<p>在这里举一个 <em>Effective Scala</em> 中的例子：</p>\n<p>比如说，我要列出所有不同字母组成的 <code>pair</code>，那么该怎么办呢？</p>\n<p>如果用 Java 的话，就会有两层 <code>for</code>，那么在 Scala 下，我们就应该用到 <code>flatMap</code>：</p>\n<div><pre><code><span>val</span> chars <span>=</span> <span>'a'</span> to <span>'z'</span>\n\nchars flatMap <span>{</span> a <span>=></span>\n    chars flatMap <span>{</span> b <span>=></span>\n        Vector<span>(</span><span>\"%c%c\"</span><span>.</span>format<span>(</span>a<span>,</span> b<span>)</span><span>)</span>\n    <span>}</span>\n<span>}</span> filter <span>{</span> s <span>=></span> s<span>.</span>head <span>!=</span> s<span>.</span>last <span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>这里用到了两个 <code>flatMap</code>，为什么？</p>\n<p>首先，如果都使用 <code>map</code>，那么内部的 <code>map</code> 将元素转变为了 <code>Vector</code>；</p>\n<p>而 <code>char</code> 作为 <code>Range</code>，会默认选择 <code>Vector</code> 作为 <code>map</code> 的选项；</p>\n<p>此时， <code>a</code> 转换成的东西就变成了 <code>Vector[Vector[String]]</code>；</p>\n<p>而 <code>chars</code> 又会默认生成一层 <code>Vector</code>；</p>\n<p>所以，最后生成的东西就会有三层 <code>Vector</code>，即 <code>Vector[Vector[Vector(String)]]</code>；</p>\n<p>所以，我们需要两次 <code>flatten</code> 进行展平，才能最终得到 <code>Vector(String)</code>；</p>\n<p>这也是为什么需要两次 <code>flatMap</code> 的原因。</p>\n<p>可以看到，如果采用 <code>flatMap</code>，那么操作就会变得十分难以理解。</p>\n<h2 id=\"_2-for-comprehension\"> 2. <code>for-comprehension</code></h2>\n<p>对此，Scala 提供了一种简便的，用于生成 <code>Seq</code> 的 <code>for</code> 表达式；</p>\n<p>通常称为 <code>for-comprehension</code>，也称为 <code>Sequence Comprehension</code>，或者 <code>for expression</code>。</p>\n<p>它的语法结构如下：</p>\n<div><pre><code><span>for</span> <span>(</span>s<span>)</span> <span>yield</span> e\n</code></pre>\n<div><span>1</span><br></div></div><p>其中，<code>s</code> 被称作 <code>enumerators</code>，<code>e</code> 则是遍历生成的元素；</p>\n<p>表达式对于 <code>s</code> 有以下几点要求：</p>\n<ol>\n<li>\n<p><code>s</code> 是 <code>generator</code> 和 <code>filter</code> 组成的，以分号间隔的语句序列。</p>\n</li>\n<li>\n<p><code>genrator</code> 的形式为： <code>p &lt;- c</code>。</p>\n<blockquote>\n<p>其中 <code>p</code> 是一个模式(pattern)，<code>c</code>  则是一个集合</p>\n</blockquote>\n</li>\n<li>\n<p><code>filter</code> 的形式为 <code>if condition</code>，其中 <code>condition</code> 是个布尔表达式</p>\n</li>\n<li>\n<p>允许多个 <code>generator</code>，但是在下面的 <code>generator</code> 必须比在上面的要变化的快。</p>\n<blockquote>\n<p>换成指令性语言的话，就是在下面的 <code>generator</code> 必须在更内部的 <code>for</code> 循环中。</p>\n</blockquote>\n</li>\n</ol>\n<p>经过执行之后，这个表达式会返回一个由 <code>e</code> 组成的集合；</p>\n<p>具体返回的集合类型，例如 <code>List</code> 和 <code>Vector</code>，则由 <code>s</code> 来决定；</p>\n<p>如果类型不能满足，则会向类型结构的上一层回溯，直到找到一个最接近的满足要求的类型为止。</p>\n<p>同时，<code>for-comprehension</code> 可以使用花括号代替圆括号，此时，就不需要用分号来分隔语句了。</p>\n<h2 id=\"_3-使用-for-comprehension-解决问题\"> 3. 使用 <code>for-comprehension</code> 解决问题</h2>\n<p>那么，对于上面的问题，我们试着使用 <code>for-comprehension</code> 来解决：</p>\n<div><pre><code><span>val</span> chars <span>=</span> <span>'a'</span> to <span>'z'</span>\n\n<span>for</span> <span>{</span>\n    a <span>&lt;-</span> chars\n    b <span>&lt;-</span> chars\n    <span>if</span> <span>(</span>a <span>!=</span> b<span>)</span>\n<span>}</span> <span>yield</span> <span>\"%c%c\"</span><span>.</span>format<span>(</span>a<span>,</span> b<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>可以看到，使用 <code>for-comprehension</code> 来解决，写出来的代码会比 <code>flatMap</code> 简单得多。</p>\n<h2 id=\"_4-关于返回类型\"> 4. 关于返回类型</h2>\n<p>对于上面的表达式，它的返回类型是什么呢？</p>\n<p>实际上，是一个 <code>Vector</code>。</p>\n<p>为什么是一个 <code>Vector</code> ？</p>\n<p>这是因为，<code>chars</code> 实际上是一个 <code>Range</code> 对象；</p>\n<p>而对于 <code>Range</code> 对象，它不能拥有一堆 <code>String</code>；</p>\n<p>此时，Scala 编译器会在类型结构中向上寻找最近的满足条件的类型；</p>\n<p>此时，寻找到的是 <code>IndexedSeq</code>，而这个类型的默认 <code>Seq</code> 实现就是 <code>Vector</code></p>\n",
      "date_published": "2021-07-15T11:52:03.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Scala"
      ]
    },
    {
      "title": "Scala 函数式特征",
      "url": "https://wafer.li/blog-corners/langroad/Scala/Scala%20%E5%87%BD%E6%95%B0%E5%BC%8F%E7%89%B9%E5%BE%81/",
      "id": "https://wafer.li/blog-corners/langroad/Scala/Scala%20%E5%87%BD%E6%95%B0%E5%BC%8F%E7%89%B9%E5%BE%81/",
      "summary": "<h2 id=\"_1-函数类型\"> 1. 函数类型</h2>\n<p>函数类型是函数式语言的特征之一；</p>\n<p>其原因在于，函数是语言中的一等公民，可以作为变量，而变量是具有类型的。</p>\n<p>Scala 的函数类型定义如下：</p>\n<div><pre><code>f<span>:</span> <span>Int</span><span>,</span> <span>Int</span> <span>=></span> <span>Int</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>使用箭头将参数类型和返回值类型相间隔；</p>\n<p>上面的例子表示函数 <code>f</code> 接受两个 <code>Int</code> 参数，返回值类型为 <code>Int</code></p>\n",
      "content_html": "<h2 id=\"_1-函数类型\"> 1. 函数类型</h2>\n<p>函数类型是函数式语言的特征之一；</p>\n<p>其原因在于，函数是语言中的一等公民，可以作为变量，而变量是具有类型的。</p>\n<p>Scala 的函数类型定义如下：</p>\n<div><pre><code>f<span>:</span> <span>Int</span><span>,</span> <span>Int</span> <span>=></span> <span>Int</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>使用箭头将参数类型和返回值类型相间隔；</p>\n<p>上面的例子表示函数 <code>f</code> 接受两个 <code>Int</code> 参数，返回值类型为 <code>Int</code></p>\n\n<h2 id=\"_2-高阶函数\"> 2. 高阶函数</h2>\n<p>高阶函数指的是接受 函数作为参数 的函数，它的参数是函数类型。</p>\n<p>Scala 中的高阶函数如下：</p>\n<div><pre><code><span>def</span> sum<span>(</span>f<span>:</span> <span>Int</span> <span>=></span> <span>Int</span><span>,</span> a<span>:</span> <span>Int</span><span>,</span> b<span>:</span> <span>Int</span><span>)</span> <span>=</span>\n    <span>if</span><span>(</span>a <span>></span> b<span>)</span> <span>0</span>\n    <span>else</span> f<span>(</span>a<span>)</span> <span>+</span> sum<span>(</span>a <span>+</span> <span>1</span><span>,</span> b<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>其中，<code>f</code> 是函数类型的参数，它接受一个 <code>Int</code> 作为参数，返回值是一个 <code>Int</code>；</p>\n<p>上面的例子如下数学公式的求法：</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:3.086118em;vertical-align:-1.250005em;\"></span><span><span><span><span style=\"height:1.836113em;\"><span style=\"top:-1.8999949999999999em;margin-left:0em;\"><span style=\"height:3.05em;\"></span><span><span>a</span></span></span><span style=\"top:-3.0500049999999996em;\"><span style=\"height:3.05em;\"></span><span><span>∑</span></span></span><span style=\"top:-4.300005em;margin-left:0em;\"><span style=\"height:3.05em;\"></span><span><span>b</span></span></span></span><span>​</span></span><span><span style=\"height:1.250005em;\"><span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>a</span><span>)</span></span></span></span></span></span></p>\n<h2 id=\"_3-匿名函数-函数字面量-lambda\"> 3. 匿名函数(函数字面量, lambda)</h2>\n<p>作为语言的基本类型，如字符串，我们可以使用字面量表示它，如：</p>\n<div><pre><code><span>val</span> s <span>=</span> <span>\"abc\"</span>\nprintln<span>(</span>s<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>上面可以直接写成</p>\n<div><pre><code>println<span>(</span><span>\"abc\"</span><span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>在 Scala 中，函数也具有这种特性，我们可以直接定义一个函数字面量：</p>\n<div><pre><code><span>val</span> f <span>=</span> <span>(</span>x<span>:</span> <span>Int</span><span>)</span> <span>=></span> x <span>*</span> x\nsum<span>(</span>f<span>,</span> <span>1</span><span>,</span> <span>3</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>如上，<code>f</code> 是一个函数，具有参数 <code>x</code>，返回 <code>x</code> 的平方</p>\n<p>也可以将字面量直接传入</p>\n<div><pre><code>sum<span>(</span>x <span>=></span> x <span>*</span> x<span>,</span> <span>1</span><span>,</span> <span>3</span><span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div><blockquote>\n<p>大部分情况都不需要显式指定参数的类型，编译器会进行自动推断；\n同时，无法在函数字面量中显式指定函数的返回值类型\n只能通过定义函数变量的类型来进行显示指定</p>\n</blockquote>\n<p>实际上，Scala 中的匿名函数就是其他语言中的 <strong>lambda</strong> 表达式；</p>\n<p>就函数式上来说，Scala 提供了一种更轻便的语法</p>\n<h2 id=\"_4-柯里化\"> 4. 柯里化</h2>\n<h3 id=\"_4-1-定义\"> 4.1 定义</h3>\n<p>柯里化是函数式范式的一个特有现象；</p>\n<p>它指的是，一个函数，通过接受部分参数，可以返回接受剩余参数的 <strong>嵌套函数</strong>；</p>\n<p>事实上，对于一个函数</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>d</span><span>e</span><span style=\"margin-right:0.10764em;\">f</span><span> </span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>a</span><span style=\"margin-right:0.02778em;\">r</span><span><span style=\"margin-right:0.03588em;\">g</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>…</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>(</span><span>a</span><span style=\"margin-right:0.02778em;\">r</span><span><span style=\"margin-right:0.03588em;\">g</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05764em;\">E</span></span></span></span></span></p>\n<p>当 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span>n</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>&gt;</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1</span></span></span></span> 时，以下的写法和上面是等价的：</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>d</span><span>e</span><span style=\"margin-right:0.10764em;\">f</span><span> </span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>a</span><span style=\"margin-right:0.02778em;\">r</span><span><span style=\"margin-right:0.03588em;\">g</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>…</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>(</span><span>a</span><span style=\"margin-right:0.02778em;\">r</span><span><span style=\"margin-right:0.03588em;\">g</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>{</span><span>d</span><span>e</span><span style=\"margin-right:0.10764em;\">f</span><span> </span><span style=\"margin-right:0.03588em;\">g</span><span>(</span><span>a</span><span style=\"margin-right:0.02778em;\">r</span><span><span style=\"margin-right:0.03588em;\">g</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.05764em;\">E</span><span>;</span><span> </span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.03588em;\">g</span><span>}</span></span></span></span></span></p>\n<p>所以，我们可以通过编写嵌套的接受部分参数的函数，并返回它，来达到柯里化的目的；</p>\n<p>实际上，这个过程就叫做柯里化。</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:7.500000000000002em;vertical-align:-3.5000000000000018em;\"></span><span><span><span><span><span style=\"height:4em;\"><span style=\"top:-6.16em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>a</span><span style=\"margin-right:0.02778em;\">r</span><span><span style=\"margin-right:0.03588em;\">g</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span>(</span><span>a</span><span style=\"margin-right:0.02778em;\">r</span><span><span style=\"margin-right:0.03588em;\">g</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>…</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>(</span><span>a</span><span style=\"margin-right:0.02778em;\">r</span><span><span style=\"margin-right:0.03588em;\">g</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span></span></span><span style=\"top:-4.659999999999999em;\"><span style=\"height:3em;\"></span><span></span></span><span style=\"top:-3.1599999999999984em;\"><span style=\"height:3em;\"></span><span></span></span><span style=\"top:-1.6599999999999984em;\"><span style=\"height:3em;\"></span><span></span></span><span style=\"top:-0.15999999999999837em;\"><span style=\"height:3em;\"></span><span></span></span></span><span>​</span></span><span><span style=\"height:3.5000000000000018em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:2.5em;\"><span style=\"top:-4.66em;\"><span style=\"height:3em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>a</span><span style=\"margin-right:0.02778em;\">r</span><span><span style=\"margin-right:0.03588em;\">g</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>⇒</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>{</span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>a</span><span style=\"margin-right:0.02778em;\">r</span><span><span style=\"margin-right:0.03588em;\">g</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>…</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>(</span><span>a</span><span style=\"margin-right:0.02778em;\">r</span><span><span style=\"margin-right:0.03588em;\">g</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)}</span></span></span><span style=\"top:-3.1599999999999993em;\"><span style=\"height:3em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>a</span><span style=\"margin-right:0.02778em;\">r</span><span><span style=\"margin-right:0.03588em;\">g</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>⇒</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>{</span><span>a</span><span style=\"margin-right:0.02778em;\">r</span><span><span style=\"margin-right:0.03588em;\">g</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>⇒</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>{</span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>a</span><span style=\"margin-right:0.02778em;\">r</span><span><span style=\"margin-right:0.03588em;\">g</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>…</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>(</span><span>a</span><span style=\"margin-right:0.02778em;\">r</span><span><span style=\"margin-right:0.03588em;\">g</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)}}</span></span></span><span style=\"top:-1.6599999999999993em;\"><span style=\"height:3em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>⋯</span></span></span><span style=\"top:-0.15999999999999925em;\"><span style=\"height:3em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>a</span><span style=\"margin-right:0.02778em;\">r</span><span><span style=\"margin-right:0.03588em;\">g</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>⇒</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>a</span><span style=\"margin-right:0.02778em;\">r</span><span><span style=\"margin-right:0.03588em;\">g</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>⇒</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>a</span><span style=\"margin-right:0.02778em;\">r</span><span><span style=\"margin-right:0.03588em;\">g</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>⇒</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>…</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>⇒</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.10764em;\">f</span></span></span></span><span>​</span></span><span><span style=\"height:3.500000000000001em;\"><span></span></span></span></span></span></span></span><span><span><span><span style=\"height:4em;\"><span style=\"top:-6em;\"><span style=\"height:2.84em;\"></span><span></span></span><span style=\"top:-4.499999999999999em;\"><span style=\"height:2.84em;\"></span><span></span></span><span style=\"top:-2.9999999999999982em;\"><span style=\"height:2.84em;\"></span><span></span></span><span style=\"top:-1.4999999999999982em;\"><span style=\"height:2.84em;\"></span><span></span></span><span style=\"top:1.7763568394002505e-15em;\"><span style=\"height:2.84em;\"></span><span></span></span></span><span>​</span></span><span><span style=\"height:3.5000000000000018em;\"><span></span></span></span></span></span></span></span></span></p>\n<h3 id=\"_4-2-显式柯里化\"> 4.2 显式柯里化</h3>\n<p><code>sum</code> 函数可以使用如下的方法进行重写：</p>\n<div><pre><code><span>def</span> sum<span>(</span>f<span>:</span> <span>Int</span> <span>=></span> <span>Int</span><span>)</span><span>:</span> <span>(</span><span>Int</span><span>,</span> <span>Int</span><span>)</span> <span>=></span> <span>Int</span> <span>=</span> <span>{</span>\n    <span>def</span> sumF<span>(</span>a<span>:</span> <span>Int</span><span>,</span> b<span>:</span> <span>Int</span><span>)</span> <span>=</span> <span>{</span>\n        <span>if</span><span>(</span>a <span>></span> b<span>)</span> <span>0</span>\n        <span>else</span> f<span>(</span>a<span>)</span> <span>+</span> sumF<span>(</span>a <span>+</span> <span>1</span><span>,</span> b<span>)</span>\n    <span>}</span>\n    sumF\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>上面的写法被称作 <strong>显式柯里化</strong>，就是将一个接受多个参数的函数通过显式编写一个内部的嵌套函数，并返回这个函数来达到柯里化。</p>\n<p>在调用时，我们可以直接如下调用：</p>\n<div><pre><code>sum<span>(</span>x <span>=></span> x <span>*</span> x<span>)</span> <span>(</span><span>1</span><span>,</span> <span>10</span><span>)</span> <span>// 1^2 + 2^2 + ... + 10^2</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>第一个括号，调用了外部函数，返回值是内部的 <code>sumF</code> 函数；</p>\n<p>这使得我们可以 <strong>继续使用括号</strong> 进行 <code>sumF</code> 的调用</p>\n<h3 id=\"_4-3-隐式柯里化\"> 4.3 隐式柯里化</h3>\n<p>许多函数式编程语言都提供柯里化的语法糖，这被称作 <strong>隐式柯里化</strong>；</p>\n<p>Scala 也提供了这样的语法糖：</p>\n<div><pre><code><span>def</span> sum<span>(</span>f<span>:</span> <span>Int</span> <span>=></span> <span>Int</span><span>)</span><span>(</span>a<span>:</span> <span>Int</span><span>,</span> b<span>:</span> <span>Int</span><span>)</span> <span>=</span>\n    <span>if</span> <span>(</span>a <span>></span> b<span>)</span> <span>0</span>\n    <span>else</span> f<span>(</span>a<span>)</span> <span>+</span> sum<span>(</span>f<span>)</span><span>(</span>a <span>+</span> <span>1</span><span>,</span> b<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>通过使用两个括号，就可以直接定义最内部的函数体，而不需要再定义一个内部的嵌套函数；</p>\n<p>这可以让我们像进行柯里化函数调用一样，定义柯里化函数</p>\n<h3 id=\"_4-4-柯里化的目的\"> 4.4 柯里化的目的</h3>\n<p>柯里化相比我们定义一个多参数函数来说，要稍显复杂；</p>\n<p>那么为什么不直接定义一个多参数函数呢？</p>\n<p>实际上，使用柯里化的目的在于可以动态确定参数；</p>\n<p>当函数的某些参数不确定时，我们可以先保存一个存根；</p>\n<p>剩余的参数确定之后，可以通过存根直接调用剩下的参数。</p>\n<p>柯里化的另一个用处类似建造者模式(Builder Pattern)，可以通过柯里化来减少参数和函数重载的爆炸。</p>\n<h2 id=\"_5-部分应用-partially-application\"> 5. 部分应用(partially application)</h2>\n<p>部分应用指的是， <strong>固定</strong> 函数的某些参数，可以获取一个接受剩下参数的函数；</p>\n<p>有点类似于在运行时给予函数默认值。</p>\n<p>Scala 的部分应用写法如下：</p>\n<div><pre><code><span>def</span> add<span>(</span>a<span>:</span> <span>Int</span><span>,</span> b<span>:</span> <span>Int</span><span>,</span> c<span>:</span> <span>Int</span><span>)</span> <span>=</span> a <span>+</span> b <span>+</span> c\n\n<span>def</span> addA5 <span>=</span> add<span>(</span><span>5</span><span>,</span> _<span>:</span><span>Int</span><span>,</span> _<span>:</span><span>Int</span><span>)</span>\n\naddA5<span>(</span><span>2</span><span>,</span> <span>3</span><span>)</span> <span>// 5 + 2 + 3</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>可以看到，我们通过将参数 <code>a</code> 的值固定为 <code>5</code> 得到了一个新的函数；</p>\n<p>它接受 <code>b</code> 和 <code>c</code>，返回 <code>5 + b + c</code></p>\n<h2 id=\"_6-柯里化和部分应用的区别\"> 6. 柯里化和部分应用的区别</h2>\n<p>这两个概念经常被混淆，但是实际上有着一些差别：</p>\n<ol>\n<li>柯里化指的是将多参数函数 <strong>分解为</strong> 多个单参数（组）函数的特性</li>\n<li>部分应用指的是通过 <strong>固定</strong> 某个参数，得到接受剩余参数函数的特性</li>\n</ol>\n<p>虽然它们调用的效果都是返回一个函数，但是，两者一次调用返回的函数具有显著的不同：</p>\n<ol>\n<li>\n<p>柯里化返回的函数只接受一个参数（组）</p>\n<blockquote>\n<p>由于返回的是层层嵌套的函数，所以会出现函数的连续调用\n<code>add(1)(1)(1)(1)(1)</code> 中，\n对于一个 <code>(1)</code>，返回的函数是接受另一个 <code>1</code>，同时将剩下的内部嵌套闭包返回</p>\n</blockquote>\n</li>\n<li>\n<p>部分应用返回的函数可以接受多个参数</p>\n<blockquote>\n<p>相比柯里化，部分应用返回的函数可以直接接受多个参数，如\n<code>add_1(1,1,1,1)</code>\n固定了第一个 <code>1</code> 之后，剩下的 <code>1</code> 可以直接传入，而不需要连续调用</p>\n</blockquote>\n</li>\n</ol>\n<p>柯里化通过将函数分解嵌套来减少函数的参数；</p>\n<p>函数的部分应用通过给予参数默认值来减少函数的参数。</p>\n<p>柯里化函数的调用是函数的连续调用，而函数的部分应用是函数的一次调用。</p>\n",
      "date_published": "2017-04-01T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Scala"
      ]
    },
    {
      "title": "Scala 函数解析",
      "url": "https://wafer.li/blog-corners/langroad/Scala/Scala%20%E5%87%BD%E6%95%B0%E8%A7%A3%E6%9E%90/",
      "id": "https://wafer.li/blog-corners/langroad/Scala/Scala%20%E5%87%BD%E6%95%B0%E8%A7%A3%E6%9E%90/",
      "summary": "<h2 id=\"_1-代换模型\"> 1. 代换模型</h2>\n<p>Scala 使用代换模型对函数和表达式进行解析工作；</p>\n<p>所谓的代换模型就是类似平常算术的过程；</p>\n<p>从左到右地将函数和表达式一步一步转换，最终转换成值。</p>\n<p>例如：</p>\n<div><pre><code><span>(</span><span>2</span> <span>*</span> <span>2</span><span>)</span> <span>+</span> <span>(</span><span>4</span> <span>*</span> <span>5</span><span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div>",
      "content_html": "<h2 id=\"_1-代换模型\"> 1. 代换模型</h2>\n<p>Scala 使用代换模型对函数和表达式进行解析工作；</p>\n<p>所谓的代换模型就是类似平常算术的过程；</p>\n<p>从左到右地将函数和表达式一步一步转换，最终转换成值。</p>\n<p>例如：</p>\n<div><pre><code><span>(</span><span>2</span> <span>*</span> <span>2</span><span>)</span> <span>+</span> <span>(</span><span>4</span> <span>*</span> <span>5</span><span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div>\n<p>对于上面的式子 Scala 是如何解析的呢？</p>\n<p>我们从左到右地解析，首先，我们解析 <code>(2 * 2)</code> 的内容，将其替换成值 <code>4</code>；</p>\n<p>此时，式子变为：</p>\n<div><pre><code><span>4</span> <span>+</span> <span>(</span><span>4</span> <span>*</span> <span>5</span><span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>由于有括号，和乘法的算术等级较高，所以我们接下来对 <code>(4 * 5)</code> 进行解析；</p>\n<p>此时，式子变为：</p>\n<div><pre><code><span>4</span> <span>+</span> <span>20</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>此时，我们计算上面的值，最后得到 24。</p>\n<p>可以看到，Scala 的解析是符合我们通常的算术解析规律的。</p>\n<h2 id=\"_2-代换模型的缺陷\"> 2. 代换模型的缺陷</h2>\n<p>使用代换模型最重要的一个要求就是，我们的表达式最终 <strong>能够</strong> 规约到一个 <strong>值</strong>；</p>\n<p>如果它最终不能够规约到一个值(无限循环，Non-Terminate)；</p>\n<p>或者表达式对其外部的变量产生了影响(副作用)；</p>\n<p>都会对代换模型造成污染。</p>\n<h2 id=\"_3-副作用\"> 3. 副作用</h2>\n<p>所谓的副作用就是指的是，函数和表达式的执行过程修改了外部的变量。</p>\n<p>例如，<code>c++</code> 这个表达式就具有很明显的副作用；</p>\n<p>因为我们不能够直接将这个表达式规约为一个值；</p>\n<p>在执行的过程中，我们需要对 <code>c</code> 这个外部传入的变量进行修改；</p>\n<p>这就让这个表达式显得不够纯粹，这时候我们就说它具有 <strong>副作用</strong></p>\n<h2 id=\"_4-不能终结的解析\"> 4. 不能终结的解析</h2>\n<p>所谓的不能终结的解析就是指的一个函数返回它自身；</p>\n<p>例如：</p>\n<div><pre><code><span>def</span> loop<span>(</span>x<span>:</span> <span>Int</span><span>)</span> <span>=</span> loop\n</code></pre>\n<div><span>1</span><br></div></div><p>这个函数的解析永远也不会完成，这是因为我们如果使用代换模型对其进行解析的话，会发现，它的解析结果一直是其自身；</p>\n<p>所以，对它的解析会一直进行下去，无法完成。</p>\n<h2 id=\"_5-参数解析\"> 5. 参数解析</h2>\n<p>Scala 有两种参数解析方式，不像其他的指令性语言只有一种解析方式；</p>\n<p>其中的一种叫传值调用(call-by-value)，另一种叫传名调用(call-by-name)。</p>\n<h3 id=\"_5-1-传值调用-call-by-value\"> 5.1 传值调用(call-by-value)</h3>\n<p>这是 Scala 的默认的参数解析方式，也是其他指令性语言常用的参数解析方式。</p>\n<p>主要的解析步骤如下：</p>\n<ol>\n<li>将传入参数的表达式解析为值</li>\n<li>将函数使用函数体进行替换</li>\n<li>将函数的形参替换为第一步中得到的实参</li>\n</ol>\n<p>例如：</p>\n<div><pre><code><span>def</span> square<span>(</span>x<span>:</span> <span>Int</span><span>)</span> <span>=</span> x <span>*</span> x\n\nsquare<span>(</span><span>2</span> <span>+</span> <span>2</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>对于上面的代码，解析步骤如下：</p>\n<ol>\n<li>将 <code>2 + 2</code> 进行计算，得到它的值 <code>4</code></li>\n<li>将 <code>square</code> 使用它的函数体进行替换，得到 <code>x * x</code></li>\n<li>将 <code>x</code> 代换为 <code>4</code></li>\n<li>计算出结果 <code>16</code></li>\n</ol>\n<h3 id=\"_5-2-传名调用-call-by-name\"> 5.2 传名调用(call-by-name)</h3>\n<p>这是 Scala 的另一种参数解析方式，也是其他指令性语言不具备的。</p>\n<p>只要在定义参数时，使用 <code>=&gt;</code> 就可以定义传名调用的参数</p>\n<div><pre><code><span>def</span> square<span>(</span>x<span>:</span> <span>=></span> <span>Int</span><span>)</span> <span>=</span> x <span>*</span> x\n</code></pre>\n<div><span>1</span><br></div></div><p>主要的解析步骤如下：</p>\n<ol>\n<li>将函数名替换为函数体</li>\n<li>直接将参数的表达式代入形参</li>\n<li>对得到的表达式进行解析和计算，得出结果</li>\n</ol>\n<p>还是使用上面的例子，解析步骤如下：</p>\n<ol>\n<li>将 <code>square</code>  替换为 <code>x * x</code></li>\n<li>将 <code>2 + 2</code> 代入 <code>x</code>  中</li>\n<li>对得到的式子 <code>(2 + 2) * (2 + 2)</code> 进行代换模型的计算</li>\n<li>得到结果 <code>16</code></li>\n</ol>\n<h3 id=\"_5-3-区别\"> 5.3 区别</h3>\n<p>那么这两种计算结果有什么区别呢？</p>\n<p>首先，传名调用具有懒加载的功能，直到参数 <strong>被使用</strong> 的时候，才进行参数表达式的解析；</p>\n<p>例如：</p>\n<div><pre><code><span>def</span> first<span>(</span>x<span>:</span> <span>Int</span><span>,</span> y<span>:</span> <span>Int</span><span>)</span> <span>=</span> x\n\n<span>def</span> first<span>(</span>x<span>:</span> <span>=></span> <span>Int</span><span>,</span> y<span>:</span> <span>=></span> <span>Int</span><span>)</span> <span>=</span> x\n\nfirst<span>(</span><span>2</span> <span>*</span> <span>2</span><span>,</span> <span>4</span> <span>*</span> <span>4</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>此时，我们忽略了第二个参数，对于传名调用来说，它不需要解析 <code>y</code> 这个参数，只需要将它传入函数体即可；</p>\n<p>而对于传值调用，则需要先解析出 <code>x</code>  和 <code>y</code> 的值，即使 <code>y</code> 的值不会在函数体内使用到。</p>\n<p>其次，传名调用可以避免无限循环问题；</p>\n<p>对于上面的例子来说，我们可以这么调用：</p>\n<div><pre><code>first(1, loop)\n</code></pre>\n<div><span>1</span><br></div></div><p>对于传名调用来说，由于它是直接传入函数体，然后，函数体并没有使用 <code>y</code> 这个参数；</p>\n<p>此时，我们就避免了对 <code>loop</code> 的解析工作；</p>\n<p>但是对于传值调用则不然，我们还是要对 <code>loop</code> 进行解析，从而出现无限循环问题。</p>\n<h3 id=\"_5-4-默认传值调用的原因\"> 5.4 默认传值调用的原因</h3>\n<p>既然传名调用具有那么多的好处，但是为什么还要默认使用传值调用呢？</p>\n<p>这是因为传值调用在具体实践过程中，比传名调用的执行要快；</p>\n<p>其次，由于 Scala 并不是纯函数式语言，实际上，它的函数还是允许有副作用的；</p>\n<p>并且同时还要支持和 Java 的互调用，而 Java 是指令式语言，采用传值调用显然会更好些。</p>\n",
      "date_published": "2017-03-22T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Scala"
      ]
    },
    {
      "title": "Scala 模式匹配",
      "url": "https://wafer.li/blog-corners/langroad/Scala/Scala%20%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/",
      "id": "https://wafer.li/blog-corners/langroad/Scala/Scala%20%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/",
      "summary": "<p>模式匹配，是 Scala 相比 Java 在类型上的一个很好地改进；</p>\n<p>通过引入模式匹配，消除了 Java 中常见的类型检测和强制转换(cast)；</p>\n<p>拥有更高的安全性</p>\n",
      "content_html": "<p>模式匹配，是 Scala 相比 Java 在类型上的一个很好地改进；</p>\n<p>通过引入模式匹配，消除了 Java 中常见的类型检测和强制转换(cast)；</p>\n<p>拥有更高的安全性</p>\n\n<h2 id=\"_1-问题背景\"> 1. 问题背景</h2>\n<p>模式匹配主要解决的问题就是一个树状的类型依赖图；</p>\n<p>比如算数表达式，由文法可知，它是具有树状依赖关系的：</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:10.500000000000004em;vertical-align:-5.000000000000002em;\"></span><span><span><span><span><span><span style=\"height:5.500000000000001em;\"><span style=\"top:-7.660000000000001em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.05764em;\">E</span></span></span><span style=\"top:-6.16em;\"><span style=\"height:3em;\"></span><span></span></span><span style=\"top:-4.659999999999999em;\"><span style=\"height:3em;\"></span><span></span></span><span style=\"top:-3.1599999999999993em;\"><span style=\"height:3em;\"></span><span></span></span><span style=\"top:-1.6599999999999993em;\"><span style=\"height:3em;\"></span><span></span></span><span style=\"top:-0.15999999999999837em;\"><span style=\"height:3em;\"></span><span></span></span><span style=\"top:1.3400000000000016em;\"><span style=\"height:3em;\"></span><span></span></span></span><span>​</span></span><span><span style=\"height:5.000000000000002em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:5.500000000000001em;\"><span style=\"top:-7.660000000000001em;\"><span style=\"height:3em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>→</span></span></span><span style=\"top:-6.16em;\"><span style=\"height:3em;\"></span><span><span></span><span style=\"margin-right:0.05764em;\">E</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.05764em;\">E</span><span> </span><span>∣</span></span></span><span style=\"top:-4.659999999999999em;\"><span style=\"height:3em;\"></span><span><span></span><span style=\"margin-right:0.05764em;\">E</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.05764em;\">E</span><span> </span><span>∣</span></span></span><span style=\"top:-3.1599999999999993em;\"><span style=\"height:3em;\"></span><span><span></span><span style=\"margin-right:0.05764em;\">E</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∗</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.05764em;\">E</span><span> </span><span>∣</span></span></span><span style=\"top:-1.6599999999999993em;\"><span style=\"height:3em;\"></span><span><span></span><span style=\"margin-right:0.05764em;\">E</span><span>/</span><span style=\"margin-right:0.05764em;\">E</span><span> </span><span>∣</span></span></span><span style=\"top:-0.15999999999999837em;\"><span style=\"height:3em;\"></span><span><span></span><span>(</span><span style=\"margin-right:0.05764em;\">E</span><span>)</span><span> </span><span>∣</span></span></span><span style=\"top:1.3400000000000016em;\"><span style=\"height:3em;\"></span><span><span></span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:5.000000000000002em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>所以，我们可以使用如下的类来表示一个算术表达式：</p>\n<div><pre><code><span>trait</span> Expr\n<span>class</span> Number<span>(</span>n<span>:</span> <span>Int</span><span>)</span> <span>extends</span> Expr\n<span>class</span> Sum<span>(</span>leftOp<span>:</span> Expr<span>,</span> rightOp<span>:</span> Expr<span>)</span> <span>extends</span> Expr\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>那么当我们需要使用类似 <code>eval()</code> 的方法时，该如何实现这个方法呢？</p>\n<h2 id=\"_2-各有缺陷的解法\"> 2. 各有缺陷的解法</h2>\n<h3 id=\"_2-1-使用类型说明\"> 2.1 使用类型说明</h3>\n<p>一个暴力解决的思路就是为 <code>Expr</code> 添加上一个类型的说明，即：</p>\n<div><pre><code><span>trait</span> Expr <span>{</span>\n    <span>def</span> isNumber<span>:</span> <span>Boolean</span>\n    <span>def</span> isSum<span>:</span> <span>Boolean</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>不过，随着以后算术表达式的种类越来越多，比如加入了乘法和除法；</p>\n<p>那么，这个实现会导致方法数的平方级别爆炸。</p>\n<blockquote>\n<p>每增加一个种类，都需要对现有的所有类进行方法的增加</p>\n</blockquote>\n<p>显然，使用类型说明(classification) 是不行的。</p>\n<h3 id=\"_2-2-类型检测和造型\"> 2.2 类型检测和造型</h3>\n<p>Java 这门面向对象语言对此则有比较好的解法：</p>\n<p>通过对对象进行类型检测和强制转换(cast)；</p>\n<p>由于强制转换后类型得到限定，所以就可以分别进行检测工作：</p>\n<div><pre><code><span>public</span> <span>int</span> <span>eval</span><span>(</span><span>Expr</span> e<span>)</span> <span>{</span>\n    <span>if</span> <span>(</span>e <span>instanceof</span> <span>Number</span><span>)</span> <span>{</span>\n        <span>.</span><span>.</span><span>.</span>\n    <span>}</span>\n    <span>else</span> <span>if</span> <span>(</span>e <span>instanceof</span> <span>Sum</span><span>)</span> <span>{</span>\n        <span>.</span><span>.</span><span>.</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>相对的，Scala 也具有这种语法特性：</p>\n<div><pre><code><span>def</span> eval<span>(</span>e<span>:</span> Expr<span>)</span><span>:</span> <span>Int</span> <span>=</span> <span>{</span>\n    <span>if</span> <span>(</span>e<span>.</span>isInstanceOf<span>[</span>Number<span>]</span><span>)</span> <span>{</span>\n        e<span>.</span>asInstanceOf<span>[</span>Number<span>]</span><span>.</span>numberValue\n    <span>}</span>\n    <span>else</span> <span>if</span> <span>(</span>e<span>.</span>isInstanceOf<span>[</span>Sum<span>]</span><span>)</span> <span>{</span>\n        <span>val</span> sum <span>=</span> e<span>.</span>asInstanceOf<span>[</span>Sum<span>]</span>\n        eval<span>(</span>sum<span>.</span>leftOp<span>)</span> <span>+</span> eval<span>(</span>sum<span>.</span>rightOp<span>)</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>不过，这种方法由于是比较低层级的，具有指令性特征；</p>\n<p>同时，过多的类型检测和强制转换也造成了诸多不安全因素：</p>\n<p>如果运行时类型改变了，那么很可能会出现异常。</p>\n<h3 id=\"_2-3-面向对象的解法\"> 2.3 面向对象的解法</h3>\n<p>现在我们来选择一个更高级的解决办法，通过利用多态特性，来解决此类问题。</p>\n<p>相比将 <code>eval()</code> 作为一个外部的函数，不如将其作为类的一个内部方法：</p>\n<div><pre><code><span>trait</span> Expr <span>{</span>\n    <span>def</span> eval<span>:</span> <span>Int</span>\n<span>}</span>\n\n<span>class</span> Number<span>(</span>n<span>:</span> <span>Int</span><span>)</span> <span>extends</span> Expr <span>{</span>\n    <span>override</span> <span>def</span> eval<span>:</span> <span>Int</span> <span>=</span> n\n<span>}</span>\n\n<span>class</span> Sum<span>(</span>leftOp<span>:</span> Expr<span>,</span> rightOp<span>:</span> Expr<span>)</span> <span>extends</span> Expr <span>{</span>\n    <span>override</span> <span>def</span> eval<span>:</span> <span>Int</span> <span>=</span> leftOp<span>.</span>eval <span>+</span> rightOp<span>.</span>eval\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>通过语言自带的多态特性，我们可以使用到具体的 <code>eval()</code>；</p>\n<p>这样就能很优雅的解决上面的问题；</p>\n<p>不过，这种写法有个缺陷；</p>\n<p>如果我们需要添加一个新的方法，例如 <code>show()</code>，则需要更改所有的现存类；</p>\n<p>而且，如果我们需要一个化简操作，它不能仅仅只考虑一个节点，而需要多个节点综合考虑；</p>\n<p>这样，我们可以发现，即使使用多态，也没能解决我们所有的问题</p>\n<h2 id=\"_3-模式匹配\"> 3. 模式匹配</h2>\n<p>在 Scala 中，具有一个很常用的语法用于解决这类问题，即 <strong>模式匹配</strong>；</p>\n<p>模式匹配使用 <code>match</code> 定义：</p>\n<div><pre><code>e <span>match</span> <span>{</span>\n    <span>case</span> Number<span>(</span>n<span>)</span> <span>=></span> n\n    <span>case</span> Sum<span>(</span>left<span>,</span> right<span>)</span> <span>=></span> left<span>.</span>eval <span>+</span> right<span>.</span>eval\n    <span>case</span> anotherE <span>=></span> anotherE<span>.</span>eval\n    <span>case</span> _ <span>=></span> <span>//Ignore</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p><code>match</code> 语句块中，包含多个 <code>case</code>  语句；</p>\n<p>每个 <code>case</code> 语句包括：<code>case</code> 关键字，模式和表达式，模式和表达式使用 <code>=&gt;</code> 分隔。</p>\n<p>乍一看，这个语法和 C++/Java 中的 <code>switch</code> 很像；</p>\n<p>不过，它进行了大幅度的强化，主要就是放宽了对选择器的限制：</p>\n<p>现在 <code>case</code> 语句可以是：</p>\n<ol>\n<li>构造器</li>\n<li>变量</li>\n<li>常量</li>\n<li>通配符 <code>_</code></li>\n</ol>\n<p>其中：</p>\n<ul>\n<li>构造器必须是 <code>case class</code></li>\n<li>变量必须以小写字母开头</li>\n<li>常量必须以大写字母开头</li>\n</ul>\n<h2 id=\"_4-匹配处理\"> 4. 匹配处理</h2>\n<p>首先，如果没有 <code>case</code> 能够匹配选择器，则会抛出异常。</p>\n<p>然后，如果匹配成功，会将 <strong>整个 <code>match</code> 语句</strong> 替换为 <code>case</code> 的 right-hand side。</p>\n<p>对于不同的情况，则是：</p>\n<ul>\n<li>构造器，将参数绑定 <code>case</code> 中的形参</li>\n<li>变量，对变量进行赋值</li>\n<li>常量，检测和常量的相等性</li>\n</ul>\n<h2 id=\"_5-case-class\"> 5. Case Class</h2>\n<p>Case Class 是一种特殊的类，通常用于进行模式匹配；</p>\n<p>但是，它还具有一些其他的有用特性：</p>\n<p>它不需要 <code>new</code> 关键字进行构建：</p>\n<div><pre><code><span>case</span> Person<span>(</span>name<span>:</span> <span>String</span><span>,</span> age<span>:</span> <span>Int</span><span>)</span>\n\n<span>val</span> person <span>=</span> Person<span>(</span><span>\"hehe\"</span><span>,</span> <span>18</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>它的主要构造器参数直接可以作为类的字段：</p>\n<div><pre><code><span>val</span> name <span>=</span> person<span>.</span>name\n</code></pre>\n<div><span>1</span><br></div></div><p>它的相等性判断是结构化的，当它所有的成员都相等时，它就相等，和引用无关；</p>\n<p>同时还提供了 <code>toString()</code> 方法：</p>\n<div><pre><code><span>val</span> firstSms <span>=</span> SMS<span>(</span><span>\"12345\"</span><span>,</span> <span>\"Hello!\"</span><span>)</span>\n<span>val</span> secondSms <span>=</span> SMS<span>(</span><span>\"12345\"</span><span>,</span> <span>\"Hello!\"</span><span>)</span>\n\n<span>if</span> <span>(</span>firstSms <span>==</span> secondSms<span>)</span> <span>{</span>\n  println<span>(</span><span>\"They are equal!\"</span><span>)</span>\n<span>}</span>\n\nprintln<span>(</span><span>\"SMS is: \"</span> <span>+</span> firstSms<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>输出：</p>\n<div><pre><code>They are equal<span>!</span>\nSMS is: SMS<span>(</span><span>12345</span>, Hello<span>!</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h2 id=\"_6-模式匹配的解决办法\"> 6. 模式匹配的解决办法</h2>\n<p>使用模式匹配，我们不仅可以对单个节点进行解析工作；</p>\n<p>同时，我们还可以查看节点之间的关系：</p>\n<div><pre><code><span>trait</span> Expr <span>{</span>\n  <span>def</span> eval<span>:</span> <span>Int</span> <span>=</span> <span>this</span> <span>match</span> <span>{</span>\n    <span>case</span> Number<span>(</span>n<span>)</span> <span>=></span> n\n    <span>case</span> Sum<span>(</span>left<span>,</span> right<span>)</span> <span>=></span> left<span>.</span>eval <span>+</span> right<span>.</span>eval\n  <span>}</span>\n\n  <span>def</span> show<span>:</span> <span>String</span> <span>=</span> <span>this</span> <span>match</span> <span>{</span>\n    <span>case</span> Number<span>(</span>n<span>)</span> <span>=></span> n<span>.</span>toString\n    <span>case</span> Sum<span>(</span>left<span>,</span> right<span>)</span> <span>=></span> left<span>.</span>show <span>+</span> <span>\"+\"</span> <span>+</span> right<span>.</span>show\n    <span>case</span> Prod<span>(</span>left<span>,</span> right<span>)</span> <span>=></span>\n      <span>def</span> f<span>(</span>e<span>:</span> Expr<span>)</span><span>:</span> <span>String</span> <span>=</span> e <span>match</span> <span>{</span>\n        <span>case</span> Sum<span>(</span>l<span>,</span> r<span>)</span> <span>=></span> <span>\"(\"</span> <span>+</span> l<span>.</span>show <span>+</span> <span>\"+\"</span> <span>+</span> r<span>.</span>show <span>+</span> <span>\")\"</span>\n        <span>case</span> _ <span>=></span> e<span>.</span>show\n      <span>}</span>\n\n      f<span>(</span>left<span>)</span> <span>+</span> <span>\"*\"</span> <span>+</span> f<span>(</span>right<span>)</span>\n    <span>case</span> Var<span>(</span>x<span>)</span> <span>=></span> x\n  <span>}</span>\n\n<span>}</span>\n\n<span>case</span> <span>class</span> Number<span>(</span>n<span>:</span> <span>Int</span><span>)</span> <span>extends</span> Expr\n\n<span>case</span> <span>class</span> Sum<span>(</span>left<span>:</span> Expr<span>,</span> right<span>:</span> Expr<span>)</span> <span>extends</span> Expr\n\n<span>case</span> <span>class</span> Var<span>(</span>x<span>:</span> <span>String</span><span>)</span> <span>extends</span> Expr\n\n<span>case</span> <span>class</span> Prod<span>(</span>left<span>:</span> Expr<span>,</span> right<span>:</span> Expr<span>)</span> <span>extends</span> Expr\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div><p>上面的 <code>show</code> 方法通过查看子节点情况，实现了优先级区分:</p>\n<p><img src=\"https://ww1.sinaimg.cn/large/006tNc79ly1fenynuh6prj316g09g763.jpg\" alt=\"\" /></p>\n<h2 id=\"_7-和多态方法的区别\"> 7. 和多态方法的区别</h2>\n<p>那么模式匹配相比面向对象方法有什么优势呢？</p>\n<p>如果你倾向于在现有的类架构上添加 <strong>通用的方法</strong>，那么采用模式匹配会更好；</p>\n<p>因为模式匹配只需要修改匹配代码，而不需要在各个子类重新实现方法。</p>\n<p>但是，如果你倾向于增加子类，而不是增加通用的处理方法，那么采用多态方法会更好；</p>\n<p>原因是采用多态架构只需要建立一个子类，而重载方法这些繁琐工作 IDE 会帮你做好；</p>\n<p>而模式匹配还需要在顶层代码中进行修改</p>\n",
      "image": "https://ww1.sinaimg.cn/large/006tNc79ly1fenynuh6prj316g09g763.jpg",
      "date_published": "2021-07-15T11:52:03.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Scala"
      ]
    },
    {
      "title": "Scala 泛型和变形",
      "url": "https://wafer.li/blog-corners/langroad/Scala/Scala%20%E6%B3%9B%E5%9E%8B%E5%92%8C%E5%8F%98%E5%BD%A2/",
      "id": "https://wafer.li/blog-corners/langroad/Scala/Scala%20%E6%B3%9B%E5%9E%8B%E5%92%8C%E5%8F%98%E5%BD%A2/",
      "summary": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>泛型是多态的一个重要组成部分，通过运行时确定的类型来加载对应的类代码；</p>\n<p>作为一个面向对象语言，Scala 同样具有泛型功能。</p>\n",
      "content_html": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>泛型是多态的一个重要组成部分，通过运行时确定的类型来加载对应的类代码；</p>\n<p>作为一个面向对象语言，Scala 同样具有泛型功能。</p>\n\n<h2 id=\"_2-定义\"> 2. 定义</h2>\n<p>与 Java 不同，Scala 的泛型是使用方括号 <code>[]</code> 定义的：</p>\n<div><pre><code><span>class</span> List<span>[</span>T<span>]</span> <span>{</span> <span>.</span><span>.</span><span>.</span> <span>}</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>同样，在泛型方法的定义中，泛型参数的位置也和 Java 不一样：</p>\n<p>Java:</p>\n<div><pre><code><span>public</span> <span>static</span> <span><span>&lt;</span><span>T</span><span>></span></span> <span>listOf</span><span>(</span><span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>Scala:</p>\n<div><pre><code><span>def</span> listOf<span>[</span>T<span>]</span><span>(</span><span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"_3-上界和下界\"> 3. 上界和下界</h2>\n<p>这个方面，Scala 和 Java 有些许不同；</p>\n<p>首先，在定义方面，Scala 使用两个特殊的符号表示上下界：</p>\n<p><code>A &lt;: B</code> 表示 A 是 B 的子类，也就是 B 是 A 的上界；</p>\n<p><code>A &gt;: B</code> 表示 A 是 B 的超类，也就是 B 是 A 的下界。</p>\n<p>而 Java 使用 <code>extends</code> 关键字来说明。</p>\n<p>其次，Scala 中，可以使用超类限定类型参数；</p>\n<p>而 Java 只能使用 <code>extends</code> 即子类限定类型参数：</p>\n<div><pre><code>// Scala\n[U &gt;: T]\n\n// Java\nU super T // ERROR!\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id=\"_4-逆变和协变\"> 4. 逆变和协变</h2>\n<p>关于逆变和协变，Scala 相比于 Java 中的 <strong>使用声明</strong>，还可以在定义中指明协变和逆变。</p>\n<h3 id=\"_4-1-名词解释\"> 4.1 名词解释</h3>\n<p>如果 <code>A &lt;: B</code> (A 是 B 的子类)，那么对于类 <code>C</code> 来说：</p>\n<ol>\n<li><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.07153em;\">C</span><span>[</span><span>A</span><span>]</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>&lt;:</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.07153em;\">C</span><span>[</span><span style=\"margin-right:0.05017em;\">B</span><span>]</span></span></span></span> =&gt; C 是协变(covariant)的</li>\n<li><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.07153em;\">C</span><span>[</span><span>A</span><span>]</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>&gt;:</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.07153em;\">C</span><span>[</span><span style=\"margin-right:0.05017em;\">B</span><span>]</span></span></span></span> =&gt; C 是逆变(contravariant)的</li>\n<li><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.07153em;\">C</span><span>[</span><span>A</span><span>]</span></span></span></span> 和 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.07153em;\">C</span><span>[</span><span style=\"margin-right:0.05017em;\">B</span><span>]</span></span></span></span> 没有继承关系 =&gt;  C 是不变(nonvariant) 的</li>\n</ol>\n<p>对 Java 而言，<code>? extends T</code> 提供了协变特性；</p>\n<p><code>? super T</code> 提供了逆变特性</p>\n<h3 id=\"_4-2-定义中指明可变性\"> 4.2 定义中指明可变性</h3>\n<p>这是 Scala 和 Kotlin 中相对于 Java 的一个改进，可以在 <strong>类定义</strong> 中指明泛型可变性。</p>\n<div><pre><code>// Scala\nclass List[+T]\n\n// Kotlin\nclass List&lt;out T&gt;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>此时，指明了 <code>List</code> 是 <strong>协变的</strong>，也就是说，<code>List[String]</code> 是 <code>List[Object]</code> 的子类。</p>\n<p>同理，下面的写法指明了逆变性：</p>\n<div><pre><code>// Scala\nclass List[-T]\n\n// Kotlin\nclass List&lt;in T&gt;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>当不使用 <code>+</code>、<code>-</code> 号修饰时，就是不变(nonvariant)的</p>\n<h3 id=\"_4-3-函数\"> 4.3 函数</h3>\n<p>事实上，在 Scala 中，函数也是一个对象；</p>\n<p><code>def</code> 语句声明的函数会被转化成一个 <code>FunctionN&lt;-T, +U&gt;</code> 类：</p>\n<div><pre><code><span>class</span> Function1<span>[</span><span>-</span>T<span>,</span> <span>+</span>U<span>]</span> <span>{</span>\n    <span>def</span> apply<span>(</span>param<span>:</span> T<span>)</span><span>:</span> U\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>通过 <code>apply</code> 函数来进行函数的调用。</p>\n<p>我们可以看到，函数参数是逆变的，但是返回类型是协变的；</p>\n<p>这是为什么呢？</p>\n<p>实际上，这是里氏法则的应用：</p>\n<p>如果 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>&lt;:</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 且 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>&lt;:</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>，那么对于 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>⇒</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 和 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>⇒</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 来说：</p>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 所接受的范围比 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 广，所以使用 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 作为参数，可以接受 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>；</p>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 比 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 要更加严格，所以返回 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 就相当于肯定能返回 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>；</p>\n<p>此时，因为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>⇒</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 的形参和返回值都满足 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>⇒</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 的要求；</p>\n<p>我们就可以使用前者替代后者，也就是说，此时：</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>⇒</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>&lt;:</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>⇒</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<p>那么说明， <strong>函数形参是逆变的，而返回值是协变的</strong></p>\n<p>Scala 会自动检查函数的泛型变形，以满足上面的要求。</p>\n<h3 id=\"_4-4-协变的函数形参\"> 4.4 协变的函数形参</h3>\n<p>函数上面的变形要求是为了保证数据的一致性；</p>\n<p>如果你的函数不进行数据的更改操作，那么事实上是可以将形参声明为协变的；</p>\n<p>不过，鉴于 Scala 的泛型检查，它禁止了这种方法的出现；</p>\n<p>此时，我们可以使用泛型下界，来让我们的变形满足 Scala 的要求：</p>\n<div><pre><code><span>def</span> concat<span>[</span>U <span>></span><span>:</span> T<span>]</span><span>(</span>elem<span>:</span> U<span>)</span><span>:</span> List<span>[</span>U<span>]</span> <span>=</span> <span>new</span> Cons<span>(</span>elem<span>,</span> Empty<span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div>",
      "date_published": "2017-04-08T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Scala"
      ]
    },
    {
      "title": "Scala 简介",
      "url": "https://wafer.li/blog-corners/langroad/Scala/Scala%20%E7%AE%80%E4%BB%8B/",
      "id": "https://wafer.li/blog-corners/langroad/Scala/Scala%20%E7%AE%80%E4%BB%8B/",
      "summary": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>Scala 是高层级的，函数式，基于 JVM，完美调用 Java 的编程语言。\n其主要特点就是它是一门函数式语言。</p>\n<p>语法上，Kotlin 借鉴了其大部分的语法，所以体现出和 Kotlin 非常相似的特征。</p>\n<p>同时，由于基于 JVM，所以类型系统和 Java 没有多大区别。</p>\n",
      "content_html": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>Scala 是高层级的，函数式，基于 JVM，完美调用 Java 的编程语言。\n其主要特点就是它是一门函数式语言。</p>\n<p>语法上，Kotlin 借鉴了其大部分的语法，所以体现出和 Kotlin 非常相似的特征。</p>\n<p>同时，由于基于 JVM，所以类型系统和 Java 没有多大区别。</p>\n\n<h2 id=\"_2-什么是函数式语言\"> 2. 什么是函数式语言</h2>\n<p>函数式语言的两大理念：</p>\n<ol>\n<li>函数也是值，可以作为参数，也可以保存在变量中，与其他类型同级</li>\n<li>函数只应该接受参数输入，并输出返回值，不应该具有其他副作用</li>\n</ol>\n<h2 id=\"_3-没有分号\"> 3. 没有分号</h2>\n<p>这里需要说的一个问题是，虽然 Scala 没有分号；</p>\n<p>但是当你写长表达式的时候可能会有问题：</p>\n<div><pre><code>someLongExpression\n<span>+</span> someOtherExpression\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>上面的语句会被隐式加上分号：</p>\n<div><pre><code>someLongExpression<span>;</span>\n<span>+</span> someOtherExpression\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>这样显然是不符合我们的实际意图的，解决办法有两个：</p>\n<ol>\n<li>\n<p>使用括号</p>\n<div><pre><code><span>(</span>someLongExpression\n    <span>+</span> someOtherLongExpression<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div></li>\n<li>\n<p>将操作符放在行尾</p>\n<div><pre><code>someLongExpression <span>+</span>\nsomeOtherExpression\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div></li>\n</ol>\n<p>分号推断的规则为，除非以下情况，否则行尾将会被认为是一个分号：</p>\n<ol>\n<li>\n<p>行尾由一个不能合法作为行尾的字符结束，如句点(<code>.</code>) 和中缀操作符 (<code>+</code>、<code>-</code>)</p>\n</li>\n<li>\n<p>下一行开始于不能作为语句开始的字</p>\n</li>\n<li>\n<p>行结束于括号(<code>()</code>) 和 方括号 (<code>[]</code>) 之中</p>\n<blockquote>\n<p>由于括号中不能容纳多个语句，所以，它之中的行不可能是一个逻辑行</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"_4-面向对象\"> 4. 面向对象</h2>\n<p>Scala 中所有东西都是 <strong>对象</strong>；</p>\n<p>操作符实际上是对象的 <strong>方法</strong></p>\n<h2 id=\"_5-变量定义\"> 5. 变量定义</h2>\n<p>语法上和 Kotlin 无多大差别</p>\n<div><pre><code><span>var</span> x<span>:</span> <span>Int</span> <span>=</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"_6-函数定义\"> 6. 函数定义</h2>\n<div><pre><code><span>def</span> max<span>(</span>x<span>:</span> <span>Int</span><span>,</span> y<span>:</span> <span>Int</span><span>)</span><span>:</span> <span>Int</span> <span>=</span> <span>{</span>\n    <span>if</span> <span>(</span>x <span>></span> y<span>)</span> x\n    <span>else</span> y\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>有趣的是，Scala 中，函数定义需要一个<strong>等号</strong>；</p>\n<p>这意味着，函数实际上是一个 <strong>变量</strong>，而函数体实际上是一个 <strong>返回值的表达式</strong>。</p>\n<p>同时，函数体 <strong>没有 <code>return</code></strong>，这主要是因为函数体是一个 <strong>表达式</strong>，而一个表达式理应返回其计算得到的值。</p>\n<p>这正好体现了函数式编程的思想，函数是一个值，函数体是一个表达式。</p>\n<h2 id=\"_7-使用函数式风格\"> 7. 使用函数式风格</h2>\n<p>Scala 程序员在解决问题时，应该优先考虑函数式风格而非指令式风格。</p>\n<p>简单的判断标准有：</p>\n<ol>\n<li>\n<p>尽量使用 <code>val</code> 解决问题</p>\n<blockquote>\n<p>使用 <code>var</code> 会让你的 编码层级变低，而函数式编程的一个重要作用就是使你的视野聚焦在高层级中。</p>\n</blockquote>\n</li>\n<li>\n<p>尽量避免定义返回 <code>Unit</code> 的函数</p>\n<blockquote>\n<p>函数式编程一个理念就是函数体是表达式，而返回 <code>Unit</code> (Java 中的 <code>void</code>) 的函数一般来说都具有 <strong>副作用</strong> (即函数做了不是生成返回值的工作)</p>\n</blockquote>\n</li>\n</ol>\n",
      "date_published": "2017-04-03T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Scala"
      ]
    },
    {
      "title": "Scala 类和对象基础",
      "url": "https://wafer.li/blog-corners/langroad/Scala/Scala%20%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/",
      "id": "https://wafer.li/blog-corners/langroad/Scala/Scala%20%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/",
      "summary": "<h2 id=\"_1-简介\"> 1. 简介</h2>\n<p>Scala 除了是一门函数式语言外，还同时具有面向对象的特征；</p>\n<p>在 Scala 中，一样具有类和对象以及多态的支持。</p>\n",
      "content_html": "<h2 id=\"_1-简介\"> 1. 简介</h2>\n<p>Scala 除了是一门函数式语言外，还同时具有面向对象的特征；</p>\n<p>在 Scala 中，一样具有类和对象以及多态的支持。</p>\n\n<h2 id=\"_2-构造器\"> 2. 构造器</h2>\n<p>类具有一个默认的 primary 构造器，它的参数直接位于 <code>class</code> 头中；</p>\n<p>而且，更加神奇的是，<code>class</code> 中可以直接执行另外的函数；</p>\n<p>也就是说， <strong>整个类</strong> 都是 primary 构造器。</p>\n<p>对于多个构造器，我们采用如下的声明来实现：</p>\n<div><pre><code><span>class</span> Person<span>(</span><span>val</span> name<span>:</span><span>String</span><span>,</span> <span>val</span> age<span>:</span> <span>Int</span><span>)</span> <span>{</span>\n    <span>def</span> <span>this</span><span>(</span>name<span>:</span> <span>String</span><span>)</span> <span>=</span> <span>this</span><span>(</span>name<span>,</span> <span>17</span><span>)</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>通过直接定义 <code>this</code> 来定义一个新的构造器</p>\n<h2 id=\"_3-定义和创建\"> 3. 定义和创建</h2>\n<p>和 Java 一样，Scala 中，类使用 <code>class</code> 关键字进行定义：</p>\n<div><pre><code><span>class</span> ChecksumAccumulator <span>{</span>\n    <span>// class body</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>不过和 Java 不同的，对象的构建，类没有参数，则不需要括号：</p>\n<div><pre><code><span>new</span> ChecksumAccumulator\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"_4-字段和方法\"> 4. 字段和方法</h2>\n<p>类中，字段使用 <code>val</code> 和 <code>var</code> 定义，方法使用 <code>def</code> 定义。</p>\n<p>注意 <code>def</code> 同样要使用等于号 <code>=</code></p>\n<div><pre><code><span>class</span> ChecksumAccumulator <span>{</span>\n    <span>var</span> sum <span>=</span> <span>0</span>\n    <span>def</span> checkSum<span>(</span><span>)</span><span>:</span> <span>Int</span> <span>=</span> <span>{</span>\n        <span>return</span> <span>~</span><span>(</span>sum <span>+</span> <span>0XFF</span><span>)</span> <span>+</span> <span>1</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>其中，如果方法需要有副作用，则将其返回值声明为 <code>Unit</code></p>\n<div><pre><code><span>def</span> add<span>(</span>b<span>:</span> <span>Int</span><span>)</span><span>:</span> <span>Unit</span> <span>=</span> <span>{</span>\n    sum <span>+=</span> b\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>此时，方法会忽略函数体最后的值类型，转而将其转换为 <code>Unit</code></p>\n<p>如果需要返回 <code>Unit</code>，我们也可以直接省略等于号，使用 Java 中常用的方法声明形式：</p>\n<div><pre><code><span>def</span> add<span>(</span>b<span>:</span> <span>Int</span><span>)</span> <span>{</span>\n    sum <span>+=</span> b\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>如果一个函数或者方法的定义没有等于号，那么默认其返回值类型为 <code>Unit</code>。</p>\n<p>如果需要函数或者方法来推断返回值类型，则需要加上等于号</p>\n<h2 id=\"_5-getter-和-setter\"> 5. Getter 和 Setter</h2>\n<p>很遗憾，Scala 的类成员是字段形式的，所以，不能像 Kotlin 那样采用语法糖式的 getter 和 setter 的写法；</p>\n<p>相比 Java，Scala 在定义字段时，会自动生成字段的 getter 和 setter，他们的命名为：</p>\n<div><pre><code><span>def</span> x<span>:</span>T                      <span>// getter</span>\n<span>def</span> x_<span>=</span> <span>:</span> <span>(</span>y<span>:</span> T<span>)</span><span>:</span> <span>Unit</span>       <span>// setter</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>注意，方法名为 <code>x</code> 和 <code>x_=</code></p>\n<p>那么如何提供自定义的 getter 和 setter 呢？</p>\n<p>我们只能采用后备字段，同时，将我们自定义的 getter 和 setter 满足上面的命名公约：</p>\n<div><pre><code><span>class</span> Person<span>(</span><span>private</span> <span>var</span> _name<span>:</span> <span>String</span><span>)</span> <span>{</span>\n    <span>def</span> name <span>=</span> _name\n    <span>def</span> name_<span>=</span> <span>(</span>thatName<span>:</span> <span>String</span><span>)</span><span>:</span> <span>Unit</span> <span>=</span> <span>{</span>\n        _name <span>=</span> thatName\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>这样，我们就能够像使用属性一样使用 <code>name</code> 了。</p>\n<div><pre><code><span>val</span> p <span>=</span> <span>new</span> Person<span>(</span><span>\"hehe\"</span><span>)</span>\n\np<span>.</span>name <span>=</span> <span>\"nihao\"</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id=\"_6-可见性简述\"> 6. 可见性简述</h2>\n<p>Scala 中，默认的可见性是 <code>public</code>；</p>\n<p>其余的可见性修饰符和 Java 一致。</p>\n<h2 id=\"_7-伴生对象\"> 7. 伴生对象</h2>\n<p>Scala 没有静态成员，但是具有伴生对象(companion object)，是对象(object) 的一种。</p>\n<p>对象是一个 <strong>单例</strong>，当对象和类在同一个文件中定义，具有同样的名称时，称对象是类的伴生对象。</p>\n<p>对象不带参数，不能通过 <code>new</code> 关键字进行构建。</p>\n<p>方法的调用形式和 Java 的静态方法调用相同。</p>\n<div><pre><code><span>object</span> ChecksumAccumulator <span>{</span>\n    <span>private</span> <span>val</span> cache <span>=</span> Map<span>[</span><span>String</span><span>,</span> <span>Int</span><span>]</span><span>(</span><span>)</span>\n    <span>def</span> calculate<span>(</span>s<span>:</span> <span>String</span><span>)</span><span>:</span> <span>Int</span> <span>=</span>\n    <span>if</span> <span>(</span>cache<span>.</span>contains<span>(</span>s<span>)</span><span>)</span>\n        cache<span>(</span>s<span>)</span>\n    <span>else</span> <span>{</span>\n        <span>val</span> acc <span>=</span> <span>new</span> ChecksumAccumulator\n        <span>for</span> <span>(</span>c <span>&lt;-</span> s<span>)</span>\n            acc<span>.</span>add<span>(</span>c<span>.</span>toByte<span>)</span>\n        <span>val</span> cs <span>=</span> acc<span>.</span>checksum<span>(</span><span>)</span>\n        cache <span>+=</span> <span>(</span>s <span>-></span> cs<span>)</span>\n        cs\n     <span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>没有伴生类的对象称为 <strong>孤立对象</strong>，实际上就是一个简单的单例。</p>\n<h2 id=\"_8-类的解析过程\"> 8. 类的解析过程</h2>\n<p>Scala 采用代换模型对表达式进行解析，那么它是如何解析类的定义和声明调用的呢？</p>\n<p>对此，有如下的几个步骤：</p>\n<ol>\n<li>\n<p>将 <code>new</code> 关键字当成普通方法进行代换，最终为值</p>\n</li>\n<li>\n<p>解析类定义中的方法形参</p>\n</li>\n<li>\n<p>解析构造器形参</p>\n</li>\n<li>\n<p>将 <code>this</code> 关键字替换成 <code>new</code> 的表达式</p>\n</li>\n<li>\n<p>将上述解析到的所有值进行代入，函数解析为字面量</p>\n</li>\n<li>\n<p>继续代换，最终得到结果</p>\n</li>\n</ol>\n",
      "date_published": "2017-04-03T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Scala"
      ]
    },
    {
      "title": "Scala List 高阶函数",
      "url": "https://wafer.li/blog-corners/langroad/Scala/Scala-List-%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/",
      "id": "https://wafer.li/blog-corners/langroad/Scala/Scala-List-%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/",
      "summary": "<p>高阶函数是函数式编程的一个很大的特性；</p>\n<p>同时，其中集合类的高阶函数在日常的开发和使用中，占了一个很重要的位置；</p>\n<p>但是，这些函数有可能会在刚接触的时候搞不懂它们的具体作用；</p>\n<p>那么今天就以 <code>List</code> 来说一说常用的高阶函数具体的作用。</p>\n",
      "content_html": "<p>高阶函数是函数式编程的一个很大的特性；</p>\n<p>同时，其中集合类的高阶函数在日常的开发和使用中，占了一个很重要的位置；</p>\n<p>但是，这些函数有可能会在刚接触的时候搞不懂它们的具体作用；</p>\n<p>那么今天就以 <code>List</code> 来说一说常用的高阶函数具体的作用。</p>\n\n<h2 id=\"_1-子集操作\"> 1. 子集操作</h2>\n<p>在一个集合中选取一些特定的元素作为子集；</p>\n<p>我们在指令性语言中，通常选用 <code>for</code> 语句来实现这个需求；</p>\n<p>而在函数式语言中，我们有对应的高阶函数来解决这个问题。</p>\n<h3 id=\"_1-1-filter-p-t-boolean\"> 1.1 <code>filter(p: (T) =&gt; Boolean)</code></h3>\n<p>顾名思义， <strong>过滤器</strong>，用来 <strong>选取符合条件的元素</strong>， 并将其作为返回值；</p>\n<p>这里的 <strong>符合条件</strong> 指的是 使得函数 <code>p</code> 的返回值为 <code>true</code> 的元素。</p>\n<p>例如：</p>\n<div><pre><code><span>val</span> list <span>=</span> List<span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>)</span>\n\nlist<span>.</span>filter<span>(</span><span>(</span>x<span>)</span> <span>=></span> x <span>></span> <span>2</span><span>)</span> <span>// List(3, 4)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"_1-2-filternot-p-t-boolean\"> 1.2 <code>filterNot(p: (T) =&gt; Boolean)</code></h3>\n<p>同理，这个函数是上面的反面，也就是用来 <strong>过滤掉</strong> 符合条件的元素；</p>\n<p>返回的是， <strong>不包含符合元素的子集</strong>；</p>\n<p>例如：</p>\n<div><pre><code><span>val</span> list <span>=</span> List<span>(</span><span>1</span><span>,</span><span>2</span><span>,</span><span>2</span><span>,</span><span>3</span><span>)</span>\n\nlist<span>.</span>filterNot<span>(</span><span>(</span>x<span>)</span> <span>=></span> x <span>==</span> <span>2</span><span>)</span> <span>// List(1, 3)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"_1-3-partition-p-t-boolean\"> 1.3 <code>partition(p: (T) =&gt; Boolean)</code></h3>\n<p>这个函数是上面两个函数的集合体，返回的是一个 <code>Turple</code>，包含的元素为：</p>\n<div><pre><code>(list.filter, list.filterNot)\n</code></pre>\n<div><span>1</span><br></div></div><p>例如：</p>\n<div><pre><code><span>val</span> list <span>=</span> List<span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>,</span> <span>6</span><span>,</span> <span>7</span><span>)</span>\n\n<span>// Returns: (List(1, 2, 3), List(4, 5, 6, 7))</span>\nlist<span>.</span>partition<span>(</span><span>(</span>x<span>)</span> <span>=></span> x <span>&lt;</span> <span>4</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id=\"_1-4-takewhile-p-t-boolean\"> 1.4 <code>takeWhile(p: (T) =&gt; Boolean)</code></h3>\n<p>这个函数会一直选取元素， <strong>直到 <code>p</code> 的返回值为 <code>false</code></strong>，然后将元素作为新的集合返回。</p>\n<p>可以看到，这个函数返回的就是 <strong>符合条件的集合前缀</strong></p>\n<p>例如：</p>\n<div><pre><code><span>val</span> list <span>=</span> List<span>(</span><span>1</span><span>,</span> <span>1</span><span>,</span> <span>1</span><span>,</span> <span>1</span><span>,</span> <span>2</span><span>,</span> <span>1</span><span>)</span>\n\n<span>// 注意最后一个 1 并没有拿走</span>\nlist<span>.</span>takeWhile<span>(</span><span>(</span>x<span>)</span> <span>=></span> x <span>==</span> <span>1</span><span>)</span> <span>// List(1, 1, 1, 1)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id=\"_1-5-dropwhile-p-t-boolean\"> 1.5 <code>dropWhile(p: (T) =&gt; Boolean)</code></h3>\n<p>和上面的方法相反，这个方法会一直 <strong>丢弃</strong> 元素，直到 <code>p</code> 的返回值为 <code>false</code>；</p>\n<p>那么可以看到，这个函数返回的就是 <strong>不符合条件的集合后缀</strong>；</p>\n<div><pre><code><span>val</span> list <span>=</span> List<span>(</span><span>1</span><span>,</span> <span>3</span><span>,</span> <span>6</span><span>,</span> <span>9</span><span>,</span> <span>4</span><span>,</span> <span>2</span><span>,</span> <span>1</span><span>)</span>\n\nlist<span>.</span>dropWhile<span>(</span><span>(</span>x<span>)</span> x <span>!=</span> <span>4</span><span>)</span> <span>// List(4, 2, 1)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"_1-6-span-p-t-boolean\"> 1.6 <code>span(p: (T) =&gt; Boolean)</code></h3>\n<p>这个函数是上两个函数的结合，它返回的是如下的一个 <code>Turple</code>：</p>\n<div><pre><code><span>(</span>list<span>.</span>takeWhile<span>,</span> list<span>.</span>dropWhile<span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_1-7-partition、span-和它们的基本方法的区别\"> 1.7 <code>partition</code>、<code>span</code> 和它们的基本方法的区别</h3>\n<p>既然 <code>partition</code> 和 <code>span</code> 都可以用基本的 <code>filter</code>、<code>filterNot</code> 和 <code>takeWhile</code>、<code>dropWhile</code> 来解决，那为什么还要专门实现一次这两个方法呢？</p>\n<p>其实，<code>span</code> 和 <code>partition</code> 只需要扫描一次集合；</p>\n<p>但是如果使用 <code>filter</code>、<code>filterNot</code> 和 <code>takeWhile</code>、<code>dropWhile</code> 来实现的话，就需要扫描两次集合了。</p>\n<p>所以，如果同时需要两者的数据的话，那么使用 <code>span</code> 和 <code>partition</code> 显然是更经济的。</p>\n<h3 id=\"_1-8-withfilter\"> 1.8 <code>withFilter</code></h3>\n<p>Scala 除了 <code>filter</code> 之外，还提供了一个 <code>withFilter</code> 函数；</p>\n<p>那么，这两者有什么区别呢？</p>\n<p>根据文档：</p>\n<blockquote>\n<p>Note: the difference between <code>c filter p</code> and <code>c withFilter p</code> is that the former creates a new collection, whereas the latter only restricts the domain of subsequent map, flatMap, foreach, and withFilter operations.</p>\n</blockquote>\n<p>也就是说，<code>filter</code> 会返回一个 <strong>新的 <code>List</code></strong>；</p>\n<p>但是 <code>withFilter</code> 不会返回新的 <code>List</code>；</p>\n<p>它只会提供一个过滤器的作用，让符合条件的元素通过，以方便接下来的 <code>map</code> 等其他高阶函数的使用；</p>\n<p>而就效率而言，<code>withFilter</code> 比 <code>filter</code> 要快。</p>\n<p>如果你需要返回一个新的集合，就使用 <code>filter</code>；</p>\n<p>如果你只是需要一个元素过滤器，而接下来，还需要进行其他操作，那么就使用 <code>withFilter</code></p>\n<h2 id=\"_2-元素检查\"> 2. 元素检查</h2>\n<p>有时候，我们会希望检查集合内部的元素状态；</p>\n<p>比如说， <strong>是否所有的元素都满足某个特定条件</strong>；</p>\n<p>或者， <strong>是否有元素满足特定条件</strong>。</p>\n<p>在 Scala 中，我们有高阶函数来进行这个操作。</p>\n<h3 id=\"_2-1-forall-p-t-boolean-boolean\"> 2.1 <code>forAll(p: (T) =&gt; Boolean): Boolean</code></h3>\n<p>顾名思义，检查 <strong>是否所有的元素都满足特定条件</strong></p>\n<p>例如：</p>\n<div><pre><code><span>val</span> list <span>=</span> List<span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>)</span>\n\nlist<span>.</span>forAll<span>(</span>c <span>=></span> c <span>></span> <span>0</span><span>)</span> <span>// true</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"_2-2-exists-p-t-boolean-boolean\"> 2.2 <code>exists(p: (T) =&gt; Boolean): Boolean</code></h3>\n<p>同理，检查 <strong>是否存在满足条件的元素</strong></p>\n<p>例如：</p>\n<div><pre><code><span>val</span> list <span>=</span> List<span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>)</span>\n\nlist<span>.</span>exists<span>(</span>c <span>=></span> c <span>&lt;</span> <span>0</span><span>)</span> <span>// false</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id=\"_3-变换\"> 3. 变换</h2>\n<h3 id=\"_3-1-map-f-t-u\"> 3.1 <code>map(f: (T) =&gt; U)</code></h3>\n<p><code>map</code> 函数，可以说是这里面用的最多的高阶函数了；</p>\n<p><code>map</code> 函数的真正作用，实际上是一种变换功能，而且不仅可以变换成和现元素类型相同的类型，也可以变换成不同的类型；</p>\n<p>也就是说，可以通过 <code>map</code> 函数，将一种元素的集合，变成另一种元素的集合。</p>\n<p>例子：</p>\n<div><pre><code><span>// 将所有元素都乘以 2</span>\n\n<span>val</span> list <span>=</span> List<span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>)</span>\n\nlist<span>.</span>map<span>(</span><span>(</span>x<span>)</span> <span>=></span> x <span>*</span> <span>2</span><span>)</span>  <span>// List(2, 4, 6, 8)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><div><pre><code><span>// 将 Int 变成 String</span>\n\n<span>val</span> list <span>=</span> List<span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>)</span>\n\nlist<span>.</span>map<span>(</span><span>(</span>x<span>)</span> <span>=></span> x<span>.</span>toString<span>(</span><span>)</span><span>)</span>   <span>// List(\"1\", \"2\", \"3\", \"4\")</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id=\"_3-2-flatten\"> 3.2 <code>flatten</code></h3>\n<p>这个函数可以将嵌套的 <code>List</code> 展平，就像它的名字一样。</p>\n<p>例如：</p>\n<div><pre><code><span>val</span> listOfLists <span>=</span> List<span>(</span>List<span>(</span><span>1</span><span>,</span> <span>2</span><span>)</span><span>,</span> List<span>(</span><span>3</span><span>,</span> <span>4</span><span>)</span><span>)</span>\n\nlistOfLists<span>.</span>flatten <span>=</span> List<span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>,</span> <span>6</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"_3-3-flatmap\"> 3.3 <code>flatMap</code></h3>\n<p>它是 <code>map</code> 和 <code>flatten</code> 的集合体，相当于先进行 <code>map</code> 然后 <code>flatten</code>。</p>\n<p>例子：</p>\n<div><pre><code><span>val</span> listOfLists <span>=</span> List<span>(</span>List<span>(</span><span>1</span><span>,</span> <span>2</span><span>)</span><span>,</span> List<span>(</span><span>3</span><span>,</span> <span>4</span><span>)</span><span>)</span>\n\nlistOfLists<span>.</span>flatMap<span>(</span><span>(</span>x<span>)</span> <span>=></span> x<span>.</span>map<span>(</span>_ <span>*</span> <span>2</span><span>)</span><span>)</span> <span>// List(2, 4, 6, 8)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>也就是说，<code>flatMap</code> 先将元素 <code>map</code> 成 <strong>嵌套的</strong> <code>List</code>；</p>\n<p>随后，再调用 <code>flatten</code>，将嵌套的 <code>List</code> 展平</p>\n<blockquote>\n<p><code>flatMap</code> 的作用过于强大，使用时需要小心谨慎\n在 Twitter 的 <em>Effective Scala</em> 中，推荐使用 <em>for-comprehention</em> 来代替 <code>flatMap</code> 的使用</p>\n</blockquote>\n<h3 id=\"_3-4-zip-t-xs-list-u-list-t-u\"> 3.4 <code>zip[T](xs: List[U]): List[(T, U)]</code></h3>\n<p>压缩，它的左右两个操作数分别是 <strong>两个 <code>List</code></strong>；</p>\n<p>然后返回一个分别包含两个 <code>List</code> 元素的二元组的 <code>List</code>。</p>\n<p>例如：</p>\n<div><pre><code><span>val</span> list1 <span>=</span> List<span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>)</span>\n<span>val</span> list2 <span>=</span> List<span>(</span><span>\"a\"</span><span>,</span> <span>\"b\"</span><span>,</span> <span>\"c\"</span><span>,</span> <span>\"d\"</span><span>)</span>\n\n<span>// List((1, \"a\"), (2, \"b\"), (3, \"c\"), (4, \"d\"))</span>\nlist1 zip list2\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id=\"_3-5-unzip\"> 3.5 <code>unzip</code></h3>\n<p>有压缩就有解压；</p>\n<p>这个函数的作用就是将上面压缩后的结果解压出来；</p>\n<p>具体来说就是接受一个二元组的 <code>List</code>， 返回一个 <code>List</code> 的二元组。</p>\n<p>例如：</p>\n<div><pre><code><span>val</span> list1 <span>=</span> List<span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>)</span>\n<span>val</span> list2 <span>=</span> List<span>(</span><span>\"a\"</span><span>,</span> <span>\"b\"</span><span>,</span> <span>\"c\"</span><span>,</span> <span>\"d\"</span><span>)</span>\n\n<span>// (List(1, 2, 3, 4), List(\"a\", \"b\", \"c\", \"d\"))</span>\n<span>(</span>list1 zip list2<span>)</span> unzip\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id=\"_3-6-collect\"> 3.6 <code>collect</code></h3>\n<p>根据文档，<code>collect</code> 接受一个 <code>PartialFunction</code>，然后对集合中的每个元素都 apply 这个函数，返回一个新的集合。</p>\n<p>听起来，这个方法和 <code>map</code> 很像，不过其区别就是在于 <code>collect</code> 接受的是一个 <code>PartialFnction</code> ；</p>\n<p>这具体是什么意思呢？</p>\n<p>我们来举个例子：</p>\n<div><pre><code><span>val</span> convertFn<span>:</span> PartialFunction<span>[</span><span>Any</span><span>,</span> <span>Int</span><span>]</span> <span>=</span> <span>{</span>\n  <span>case</span> i<span>:</span> <span>Int</span> <span>=></span> i<span>;</span>\n  <span>case</span> s<span>:</span> <span>String</span> <span>=></span> s<span>.</span>toInt<span>;</span>\n  <span>case</span> Some<span>(</span>s<span>:</span> <span>String</span><span>)</span> <span>=></span> s<span>.</span>toInt\n<span>}</span>\n\nList<span>(</span><span>0</span><span>,</span> <span>1</span><span>,</span> <span>\"2\"</span><span>,</span> <span>\"3\"</span><span>,</span> Some<span>(</span><span>4</span><span>)</span><span>,</span> Some<span>(</span><span>\"5\"</span><span>)</span><span>)</span><span>.</span>\n  collect<span>(</span>convertFn<span>)</span>\n\n<span>// List[Int] = List(0, 1, 2, 3, 5)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>注意到， <code>collect</code> 的 lambda 中，并没有对所有的 <code>case</code> 都进行处理；</p>\n<p>上面的 <code>List</code> 除了含有 <code>String</code> 、 <code>Int</code> 和 <code>Some[String]</code> 之外，还含有 <code>Some[Int]</code>；</p>\n<p>这就是所谓的 <code>PartialFunction</code> ，它并没有对所有的情形都进行处理，也没有提供一个默认的选项。</p>\n<p>如果上面的 <code>collect</code> 替换为 <code>map</code>，则第四个 <code>Some(4)</code> 就会导致 <code>MatchError</code>；</p>\n<p>而 <code>collect</code> 则避开了这个错误。</p>\n<p>理论上，<code>collect</code> 进行了 <code>map</code> 和 <code>filter</code> 的两重功能。</p>\n<p>虽然，<code>collect</code> 不会造成 <code>MatchError</code>；</p>\n<p>但是 <code>collect</code> 不是使用 <code>try...catch</code> 实现的。</p>\n<p><code>collect</code> 是通过检查函数中提供的 <code>case</code> 检查；</p>\n<p>如果 <code>case</code> 不匹配，则跳过该元素，不调用函数；</p>\n<p>如果 <code>case</code> 中存在 <code>???</code>，那么同样也会抛出异常：</p>\n<div><pre><code>List<span>(</span><span>1</span><span>,</span> <span>\"\"</span><span>)</span><span>.</span>collect<span>(</span>\n  <span>{</span>\n    <span>case</span> i<span>:</span> <span>Int</span> <span>=></span> i<span>;</span>\n    <span>case</span> _ <span>=></span> <span>?</span><span>?</span><span>?</span>\n  <span>}</span>\n<span>)</span>\n\nscala<span>.</span>NotImplementedError<span>:</span> an implementation is missing\n  at scala<span>.</span>Predef$<span>.</span>$qmark$qmark$qmark<span>(</span>Predef<span>.</span>scala<span>:</span><span>225</span><span>)</span>\n  at $anonfun$<span>1.</span>applyOrElse<span>(</span><span><span>&lt;</span>console<span>></span></span><span>:</span><span>8</span><span>)</span>\n  at scala<span>.</span>collection<span>.</span>immutable<span>.</span>List<span>.</span>collect<span>(</span>List<span>.</span>scala<span>:</span><span>303</span><span>)</span>\n  <span>.</span><span>.</span><span>.</span> <span>33</span> elided\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h3 id=\"_3-7-collectfirst\"> 3.7 <code>collectFirst</code></h3>\n<p>这是 <code>collect</code> 的简化版本；</p>\n<p>它只会将函数应用在 <strong>第一个满足</strong> 其 <code>case</code> 的元素中，并返回一个包含该元素的 <code>Option</code> 对象。</p>\n<p>如果不存在这样的函数，那么就返回 <code>None</code></p>\n<h3 id=\"_3-8-groupby-a-f-a-k-map-k-seq-a\"> 3.8 <code>groupBy[A](f: (A) =&gt; K): Map[K, Seq[A]]</code></h3>\n<p><code>groupBy</code> 通过函数 <code>f</code>，将 <code>List</code> 分成不同的部分；</p>\n<p>每一个部分由一个键值 <code>K</code> 来进行映射，最终返回结果为一个 <code>Map</code> 对象。</p>\n<p>例子：</p>\n<div><pre><code><span>val</span> fruit <span>=</span> List<span>(</span><span>\"apple\"</span><span>,</span> <span>\"peer\"</span><span>,</span> <span>\"orange\"</span><span>,</span> <span>\"pineapple\"</span><span>)</span>\n\nfruit groupBy <span>(</span>_<span>.</span>head<span>)</span>\n\n<span>//> Map(p -> List(\"peer\", \"pineapple\"),</span>\n<span>//      a -> List(\"apple\"),</span>\n<span>//      o -> List(\"orange\"))</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id=\"_4-规约\"> 4. 规约</h2>\n<p>在一个集合中，我们通常还会进行规约操作；</p>\n<p>例如求一个 1 到 100 的和；</p>\n<p>那么，此时，我们就是将一个 1 到 100 的集合规约到一个 <code>Int</code>，它是这个集合所有元素的和。</p>\n<p>下面介绍的就是一系列规约函数。</p>\n<h3 id=\"_4-1-reduceleft-op-b-t-b\"> 4.1 <code>reduceLeft(op: (B, T) =&gt; B)</code></h3>\n<p>顾名思义，从左到右进行规约操作；</p>\n<p>该函数会从左到右地使用操作符 <code>op</code> 将元素连接起来。</p>\n<p>注意 <code>op</code> 是个二元操作，它接受两个参数，返回一个值。</p>\n<p>那么产生的结果就是一个 <strong>左斜的树</strong>：</p>\n<p><img src=\"/images/Scala-List-高阶函数/left-tilt-tree.svg\" alt=\"左斜的树\" /></p>\n<p>需要注意的是，<code>reduceLeft</code> 不仅能返回和原有元素相同类型的值，也能返回不同类型的值；</p>\n<p>基于这样的树结构，那么对 <code>op</code> 的类型就有了要求；</p>\n<p>可以看到，在上面，下方的 <code>op</code> 的返回值是作为上方 <code>op</code> 的左节点；</p>\n<p>也就是说，<code>reduceLeft</code> 要求， <strong><code>op</code> 的左边参数的类型，必须和其返回值的类型相同。</strong></p>\n<h3 id=\"_4-2-foldleft-z-b-op-b-t-b\"> 4.2 <code>foldLeft(z: B)(op: (B, T) =&gt; B)</code></h3>\n<p><code>foldLeft</code> 则是对 <code>reduceLeft</code> 的进一步泛化；</p>\n<p><code>reduceLeft</code> 是不允许在 <strong>空列表</strong> 中执行的；</p>\n<p>对此，<code>foldLeft</code> 提供了一个 <strong>初始值</strong> <code>z</code>；</p>\n<p>如果列表为空，那么就返回 <code>z</code>；</p>\n<p>它生成的树如下：</p>\n<p><img src=\"/images/Scala-List-高阶函数/left-tilt-tree-with-z.svg\" alt=\"左斜的树 With Z\" /></p>\n<p>这里比较有意思的就是 <code>foldLeft</code> 实际上是一个 <strong>柯里化函数</strong>；</p>\n<p>可以先提供初始值，然后在 <code>op</code> 操作确定之后，再进行规约运算。</p>\n<h3 id=\"_4-3-reduceright-op-t-b-b\"> 4.3 <code>reduceRight(op: (T, B) =&gt; B)</code></h3>\n<p>我们既然能从左边规约，当然也可以从右边规约；</p>\n<p><code>reduceRight</code> 的作用就是， <strong>从右到左</strong> 执行规约操作；</p>\n<p>那么，它所生成的树就是 <strong>右斜的</strong>：</p>\n<p><img src=\"/images/Scala-List-高阶函数/right-tilt-tree.svg\" alt=\"右斜的树\" /></p>\n<p>同理，<code>reduceRight</code> 要求，它的右操作数的类型必须和它的返回值类型相同。</p>\n<h3 id=\"_4-4-foldright-z-b-op-t-b-b\"> 4.4 <code>foldRight(z: B)(op: (T, B) =&gt; B)</code></h3>\n<p>同样的，我们也具有一个  <code>foldRight</code> 函数，在集合为空时，返回初始值 <code>z</code>；</p>\n<p>它生成的树如下：</p>\n<p><img src=\"/images/Scala-List-高阶函数/right-tilt-tree-with-z.svg\" alt=\"右斜的树 With Z\" /></p>\n<h3 id=\"_4-5-left-和-right-的区别\"> 4.5 <code>left</code> 和 <code>right</code> 的区别</h3>\n<p>那么 <code>left</code> 和 <code>right</code> 有什么区别呢？</p>\n<p>实际上，高阶函数的作用范围都是 <strong>整个列表</strong>；</p>\n<p>所以，对于满足 <strong>交换律</strong> 和 <strong>结合律</strong> 的运算，从左边执行和从右边执行的结果是 <strong>一样的</strong>，例如 <strong>加法操作</strong>；</p>\n<p>但是，对于不满足交换律和结合律的运算，例如 <strong>减法操作</strong>；</p>\n<p>那么这两个函数的执行结果就不一样。</p>\n<h3 id=\"_4-6-其他规约函数\"> 4.6 其他规约函数</h3>\n<p>Scala 还提供了一些其他的针对数字类型的规约函数；</p>\n<p>例如：<code>sum</code>， <code>product</code>，<code>max</code> 和 <code>min</code>；</p>\n<p>不过，<code>sum</code> 和 <code>product</code> 只能用于数字类型，否则会报错。</p>\n<h2 id=\"_5-其他高阶函数\"> 5. 其他高阶函数</h2>\n<p>Scala 集合中还拥有其他的高阶函数，诸如：<code>count</code>、<code>find</code>、<code>sortWith</code> 等；</p>\n<p>这些函数的作用比较明显，可以从它的命名中推测出其作用，在这里就不多做解释了。</p>\n",
      "image": "https://wafer.li/images/Scala-List-高阶函数/left-tilt-tree.svg",
      "date_published": "2021-07-15T11:52:03.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Scala"
      ]
    },
    {
      "title": "语言之路",
      "url": "https://wafer.li/blog-corners/langroad/",
      "id": "https://wafer.li/blog-corners/langroad/",
      "content_html": "<p>我的各种语言的学习笔记，大多数是编程语言，除此之外还有日语。</p>\n",
      "date_published": "2021-07-09T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": []
    },
    {
      "title": "Clean Code",
      "url": "https://wafer.li/blog-corners/learning-notes/Clean%20Code/",
      "id": "https://wafer.li/blog-corners/learning-notes/Clean%20Code/",
      "summary": "<h2 id=\"_1-观点\"> 1. 观点</h2>\n<ol>\n<li>代码混乱的代价十分庞大</li>\n<li>写整洁代码是十分有必要的</li>\n<li>我们是作者，代码是写给别人<strong>看的</strong>，要让人<strong>迅速看懂</strong></li>\n</ol>\n",
      "content_html": "<h2 id=\"_1-观点\"> 1. 观点</h2>\n<ol>\n<li>代码混乱的代价十分庞大</li>\n<li>写整洁代码是十分有必要的</li>\n<li>我们是作者，代码是写给别人<strong>看的</strong>，要让人<strong>迅速看懂</strong></li>\n</ol>\n\n<h2 id=\"_2-有意义的命名\"> 2. 有意义的命名</h2>\n<ol>\n<li>\n<p>命名要体现本意</p>\n<blockquote>\n<p>避免使用<strong>模糊的</strong>名称</p>\n</blockquote>\n</li>\n<li>\n<p>命名要避免误导</p>\n<blockquote>\n<p>不应出现 List 或 Map 等指示变量<strong>类型</strong>的名称。\n简单加个 s 或使用其他表示复数的表示法即可。</p>\n</blockquote>\n</li>\n<li>\n<p>命名要避免废话和冗余</p>\n<blockquote>\n<p><strong>缺乏明确约定的前提下</strong>，不应使用<strong>冠词</strong>和<strong>无意义的后缀</strong>\n如 <code>theMessage</code> 和 <code>message</code></p>\n</blockquote>\n</li>\n<li>\n<p>命名要简单<strong>易读</strong></p>\n<blockquote>\n<p>不要生造词，要使用易读的英文</p>\n</blockquote>\n</li>\n<li>\n<p>命名要<strong>易于搜索</strong></p>\n<blockquote>\n<p><strong>名称长短应与其作用域大小相对应</strong>\n大作用域内，不应直接使用数字常量。</p>\n</blockquote>\n</li>\n<li>\n<p>避免使用匈牙利命名法</p>\n<blockquote>\n<p>命名不应前缀或后缀变量类型</p>\n</blockquote>\n</li>\n<li>\n<p>避免使用成员前缀</p>\n<blockquote>\n<p>在现代 IDE 中，没有必要使用冗余的成员前缀。\n在过多的使用前缀后，前缀将会被越来越多的忽略。</p>\n</blockquote>\n</li>\n<li>\n<p>避免使用接口前导字母</p>\n<blockquote>\n<p>原因和上条相同，只不过这里指的是类一级</p>\n</blockquote>\n</li>\n<li>\n<p>避免产生思维定式</p>\n<blockquote>\n<p>应使用较为直白的命名，而不是生造一些定式单字词</p>\n</blockquote>\n</li>\n<li>\n<p>关于类名</p>\n<blockquote>\n<p>类名是名词或者名词短语。\n类名不应该是动词。</p>\n</blockquote>\n</li>\n<li>\n<p>方法名</p>\n<blockquote>\n<p>方法名是动词或者动词短语。\ngetter, setter 和 assert 应依照 Javabean 标准使用 get, set 和 is 前缀</p>\n</blockquote>\n</li>\n<li>\n<p>别扮可爱</p>\n<blockquote>\n<p>代码是<strong>严肃的，直白的</strong>。\n不应当出现过于幽默或者恶搞的命名</p>\n</blockquote>\n</li>\n<li>\n<p>每个概念对应一个词</p>\n<blockquote>\n<p>对于每个抽象概念取一个词，并确定下来。</p>\n</blockquote>\n</li>\n<li>\n<p>不要使用双关</p>\n<blockquote>\n<p>时刻保证每一个词只会代表一种含义\n如 <code>add</code> 方法用于连接两个现有值产生新值，则将单个值插入 collection 的方法就不能命名为 <code>add</code>，应命名为 <code>insert</code> 或者 <code>append</code></p>\n</blockquote>\n</li>\n<li>\n<p>使用技术性名称</p>\n<blockquote>\n<p>看代码的都是程序员，使用技术性名称会更加靠谱。</p>\n</blockquote>\n</li>\n<li>\n<p>使用源自问题领域的名称</p>\n<blockquote>\n<p>如果<strong>不能使用技术性的名称</strong>，则应使用<strong>源自问题领域的词汇</strong>。</p>\n</blockquote>\n</li>\n<li>\n<p>添加有意义的语境</p>\n<blockquote>\n<p>很少有名称能够自我说明，最好为命名添加语境。\n只有一个变量时，可以为其添加前缀说明语境。\n但同一语境的变量过多时，应<strong>优先选择类作为变量的语境</strong></p>\n</blockquote>\n</li>\n<li>\n<p>不要添加没用的语境</p>\n<blockquote>\n<p>只要短名称足够清楚，就不要使用长名称</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"_3-函数\"> 3. 函数</h2>\n<ol>\n<li>\n<p>函数应<strong>尽可能</strong>短小</p>\n<blockquote>\n<p>最佳的函数逻辑行数应该在<strong>个位数</strong></p>\n</blockquote>\n</li>\n<li>\n<p>函数应该<strong>只做一件事</strong></p>\n<blockquote>\n<p>一个函数应该只做一项工作。\n如果当前函数能够拆分出一个新函数，这说明其依然不够简洁。</p>\n</blockquote>\n</li>\n<li>\n<p>应确保 <code>switch</code> 埋藏在较低的抽象层级，并不重复</p>\n<blockquote>\n<p>很不幸的是， <code>switch</code> 语句没有办法避免。\n所以只能将其尽量地包装起来，不要嵌套过深。</p>\n</blockquote>\n</li>\n<li>\n<p>函数应使用描述性的名称</p>\n<blockquote>\n<p>函数名称总比注释要好</p>\n</blockquote>\n</li>\n<li>\n<p>函数参数应尽量简洁</p>\n<blockquote>\n<p>参数个数越少越好。\n尽量避免输出参数，应从返回值输出。</p>\n</blockquote>\n</li>\n</ol>\n",
      "date_published": "2016-11-18T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": []
    },
    {
      "title": "14. 无向图",
      "url": "https://wafer.li/blog-corners/learning-notes/algorithm-4th-edition/14.%20%E6%97%A0%E5%90%91%E5%9B%BE/",
      "id": "https://wafer.li/blog-corners/learning-notes/algorithm-4th-edition/14.%20%E6%97%A0%E5%90%91%E5%9B%BE/",
      "summary": "<h2 id=\"_14-1-术语\"> 14.1 术语</h2>\n<p>图是由一组<strong>顶点</strong>和将点连接起来的<strong>边</strong>组成的。</p>\n<ol>\n<li>\n<p>相邻：如果两个顶点被至少一条边连接，那么就称顶点<strong>相邻</strong>，并称边<strong>依附于</strong>顶点。</p>\n</li>\n<li>\n<p>顶点的度：依附于它的<strong>边的条数</strong></p>\n</li>\n<li>\n<p>子图：一幅图的子集（包括边和顶点）组成的图</p>\n</li>\n<li>\n<p>路径：由边顺序连接的一组<strong>顶点</strong></p>\n<blockquote>\n<p>其中又分为<strong>简单路径</strong>和<strong>环</strong>：\n<strong>简单路径</strong>：没有重复顶点的路径\n<strong>简单环</strong>：起点和终点必须相同的没有重复顶点和边的环</p>\n</blockquote>\n</li>\n</ol>\n",
      "content_html": "<h2 id=\"_14-1-术语\"> 14.1 术语</h2>\n<p>图是由一组<strong>顶点</strong>和将点连接起来的<strong>边</strong>组成的。</p>\n<ol>\n<li>\n<p>相邻：如果两个顶点被至少一条边连接，那么就称顶点<strong>相邻</strong>，并称边<strong>依附于</strong>顶点。</p>\n</li>\n<li>\n<p>顶点的度：依附于它的<strong>边的条数</strong></p>\n</li>\n<li>\n<p>子图：一幅图的子集（包括边和顶点）组成的图</p>\n</li>\n<li>\n<p>路径：由边顺序连接的一组<strong>顶点</strong></p>\n<blockquote>\n<p>其中又分为<strong>简单路径</strong>和<strong>环</strong>：\n<strong>简单路径</strong>：没有重复顶点的路径\n<strong>简单环</strong>：起点和终点必须相同的没有重复顶点和边的环</p>\n</blockquote>\n</li>\n</ol>\n\n<ol start=\"5\">\n<li>\n<p>连通图：如果从任何一个顶点都存在一条路径到达另一个任意节点，那么称这幅图为<strong>连通图</strong></p>\n<blockquote>\n<p>如果一副<strong>非联通图</strong>由若干个<strong>连通部分</strong>组成，那么这些部分都叫做<strong>极大连通子图</strong></p>\n</blockquote>\n</li>\n<li>\n<p>无环图：就是没有环的图</p>\n<blockquote>\n<p>树是一幅无环连通图</p>\n</blockquote>\n</li>\n<li>\n<p>密度：已经连接的<strong>顶点对</strong>占所有<strong>可能被连接的顶点对</strong>的比例。</p>\n<blockquote>\n<p>这派生出了两个概念，<strong>稀疏图</strong>和<strong>稠密图</strong>。\n一般来说，如果一幅图中不同的边的数量在顶点总数<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.22222em;\">V</span></span></span></span>的一个小常数倍内，那么这幅图就是稀疏的</p>\n</blockquote>\n</li>\n<li>\n<p>二分图：一种能够将所有顶点分成两部分的图，其中每条边都<strong>连着两个不同的顶点</strong></p>\n</li>\n</ol>\n<h2 id=\"_14-2-表示法\"> 14.2 表示法</h2>\n<h3 id=\"_14-2-0-api\"> 14.2.0 API</h3>\n<p>为了解决有关图的问题，下面定义一个图的基本 API</p>\n<div><pre><code><span>public</span> <span>class</span> <span>Graph</span> <span>{</span>\n    <span>public</span> <span>Graph</span><span>(</span><span>int</span> <span>V</span><span>)</span> <span>// Create graph using the Vertex number</span>\n\n    <span>public</span> <span>Graph</span><span>(</span><span>In</span> in<span>)</span> <span>// Create graph from input stream</span>\n\n    <span>public</span> <span>int</span> <span>V</span><span>(</span><span>)</span><span>;</span>      <span>// The number of Vertex</span>\n\n    <span>public</span> <span>int</span> <span>E</span><span>(</span><span>)</span><span>;</span>      <span>// The number of Edge</span>\n\n    <span>// Add edge v-w into graph</span>\n    <span>public</span> <span>void</span> <span>addEdge</span><span>(</span><span>int</span> v<span>,</span> <span>int</span> w<span>)</span><span>;</span>\n\n    <span>// The vertexes adjacent to v</span>\n    <span>public</span> <span>Iterable</span><span><span>&lt;</span><span>Integer</span><span>></span></span> <span>adj</span><span>(</span><span>int</span> v<span>)</span><span>;</span>\n\n    <span>public</span> <span>String</span> <span>toString</span><span>(</span><span>)</span><span>;</span> <span>// The string explanation of graph</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h3 id=\"_14-2-1-邻接矩阵\"> 14.2.1 邻接矩阵</h3>\n<p>使用一个 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span style=\"margin-right:0.22222em;\">V</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.22222em;\">V</span></span></span></span> 的<strong>布尔矩阵</strong>来表示图，当 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span style=\"margin-right:0.03588em;\">v</span></span></span></span> 和 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span style=\"margin-right:0.02691em;\">w</span></span></span></span> 相邻时，将 <code>v</code> 行 <code>w</code> 列的元素标记为 <code>true</code>，否则为 <code>false</code></p>\n<p>这种方法需要 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span><span style=\"margin-right:0.22222em;\">V</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span></span></span></span> 个布尔值的空间，实际上十分耗费存储空间，不实用。</p>\n<p>而且当图具有<strong>平行边</strong>时，邻接矩阵无法准确表示这一结构。</p>\n<h3 id=\"_14-2-2-边的数组\"> 14.2.2 边的数组</h3>\n<p>我们可以定义一个 <code>Edge</code> 类，其中使用两个 <code>int</code> 变量来表示所连接的两个顶点。</p>\n<p>但是这一结构无法实现 <code>adj()</code>，实现它需要检查图中所有的边。</p>\n<h3 id=\"_14-2-3-邻接表数组\"> 14.2.3 邻接表数组</h3>\n<p>我们可以使用一个<strong>以顶点为索引</strong>的列表数组，其中每个元素都是和该顶点相邻的<strong>顶点列表</strong>。</p>\n<p>即，每个数组元素既是一个<strong>顶点</strong>也是一个<strong>链表头</strong>，链表储存着与该顶点（链表头）相邻的<strong>所有顶点</strong>。</p>\n<p><img src=\"https://algs4.cs.princeton.edu/41graph/images/adjacency-lists.png\" alt=\"Adjacent Array\" /></p>\n<p>它可以实现：</p>\n<ol>\n<li>使用的空间和 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span style=\"margin-right:0.22222em;\">V</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05764em;\">E</span></span></span></span> 成正比</li>\n<li>添加一条边所需的时间为常数</li>\n<li>遍历顶点 v 的所有相邻顶点所需要的时间和 v 的度数成正比</li>\n</ol>\n<p>对于这些操作来说，这样的特性已经是最优的了，所以我们选择邻接表来作为图的数据结构</p>\n<p>下面是图的代码实现：</p>\n<div><pre><code><span>public</span> <span>class</span> <span>Graph</span> <span>{</span>\n    <span>private</span> <span>final</span> <span>int</span> <span>V</span><span>;</span>        <span>// Vertex number</span>\n    <span>private</span> <span>int</span> <span>E</span><span>;</span>              <span>// Edge number</span>\n    <span>private</span> <span>Bar</span><span><span>&lt;</span><span>Integer</span><span>></span></span><span>[</span><span>]</span> adj<span>;</span> <span>// adjacent array</span>\n\n    <span>public</span> <span>Graph</span><span>(</span><span>int</span> <span>V</span><span>)</span> <span>{</span>\n        <span><span>this<span>.</span></span>V</span> <span>=</span> <span>V</span><span>;</span>\n        <span><span>this<span>.</span></span>E</span> <span>=</span> <span>0</span><span>;</span>\n        adj <span>=</span> <span>(</span><span>Bag</span><span><span>&lt;</span><span>Integer</span><span>></span></span><span>[</span><span>]</span><span>)</span> <span>new</span> <span>Bag</span><span>[</span><span>V</span><span>]</span><span>;</span>\n        <span>for</span> <span>(</span><span>int</span> v <span>=</span> <span>0</span><span>;</span> v <span>&lt;</span> <span>V</span><span>;</span> v<span>++</span><span>)</span> <span>{</span>\n            adj<span>[</span>v<span>]</span> <span>=</span> <span>new</span> <span>Bag</span><span><span>&lt;</span><span>Integer</span><span>></span></span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n\n    <span>public</span> <span>Graph</span><span>(</span><span>In</span> in<span>)</span> <span>{</span>\n        <span>this</span><span>(</span>in<span>.</span><span>readInt</span><span>(</span><span>)</span><span>)</span><span>;</span>\n        <span>int</span> <span>E</span> <span>=</span> in<span>.</span><span>readInt</span><span>(</span><span>)</span><span>;</span>\n        <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>E</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>\n            <span>// Add Edge</span>\n            <span>int</span> v <span>=</span> in<span>.</span><span>readInt</span><span>(</span><span>)</span><span>;</span>\n            <span>int</span> w <span>=</span> in<span>.</span><span>readInt</span><span>(</span><span>)</span><span>;</span>\n            <span>addEdge</span><span>(</span>v<span>,</span> w<span>)</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n\n    <span>public</span> <span>int</span> <span>V</span><span>(</span><span>)</span> <span>{</span>\n        <span>return</span> <span>V</span><span>;</span>\n    <span>}</span>\n\n    <span>public</span> <span>int</span> <span>E</span><span>(</span><span>)</span> <span>{</span>\n        <span>return</span> <span>E</span><span>;</span>\n    <span>}</span>\n\n    <span>public</span> <span>void</span> <span>addEdge</span><span>(</span><span>int</span> v<span>,</span> <span>int</span> w<span>)</span> <span>{</span>\n        adj<span>[</span>v<span>]</span><span>.</span><span>add</span><span>(</span>w<span>)</span><span>;</span>\n        adj<span>[</span>w<span>]</span><span>.</span><span>add</span><span>(</span>v<span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>public</span> <span>Iterable</span><span><span>&lt;</span><span>Integer</span><span>></span></span> <span>adj</span><span>(</span><span>int</span> v<span>)</span> <span>{</span>\n        <span>return</span> adj<span>[</span>v<span>]</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br></div></div>",
      "image": "https://algs4.cs.princeton.edu/41graph/images/adjacency-lists.png",
      "date_published": "2016-10-14T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "《Algorithm 第四版》笔记"
      ]
    },
    {
      "title": "2-3 树",
      "url": "https://wafer.li/blog-corners/learning-notes/algorithm-4th-edition/2-3%20%E6%A0%91/",
      "id": "https://wafer.li/blog-corners/learning-notes/algorithm-4th-edition/2-3%20%E6%A0%91/",
      "summary": "<h2 id=\"_1-介绍\"> 1.  介绍</h2>\n<p>2-3 树是一种平衡二叉树，具有自动平衡能力</p>\n<p>2-3 树是一种拥有 2 种不同节点的树，称为 2-节点 和 3-节点</p>\n<ol>\n<li>2-节点，拥有<strong>一个键值</strong>和<strong>两个链接</strong>（左子树和右子树），实际上就是普通的二叉搜索树节点</li>\n<li>3-节点，拥有<strong>两个键值</strong>和<strong>三个链接</strong>，左子结点比最小的键值小，右子结点比最大的键值大，中子节点介于两者之间</li>\n</ol>\n<p><img src=\"https://algs4.cs.princeton.edu/33balanced/images/23tree-anatomy.png\" alt=\"2-3 Tree\" /></p>\n",
      "content_html": "<h2 id=\"_1-介绍\"> 1.  介绍</h2>\n<p>2-3 树是一种平衡二叉树，具有自动平衡能力</p>\n<p>2-3 树是一种拥有 2 种不同节点的树，称为 2-节点 和 3-节点</p>\n<ol>\n<li>2-节点，拥有<strong>一个键值</strong>和<strong>两个链接</strong>（左子树和右子树），实际上就是普通的二叉搜索树节点</li>\n<li>3-节点，拥有<strong>两个键值</strong>和<strong>三个链接</strong>，左子结点比最小的键值小，右子结点比最大的键值大，中子节点介于两者之间</li>\n</ol>\n<p><img src=\"https://algs4.cs.princeton.edu/33balanced/images/23tree-anatomy.png\" alt=\"2-3 Tree\" /></p>\n\n<h2 id=\"_2-搜索\"> 2. 搜索</h2>\n<p>2-3 树的搜索和 BST 一样，根据比较结果来进入子树进行搜索。</p>\n<h2 id=\"_3-插入\"> 3. 插入</h2>\n<p>2-3 树的插入稍微有些复杂，我们分情况来讨论。</p>\n<h3 id=\"_3-1-在-2-节点-中插入\"> 3.1 在 2-节点 中插入</h3>\n<p>这是最简单的一种情况，只需<strong>将 2-节点 变为 3-节点</strong>即可。</p>\n<p><img src=\"https://algs4.cs.princeton.edu/33balanced/images/23tree-insert2.png\" alt=\"Insert 2-node\" /></p>\n<h3 id=\"_3-2-在只有-3-节点的树中插入\"> 3.2 在只有 3-节点的树中插入</h3>\n<p>在这种情况下，我们可以构建一个暂时的 4-节点，然后将其<strong>分裂</strong>为<strong>三个 2-节点</strong>。</p>\n<p>这个操作会增加树的高度</p>\n<p><img src=\"https://algs4.cs.princeton.edu/33balanced/images/23tree-insert3a.png\" alt=\"Insert only 3-node\" /></p>\n<h3 id=\"_3-3-在父节点为-2-节点-的-23-节点-插入\"> 3.3 在父节点为 2-节点 的 23-节点 插入</h3>\n<p>这种情况就更加复杂了，此时，我们 <strong>将 3-节点 变为临时的 4-节点，然后将其分裂。</strong></p>\n<p>分裂 4-节点 时，将中间节点向上传递到父节点中，将剩下的两个节点作为 2-节点</p>\n<p><img src=\"https://algs4.cs.princeton.edu/33balanced/images/23tree-insert3b.png\" alt=\"Insert 3-node with the 2-node father\" /></p>\n<h3 id=\"_3-4-在父节点为-3-节点-的-3-节点-插入\"> 3.4 在父节点为 3-节点 的 3-节点 插入</h3>\n<p>这种情况和上一个稍微有点像，我们只需要将 3-节点 替换为临时的 4-节点，然后<strong>将其分裂</strong>。此时<strong>父节点成为 4-节点</strong>，所以我们<strong>递归地</strong>进行分裂操作，直到到达根节点位置。</p>\n<p><strong>如果根节点仍然是 4-节点，那么我们就将根节点分裂，增加树的高度。</strong></p>\n<p><img src=\"https://algs4.cs.princeton.edu/33balanced/images/23tree-split.png\" alt=\"Insert into 3-node with 3-node father and reach root\" /></p>\n<h2 id=\"_4-性能\"> 4. 性能</h2>\n<p>2-3 树能保证 2-节点 的完美平衡，在 BST 中，操作时间复杂度和树的高度成对数关系，所以：</p>\n<p>2-3 树能保证任何的相关操作均在对数级别；</p>\n<p>在最坏情况下，当所有的节点都是 2-节点 时，2-3 树的性能是 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.01968em;\">l</span><span>o</span><span><span style=\"margin-right:0.03588em;\">g</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> 级别；</p>\n<p>在最好情况下，当所有的节点都是 3-节点时，2-3 树的性能是 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.01968em;\">l</span><span>o</span><span><span style=\"margin-right:0.03588em;\">g</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> 级别</p>\n<blockquote>\n<p>在一个 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> 个节点的 2-3 树，搜索和插入只需要访问不超过 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.01968em;\">l</span><span>o</span><span style=\"margin-right:0.03588em;\">g</span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> 个节点。</p>\n</blockquote>\n<h2 id=\"_5-结论\"> 5. 结论</h2>\n<p>2-3 树能保证树在插入时的<strong>完美 2-节点 平衡</strong>，不会出现 BST 的最坏情况。</p>\n<p>然而，2-3 树十分难以实现，在实际工程中，我们需要对代码尽量小的改动，从而达到性能优化的结果。</p>\n",
      "image": "https://algs4.cs.princeton.edu/33balanced/images/23tree-anatomy.png",
      "date_published": "2017-02-21T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "《Algorithm 第四版》笔记"
      ]
    },
    {
      "title": "8 Puzzle",
      "url": "https://wafer.li/blog-corners/learning-notes/algorithm-4th-edition/8%20Puzzle/",
      "id": "https://wafer.li/blog-corners/learning-notes/algorithm-4th-edition/8%20Puzzle/",
      "summary": "<h2 id=\"_1-intro\"> 1. Intro</h2>\n<p>Give a 3-by-3 grid with 8 square blocks and 1 blank.\nRearrange the block to make it in order, using as <strong>few moves</strong> as possible.</p>\n<p>Return the result of sequence. Like this below:</p>\n<div><pre><code>    1  3        1     3        1  2  3        1  2  3        1  2  3\n 4  2  5   =&gt;   4  2  5   =&gt;   4     5   =&gt;   4  5      =&gt;   4  5  6\n 7  8  6        7  8  6        7  8  6        7  8  6        7  8\n<p>initial        1 left          2 up          5 left          goal\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div></p>\n",
      "content_html": "<h2 id=\"_1-intro\"> 1. Intro</h2>\n<p>Give a 3-by-3 grid with 8 square blocks and 1 blank.\nRearrange the block to make it in order, using as <strong>few moves</strong> as possible.</p>\n<p>Return the result of sequence. Like this below:</p>\n<div><pre><code>    1  3        1     3        1  2  3        1  2  3        1  2  3\n 4  2  5   =&gt;   4  2  5   =&gt;   4     5   =&gt;   4  5      =&gt;   4  5  6\n 7  8  6        7  8  6        7  8  6        7  8  6        7  8\n\n initial        1 left          2 up          5 left          goal\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div>\n<h2 id=\"_2-best-first-search\"> 2. Best-first search</h2>\n<p>The best-first search is that from initial broad to the goal, we do our each step at the best, or small cost move.</p>\n<h3 id=\"_2-1-search-node\"> 2.1 Search node</h3>\n<p>First, we need to define our start and goal. We use a terminology called</p>\n",
      "date_published": "2016-10-14T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "《Algorithm 第四版》笔记"
      ]
    },
    {
      "title": "Graham Scan 解决凸包问题",
      "url": "https://wafer.li/blog-corners/learning-notes/algorithm-4th-edition/Graham%20Scan%20%E8%A7%A3%E5%86%B3%E5%87%B8%E5%8C%85%E9%97%AE%E9%A2%98/",
      "id": "https://wafer.li/blog-corners/learning-notes/algorithm-4th-edition/Graham%20Scan%20%E8%A7%A3%E5%86%B3%E5%87%B8%E5%8C%85%E9%97%AE%E9%A2%98/",
      "summary": "<p>输入一个点集，输出一个构成<strong>能容纳所有点的最小多边形的顶点集合</strong></p>\n<h2 id=\"_1-graham-scan\"> 1. Graham scan</h2>\n<ol>\n<li>\n<p>选择一个具有<strong>最小 y 坐标的点 p</strong>，如果有多个点，则选择最左边的点（x 坐标最小）</p>\n</li>\n<li>\n<p>将其他点按照 <code>p -&gt; i</code> 向量的极角(polar angle) 排序</p>\n<blockquote>\n<p>极角即为向量与 <strong>X 轴正向</strong> 的夹角</p>\n</blockquote>\n</li>\n<li>\n<p>按顺序考虑其余点，如果出现<strong>顺时针的拐角则将该点忽略</strong></p>\n</li>\n</ol>\n",
      "content_html": "<p>输入一个点集，输出一个构成<strong>能容纳所有点的最小多边形的顶点集合</strong></p>\n<h2 id=\"_1-graham-scan\"> 1. Graham scan</h2>\n<ol>\n<li>\n<p>选择一个具有<strong>最小 y 坐标的点 p</strong>，如果有多个点，则选择最左边的点（x 坐标最小）</p>\n</li>\n<li>\n<p>将其他点按照 <code>p -&gt; i</code> 向量的极角(polar angle) 排序</p>\n<blockquote>\n<p>极角即为向量与 <strong>X 轴正向</strong> 的夹角</p>\n</blockquote>\n</li>\n<li>\n<p>按顺序考虑其余点，如果出现<strong>顺时针的拐角则将该点忽略</strong></p>\n</li>\n</ol>\n\n<h2 id=\"_2-要点\"> 2. 要点</h2>\n<h3 id=\"_2-1-寻找原点\"> 2.1 寻找原点</h3>\n<p>将点按照 y 坐标优先进行排序；</p>\n<p>即，先看 y 坐标，后看 x 坐标。</p>\n<h3 id=\"_2-2-按照极角排序\"> 2.2 按照极角排序</h3>\n<p>使用基于逆时针转角（CCW）的方法</p>\n<ol>\n<li>\n<p>如果 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span><span style=\"margin-right:0.03588em;\">q</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 在 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span>p</span></span></span></span> 上方，<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span><span style=\"margin-right:0.03588em;\">q</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 在 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span>p</span></span></span></span> 下方，则 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span><span style=\"margin-right:0.03588em;\">q</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 极坐标较小</p>\n</li>\n<li>\n<p>如果 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span><span style=\"margin-right:0.03588em;\">q</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 在 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span>p</span></span></span></span> 下方，<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span><span style=\"margin-right:0.03588em;\">q</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 在 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span>p</span></span></span></span> 上方，则 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span><span style=\"margin-right:0.03588em;\">q</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 极坐标较大</p>\n</li>\n<li>\n<p>否则，根据 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span>p</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>→</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span><span style=\"margin-right:0.03588em;\">q</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>→</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span><span style=\"margin-right:0.03588em;\">q</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 的逆时针转角(<code>ccw(p, q1, q2)</code>) 确定极坐标大小</p>\n</li>\n</ol>\n<blockquote>\n<p>上述函数中，<code>ccw(p, q1, q2)</code> 返回 1，则 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span><span style=\"margin-right:0.03588em;\">q</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 较大；\n返回 -1 则 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span><span style=\"margin-right:0.03588em;\">q</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 较大</p>\n</blockquote>\n<h2 id=\"_3-确定逆时针转角-ccw\"> 3. 确定逆时针转角(CCW)</h2>\n<p><strong>使用三角形有向面积进行判定</strong></p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:6.62406em;vertical-align:-3.06203em;\"></span><span><span><span><span><span><span style=\"height:3.56203em;\"><span style=\"top:-5.56203em;\"><span style=\"height:4.06201em;\"></span><span><span>2</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>A</span><span>re</span><span>a</span><span>(</span><span>a</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>b</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>c</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span><span><span><span><span style=\"height:2.06201em;\"><span style=\"top:-2.86601em;\"><span style=\"height:4.41604em;\"></span><span><span>∣</span></span></span><span style=\"top:-3.46401em;\"><span style=\"height:4.41604em;\"></span><span style=\"height:2.4160399999999997em;width:0.333em;\"><svg width='0.333em' height='2.4160399999999997em' style='width:0.333em' viewBox='0 0 333 2416' preserveAspectRatio='xMinYMin'><path d='M145 0 H188 V2416 H145z M145 0 H188 V2416 H145z'/></svg></span></span><span style=\"top:-5.87205em;\"><span style=\"height:4.41604em;\"></span><span><span>∣</span></span></span></span><span>​</span></span><span><span style=\"height:1.5500299999999998em;\"><span></span></span></span></span></span></span><span><span><span><span><span><span style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span style=\"height:3em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>x</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.0099999999999993em;\"><span style=\"height:3em;\"></span><span><span><span>b</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>x</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-1.8099999999999994em;\"><span style=\"height:3em;\"></span><span><span><span>c</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>x</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span><span style=\"width:0.5em;\"></span><span style=\"width:0.5em;\"></span><span><span><span><span style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span style=\"height:3em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.03588em;\">y</span></span></span></span><span>​</span></span><span><span style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.0099999999999993em;\"><span style=\"height:3em;\"></span><span><span><span>b</span><span><span><span><span style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.03588em;\">y</span></span></span></span><span>​</span></span><span><span style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-1.8099999999999994em;\"><span style=\"height:3em;\"></span><span><span><span>c</span><span><span><span><span style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.03588em;\">y</span></span></span></span><span>​</span></span><span><span style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span><span style=\"width:0.5em;\"></span><span style=\"width:0.5em;\"></span><span><span><span><span style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span><span style=\"top:-3.0099999999999993em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span><span style=\"top:-1.8099999999999994em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span></span></span><span><span><span><span><span style=\"height:2.06201em;\"><span style=\"top:-2.86601em;\"><span style=\"height:4.41604em;\"></span><span><span>∣</span></span></span><span style=\"top:-3.46401em;\"><span style=\"height:4.41604em;\"></span><span style=\"height:2.4160399999999997em;width:0.333em;\"><svg width='0.333em' height='2.4160399999999997em' style='width:0.333em' viewBox='0 0 333 2416' preserveAspectRatio='xMinYMin'><path d='M145 0 H188 V2416 H145z M145 0 H188 V2416 H145z'/></svg></span></span><span style=\"top:-5.87205em;\"><span style=\"height:4.41604em;\"></span><span><span>∣</span></span></span></span><span>​</span></span><span><span style=\"height:1.5500299999999998em;\"><span></span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span></span></span><span style=\"top:-2.25em;\"><span style=\"height:4.06201em;\"></span><span><span><span><span><span><span><span style=\"height:1.462em;\"><span style=\"top:-2.266em;\"><span style=\"height:3.21602em;\"></span><span><span>∣</span></span></span><span style=\"top:-2.864em;\"><span style=\"height:3.21602em;\"></span><span style=\"height:1.2160199999999999em;width:0.333em;\"><svg width='0.333em' height='1.2160199999999999em' style='width:0.333em' viewBox='0 0 333 1216' preserveAspectRatio='xMinYMin'><path d='M145 0 H188 V1216 H145z M145 0 H188 V1216 H145z'/></svg></span></span><span style=\"top:-4.07202em;\"><span style=\"height:3.21602em;\"></span><span><span>∣</span></span></span></span><span>​</span></span><span><span style=\"height:0.9500199999999999em;\"><span></span></span></span></span></span></span><span><span><span><span><span><span style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span style=\"height:3em;\"></span><span><span><span>b</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>x</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span>a</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>x</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-2.4099999999999997em;\"><span style=\"height:3em;\"></span><span><span><span>c</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>x</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span>a</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>x</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:0.9500000000000004em;\"><span></span></span></span></span></span><span style=\"width:0.5em;\"></span><span style=\"width:0.5em;\"></span><span><span><span><span style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span style=\"height:3em;\"></span><span><span><span>b</span><span><span><span><span style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.03588em;\">y</span></span></span></span><span>​</span></span><span><span style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span>a</span><span><span><span><span style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.03588em;\">y</span></span></span></span><span>​</span></span><span><span style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-2.4099999999999997em;\"><span style=\"height:3em;\"></span><span><span><span>c</span><span><span><span><span style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.03588em;\">y</span></span></span></span><span>​</span></span><span><span style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span>a</span><span><span><span><span style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.03588em;\">y</span></span></span></span><span>​</span></span><span><span style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:0.9500000000000004em;\"><span></span></span></span></span></span></span></span><span><span><span><span><span style=\"height:1.462em;\"><span style=\"top:-2.266em;\"><span style=\"height:3.21602em;\"></span><span><span>∣</span></span></span><span style=\"top:-2.864em;\"><span style=\"height:3.21602em;\"></span><span style=\"height:1.2160199999999999em;width:0.333em;\"><svg width='0.333em' height='1.2160199999999999em' style='width:0.333em' viewBox='0 0 333 1216' preserveAspectRatio='xMinYMin'><path d='M145 0 H188 V1216 H145z M145 0 H188 V1216 H145z'/></svg></span></span><span style=\"top:-4.07202em;\"><span style=\"height:3.21602em;\"></span><span><span>∣</span></span></span></span><span>​</span></span><span><span style=\"height:0.9500199999999999em;\"><span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:3.06203em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p><strong>如果面积为正，则为逆时针</strong>\n<strong>如果面积为负，则为顺时针</strong>\n<strong>如果面积为 0，则三点共线</strong></p>\n<p>原理：根据空间向量的<strong>右手系</strong>可知，当法向量为负时，三点为顺时针；当法向量为正时，三点为逆时针。</p>\n<p>而平面法向量和<strong>两个向量的叉乘正负一致</strong>，则可以通过求两个向量的叉乘判断顺逆时针的情况。</p>\n<p>由向量叉乘的物理含义可知，<strong>向量的叉乘就是两个向量所在的平行四边形的面积</strong></p>\n<p>在三维条件下，叉乘为</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>∣</span><span>a</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>b</span><span>∣</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:3.6120399999999995em;vertical-align:-1.5500299999999998em;\"></span><span><span><span><span><span><span style=\"height:2.06201em;\"><span style=\"top:-2.86601em;\"><span style=\"height:4.41604em;\"></span><span><span>∣</span></span></span><span style=\"top:-3.46401em;\"><span style=\"height:4.41604em;\"></span><span style=\"height:2.4160399999999997em;width:0.333em;\"><svg width='0.333em' height='2.4160399999999997em' style='width:0.333em' viewBox='0 0 333 2416' preserveAspectRatio='xMinYMin'><path d='M145 0 H188 V2416 H145z M145 0 H188 V2416 H145z'/></svg></span></span><span style=\"top:-5.87205em;\"><span style=\"height:4.41604em;\"></span><span><span>∣</span></span></span></span><span>​</span></span><span><span style=\"height:1.5500299999999998em;\"><span></span></span></span></span></span></span><span><span><span><span><span><span style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span style=\"height:3em;\"></span><span><span>i</span></span></span><span style=\"top:-3.0099999999999993em;\"><span style=\"height:3em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>x</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-1.8099999999999994em;\"><span style=\"height:3em;\"></span><span><span><span>b</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>x</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span><span style=\"width:0.5em;\"></span><span style=\"width:0.5em;\"></span><span><span><span><span style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.05724em;\">j</span></span></span><span style=\"top:-3.0099999999999993em;\"><span style=\"height:3em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.03588em;\">y</span></span></span></span><span>​</span></span><span><span style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-1.8099999999999994em;\"><span style=\"height:3em;\"></span><span><span><span>b</span><span><span><span><span style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.03588em;\">y</span></span></span></span><span>​</span></span><span><span style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span><span style=\"width:0.5em;\"></span><span style=\"width:0.5em;\"></span><span><span><span><span style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.03148em;\">k</span></span></span><span style=\"top:-3.0099999999999993em;\"><span style=\"height:3em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.04398em;\">z</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-1.8099999999999994em;\"><span style=\"height:3em;\"></span><span><span><span>b</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.04398em;\">z</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span></span></span><span><span><span><span><span style=\"height:2.06201em;\"><span style=\"top:-2.86601em;\"><span style=\"height:4.41604em;\"></span><span><span>∣</span></span></span><span style=\"top:-3.46401em;\"><span style=\"height:4.41604em;\"></span><span style=\"height:2.4160399999999997em;width:0.333em;\"><svg width='0.333em' height='2.4160399999999997em' style='width:0.333em' viewBox='0 0 333 2416' preserveAspectRatio='xMinYMin'><path d='M145 0 H188 V2416 H145z M145 0 H188 V2416 H145z'/></svg></span></span><span style=\"top:-5.87205em;\"><span style=\"height:4.41604em;\"></span><span><span>∣</span></span></span></span><span>​</span></span><span><span style=\"height:1.5500299999999998em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>取 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span style=\"margin-right:0.04398em;\">z</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0</span></span></span></span> 这一平面，则</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>∣</span><span>a</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>b</span><span>∣</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:2.41202em;vertical-align:-0.9500199999999999em;\"></span><span><span><span><span><span><span style=\"height:1.462em;\"><span style=\"top:-2.266em;\"><span style=\"height:3.21602em;\"></span><span><span>∣</span></span></span><span style=\"top:-2.864em;\"><span style=\"height:3.21602em;\"></span><span style=\"height:1.2160199999999999em;width:0.333em;\"><svg width='0.333em' height='1.2160199999999999em' style='width:0.333em' viewBox='0 0 333 1216' preserveAspectRatio='xMinYMin'><path d='M145 0 H188 V1216 H145z M145 0 H188 V1216 H145z'/></svg></span></span><span style=\"top:-4.07202em;\"><span style=\"height:3.21602em;\"></span><span><span>∣</span></span></span></span><span>​</span></span><span><span style=\"height:0.9500199999999999em;\"><span></span></span></span></span></span></span><span><span><span><span><span><span style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span style=\"height:3em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>x</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-2.4099999999999997em;\"><span style=\"height:3em;\"></span><span><span><span>b</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>x</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:0.9500000000000004em;\"><span></span></span></span></span></span><span style=\"width:0.5em;\"></span><span style=\"width:0.5em;\"></span><span><span><span><span style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span style=\"height:3em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.03588em;\">y</span></span></span></span><span>​</span></span><span><span style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-2.4099999999999997em;\"><span style=\"height:3em;\"></span><span><span><span>b</span><span><span><span><span style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.03588em;\">y</span></span></span></span><span>​</span></span><span><span style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:0.9500000000000004em;\"><span></span></span></span></span></span></span></span><span><span><span><span><span style=\"height:1.462em;\"><span style=\"top:-2.266em;\"><span style=\"height:3.21602em;\"></span><span><span>∣</span></span></span><span style=\"top:-2.864em;\"><span style=\"height:3.21602em;\"></span><span style=\"height:1.2160199999999999em;width:0.333em;\"><svg width='0.333em' height='1.2160199999999999em' style='width:0.333em' viewBox='0 0 333 1216' preserveAspectRatio='xMinYMin'><path d='M145 0 H188 V1216 H145z M145 0 H188 V1216 H145z'/></svg></span></span><span style=\"top:-4.07202em;\"><span style=\"height:3.21602em;\"></span><span><span>∣</span></span></span></span><span>​</span></span><span><span style=\"height:0.9500199999999999em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>到这一步不难看出，上面两倍三角形有向面积的二维行列式表达正是二维空间中向量的叉乘。</p>\n<p>所以，三角形有向面积的正负就表明了三角形三个点的顺时针和逆时针的特性。</p>\n<h2 id=\"_4-corner-case\"> 4. Corner Case</h2>\n<p>主要出现的 Corner Case 有：</p>\n<ol>\n<li>\n<p>点数量不够</p>\n<blockquote>\n<p>只有至少不共线的 3 个点才能构成凸包</p>\n</blockquote>\n</li>\n<li>\n<p>共点问题</p>\n<blockquote>\n<p>有多个点重合</p>\n</blockquote>\n</li>\n<li>\n<p>共线问题</p>\n<blockquote>\n<p>有多个点的共线问题</p>\n</blockquote>\n</li>\n<li>\n<p>点集为空等其他情况</p>\n</li>\n</ol>\n<h2 id=\"_5-实现流程\"> 5. 实现流程</h2>\n<p>对于以上 Corner Case 有如下处理方法：</p>\n<ol>\n<li>\n<p>检查 <code>null</code></p>\n</li>\n<li>\n<p>检查点集数量</p>\n<blockquote>\n<p>3 个点及以上才有可能产生凸包</p>\n</blockquote>\n</li>\n<li>\n<p>遍历排序后的点集，直到第一个不与第一个点重复的点，如果所有点都重复，则退出</p>\n<blockquote>\n<p>由此可去除原点重复问题</p>\n</blockquote>\n</li>\n<li>\n<p>遍历剩下的点集，直到第一个与前两个不共线的点，将其的前一点作为凸包第二顶点</p>\n<blockquote>\n<p><strong>前一点</strong> 即与原点共线的 <strong>最后一个点</strong></p>\n</blockquote>\n</li>\n<li>\n<p>通过 CCW 来计算逆时针转角，抛弃小于等于 0 的点</p>\n<blockquote>\n<p>由于 CCW 可以表示共线情况，可以通过只要大于零的点即可避免途中出现的共线情况\n实际上，由于 CCW 使用三角形面积进行计算，所以，也可以解决共点问题</p>\n</blockquote>\n</li>\n</ol>\n",
      "date_published": "2017-02-05T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "《Algorithm 第四版》笔记"
      ]
    },
    {
      "title": "二叉查找树",
      "url": "https://wafer.li/blog-corners/learning-notes/algorithm-4th-edition/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/",
      "id": "https://wafer.li/blog-corners/learning-notes/algorithm-4th-edition/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/",
      "summary": "<h2 id=\"_1-介绍\"> 1. 介绍</h2>\n<p>为了解决线性结构下的二分查找无法支持高效的插入和删除操作的问题，同时提高插入和删除的效率；</p>\n<p>我们采用二叉查找树来进行符号表的实现。</p>\n<p>二叉查找树是一种<strong>树</strong>，它满足：</p>\n<ol>\n<li>每个节点都拥有一个 <code>Comparable</code> 键</li>\n<li>每个节点都<strong>大于它的左子节点，小于它的右子节点</strong></li>\n</ol>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/da/Binary_search_tree.svg/300px-Binary_search_tree.svg.png\" alt=\"Binary Search Tree\" /></p>\n",
      "content_html": "<h2 id=\"_1-介绍\"> 1. 介绍</h2>\n<p>为了解决线性结构下的二分查找无法支持高效的插入和删除操作的问题，同时提高插入和删除的效率；</p>\n<p>我们采用二叉查找树来进行符号表的实现。</p>\n<p>二叉查找树是一种<strong>树</strong>，它满足：</p>\n<ol>\n<li>每个节点都拥有一个 <code>Comparable</code> 键</li>\n<li>每个节点都<strong>大于它的左子节点，小于它的右子节点</strong></li>\n</ol>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/da/Binary_search_tree.svg/300px-Binary_search_tree.svg.png\" alt=\"Binary Search Tree\" /></p>\n\n<h2 id=\"_2-数据结构的实现\"> 2. 数据结构的实现</h2>\n<p>我们使用<strong>链式结构</strong>来实现这个树。一个节点包含了：</p>\n<ol>\n<li>左子结点的链接</li>\n<li>右子结点的链接</li>\n<li>以这个节点为根节点的树的节点总数</li>\n<li>节点的键和值</li>\n</ol>\n<table style=\"width:25em;\">\n<th style=\"text-align:center;\" colspan=\"5\">The Node of Binary Search Tree</th>\n<tr>\n<td style=\"text-align:center;\">Node leftChild</td>\n<td style=\"text-align:center;\">Key key</td>\n<td style=\"text-align:center;\">Value val</td>\n<td style=\"text-align:center;\">int N</td>\n<td style=\"text-align:center;\">Node rightChild</td>\n</tr>\n</table>\n<p>Code:</p>\n<div><pre><code><span>// The inner class of Node</span>\n<span>private</span> <span>class</span> <span>Node</span> <span>{</span>\n    <span>private</span> <span>Key</span> key<span>;</span>\n    <span>private</span> <span>Value</span> val<span>;</span>\n    <span>private</span> <span>Node</span> left<span>,</span> right<span>;</span>\n\n    <span>// 以该节点为根的子树的节点个数，包括根节点</span>\n    <span>private</span> <span>int</span> <span>N</span><span>;</span>\n\n    <span>public</span> <span>Node</span><span>(</span><span>Key</span> key<span>,</span> <span>Value</span> val<span>,</span> <span>int</span> <span>N</span><span>)</span> <span>{</span>\n        <span>this</span><span>.</span>key <span>=</span> key<span>;</span>\n        <span>this</span><span>.</span>val <span>=</span> val<span>;</span>\n        <span><span>this<span>.</span></span>N</span> <span>=</span> <span>N</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><h2 id=\"_3-api-实现\"> 3. API 实现</h2>\n<p>这一节主要介绍数据的形式和相应的方法操作。这些方法都是基于二分查找发展而来的</p>\n<p>它们是：</p>\n<ol>\n<li><code>get()</code>, <code>put()</code></li>\n<li><code>min()</code>, <code>max()</code>, <code>floor()</code>, <code>ceiling()</code></li>\n<li><code>delete()</code>, <code>deleteMin()</code>, <code>deleteMax()</code></li>\n</ol>\n<h3 id=\"_3-1-搜索\"> 3.1 搜索</h3>\n<p>下面是 <code>get()</code> 方法的基本实现思路</p>\n<p>使用二叉搜索树来搜索数据与二分查找十分相像。</p>\n<p>首先从根节点开始，做以下操作：</p>\n<ol>\n<li>如果根节点和所给的键值相等，那么命中</li>\n<li>如果所给的键值比根节点小，那么就在其<strong>左子树</strong>搜索</li>\n<li>如果所给的键值比根节点大，那么就在其<strong>右子树</strong>搜索</li>\n<li>假如最终找到了 <code>null</code>，那么说明所给键值不在符号表中，返回 <code>null</code></li>\n</ol>\n<p><img src=\"https://algs4.cs.princeton.edu/32bst/images/bst-search.png\" alt=\"Successful Search &amp; Unsuccessful Search\" /></p>\n<p>Code:</p>\n<div><pre><code><span>public</span> <span>Value</span> <span>get</span><span>(</span><span>Key</span> key<span>)</span> <span>{</span>\n    <span>return</span> <span>get</span><span>(</span>root<span>,</span> key<span>)</span><span>;</span>\n<span>}</span>\n\n<span>private</span> <span>Value</span> <span>get</span><span>(</span><span>Node</span> x<span>,</span> <span>Key</span> key<span>)</span> <span>{</span>\n\n    <span>if</span><span>(</span>x <span>==</span> <span>null</span><span>)</span> <span>{</span>\n        <span>return</span> <span>null</span><span>;</span>\n    <span>}</span>\n\n    <span>int</span> cmp <span>=</span> key<span>.</span><span>compareTo</span><span>(</span>x<span>.</span>key<span>)</span><span>;</span>\n\n    <span>if</span><span>(</span>cmp <span>&lt;</span> <span>0</span><span>)</span>\n        <span>return</span> <span>get</span><span>(</span>x<span>.</span>left<span>,</span> key<span>)</span><span>;</span>\n    <span>else</span> <span>if</span><span>(</span>cmp <span>></span> <span>0</span><span>)</span>\n        <span>return</span> <span>get</span><span>(</span>x<span>.</span>right<span>,</span> key<span>)</span><span>;</span>\n    <span>else</span>\n        <span>return</span> x<span>.</span>val<span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><blockquote>\n<p>注意这里使用了<strong>递归</strong>的方法来深入子树中进行搜索。关于递归在下面的 <code>put()</code> 方法中也有运用。</p>\n</blockquote>\n<h3 id=\"_3-2-插入\"> 3.2 插入</h3>\n<p>比起之前基于有序数组的二分查找，二叉搜索树的最大改进之处在于二叉搜索树拥有效率更高的元素插入操作。</p>\n<p>事实上，进行元素的插入是十分简单的，仅仅只是<strong>定位元素位置</strong>，<strong>连接上新元素</strong>，就完成了。</p>\n<p>需要注意的是，二叉搜索树是有序的，你必须事先定位元素的插入位置，也就是说，你不能将元素随便地插入到一些错误的地方。</p>\n<p>对于 <code>put()</code> 方法，主要完成两项工作：</p>\n<ol>\n<li>如果键值已经存在于符号表中，那么就更新它的值</li>\n<li>如果键值不在符号表中，那么就创建一个新的节点存储键值对</li>\n</ol>\n<p>下面是 <code>put()</code> 方法的代码</p>\n<div><pre><code><span>public</span> <span>void</span> <span>put</span><span>(</span><span>Key</span> key<span>,</span> <span>Value</span> val<span>)</span> <span>{</span>\n    root <span>=</span> <span>put</span><span>(</span>root<span>,</span> key<span>,</span> val<span>)</span><span>;</span>\n<span>}</span>\n\n<span>private</span> <span>Node</span> <span>put</span><span>(</span><span>Node</span> x<span>,</span> <span>Key</span> key<span>,</span> <span>Value</span> val<span>)</span> <span>{</span>\n\n    <span>if</span> <span>(</span>x <span>==</span> <span>null</span><span>)</span>\n        <span>return</span> <span>new</span> <span>Node</span><span>(</span>key<span>,</span> val<span>,</span> <span>1</span><span>)</span><span>;</span>\n\n    <span>int</span> cmp <span>=</span> key<span>.</span><span>compareTo</span><span>(</span>x<span>.</span>key<span>)</span><span>;</span>\n\n    <span>if</span> <span>(</span>cmp <span>&lt;</span> <span>0</span><span>)</span>\n        x<span>.</span>left <span>=</span> <span>put</span><span>(</span>x<span>.</span>left<span>,</span> key<span>,</span> val<span>)</span><span>;</span>\n    <span>else</span> <span>if</span> <span>(</span>cmp <span>></span> <span>0</span><span>)</span>\n        x<span>.</span>right <span>=</span> put <span>(</span>x<span>.</span>right<span>,</span> key<span>,</span> val<span>)</span><span>;</span>\n    <span>else</span>\n        x<span>.</span>val <span>=</span> val<span>;</span>\n\n    <span>// 更新节点个数</span>\n    <span><span>x<span>.</span></span>N</span> <span>=</span> <span>size</span><span>(</span>x<span>.</span>left<span>)</span> <span>+</span> <span>size</span><span>(</span>x<span>.</span>right<span>)</span> <span>+</span> <span>1</span><span>;</span>\n    <span>return</span> x<span>;</span>\n\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><blockquote>\n<p>注意到，<code>put()</code> 方法是<strong>递归的</strong>，这也是它的主要工作原理之一。\n通过这个递归的方法，它才能深入树去进行搜索定位。\n而最重要的一点是，此方法必须<strong>将我们传入的 Node 引用返回</strong></p>\n</blockquote>\n<blockquote>\n<p>如果我们传进去的是一个正常的节点，也就是一些我们不应该去修改的内部节点，那么此方法必须将这个引用<strong>原样返回</strong>，而且<strong>返回值要让原始的引用去捕获</strong>。\n这样，我们才能维持树的基本结构，否则树的结构就会被损坏。</p>\n</blockquote>\n<blockquote>\n<p>如果我们传进去的不是一个正常的节点，比如 <code>null</code> 值，那么方法会自动生成一个新的节点，并将其返回，那么原有的链接就能连上一个新的节点。</p>\n</blockquote>\n<blockquote>\n<p>一件非常有趣的事是，不只是公有方法，而且递归的私有方法也出现了同样的代码结构，即 <code>x = put(x, key, val)</code>, 我们将 <code>x</code> 传递进去，然后最终它却返回出来被原有的引用捕获了。</p>\n</blockquote>\n<blockquote>\n<p>这是合理的，因为只有采用这种方式，我们才能保持树的结构然后<strong>更新</strong>链接，而不是毁掉它。</p>\n</blockquote>\n<blockquote>\n<p>事实上，递归方法不返回引用也是可以的，只不过需要在函数内部将链接连上。</p>\n</blockquote>\n<div><pre><code><span>if</span> <span>(</span>x <span>==</span> <span>null</span><span>)</span> <span>{</span>\n    x <span>=</span> <span>new</span> <span>Node</span><span>(</span>key<span>,</span> val<span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p><img src=\"https://algs4.cs.princeton.edu/32bst/images/bst-insert.png\" alt=\"Insertion\" /></p>\n<h3 id=\"_3-3-删除\"> 3.3 删除</h3>\n<p>删除操作是最为复杂的 BST 操作。\n它拥有很多情况，让我们逐步分析。</p>\n<h4 id=\"_3-3-1-删除-最小-最大-值\"> 3.3.1 删除 最小/最大 值</h4>\n<p>这是删除操作中最为简单的情况，我们只需删除最左或者最右边的节点，然后<strong>链接上它剩下的子树即可</strong></p>\n<p>我们使用 <code>delMin()</code> 作为例子，将其反过来做，就变成了 <code>delMax()</code>\n下面是相应的操作：</p>\n<ol>\n<li>一直深入左子树去查找，然后定位到最小的节点</li>\n<li>将它的右子树和它的父节点连接</li>\n<li>由于原有的连接最小节点的链接被其右子树占据，没有指向最小节点的引用，那么它就会被垃圾回收机制回收。</li>\n</ol>\n<p>在这里，我们依旧使用<strong>递归</strong>的方法来深入树进行查找</p>\n<p><img src=\"https://algs4.cs.princeton.edu/32bst/images/bst-deletemin.png\" alt=\"Delete the min node\" /></p>\n<div><pre><code><span>public</span> <span>void</span> <span>deleteMin</span><span>(</span><span>)</span> <span>{</span>\n    root <span>=</span> <span>deleteMin</span><span>(</span>root<span>)</span><span>;</span>\n<span>}</span>\n\n<span>private</span> <span>Node</span> <span>deleteMin</span><span>(</span><span>Node</span> x<span>)</span> <span>{</span>\n    <span>if</span> <span>(</span>x<span>.</span>left <span>==</span> <span>null</span><span>)</span>\n        <span>return</span> x<span>.</span>right<span>;</span>\n\n    x<span>.</span>left <span>=</span> <span>deleteMin</span><span>(</span>x<span>.</span>left<span>)</span><span>;</span>\n    <span><span>x<span>.</span></span>N</span> <span>=</span> <span>size</span><span>(</span>x<span>.</span>left<span>)</span> <span>+</span> <span>size</span><span>(</span>x<span>.</span>right<span>)</span> <span>+</span> <span>1</span><span>;</span>\n\n    <span>return</span> x<span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><blockquote>\n<p>与 <code>put()</code> 方法一样， <code>delMin()</code> 方法采用了<strong>递归</strong>的方法来深入树进行查找</p>\n</blockquote>\n<blockquote>\n<p>所以，它需要返回我们传入的链接，然后让原有链接捕获它来保持整个树的结构。这也是更新链接的方式。</p>\n</blockquote>\n<blockquote>\n<p>但是最有趣和最重要的一点是，当我们找到最小的节点之后，我们要将其<strong>右子树</strong>返回。</p>\n</blockquote>\n<blockquote>\n<p>由于递归操作，最小节点的父节点的左链接会连接到最小节点的右子树上。\n这个操作事实上 <strong>FREE</strong> 了最小的节点，而且保持了结构的完整。</p>\n</blockquote>\n<blockquote>\n<p>这个操作在我们删除具有两个子节点的元素的时候也很有用。</p>\n</blockquote>\n<blockquote>\n<p>那么在这里递归方法能不能不返回引用呢？\n答案是<strong>不行！</strong>\n<code>delMin()</code> 方法和 <code>put()</code> 方法不同的一点是<strong>它要回溯到上一个节点</strong>，当需要回溯到上一个节点的时候，我们就需要采用返回一个引用的方法，否则无法回溯。\n<strong>所以建议统一采用返回引用的做法</strong></p>\n</blockquote>\n<h4 id=\"_3-3-2-通常节点的删除\"> 3.3.2 通常节点的删除</h4>\n<p>我们可以使用类似 <code>delMin()</code> 的方法来删除只具有一个子节点的节点</p>\n<p>但是删除具有两个子节点的节点会更为复杂。</p>\n<p>这种情况下需要解决的最重要的问题是，我们需要找到一个节点来<strong>替代其位置</strong>，否则链接将会损坏。</p>\n<p>为了解决这个问题，我们采用它的<strong>后继</strong>来替代它。</p>\n<p>下面是找到所需删除元素 <code>x</code> 之后的步骤：</p>\n<ol>\n<li>\n<p>将 <code>x</code> 保存一个副本 <code>t</code></p>\n<blockquote>\n<p><code>t</code> 即所需要删除的元素</p>\n</blockquote>\n</li>\n<li>\n<p>让 <code>x</code> 指向其后继 <code>min(x.right)</code></p>\n<blockquote>\n<p>后继即比 <code>x</code> 大的下一个节点，也就是<strong>其右子树中最小的节点</strong>\n此时 <code>x</code> 已经指向后继。</p>\n</blockquote>\n</li>\n<li>\n<p>让 <code>x.right</code> 指向 <code>delMin(t.right)</code></p>\n<blockquote>\n<p>这一步较为关键和难以理解。\n<code>delMin(t.right)</code> 主要做了如下几件事：</p>\n</blockquote>\n<ol>\n<li>\n<p>将后继从下层的链接<strong>释放出来</strong></p>\n<blockquote>\n<p><code>t</code> 是原有 <code>x</code> 的副本，所以 <code>delMin(t.right)</code> 最后会查找到其后继，并释放出来。</p>\n</blockquote>\n</li>\n<li>\n<p>保持后继释放后的链接完整性。</p>\n<blockquote>\n<p><code>delMin()</code> 在查找到最小节点之后会返回右链接，由于调用递归性，右链接会被上层捕获，从而保持了链接性。\n这里将后继释放出来后，会让其父节点来负责链接上其右子树。</p>\n</blockquote>\n</li>\n<li>\n<p>更新计数，并将传入的链接原样返回</p>\n<blockquote>\n<p>这是最为重要的，首先将计数更新了，保证计数正确性。</p>\n</blockquote>\n<blockquote>\n<p>其次，<code>delMin(x)</code> 在最后退出递归的时候会返回 <code>x</code>。\n也就是 <code>delMin(t.right)</code> 的返回值是 <code>t.right</code>。\n那么 <code>x.right = delMin(t.right)</code> 也就相当于 <code>x.right = t.right</code>。</p>\n</blockquote>\n<blockquote>\n<p>正好是使用了 <code>x</code> 来替代 <code>t</code>（注意<strong>此时 <code>x</code> 已经是后继了</strong>）</p>\n</blockquote>\n</li>\n</ol>\n</li>\n<li>\n<p>让 <code>x.left</code> 指向 <code>t.left</code></p>\n</li>\n<li>\n<p>更新计数器，递归方法返回传入值来保持链接完整性</p>\n</li>\n</ol>\n<p><img src=\"https://algs4.cs.princeton.edu/32bst/images/bst-delete.png\" alt=\"Normal Delete\" /></p>\n<p>Code:</p>\n<div><pre><code><span>public</span> <span>void</span> <span>delete</span><span>(</span><span>Key</span> key<span>)</span> <span>{</span>\n    root <span>=</span> <span>delete</span><span>(</span>root<span>,</span>key<span>)</span><span>;</span>\n<span>}</span>\n<span>private</span> <span>Node</span> <span>delete</span><span>(</span><span>Node</span> x<span>,</span> <span>Key</span> key<span>)</span> <span>{</span>\n    <span>// Notice that, we use recursive way</span>\n    <span>// to locate the Node which will be delete</span>\n    <span>// Also, we need to renew the counter</span>\n\n    <span>// Therefore, in this method, we need to</span>\n    <span>// retrun the link of the node itself, to</span>\n    <span>// miantain the connectivity</span>\n\n    <span>if</span> <span>(</span>x <span>==</span> <span>null</span><span>)</span> <span>return</span> <span>null</span><span>;</span>\n    <span>int</span> cmp <span>=</span> key<span>.</span><span>compareTo</span><span>(</span>key<span>)</span><span>;</span>\n\n    <span>// if not hit,</span>\n    <span>// deep into subtree and continue search</span>\n    <span>if</span> <span>(</span>cmp <span>&lt;</span> <span>0</span><span>)</span> x<span>.</span>left <span>=</span> delete <span>(</span>x<span>.</span>left<span>,</span> key<span>)</span><span>;</span>\n    <span>else</span> <span>if</span> <span>(</span>cmp <span>></span> <span>0</span><span>)</span> x<span>.</span>right <span>=</span> <span>delete</span><span>(</span>x<span>.</span>right<span>,</span> key<span>)</span><span>;</span>\n    <span>else</span> <span>{</span>  <span>// hit</span>\n        <span>// The deletion of one or none child</span>\n        <span>if</span> <span>(</span>x<span>.</span>right <span>==</span> <span>null</span><span>)</span> <span>return</span> x<span>.</span>left<span>;</span>\n        <span>if</span> <span>(</span>x<span>.</span>left <span>==</span> <span>null</span><span>)</span> <span>return</span> x<span>.</span>right<span>;</span>\n\n        <span>// Two child</span>\n        <span>Node</span> t <span>=</span> x<span>;</span>\n        x <span>=</span> <span>min</span><span>(</span>t<span>.</span>right<span>)</span><span>;</span>\n        <span>// refer to the special notice</span>\n        x<span>.</span>right <span>=</span> <span>deleteMin</span><span>(</span>t<span>.</span>right<span>)</span><span>;</span>\n        x<span>.</span>left <span>=</span> t<span>.</span>left<span>;</span>\n    <span>}</span>\n    <span>// renew counter</span>\n    <span><span>x<span>.</span></span>N</span> <span>=</span> <span>size</span><span>(</span>x<span>.</span>left<span>)</span> <span>+</span> <span>size</span><span>(</span>x<span>.</span>right<span>)</span> <span>+</span> <span>1</span><span>;</span>\n\n\n    <span>return</span> x<span>;</span>   <span>// return itself to maintain the conectivity</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br></div></div><h3 id=\"_3-4-其他的有序方法\"> 3.4 其他的有序方法</h3>\n<h4 id=\"_3-4-1-最小和最大\"> 3.4.1 最小和最大</h4>\n<p>找到最小或者最大的元素是很简单的，只需要深入左子树或者右子树就可以了。</p>\n<div><pre><code><span>public</span> <span>Key</span> <span>min</span><span>(</span><span>)</span> <span>{</span>\n    <span>return</span> <span>min</span><span>(</span>root<span>)</span><span>.</span>key<span>;</span>\n<span>}</span>\n\n<span>private</span> <span>Node</span> <span>min</span><span>(</span><span>Node</span> x<span>)</span> <span>{</span>\n    <span>if</span> <span>(</span>x<span>.</span>left <span>==</span> <span>null</span><span>)</span> <span>return</span> x<span>;</span>\n    <span>return</span> <span>min</span><span>(</span>x<span>.</span>left<span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h4 id=\"_3-4-2-向下取整-向上取整\"> 3.4.2 向下取整/向上取整</h4>\n<p>这两个方法的目的是寻找到一个<strong>不大于或者不小于输入节点</strong>的节点</p>\n<p>我们使用向下取整来举个例子：</p>\n<p>这个方法的核心思想就是：</p>\n<ol>\n<li>\n<p>如果所给的键值比根节点小，那么所需的节点就肯定在<strong>左子树中</strong></p>\n</li>\n<li>\n<p>如果所给的键值比根节点大，那么所需的节点<strong>可能在右子树中</strong></p>\n<blockquote>\n<p>也就是说，如果我们在右子树中找不到所需节点，那么<strong>根节点就是所需节点</strong></p>\n</blockquote>\n</li>\n</ol>\n<div><pre><code><span>public</span> <span>Key</span> <span>floor</span><span>(</span><span>Key</span> key<span>)</span> <span>{</span>\n    <span>Node</span> x <span>=</span> <span>floor</span><span>(</span>root<span>,</span> key<span>)</span><span>;</span>\n    <span>if</span> <span>(</span>x <span>==</span> <span>null</span><span>)</span> <span>return</span> <span>null</span><span>;</span>\n    <span>return</span> x<span>.</span>key<span>;</span>\n<span>}</span>\n\n<span>private</span> <span>Node</span> <span>floor</span><span>(</span><span>Node</span> x<span>,</span> <span>Key</span> key<span>)</span> <span>{</span>\n    <span>if</span> <span>(</span>x <span>==</span> <span>null</span><span>)</span> <span>return</span> <span>null</span><span>;</span>\n    <span>int</span> cmp <span>=</span> key<span>.</span><span>compareTo</span><span>(</span>x<span>.</span>key<span>)</span><span>;</span>\n    <span>if</span> <span>(</span>cmp <span>==</span> <span>0</span><span>)</span> <span>return</span> x<span>;</span>\n    <span>if</span> <span>(</span>cmp <span>&lt;</span> <span>0</span><span>)</span> <span>return</span> <span>floor</span><span>(</span>x<span>.</span>left<span>,</span> key<span>)</span><span>;</span>\n    <span>Node</span> t <span>=</span> <span>floor</span><span>(</span>x<span>.</span>right<span>,</span> key<span>)</span><span>;</span>\n    <span>if</span> <span>(</span>t <span>!=</span> <span>null</span><span>)</span> <span>return</span> t<span>;</span>\n    <span>else</span> <span>return</span> x<span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><h4 id=\"_3-4-3-选择和排序\"> 3.4.3 选择和排序</h4>\n<p>这两个方法是关于节点在树中的排位问题的。</p>\n<p>这也是为什么我们需要维护一个子树的节点总数的原因。</p>\n<p><code>select()</code> 和 <code>rank()</code> 是一对互逆方法，一个给排名，返回键值，另一个给键值，返回排名</p>\n<p>下面用 <code>rank()</code> 方法举个例子，此方法的步骤是：</p>\n<ol>\n<li>\n<p>如果键值和根节点相等，那么根节点的<strong>左子树的总数</strong>就是所给节点的排名</p>\n</li>\n<li>\n<p>如果所给的键值比根节点小，那么就在左子树中寻找</p>\n</li>\n<li>\n<p>如果所给的键值比根节点大，那么在右子树中寻找，此时，所给节点的排名为：</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span style=\"margin-right:0.00773em;\">R</span><span style=\"margin-right:0.03148em;\">ank</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.05764em;\">S</span><span>i</span><span>ze</span><span>(</span><span style=\"margin-right:0.01968em;\">l</span><span>e</span><span style=\"margin-right:0.10764em;\">f</span><span>t</span><span> </span><span>s</span><span>u</span><span>b</span><span>t</span><span>ree</span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.00773em;\">R</span><span style=\"margin-right:0.03148em;\">ank</span><span>(</span><span style=\"margin-right:0.02778em;\">r</span><span>i</span><span style=\"margin-right:0.03588em;\">g</span><span>h</span><span>t</span><span> </span><span>s</span><span>u</span><span>b</span><span>t</span><span>ree</span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1</span></span></span></span></span></p>\n<blockquote>\n<p>左子树中的节点都比根节点小，既然所给节点都比根节点大，那么理应比左子树的节点都要大。所以排名还要加上左子树中的节点个数。其中的 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1</span></span></span></span> 表示的是根节点本身。</p>\n</blockquote>\n</li>\n</ol>\n<div><pre><code><span>public</span> <span>Key</span> <span>select</span><span>(</span><span>int</span> k<span>)</span> <span>{</span>\n    <span>return</span> <span>select</span><span>(</span>root<span>,</span> k<span>)</span><span>.</span>key<span>;</span>\n<span>}</span>\n\n<span>private</span> <span>Node</span> <span>select</span><span>(</span><span>Nodex</span><span>,</span> <span>int</span> k<span>)</span> <span>{</span>\n    <span>if</span> <span>(</span>x <span>==</span> <span>null</span><span>)</span> <span>return</span> <span>null</span><span>;</span>\n    <span>int</span> t <span>=</span> <span>size</span><span>(</span>x<span>.</span>left<span>)</span><span>;</span>\n    <span>if</span> <span>(</span>t <span>></span>k<span>)</span> <span>return</span> <span>select</span><span>(</span>x<span>.</span>left<span>,</span> k<span>)</span><span>;</span>\n    <span>else</span> <span>if</span> <span>(</span>t <span>&lt;</span> k<span>)</span> <span>return</span> <span>select</span><span>(</span>x<span>.</span>right<span>,</span>k <span>-</span> t <span>-</span> <span>1</span><span>)</span><span>;</span>\n    <span>else</span> <span>return</span> x<span>;</span>\n<span>}</span>\n\n<span>public</span> <span>int</span> <span>rank</span><span>(</span><span>Key</span> key<span>)</span> <span>{</span>\n    <span>return</span> <span>rank</span><span>(</span>key<span>,</span> root<span>)</span><span>;</span>\n<span>}</span>\n\n<span>private</span> <span>int</span> <span>rank</span><span>(</span><span>Key</span> key<span>,</span> <span>Node</span> x<span>)</span> <span>{</span>\n    <span>if</span><span>(</span>x <span>==</span> <span>null</span><span>)</span> <span>return</span>  <span>0</span><span>;</span>\n    <span>int</span> cmp <span>=</span> key<span>.</span><span>compareTo</span><span>(</span>x<span>.</span>key<span>)</span><span>;</span>\n    <span>if</span> <span>(</span>cmp <span>&lt;</span> <span>0</span><span>)</span> <span>return</span> <span>rank</span><span>(</span>key<span>,</span> x<span>.</span>left<span>)</span><span>;</span>\n    <span>else</span> <span>if</span> <span>(</span>cmp <span>></span> <span>0</span><span>)</span> <span>return</span> <span>1</span> <span>+</span> <span>size</span><span>(</span>x<span>.</span>left<span>)</span> <span>+</span> <span>rank</span><span>(</span>key<span>,</span> x<span>.</span>right<span>)</span><span>;</span>\n    <span>else</span> <span>return</span> <span>size</span><span>(</span>x<span>.</span>left<span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><blockquote>\n<p>由方法的步骤可以看出，这两个方法都具有浓重的递归特质，使用递归类型的方法会简便得多</p>\n</blockquote>\n<h4 id=\"_3-4-4-范围\"> 3.4.4 范围</h4>\n<p><code>keys()</code> 方法的主要算法思想就是要返回在一个特定范围内的所有键值</p>\n<p>我们使用<strong>队列</strong>来保存这些键值</p>\n<ol>\n<li>\n<p>如果根节点比范围小，那么找右子树</p>\n</li>\n<li>\n<p>如果根节点比范围大，那么找左子树</p>\n</li>\n<li>\n<p>如果根节点在范围内，将其入列，<strong>然后分别找左子树和右子树</strong></p>\n<blockquote>\n<p>这么做的目的是，如果一个节点在范围内，那么它的左子树和右子树<strong>也有可能在范围内</strong></p>\n</blockquote>\n</li>\n</ol>\n<div><pre><code><span>public</span> <span>Iterable</span><span><span>&lt;</span><span>Key</span><span>></span></span> <span>keys</span><span>(</span><span>)</span> <span>{</span>\n    <span>return</span> <span>keys</span><span>(</span><span>min</span><span>(</span><span>)</span><span>,</span> <span>max</span><span>(</span><span>)</span><span>)</span><span>;</span>\n<span>}</span>\n\n<span>public</span> <span>Iterable</span> <span><span>&lt;</span><span>Key</span><span>></span></span> <span>keys</span><span>(</span><span>Key</span> lo<span>,</span> <span>Key</span> hi<span>)</span> <span>{</span>\n    <span>Queue</span><span><span>&lt;</span><span>Key</span><span>></span></span> queue <span>=</span> <span>new</span> <span>Queue</span><span><span>&lt;</span><span>Key</span><span>></span></span><span>(</span><span>)</span><span>;</span>\n    <span>keys</span><span>(</span>root<span>,</span> queue<span>,</span> lo<span>,</span> hi<span>)</span><span>;</span>\n    <span>return</span> queue<span>;</span>\n<span>}</span>\n\n<span>private</span> <span>void</span> <span>keys</span><span>(</span><span>Node</span> x<span>,</span> <span>Queue</span><span><span>&lt;</span><span>Key</span><span>></span></span> queue<span>,</span> <span>Key</span> lo<span>,</span> <span>Key</span> hi<span>)</span> <span>{</span>\n    <span>if</span> <span>(</span>x <span>==</span> <span>null</span><span>)</span> <span>return</span><span>;</span>\n    <span>int</span> comlo <span>=</span> lo<span>.</span><span>compareTo</span><span>(</span>x<span>.</span>key<span>)</span><span>;</span>\n    <span>int</span> cmphi <span>=</span> hi<span>.</span><span>compareTo</span><span>(</span>x<span>.</span>key<span>)</span><span>;</span>\n\n    <span>// Notice that there is no *eles*,</span>\n    <span>// that's because we need to traversal the subtree</span>\n    <span>if</span> <span>(</span>cmplo <span>&lt;</span> <span>0</span><span>)</span> <span>keys</span><span>(</span>x<span>.</span>left<span>,</span> queue<span>,</span> lo<span>,</span> hi<span>)</span><span>;</span>\n    <span>if</span> <span>(</span>cmplo <span>&lt;=</span> <span>0</span> <span>&amp;&amp;</span> cmphi <span>>=</span> <span>0</span><span>)</span> queue<span>.</span><span>enqueue</span><span>(</span>x<span>.</span>key<span>)</span><span>;</span>     <span>// Within range</span>\n    <span>if</span> <span>(</span>cmphi <span>></span> <span>0</span><span>)</span> <span>keys</span><span>(</span>x<span>.</span>right<span>,</span> queue<span>,</span> lo<span>,</span> hi<span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><h2 id=\"_4-性能\"> 4. 性能</h2>\n<p>BST 的性能是<strong>依赖于输入模型的</strong>。</p>\n<p>最好的情况是 BST 完美平衡，也就是说所有叶节点到根节点的距离是<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.36687em;vertical-align:0em;\"></span><span>∼</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.01968em;\">l</span><span style=\"margin-right:0.03588em;\">g</span><span style=\"margin-right:0.10903em;\">N</span></span></span></span></p>\n<p>最坏的情况是 BST 中的每一个节点都在<strong>同一侧</strong>，此时搜寻效率将会减少到 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.02778em;\">O</span><span>(</span><span style=\"margin-right:0.10903em;\">N</span><span>)</span></span></span></span></p>\n<p><img src=\"https://algs4.cs.princeton.edu/32bst/images/bst-best.png\" alt=\"Best Case\" /> <img src=\"https://algs4.cs.princeton.edu/32bst/images/bst-typical.png\" alt=\"Typical Case\" /> <img src=\"https://algs4.cs.princeton.edu/32bst/images/bst-worst.png\" alt=\"Worst Case\" /></p>\n<p>在平均情况下，一个有 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> 个随机键值的二叉树中，插入和未命中搜索需要 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.36687em;vertical-align:0em;\"></span><span>∼</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span>2</span><span style=\"margin-right:0.01968em;\">l</span><span>n</span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> (大约是 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span>1.39</span><span style=\"margin-right:0.01968em;\">l</span><span style=\"margin-right:0.03588em;\">g</span><span style=\"margin-right:0.10903em;\">N</span></span></span></span>) 次的比较;</p>\n<p>对于删除操作，在平均情况下，则需要 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.04em;vertical-align:-0.11333499999999996em;\"></span><span><span><span><span style=\"height:0.9266650000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span style=\"padding-left:0.833em;\"><span style=\"margin-right:0.10903em;\">N</span></span></span><span style=\"top:-2.886665em;\"><span style=\"height:3em;\"></span><span style=\"min-width:0.853em;height:1.08em;\"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span>​</span></span><span><span style=\"height:0.11333499999999996em;\"><span></span></span></span></span></span></span></span></span> 次比较</p>\n<h2 id=\"_5-结论\"> 5. 结论</h2>\n<p>使用 BST 可以很好地解决数组插入和删除引起的性能问题。</p>\n<p>事实上，在 BST 中进行搜索需要大约 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.80556em;vertical-align:-0.05556em;\"></span><span>39%</span></span></span></span> 的额外性能，但是由于插入的开销被减少到了<strong>对数级别</strong>，所以这一额外的花销是值得的。</p>\n<p>但是，BST 没有时间复杂度上的<strong>性能保证</strong>，在最坏情形下，它搜寻一个键仍然需要<strong>线性级别</strong>的时间</p>\n",
      "image": "https://upload.wikimedia.org/wikipedia/commons/thumb/d/da/Binary_search_tree.svg/300px-Binary_search_tree.svg.png",
      "date_published": "2017-02-14T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "《Algorithm 第四版》笔记"
      ]
    },
    {
      "title": "二叉树",
      "url": "https://wafer.li/blog-corners/learning-notes/algorithm-4th-edition/%E4%BA%8C%E5%8F%89%E6%A0%91/",
      "id": "https://wafer.li/blog-corners/learning-notes/algorithm-4th-edition/%E4%BA%8C%E5%8F%89%E6%A0%91/",
      "summary": "<h2 id=\"_1-二叉树的定义\"> 1. 二叉树的定义</h2>\n<p>二叉树是一种每个节点<strong>最多</strong>只能有两个子节点的树</p>\n<blockquote>\n<p>树是一种没有环的连通图</p>\n</blockquote>\n<p>在最顶层的节点叫做<strong>根节点</strong>\n没有子节点的节点叫叶节点，有子节点的节点叫做<strong>内部节点</strong></p>\n",
      "content_html": "<h2 id=\"_1-二叉树的定义\"> 1. 二叉树的定义</h2>\n<p>二叉树是一种每个节点<strong>最多</strong>只能有两个子节点的树</p>\n<blockquote>\n<p>树是一种没有环的连通图</p>\n</blockquote>\n<p>在最顶层的节点叫做<strong>根节点</strong>\n没有子节点的节点叫叶节点，有子节点的节点叫做<strong>内部节点</strong></p>\n\n<h2 id=\"_2-二叉树的类型\"> 2. 二叉树的类型</h2>\n<h3 id=\"_2-1-满二叉树\"> 2.1 满二叉树</h3>\n<p>国内定义：除了最后一层没有子节点以外，其他每一层的节点都有两个子节点</p>\n<p>节点数和深度满足如下关系：</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span><span style=\"margin-right:0.10903em;\">N</span><span><span><span><span style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span style=\"margin-right:0.01968em;\">l</span><span>e</span><span>a</span><span style=\"margin-right:0.10764em;\">f</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.9824379999999999em;vertical-align:-0.08333em;\"></span><span><span>2</span><span><span><span><span style=\"height:0.8991079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>h</span></span></span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1</span></span></span></span></span></p>\n<p>国外定义 : 只有叶节点和度为 2 的节点的树就叫满二叉树</p>\n<p>（在国内一般用国内定义（笑））</p>\n<h3 id=\"_2-2-完全二叉树\"> 2.2 完全二叉树</h3>\n<p>至多只有最下面的两层上的节点的度数可以小于 2，并且最下层的节点都在最左边的若干位置上。</p>\n<p>满二叉树：</p>\n<p><img src=\"https://web.cecs.pdx.edu/~sheard/course/Cs163/Graphics/FullBinary.jpg\" alt=\"Full Binary Tree\" /></p>\n<p>完全二叉树:</p>\n<p><img src=\"https://web.cecs.pdx.edu/~sheard/course/Cs163/Graphics/CompleteBinary.jpg\" alt=\"Complete Binary Tree\" /></p>\n<h2 id=\"_3-实现\"> 3. 实现</h2>\n<h3 id=\"_3-1-数组实现\"> 3.1 数组实现</h3>\n<p>这种实现方法就是按照完全二叉树的形式将节点置于相应的数组单元之中。\n所以，如果一个节点的索引是 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span style=\"margin-right:0.03148em;\">k</span></span></span></span>，那么，\n它的父亲的索引是 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>⌊</span><span style=\"margin-right:0.03148em;\">k</span><span>⌋</span></span></span></span>；\n它的左子结点的索引是 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span>2</span><span style=\"margin-right:0.03148em;\">k</span></span></span></span>，右子结点的索引是 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span>2</span><span style=\"margin-right:0.03148em;\">k</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1</span></span></span></span></p>\n<p>这种实现方式最适合于<strong>完全二叉树</strong>，如果一个不完全的二叉树使用这种方法实现，会浪费许多的空间。</p>\n<h3 id=\"_3-2-链表实现\"> 3.2 链表实现</h3>\n<p>相对于数组来说，使用链表实现能节省更多的空间。它的节点由三部分组成：\n数据域，左子结点指针，和右子结点指针</p>\n<p>Node:</p>\n<table style=\"width:20em;\">\n<tr>\n<td style=\"text-align:center;vertical-align:middle;\">leftChild</td> <td style=\"text-align:center;vertical-align:middle;\">data</td> <td style=\"text-align:center;vertical-align:middle;\">rightChild</td>\n</tr>\n</table>\n<h2 id=\"_4-遍历算法\"> 4. 遍历算法</h2>\n<p>一般来说，有三种方法可以遍历一个二叉树，它们是：</p>\n<ol>\n<li>先序遍历（<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.02778em;\">D</span><span>L</span><span style=\"margin-right:0.00773em;\">R</span></span></span></span>）</li>\n<li>中序遍历（<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>L</span><span style=\"margin-right:0.02778em;\">D</span><span style=\"margin-right:0.00773em;\">R</span></span></span></span>）</li>\n<li>后序遍历（<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>L</span><span style=\"margin-right:0.00773em;\">R</span><span style=\"margin-right:0.02778em;\">D</span></span></span></span>）</li>\n</ol>\n<blockquote>\n<p>它们都属于<strong>深度优先遍历</strong>方法\n注意，只有三种方法的前提是<strong>左子结点比右子结点大</strong>，如果抛弃这个前提，则有至多六种方法</p>\n</blockquote>\n<h3 id=\"_4-1-深度优先遍历\"> 4.1 深度优先遍历</h3>\n<blockquote>\n<p>所谓的<strong>深度优先</strong>，指的是，<strong>优先搜索子孙节点，而不是优先搜索兄弟节点</strong></p>\n</blockquote>\n<h4 id=\"_4-1-1-先序遍历\"> 4.1.1  先序遍历</h4>\n<ol>\n<li>访问根节点</li>\n<li>递归访问左子节点</li>\n<li>递归访问右子结点</li>\n</ol>\n<h4 id=\"_4-1-2-中序遍历\"> 4.1.2 中序遍历</h4>\n<ol>\n<li>递归访问左子结点</li>\n<li>访问根节点</li>\n<li>递归访问右子结点</li>\n</ol>\n<h4 id=\"_4-1-3-后序遍历\"> 4.1.3 后序遍历</h4>\n<ol>\n<li>递归访问左子结点</li>\n<li>递归访问右子结点</li>\n<li>访问根节点</li>\n</ol>\n<h3 id=\"_4-2-广度优先\"> 4.2 广度优先</h3>\n<p>所谓的<strong>广度优先</strong>，就是<strong>优先访问兄弟节点，而不是子孙节点</strong>\n直到当前层访问完成前，都不进入下一层进行遍历</p>\n<blockquote>\n<p>一般使用队列来实现这种访问策略</p>\n</blockquote>\n<div><pre><code>\n<span>interface</span> <span>Visitable</span><span><span>&lt;</span><span>Item</span><span>></span></span> <span>{</span>\n    <span>void</span> <span>onVisit</span><span>(</span><span>Item</span> item<span>)</span><span>;</span>\n<span>}</span>\n\n<span>class</span> <span>BreadthFirst</span> <span>{</span>\n    <span>Visitable</span><span><span>&lt;</span><span>Node</span><span>></span></span> visiter<span>;</span>\n    <span>.</span><span>.</span><span>.</span><span>.</span>\n    <span>void</span> <span>breadFirstTraversal</span><span>(</span><span>Node</span> root<span>)</span> <span>{</span>\n        <span>Queue</span> q <span>=</span> <span>new</span> <span>Queue</span><span>(</span><span>)</span><span>;</span>\n        q<span>.</span><span>enQueue</span><span>(</span>root<span>)</span><span>;</span>\n        <span>while</span> <span>(</span><span>!</span>q<span>.</span><span>isEmpty</span><span>(</span><span>)</span><span>)</span> <span>{</span>\n            <span>Node</span> node <span>=</span> q<span>.</span><span>deQueue</span><span>(</span><span>)</span><span>;</span>\n            visiter<span>.</span><span>onVisit</span><span>(</span>node<span>)</span><span>;</span>\n            <span>if</span><span>(</span>node<span>.</span>lChild <span>!=</span> <span>null</span><span>)</span> <span>{</span>\n                q<span>.</span><span>enQueue</span><span>(</span>node<span>.</span>lChild<span>)</span><span>;</span>\n            <span>}</span>\n            <span>if</span><span>(</span>node<span>.</span>rChild <span>!=</span> <span>null</span><span>)</span> <span>{</span>\n                q<span>.</span><span>enQueue</span><span>(</span>node<span>.</span>rChild<span>)</span><span>;</span>\n            <span>}</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><h2 id=\"_5-线索二叉树\"> 5. 线索二叉树</h2>\n<p>线索二叉树指的是，当我们使用链表来实现一个二叉树时，\n使用一些节点的空的指针域来储存相应遍历策略的前一个或者后一个节点。</p>\n<p>从而起到方便遍历和提高空间利用率的作用。</p>\n<p>需要注意的是，一个线索二叉树是和它采用的<strong>访问策略</strong>相关的，同一个二叉树采用不同的访问策略，其对应的线索二叉树也会不同。</p>\n<p>具体来说，对于两个子节点都为空的情况下，二叉树的左子树指向其遍历的前驱，右子树指向其遍历的后继。</p>\n<h3 id=\"_5-0-调整数据结构\"> 5.0 调整数据结构</h3>\n<p>为了建立一个线索二叉树，我们需要对节点的数据域进行一些调整。</p>\n<blockquote>\n<p>增加了两个指示是否是子节点的 flag</p>\n</blockquote>\n<p>The Threaded Binary Tree Node:\n<table>\n<tr>\n<td style=\"text-align:center;\"><b>boolean</b> leftFlag</td>\n<td style=\"text-align:center;\">leftChild</td>\n<td style=\"text-align:center;\">Data</td>\n<td style=\"text-align:center;\">rightChild</td>\n<td style=\"text-align:center;\"><b>boolean</b> rightFlag</td>\n</tr>\n</table></p>\n<h3 id=\"_5-1-二叉树的中序线索化\"> 5.1 二叉树的中序线索化</h3>\n<p>二叉树的线索化，实际上就是在遍历过程中，修改空链接的过程。</p>\n<p>所以二叉树的线索化是和其遍历策略相关的。</p>\n<p>对于中序遍历而言，就是在中序遍历过程中，将它的空链接给修改的过程。</p>\n<div><pre><code><span>public</span> <span>class</span> <span>ThreadedBinaryTree</span> <span>{</span>\n    <span>Data</span> data<span>;</span>\n    <span>ThreadedBinaryTree</span> leftChild<span>;</span>\n    <span>boolean</span> leftFlag<span>;</span>\n    <span>ThreadedBinaryTree</span> rightChild<span>;</span>\n    <span>boolean</span> rightFlag<span>;</span>\n<span>}</span>\n\n<span>// 使用全局变量存储前驱</span>\n<span>ThreadedBinaryTree</span> pre<span>;</span>\n\n<span>public</span> <span>void</span> <span>threadingBinaryTree</span><span>(</span><span>ThreadedBinaryTree</span> root<span>)</span> <span>{</span>\n    <span>if</span> <span>(</span>root <span>==</span> <span>null</span><span>)</span>\n        <span>return</span><span>;</span>\n\n    <span>threadingBinaryTree</span><span>(</span>root<span>.</span>leftChild<span>)</span><span>;</span>\n\n    <span>if</span> <span>(</span>root<span>.</span>leftChild <span>==</span> <span>null</span><span>)</span> <span>{</span>\n        root<span>.</span>leftFlag <span>=</span> <span>true</span><span>;</span>\n        root<span>.</span>leftChild <span>=</span> pre<span>;</span>\n    <span>}</span>\n\n    <span>if</span> <span>(</span>pre<span>.</span>rightChild <span>==</span> <span>null</span><span>)</span> <span>{</span>\n        pre<span>.</span>rightFlag <span>=</span> <span>true</span><span>;</span>\n        pre<span>.</span>rightChild <span>=</span> root<span>;</span> <span>// 指向后继，即当前节点</span>\n    <span>}</span>\n\n    pre <span>=</span> root<span>;</span>\n\n    <span>threadingBinaryTree</span><span>(</span>root<span>.</span>rightChild<span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br></div></div><p>上面对于右子节点处理的时候要用 <code>pre</code> 的原因是：右子节点指向 <strong>后继</strong>，而后继是需要访问到下一个节点才能获取得到的；</p>\n<p>所以对右子节点的处理才会使用 <code>pre</code>，是因为当前节点就是 <code>pre</code> 的后继。</p>\n<h2 id=\"_6-二叉树和森林\"> 6. 二叉树和森林</h2>\n<h3 id=\"_6-1-森林的定义\"> 6.1 森林的定义</h3>\n<p>森林是由多个独立的二叉树组成的数据结构</p>\n<p><img src=\"https://helloacm.com/wp-images/acm/2012/data-structure/disjoint1.jpg\" alt=\"Forest\" /></p>\n<blockquote>\n<p>我们可以通过连接他们的根节点来构造一棵大型的树</p>\n</blockquote>\n<h3 id=\"_6-2-森林的表示法\"> 6.2 森林的表示法</h3>\n<p>为了能在物理上表示一个森林，我们首先会将其变成一棵大型的树，仅仅将它们的根节点连接起来即可。</p>\n<h4 id=\"_6-2-1-孩子兄弟表示法\"> 6.2.1 孩子兄弟表示法</h4>\n<p>首先这个适用于链表实现的树。\n森林的节点由三部分组成：</p>\n<ol>\n<li>数据域</li>\n<li>左子结点指针</li>\n<li>右边的兄弟节点指针</li>\n</ol>\n<p>Node:\n<table style=\"width:20em;\">\n<tr>\n<td style=\"text-align:center;vertical-align:middle;\">leftChild</td> <td style=\"text-align:center;vertical-align:middle;\">Data</td> <td style=\"text-align:center;vertical-align:middle;\">brother</td>\n</tr>\n</table></p>\n<p>既然，这个节点含有的域和一个二叉树的节点含有的域的数目和类型都是相同的。</p>\n<p><strong>那么我们就可以在物理结构上将其认为是一个二叉树；</strong></p>\n<p>这为我们提供了很大的便利性，由于森林可以转换为树，而任何的树都可以通过<strong>孩子兄弟表示法</strong>来转换为二叉树。</p>\n<p>所以我们可以使用二叉树的遍历方法来对任何的树形结构进行遍历。</p>\n<h2 id=\"_7-哈夫曼树\"> 7. 哈夫曼树</h2>\n<p>哈夫曼树，也被叫做<strong>最优二叉树</strong>，是一种最小边权的加权二叉树</p>\n<h3 id=\"_7-1-特点\"> 7.1 特点</h3>\n<ol>\n<li>相同权重的哈夫曼树不是唯一的</li>\n<li>哈夫曼树的子树可以随意调换，这个调换并不会影响到它的长度</li>\n<li>具有权重的节点都是叶节点，其余节点的权重都是通过叶节点的权重相加得到的</li>\n<li>拥有最大权重的节点，最靠近根节点</li>\n<li>哈夫曼树没有度为 1 的节点</li>\n<li>一个拥有 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> 个叶节点的哈夫曼树，拥有 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span>2</span><span style=\"margin-right:0.10903em;\">N</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1</span></span></span></span> 个节点</li>\n</ol>\n<h3 id=\"_7-2-构造\"> 7.2 构造</h3>\n<ol>\n<li>将给出的加权节点置于一个集合中</li>\n<li>从中选出 2 个最小权重的节点，将他们的权重相加，得到一个新的节点作为它们的根节点。</li>\n<li>将这两个节点从集合中去除，同时将那个根节点加入到集合中</li>\n<li>重复步骤 2 和 3，直到这个集合为空</li>\n</ol>\n<p>例如，假如我们有 5 个加权的节点</p>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tNc79ly1fnxgv39lwhj306901bgle.jpg\" alt=\"Huffman Nodes\" /></p>\n<p>根据上面的步骤，我们可以得到如下的树：</p>\n<p><img src=\"https://ws4.sinaimg.cn/large/006tNc79ly1fnxgvuox7kj307706ywed.jpg\" alt=\"\" /></p>\n<p>或者如下的树：</p>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tNc79ly1fnxgw9hmylj307x073wed.jpg\" alt=\"\" /></p>\n<p>注意，具有相同权重的哈夫曼树不是唯一的。</p>\n<h3 id=\"_7-3-应用-哈弗曼编码\"> 7.3 应用：哈弗曼编码</h3>\n<p>哈夫曼编码是基于字词的使用频率对其赋予权重，使用哈弗曼树来减少编码大小的一种技术。</p>\n<p>由于哈夫曼树的权重最大（频率最为频繁）的节点最靠近根节点，所以它能显著减少编码所需要的体积</p>\n<p>综上所述，我们定义左斜的边为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0</span></span></span></span>，右斜的边为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1</span></span></span></span>，\n那么，上面的哈夫曼树对应的编码为：</p>\n<ul>\n<li>5 = '11'</li>\n<li>4 = '10'</li>\n<li>3 = '00'</li>\n<li>2 = '011'</li>\n<li>1 = '010'</li>\n</ul>\n<blockquote>\n<p>注意，这样的定义是为了不出现识别冲突</p>\n</blockquote>\n",
      "image": "https://web.cecs.pdx.edu/~sheard/course/Cs163/Graphics/FullBinary.jpg",
      "date_published": "2016-10-14T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "《Algorithm 第四版》笔记"
      ]
    },
    {
      "title": "优先队列和堆排序",
      "url": "https://wafer.li/blog-corners/learning-notes/algorithm-4th-edition/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97%E5%92%8C%E5%A0%86%E6%8E%92%E5%BA%8F/",
      "id": "https://wafer.li/blog-corners/learning-notes/algorithm-4th-edition/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97%E5%92%8C%E5%A0%86%E6%8E%92%E5%BA%8F/",
      "summary": "<h2 id=\"_1-介绍\"> 1. 介绍</h2>\n<p>优先队列是一种类似队列的数据结构，但是支持<strong>删除最大或最小元素</strong>以及<strong>插入元素</strong></p>\n<p>最重要的一点是，优先队列能存储很大的数据量，或者当你的内存很小的时候进行一些队列的操作</p>\n",
      "content_html": "<h2 id=\"_1-介绍\"> 1. 介绍</h2>\n<p>优先队列是一种类似队列的数据结构，但是支持<strong>删除最大或最小元素</strong>以及<strong>插入元素</strong></p>\n<p>最重要的一点是，优先队列能存储很大的数据量，或者当你的内存很小的时候进行一些队列的操作</p>\n\n<h2 id=\"_2-基本实现\"> 2. 基本实现</h2>\n<ol>\n<li>\n<p>数组实现（无序）</p>\n<blockquote>\n<p>当次序不重要的时候，我们可以重用<strong>栈</strong>这一数据结构。\n<code>insert()</code> 方法就类似<strong>栈</strong>的 <code>push()</code> 方法\n对于 <code>deleteMax()</code> 方法，我们可以采用将<strong>最大的元素交换到栈顶</strong>的方法实现</p>\n</blockquote>\n</li>\n<li>\n<p>数组实现（有序）</p>\n<blockquote>\n<p>当需要次序的时候，我们使用数组用于保持元素的次序\n为了维持这一次序，我们可以在插入的是偶将大的元素往右移动，这样，整个数组就会都是有序的。\n这时，我们只需要简单的调用 <code>pop()</code> 方法即可实现删除最大元素</p>\n</blockquote>\n</li>\n<li>\n<p>链表实现</p>\n<blockquote>\n<p>由于上面使用了<strong>栈</strong>和<strong>队列</strong>这几种数据结构，我们可以使用更高效的链表来实现他们。\n具体的算法思想和数组实现一致。</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"_3-二叉堆实现\"> 3. 二叉堆实现</h2>\n<h3 id=\"_3-1-二叉堆的定义\"> 3.1 二叉堆的定义</h3>\n<p>二叉堆是一个满足<strong>堆有序</strong>的<strong>完全二叉树</strong></p>\n<blockquote>\n<p>堆有序：当所有的二叉树节点都<strong>大于或等于</strong>他们的<strong>两个子节点</strong>时，称二叉树堆有序</p>\n</blockquote>\n<blockquote>\n<p>推论：二叉堆的根节点比任何节点都要大</p>\n</blockquote>\n<h3 id=\"_3-2-二叉堆的表示法\"> 3.2 二叉堆的表示法</h3>\n<p>因为二叉堆是一个<strong>完全二叉树</strong>；</p>\n<p>所以，我们可以轻松的使用数组来表示一个二叉堆。</p>\n<p>即，当前节点为 <code>k</code>，则左子节点为 <code>2k</code>，右子节点为 <code>2k + 1</code></p>\n<blockquote>\n<p>此时，由于除法只会返回商，所以一个节点无论它是左子节点还是右子节点，其父节点都是 <code>k / 2</code>。</p>\n</blockquote>\n<p><strong>需要注意的是，为了与参数上的索引对应，我们不使用 <code>a[0]</code></strong></p>\n<h3 id=\"_3-3-原理\"> 3.3 原理</h3>\n<p>主要的原理是<strong>如何去重新排序一个二叉堆</strong>\n当我们进行比较和交换的时候，二叉堆的顺序将会被打破，所以我们需要重建二叉堆(<strong>reheapifying</strong>)</p>\n<p>主要的算法思想是<strong>上浮</strong>和<strong>下沉</strong>\n当一个节点获得了更高的优先级的时候，我们将其上浮，通常是由于我们在二叉堆的底部插入了一个新节点导致的。</p>\n<p>当一个节点优先级降低时，我们将它下沉，通常是我们用一个低优先级的节点替换了根节点的时候（其实是进行了删除操作）</p>\n<ol>\n<li>\n<p>上浮</p>\n<blockquote>\n<p>当一个节点比他的父节点大的时，我们将它和它的父亲交换以恢复二叉堆的次序\n<strong>这是一个递归的操作，如果上浮后还存在二叉堆次序损坏，那么就继续上浮</strong></p>\n</blockquote>\n</li>\n<li>\n<p>下沉</p>\n<blockquote>\n<p>当一个节点比它的<strong>两个子节点</strong>都要小的时候，我们将它与<strong>较大的子节点交换</strong>以恢复二叉堆的次序    <strong>如果下沉之后仍存在此情况，继续下沉</strong></p>\n</blockquote>\n</li>\n</ol>\n<div><pre><code><span>private</span> <span>void</span> <span>swim</span><span>(</span><span>int</span> k<span>)</span> <span>{</span>\n    <span>while</span><span>(</span>k <span>></span> <span>1</span> <span>&amp;&amp;</span> <span>less</span><span>(</span>k <span>/</span> <span>2</span><span>,</span> k<span>)</span><span>)</span> <span>{</span>\n        <span>exch</span><span>(</span>k<span>,</span> k <span>/</span> <span>2</span><span>)</span><span>;</span>\n        k <span>=</span> k <span>/</span> <span>2</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n\n<span>private</span> <span>void</span> <span>sink</span><span>(</span><span>int</span> k<span>)</span> <span>{</span>\n    <span>while</span><span>(</span>k <span>*</span> <span>2</span> <span>&lt;</span> <span>N</span><span>)</span> <span>{</span>\n        <span>int</span> j <span>=</span> k <span>*</span> <span>2</span><span>;</span>\n\n        <span>if</span> <span>(</span><span>less</span><span>(</span>j<span>,</span> j <span>+</span> <span>1</span><span>)</span><span>)</span> <span>{</span>\n            j <span>++</span><span>:</span>\n        <span>}</span>\n\n        <span>if</span> <span>(</span><span>!</span><span>less</span><span>(</span>k<span>,</span> j<span>)</span><span>)</span> <span>{</span>\n            <span>break</span><span>;</span>\n        <span>}</span>\n\n        <span>exch</span><span>(</span>k<span>,</span> j<span>)</span><span>;</span>\n        k <span>=</span> j<span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><h3 id=\"_3-4-实现\"> 3.4 实现</h3>\n<ol>\n<li>\n<p>插入元素</p>\n<blockquote>\n<p>我们将一个新元素插入到数组尾部，增大堆的大小，然后将元素<strong>上浮</strong></p>\n</blockquote>\n</li>\n<li>\n<p>删除最大元素</p>\n<blockquote>\n<p>我们将位于<strong>数组尾部的元素</strong>和<strong>根节点</strong>交换，然后<strong>删除原来的根节点</strong>，将新的根节点<strong>下沉</strong></p>\n</blockquote>\n</li>\n</ol>\n<div><pre><code><span>public</span> <span>void</span> <span>insert</span><span>(</span><span>Key</span> v<span>)</span> <span>{</span>\n    pq<span>[</span><span>++</span> <span>N</span><span>]</span> <span>=</span> v<span>;</span>\n    <span>swim</span><span>(</span><span>N</span><span>)</span><span>;</span>\n<span>}</span>\n\n<span>public</span> <span>Key</span> <span>delMax</span><span>(</span><span>)</span> <span>{</span>\n    <span>Key</span> max <span>=</span> pq<span>[</span><span>1</span><span>]</span><span>;</span>\n    <span>exch</span><span>(</span><span>1</span><span>,</span> <span>N</span><span>--</span><span>)</span><span>;</span>\n    pq<span>[</span><span>N</span> <span>+</span> <span>1</span><span>]</span> <span>=</span> <span>null</span><span>;</span>   <span>// Prevent the object free</span>\n    <span>sink</span><span>(</span><span>1</span><span>)</span><span>;</span>\n    <span>return</span> max<span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h2 id=\"_4-索引优先队列\"> 4. 索引优先队列</h2>\n<p>索引优先队列是一种带了索引的优先队列；</p>\n<p>这里的索引指的是，队列中的元素 <strong>在队列的位置。</strong></p>\n<p>至于优先队列为何需要索引，实际上是为了方便修改队列里的数据。</p>\n<p>有了这个索引，我们就可以处理一些大型的输入数据（甚至可能都没办法一次性读入内存的数据），或者在一些小内存机器上工作</p>\n<p>主要的改变有：</p>\n<ol>\n<li>\n<p>我们将元素和它的索引一起插入</p>\n</li>\n<li>\n<p>我们删除最大元素的时候，返回它的索引</p>\n</li>\n</ol>\n<h3 id=\"_4-1-实现\"> 4.1 实现</h3>\n<p>使用 3 个数组：</p>\n<ol>\n<li>\n<p><code>pq[]</code></p>\n<blockquote>\n<p>优先队列的堆，下标是堆的位置，值是 <strong>索引</strong></p>\n</blockquote>\n</li>\n<li>\n<p><code>qp[]</code></p>\n<blockquote>\n<p>索引数组，是 <code>pq[]</code> 的反转，值是堆的位置</p>\n</blockquote>\n</li>\n<li>\n<p><code>keys[]</code></p>\n<blockquote>\n<p>对象数组，下标是索引，值是对象本身</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"_4-2-使用优先队列的多项归并\"> 4.2 使用优先队列的多项归并</h3>\n<div><pre><code><span>public</span> <span>class</span> <span>Multiway</span> <span>{</span>\n\n    <span>public</span> <span>static</span> <span>void</span> <span>merge</span><span>(</span><span>In</span><span>[</span><span>]</span> streams<span>)</span> <span>{</span>\n        <span>int</span> <span>N</span> <span>=</span> streams<span>.</span>lenth<span>;</span>\n        <span>// Notice tha the N is the number of the STREAM,</span>\n        <span>// not the input strings.</span>\n        <span>IndexMinPQ</span><span><span>&lt;</span><span>String</span><span>></span></span> pq <span>=</span> <span>new</span> <span>IndexMinPQ</span><span><span>&lt;</span><span>String</span><span>></span></span> <span>(</span><span>N</span><span>)</span><span>;</span>\n\n        <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>N</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>\n            <span>if</span> <span>(</span><span>!</span>streams<span>[</span>i<span>]</span><span>.</span><span>isEmpty</span><span>(</span><span>)</span><span>)</span> <span>{</span>  <span>// That is a Stream</span>\n                <span>// Insert the stream</span>\n                pq<span>.</span><span>insert</span><span>(</span>i<span>,</span> streams<span>[</span>i<span>]</span><span>.</span><span>readString</span><span>(</span><span>)</span><span>)</span><span>;</span>\n            <span>}</span>\n        <span>}</span>\n\n        <span>while</span> <span>(</span><span>!</span>pq<span>.</span><span>isEmpty</span><span>(</span><span>)</span><span>)</span> <span>{</span>\n            <span>// Output the Min element</span>\n            <span>StdOut</span><span>.</span><span>println</span><span>(</span>pq<span>.</span><span>min</span><span>(</span><span>)</span><span>)</span><span>;</span>\n            <span>int</span> i <span>=</span> pq<span>.</span><span>delMin</span><span>(</span><span>)</span><span>;</span>\n\n            <span>// Keep reading next String</span>\n            <span>if</span> <span>(</span><span>!</span>streams<span>[</span>i<span>]</span><span>.</span><span>isEmpty</span><span>(</span><span>)</span><span>)</span> <span>{</span>\n                pq<span>.</span><span>insert</span><span>(</span>i<span>,</span> streams<span>[</span>i<span>]</span><span>.</span><span>readString</span><span>(</span><span>)</span><span>)</span><span>;</span>\n            <span>}</span>\n        <span>}</span>\n\n    <span>}</span>\n\n\n    <span>public</span> <span>static</span> <span>void</span> <span>main</span><span>(</span><span>String</span><span>[</span><span>]</span> args<span>)</span> <span>{</span>\n        <span>int</span> <span>N</span> <span>=</span> args<span>.</span>lenth<span>;</span>\n        <span>In</span><span>[</span><span>]</span> streams <span>=</span> <span>new</span> <span>In</span><span>[</span><span>N</span><span>]</span><span>;</span>\n        <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>N</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>\n            streams<span>[</span>i<span>]</span> <span>=</span> <span>new</span> <span>In</span><span>(</span>args<span>[</span>i<span>]</span><span>)</span><span>;</span>\n        <span>}</span>\n        <span>merge</span><span>(</span>streams<span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br></div></div><h2 id=\"_5-堆排序\"> 5. 堆排序</h2>\n<p>堆排序是优先队列的一种应用；\n它将元素插入到优先队列中，然后通过删除最大元素或者删除最小元素来达到排序的目的</p>\n<p>这个算法由于使用了优先队列，它能处理一些特别大型的数据，或者在一些小内存机器上使用。</p>\n<p>它包含了两个步骤，<strong>建立二叉堆</strong>和<strong>销毁二叉堆</strong></p>\n<h3 id=\"_5-1-实现原理\"> 5.1 实现原理</h3>\n<h4 id=\"_5-1-1-建立二叉堆\"> 5.1.1 建立二叉堆</h4>\n<p>需要注意的是，<strong>数组其实就是一个二叉堆！</strong>\n所以我们只需要对数组进行<strong>二叉堆重建(reheapifying)</strong>，那么建立的步骤就完成了</p>\n<div><pre><code><span>for</span> <span>(</span><span>int</span> k <span>=</span> <span>N</span> <span>/</span> <span>2</span><span>;</span> k <span>>=</span> <span>1</span><span>;</span> k<span>--</span><span>)</span> <span>{</span>\n    <span>sink</span><span>(</span>pq<span>,</span> k<span>,</span> <span>N</span><span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h4 id=\"_5-1-2-销毁二叉堆-排序\"> 5.1.2 销毁二叉堆（排序）</h4>\n<p>二叉堆可以帮助我们获取最大或者最小的元素，所以我们只需要将其删除出二叉堆，然后插入到一个新数组就可以了。</p>\n<p>但是要注意的是，我们应该如何去删除最大的元素呢？\n实际上，我们不需要真正的“删除”这个元素（即释放它的内存）；\n我们只是在进行排序，所以我们只需要将它<strong>交换</strong>，或者说将它放到正确的位置，即可。</p>\n<div><pre><code><span>while</span> <span>(</span><span>N</span><span>></span><span>1</span><span>)</span> <span>{</span>\n    <span>exch</span><span>(</span>a<span>,</span><span>1</span><span>,</span> <span>N</span><span>--</span><span>)</span><span>;</span>\n    <span>sink</span><span>(</span>a<span>,</span> <span>1</span><span>,</span> <span>N</span><span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id=\"_5-2-实现\"> 5.2 实现</h3>\n<div><pre><code><span>public</span> <span>static</span> <span>void</span> <span>sort</span><span>(</span><span>Comparable</span><span>[</span><span>]</span> a<span>)</span> <span>{</span>\n    <span>int</span> <span>N</span> <span>=</span> a<span>.</span>lenth<span>;</span>\n\n    <span>/**\n    * Build the heap\n    * We only need to traversal the nodes\n    * who contains children.\n    * As the heap's theory, we convince that the k = N/2\n    */</span>\n    <span>for</span> <span>(</span><span>int</span> k <span>=</span> <span>N</span><span>/</span><span>2</span><span>;</span> k <span>>=</span> <span>1</span><span>;</span> k<span>--</span><span>)</span> <span>{</span>\n        <span>sink</span><span>(</span>a<span>,</span> k<span>,</span> <span>N</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>// Destory the heap</span>\n    <span>while</span> <span>(</span><span>N</span><span>></span><span>1</span><span>)</span> <span>{</span>\n        <span>exch</span><span>(</span>a<span>,</span><span>1</span><span>,</span> <span>N</span><span>--</span><span>)</span><span>;</span>\n        <span>sink</span><span>(</span>a<span>,</span> <span>1</span><span>,</span> <span>N</span><span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><p>注意，如果需要升序，应该使用删除最大元素的二叉堆；</p>\n<p>同理，如果需要降序，应该使用删除最小元素的二叉堆；</p>\n<p>因为交换使得删除的元素被交换到了数组尾部。</p>\n<p>需要注意的是，我们这里使用的是 1-base 的堆，而普通的数组是 0-base 的；</p>\n<p>所以需要在索引计算上小心谨慎。</p>\n<h3 id=\"_5-3-性能\"> 5.3 性能</h3>\n<p>进行 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> 个数据元素的排序，堆排序仅仅需要 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>(</span><span>2</span><span style=\"margin-right:0.01968em;\">Nl</span><span style=\"margin-right:0.03588em;\">g</span><span style=\"margin-right:0.10903em;\">N</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>2</span><span style=\"margin-right:0.10903em;\">N</span><span>)</span></span></span></span> 次的比较和一半的交换</p>\n<p>虽然它的时间复杂度是线性级别的，但是它需要很少的内存就可以处理很大型的数据。</p>\n<p>同时，堆排序在最坏情况下<strong>可以保证</strong> <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.01968em;\">Nl</span><span>o</span><span style=\"margin-right:0.03588em;\">g</span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> 的复杂度，而且是<strong>原地排序</strong>（不需要多余空间）</p>\n<p>尽管如此，堆排序的应用仍然没有快速排序广泛和频繁，主要是因为：</p>\n<ol>\n<li>\n<p>堆排序的内循环比快速排序要复杂</p>\n<blockquote>\n<p>循环技术和各种需要注意的地方较快速排序多</p>\n</blockquote>\n</li>\n<li>\n<p>堆排序<strong>不能有效利用缓存</strong></p>\n<blockquote>\n<p>堆排序载入大数组时，数组的引用会很可能布满整个内存，而快速排序是递归调用，保留着很多局部的引用，所以快速排序在<strong>利用缓存的效率上</strong>比堆排序高。</p>\n</blockquote>\n<blockquote>\n<p>现代机器的缓存命中率一般都会在 95% 以上，所以<strong>有效的利用缓存是很重要的</strong>。</p>\n</blockquote>\n</li>\n<li>\n<p>同时和归并排序相比，堆排序是<strong>不稳定</strong>的，在开发一些要求排序稳定性的程序时，显然应该选择归并排序</p>\n</li>\n</ol>\n",
      "date_published": "2017-02-12T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "《Algorithm 第四版》笔记"
      ]
    },
    {
      "title": "基本排序算法",
      "url": "https://wafer.li/blog-corners/learning-notes/algorithm-4th-edition/%E5%9F%BA%E6%9C%AC%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/",
      "id": "https://wafer.li/blog-corners/learning-notes/algorithm-4th-edition/%E5%9F%BA%E6%9C%AC%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/",
      "summary": "<p>成本模型：\n一般为元素<strong>比较</strong>和<strong>交换</strong>的次数。\n如果<strong>不需要比较和交换</strong>，那么我们计算<strong>数组访问</strong>的次数</p>\n",
      "content_html": "<p>成本模型：\n一般为元素<strong>比较</strong>和<strong>交换</strong>的次数。\n如果<strong>不需要比较和交换</strong>，那么我们计算<strong>数组访问</strong>的次数</p>\n\n<h2 id=\"_1-冒泡排序\"> 1. 冒泡排序</h2>\n<p>冒泡排序，顾名思义，是通过不断交换相邻元素，让较小的元素向上浮，让较大的元素向下沉的算法。</p>\n<ol>\n<li>从数组头部开始，对每一对相邻元素进行比较，并交换</li>\n<li>索引加一，重复上述操作，直到索引到达数组末尾</li>\n<li>此时，可以保证数组末尾元素必定是最大的元素</li>\n<li>将索引移动范围剪一，并重复上述过程</li>\n</ol>\n<h2 id=\"_1-1-性能\"> 1.1 性能</h2>\n<p>由于需要进行两层循环，冒泡排序的复杂度为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.02778em;\">O</span><span>(</span><span><span style=\"margin-right:0.10903em;\">N</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span><span>)</span></span></span></span>，而且对于已经有序的数组，它也同样需要 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.02778em;\">O</span><span>(</span><span><span style=\"margin-right:0.10903em;\">N</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span><span>)</span></span></span></span> 的复杂度。</p>\n<h2 id=\"_2-选择排序\"> 2. 选择排序</h2>\n<ol>\n<li>找到<strong>最小元素</strong></li>\n<li>把它和<strong>第一个元素</strong>相交换</li>\n<li>在<strong>剩下的元素</strong>中寻找最小元素</li>\n<li>将其和<strong>第二个元素</strong>交换</li>\n<li>重复以上步骤，直到数组排序完毕（元素指针走到数组末尾）</li>\n</ol>\n<h3 id=\"_2-1-性能\"> 2.1 性能</h3>\n<p>在一个长度为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> 的数组中，它需要 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span><span><span style=\"margin-right:0.10903em;\">N</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span></span><span>/</span><span><span>2</span></span></span></span></span> 次的<strong>比较</strong>和 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> 次的交换</p>\n<p>特点：</p>\n<ol>\n<li>所需时间和输入模型无关</li>\n<li>数据的移动是最少的</li>\n</ol>\n<h2 id=\"_3-插入排序\"> 3. 插入排序</h2>\n<p>插入排序的主要思想是在数组的无序部分取元素插入到有序部分中，从而逐步构建有序。</p>\n<blockquote>\n<p>举一个按照升序排列的例子</p>\n</blockquote>\n<ol>\n<li>将 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>a</span><span>[</span><span>i</span><span>]</span></span></span></span> 和 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>a</span><span>[</span><span>0</span><span>]</span></span></span></span> 到 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>a</span><span>[</span><span>i</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>1</span><span>]</span></span></span></span> 中所有比它小的元素依次交换</li>\n<li>保证在 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>a</span><span>[</span><span>i</span><span>]</span></span></span></span> 的左边，元素总是有序的</li>\n<li>当 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.65952em;vertical-align:0em;\"></span><span>i</span></span></span></span> 指针到达数组末尾的时候，排序就完成了。</li>\n</ol>\n<h3 id=\"_3-1-实现\"> 3.1 实现</h3>\n<div><pre><code><span>public</span> <span>static</span> <span>void</span> <span>sort</span><span>(</span><span>Comparable</span><span>[</span><span>]</span> a<span>)</span> <span>{</span>\n    <span>int</span> <span>N</span> <span>=</span> a<span>.</span>length<span>;</span>\n    <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>N</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>\n        <span>for</span> <span>(</span><span>int</span> j <span>=</span> i<span>;</span> j <span>></span> <span>0</span> <span>&amp;&amp;</span> <span>less</span><span>(</span>a<span>[</span>j<span>]</span><span>,</span> a<span>[</span>j<span>-</span><span>1</span><span>]</span><span>)</span><span>;</span> j<span>--</span><span>)</span> <span>{</span>\n            <span>// Compare a[i] with the items which is at its left side.</span>\n            <span>exch</span><span>(</span>a<span>,</span> j<span>,</span> j<span>-</span><span>1</span><span>)</span><span>;</span>\n        <span>}</span>\n        <span>assert</span> <span>isSorted</span><span>(</span>a<span>,</span> <span>0</span><span>,</span> i<span>)</span><span>;</span>\n    <span>}</span>\n    <span>assert</span> <span>isSorted</span><span>(</span>a<span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h3 id=\"_3-2-性能\"> 3.2 性能</h3>\n<p>此算法的性能和输入有关。\n如果输入的序列已经是部分排序的，那么使用这个算法将会比较快；\n但是由于存在嵌套的 <code>for</code> 循环，在最坏情况下仍然需要 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span><span style=\"margin-right:0.10903em;\">N</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span></span></span></span> 次交换</p>\n<p>在之后的排序算法优化中，我们会经常使用插入排序的这一特性，在小数组、部分有序数组中应用插入排序，进一步降低时间复杂度。</p>\n<h3 id=\"_3-3-优化\"> 3.3 优化</h3>\n<h4 id=\"_3-3-1-使用移动代替交换\"> 3.3.1 使用移动代替交换</h4>\n<p>可以在上述算法实现上进行进一步调优。\n可以简单的将大的元素<strong>往右移动</strong>，从而空出一个正确的位置，将所需元素插入即可；\n而不是每次都要交换一次元素。\n这个调优将能<strong>节省一半</strong>的<strong>数组访问开支</strong></p>\n<div><pre><code><span>public</span> <span>static</span> <span>void</span> <span>sort</span><span>(</span><span>Comparable</span><span>[</span><span>]</span> a<span>)</span> <span>{</span>\n    <span>int</span> <span>N</span> <span>=</span> a<span>.</span>length<span>;</span>\n    <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>N</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>\n        <span>int</span> j <span>=</span> i<span>;</span>\n        <span>Comparable</span> t <span>=</span> a<span>[</span>j<span>]</span><span>;</span> <span>// 需要插入的元素</span>\n\n        <span>for</span> <span>(</span><span>;</span> j <span>></span> <span>0</span> <span>&amp;&amp;</span> <span>less</span><span>(</span>a<span>[</span>j<span>]</span><span>,</span> a<span>[</span>j<span>-</span><span>1</span><span>]</span><span>)</span><span>;</span> j<span>--</span><span>)</span> <span>{</span>\n            a<span>[</span>j<span>]</span> <span>=</span> a<span>[</span>j <span>-</span> <span>1</span><span>]</span><span>;</span> <span>// 将大的元素向右移动</span>\n        <span>}</span>\n\n        a<span>[</span>j<span>]</span> <span>=</span> t<span>;</span> <span>// 将元素插入空出的位置</span>\n        <span>assert</span> <span>isSorted</span><span>(</span>a<span>,</span> <span>0</span><span>,</span> i<span>)</span><span>;</span>\n    <span>}</span>\n    <span>assert</span> <span>isSorted</span><span>(</span>a<span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><h4 id=\"_3-3-2-使用二分查找\"> 3.3.2 使用二分查找</h4>\n<p>由于是在有序部分寻找恰当位置插入，可以使用二分查找提高搜索效率</p>\n<div><pre><code><span>public</span> <span>int</span> <span>binaryIndex</span><span>(</span><span>int</span><span>[</span><span>]</span> arr<span>,</span> <span>int</span> lo<span>,</span> <span>int</span> hi<span>,</span> <span>int</span> key<span>)</span> <span>{</span>\n    <span>int</span> mid<span>;</span>\n    <span>while</span> <span>(</span>lo <span>&lt;=</span> hi<span>)</span> <span>{</span>\n        mid <span>=</span> lo <span>+</span> <span>(</span>hi <span>-</span> lo<span>)</span> <span>/</span> <span>2</span><span>;</span>\n        <span>if</span> <span>(</span>arr<span>[</span>mid<span>]</span> <span>&lt;</span> key<span>)</span> <span>{</span>\n            lo <span>=</span> mid <span>+</span> <span>1</span><span>;</span>\n        <span>}</span> <span>else</span> <span>if</span> <span>(</span>arr<span>[</span>mdi<span>]</span> <span>></span> key<span>)</span> <span>{</span>\n            hi <span>=</span> mid <span>-</span> <span>1</span><span>;</span>\n        <span>}</span> <span>else</span> <span>{</span>\n            <span>return</span> mid<span>;</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><h2 id=\"_4-希尔排序\"> 4. 希尔排序</h2>\n<p>希尔排序是基于插入排序的一种排序算法。\n其基本思想是让元素在 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span>h</span></span></span></span> 步长中有序\n如果 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span>h</span></span></span></span> 很大，那么我们就可以将一个元素一次性移动很远</p>\n<h3 id=\"_4-1-实现\"> 4.1 实现</h3>\n<div><pre><code><span>public</span> <span>class</span> <span>Shell</span> <span>{</span>\n    <span>public</span> <span>static</span> <span>void</span> <span>sort</span><span>(</span><span>Comparable</span><span>[</span><span>]</span> a<span>)</span> <span>{</span>\n        <span>// Increasing order of a[]</span>\n\n        <span>int</span> <span>N</span> <span>=</span> a<span>.</span>lenth<span>;</span>\n        <span>int</span> h <span>=</span> <span>1</span><span>;</span>\n\n        <span>while</span> <span>(</span>h <span>&lt;</span> <span>N</span><span>/</span><span>3</span><span>)</span> <span>{</span>   <span>// From N/3 to reduce the h</span>\n                            <span>// 1, 4, 13, 40, 121, 364, 1093, ...</span>\n            h <span>=</span> <span>3</span> <span>*</span> h <span>+</span> <span>1</span><span>;</span>\n        <span>}</span>\n\n        <span>while</span><span>(</span>h <span>>=</span> <span>1</span><span>)</span> <span>{</span>\n            <span>// Make the array h ordered</span>\n\n            <span>for</span><span>(</span><span>int</span> i <span>=</span> h<span>;</span> i <span>&lt;</span> <span>N</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>\n                <span>// Insert the a[i] into the a[i - h], a[i - 2*h] , a[i - 3*h]</span>\n                <span>for</span><span>(</span><span>int</span> j <span>=</span> i<span>;</span> j <span>>=</span> h <span>&amp;&amp;</span> <span>less</span><span>(</span>a<span>[</span>j<span>]</span><span>,</span> a<span>[</span>j <span>-</span> h<span>]</span><span>)</span><span>;</span> j <span>-=</span> h<span>)</span> <span>{</span>\n                    <span>// Replace j-- as the j -= h</span>\n                    <span>exch</span><span>(</span>a<span>,</span> j<span>,</span> j<span>-</span>h<span>)</span>\n                <span>}</span>\n            <span>}</span>\n            h <span>=</span> h <span>/</span> <span>3</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div><h3 id=\"_4-2-性能\"> 4.2 性能</h3>\n<p>希尔排序比插入排序和选择排序都要快；\n但是我们并不能给出一个准确的数学分析证明它的精确增长函数</p>\n<p>但是一个重要的结论已经被证明：</p>\n<p><strong>希尔排序的复杂度达不到平方级别</strong></p>\n<p>这是很神奇的，只是因为改变了插入排序的步长就可以让复杂度下降到平方级别以下。</p>\n",
      "date_published": "2017-02-05T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "《Algorithm 第四版》笔记"
      ]
    },
    {
      "title": "左斜红黑树",
      "url": "https://wafer.li/blog-corners/learning-notes/algorithm-4th-edition/%E5%B7%A6%E6%96%9C%E7%BA%A2%E9%BB%91%E6%A0%91/",
      "id": "https://wafer.li/blog-corners/learning-notes/algorithm-4th-edition/%E5%B7%A6%E6%96%9C%E7%BA%A2%E9%BB%91%E6%A0%91/",
      "summary": "<h2 id=\"_1-介绍\"> 1.  介绍</h2>\n<p>红黑树是 2-3 树的一种简易实现方式，它拥有两种链接，红链接和黑链接。</p>\n<p>黑链接是普通的二叉查找树链接，红链接表示了一个 3-节点</p>\n<p><img src=\"https://algs4.cs.princeton.edu/33balanced/images/redblack-encoding.png\" alt=\"Red Black Tree\" /></p>\n<p>在这里，我们使用的是<strong>左斜的红黑树</strong>，它满足以下条件：</p>\n<ol>\n<li>红链接永远在左边（向左倾斜）</li>\n<li>一个节点不能同时链接两个红链接</li>\n<li>红黑树是<strong>完美黑链接平衡的</strong></li>\n</ol>\n<p>需要注意的是，如果红黑树满足以上条件，那么其和 2-3 树就是等价的。\n事实上，如果把红链接画平，那么红黑树就是一个 2-3 树。</p>\n",
      "content_html": "<h2 id=\"_1-介绍\"> 1.  介绍</h2>\n<p>红黑树是 2-3 树的一种简易实现方式，它拥有两种链接，红链接和黑链接。</p>\n<p>黑链接是普通的二叉查找树链接，红链接表示了一个 3-节点</p>\n<p><img src=\"https://algs4.cs.princeton.edu/33balanced/images/redblack-encoding.png\" alt=\"Red Black Tree\" /></p>\n<p>在这里，我们使用的是<strong>左斜的红黑树</strong>，它满足以下条件：</p>\n<ol>\n<li>红链接永远在左边（向左倾斜）</li>\n<li>一个节点不能同时链接两个红链接</li>\n<li>红黑树是<strong>完美黑链接平衡的</strong></li>\n</ol>\n<p>需要注意的是，如果红黑树满足以上条件，那么其和 2-3 树就是等价的。\n事实上，如果把红链接画平，那么红黑树就是一个 2-3 树。</p>\n\n<h2 id=\"_2-新的节点定义\"> 2. 新的节点定义</h2>\n<p>为了表示链接的颜色，我们需要定义一个新的节点，或者说向原有节点增加新的属性——颜色。</p>\n<div><pre><code>pravite <span>class</span> <span>Node</span> <span>{</span>\n    <span>Key</span> key<span>;</span>\n    <span>Value</span> val<span>;</span>\n    <span>int</span> <span>N</span><span>;</span>\n    <span>boolean</span> color<span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><blockquote>\n<p>在这里，我们为原有的节点增加一个布尔值来表示<strong>指向它的链接的颜色</strong>，这样定义能省去一些麻烦，具体在下面的内容中会讨论到。</p>\n</blockquote>\n<h2 id=\"_3-变形\"> 3. 变形</h2>\n<p>当我们往红黑树插入节点时，需要进行一些<strong>变形</strong>来让红黑树满足以上条件，就像我们对 2-3 树插入节点时做的处理一样。</p>\n<h3 id=\"_3-1-旋转\"> 3.1 旋转</h3>\n<p>第一个重要的变形是<strong>旋转变形</strong>。\n当我们在插入节点的时候，不可避免的会破坏红黑树的条件，有时会出现<strong>红色的右链接</strong>，或者<strong>两个连续的红链接</strong>等。\n对于这些情况，我们需要对红黑树做适当的旋转变换来让它重新满足红黑树的条件。</p>\n<h4 id=\"_3-1-1-向左旋转\"> 3.1.1 向左旋转</h4>\n<p><img src=\"https://algs4.cs.princeton.edu/33balanced/images/redblack-left-rotate.png\" alt=\"Rotate Left\" /></p>\n<blockquote>\n<p>由图可以注意到，所谓的<strong>旋转</strong>主要做了两件事：</p>\n</blockquote>\n<blockquote>\n<ol>\n<li>交换根节点</li>\n<li>将中间子树调换父亲</li>\n</ol>\n</blockquote>\n<blockquote>\n<p>剩下就是转换颜色，修改子树节点数目等。\n抓住这个根本操作，就不会出错。</p>\n</blockquote>\n<div><pre><code><span>Node</span> <span>rotateLeft</span><span>(</span><span>Node</span> h<span>)</span> <span>{</span>\n    <span>Node</span> x <span>=</span> h<span>.</span>right<span>;</span>\n    h<span>.</span>right <span>=</span> x<span>.</span>left<span>;</span>   <span>// Link the middle</span>\n    x<span>.</span>left <span>=</span> h<span>;</span>         <span>// x ship to the root</span>\n    x<span>.</span>color <span>=</span> h<span>.</span>color<span>;</span>  <span>// Change color</span>\n    h<span>.</span>color <span>=</span> RED<span>;</span>      <span>// Change color</span>\n    <span><span>x<span>.</span></span>N</span> <span>=</span> <span><span>h<span>.</span></span>N</span><span>;</span>          <span>// Ship amount</span>\n\n    <span>// Calculate the amount of left subtree</span>\n    <span><span>h<span>.</span></span>N</span> <span>=</span> <span>1</span> <span>+</span> <span>size</span><span>(</span>h<span>.</span>left<span>)</span> <span>+</span> <span>size</span><span>(</span>h<span>.</span>right<span>)</span><span>;</span>\n\n    <span>return</span> x<span>;</span>           <span>// Return new root</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><blockquote>\n<p>注意，我们采用了和二叉查找树一样的<strong>递归返回引用</strong>的方法，这样有利于重用原有代码和维护树的链接性。</p>\n</blockquote>\n<h4 id=\"_3-1-2-向右旋转\"> 3.1.2 向右旋转</h4>\n<p>这个方法和向左旋转大同小异，核心的思想就是转换根节点和中间子树。</p>\n<p>关于必要性：有些时候遇到复杂的红链接情况，就首先要将连接向右旋转，随后在进行其他变形操作。</p>\n<p>虽然红黑树条件中不允许红色右链接的存在使得此方法显得无意义，但是此方法的用意在于<strong>构建一个便于处理的中间状态</strong>。</p>\n<p><img src=\"https://algs4.cs.princeton.edu/33balanced/images/redblack-right-rotate.png\" alt=\"Rotate Right\" /></p>\n<h3 id=\"_3-2-颜色转换\"> 3.2 颜色转换</h3>\n<p>当我们在进行旋转的过程中，很可能会遇到<strong>两个子节点的链接都是红色</strong>的情况。</p>\n<p>由于红链接代表了 3-节点，显然 2 个红链接就代表了一个 4-节点，在 2-3 树插入中，我们需要将临时的 4-节点 <strong>分裂</strong>，在红黑树中就是第二种变形——颜色转换。</p>\n<p>步骤如下：</p>\n<ol>\n<li>将两个红链接变成黑链接</li>\n<li>将父节点的链接颜色变为<strong>红色</strong></li>\n</ol>\n<p><img src=\"https://algs4.cs.princeton.edu/33balanced/images/color-flip.png\" alt=\"Flip Colors\" /></p>\n<div><pre><code><span>void</span> <span>filpColors</span><span>(</span><span>Node</span> h<span>)</span> <span>{</span>\n    h<span>.</span>color <span>=</span> RED<span>;</span>\n    h<span>.</span>left<span>.</span>color <span>=</span> BLACK<span>;</span>\n    h<span>.</span>right<span>.</span>color <span>=</span> BLACK<span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><blockquote>\n<p>这很好地体现了 4-节点 的分裂过程。\n首先，我们将红链接变为黑色，事实上增加了两个新节点，也就是将 4-节点 <strong>分裂了</strong>\n其次，将父节点的链接变为<strong>红色</strong>，此时父节点就会变为上层 3-节点 的一部分，也满足了在分裂过程中，<strong>将中间节点向上传递</strong>的思想。</p>\n</blockquote>\n<blockquote>\n<p>假如父节点是根节点时，由于<strong>没有任何链接指向根节点，所以根节点的颜色变得无关紧要了</strong>\n这也是为什么我们在定义新节点的时候要将其颜色定义为<strong>指向其链接的颜色</strong>的原因</p>\n</blockquote>\n<h2 id=\"_4-插入\"> 4. 插入</h2>\n<p>最后，我们终于进入了真正的插入环节，根据 2-3 树的插入思想，红黑树的插入步骤如下：</p>\n<ol>\n<li>\n<p>新节点的颜色是<strong>红色的</strong></p>\n<blockquote>\n<p>由于 2-3 树在插入之后一定会形成至少一个 3-节点（有时还会有临时的 4-节点）</p>\n</blockquote>\n</li>\n<li>\n<p>如果右子结点是红色，左子结点是黑色，那么向左旋转</p>\n<blockquote>\n<p>右子结点为红色，左子结点为黑色，说明红黑树中存在红色的右链接，将其向左旋转</p>\n</blockquote>\n</li>\n<li>\n<p>如果左子结点和它的左子结点都是红色的，那么将当前节点向右旋转</p>\n<blockquote>\n<p>这种情况说明红黑树中<strong>存在两个连续的红色链接</strong>，说明存在一个内部的 4-节点，此时我们<strong>将其向右旋转</strong>，变为可以进行颜色转换的状态，随后通过颜色转换来将 4-节点 分裂</p>\n</blockquote>\n</li>\n<li>\n<p>如果左子结点和右子结点都是<strong>红色的</strong>，那么进行<strong>颜色转换</strong></p>\n<blockquote>\n<p>此时说明存在 4-节点，通过颜色转换将其分裂</p>\n</blockquote>\n</li>\n</ol>\n<div><pre><code><span>public</span> <span>void</span> <span>put</span><span>(</span><span>Key</span> key<span>,</span> <span>Value</span> val<span>)</span> <span>{</span>\n    root <span>=</span> <span>put</span><span>(</span>root<span>,</span> key<span>,</span> val<span>)</span><span>;</span>\n    root<span>.</span>color <span>=</span> BLACK<span>;</span>\n<span>}</span>\n\n<span>private</span> <span>Node</span> <span>put</span><span>(</span><span>Node</span> h<span>,</span> <span>Key</span> key<span>,</span> <span>Value</span> val<span>)</span> <span>{</span>\n    <span>if</span> <span>(</span>h <span>==</span> <span>null</span><span>)</span>\n        <span>return</span> <span>new</span> <span>Node</span><span>(</span>key<span>,</span> val<span>,</span> <span>1</span><span>,</span> RED<span>)</span><span>;</span>\n\n    <span>// 插入位置的搜寻过程</span>\n    <span>int</span> cmp <span>=</span> key<span>.</span><span>compareTo</span><span>(</span>h<span>.</span>key<span>)</span><span>;</span>\n    <span>if</span> <span>(</span>cmp <span>&lt;</span> <span>0</span><span>)</span>\n        h<span>.</span>left <span>=</span> <span>put</span><span>(</span>h<span>.</span>left<span>,</span> key<span>,</span> val<span>)</span><span>;</span>\n    <span>else</span> <span>if</span> <span>(</span>cmp <span>></span> <span>0</span><span>)</span>\n        h<span>.</span>right <span>=</span> <span>put</span><span>(</span>h<span>.</span>right<span>,</span> key<span>,</span> val<span>)</span><span>;</span>\n    <span>else</span>\n        h<span>.</span>val <span>=</span> val<span>;</span>\n\n    <span>// 旋转和颜色转换</span>\n    <span>// 注意以下顺序不可改变</span>\n    <span>if</span> <span>(</span><span>isRed</span><span>(</span>h<span>.</span>right<span>)</span> <span>&amp;&amp;</span> <span>!</span><span>isRed</span><span>(</span>h<span>.</span>left<span>)</span><span>)</span>\n        h <span>=</span> <span>rotateLeft</span><span>(</span>h<span>)</span><span>;</span>\n\n    <span>if</span> <span>(</span><span>isRed</span><span>(</span>h<span>.</span>left<span>)</span> <span>&amp;&amp;</span> <span>isRed</span><span>(</span>h<span>.</span>left<span>.</span>left<span>)</span><span>)</span>\n        h <span>=</span> <span>rotateRight</span><span>(</span>h<span>)</span><span>;</span>\n\n    <span>if</span> <span>(</span><span>isRed</span><span>(</span>h<span>.</span>left<span>)</span> <span>&amp;&amp;</span> <span>isRed</span><span>(</span>h<span>.</span>right<span>)</span><span>)</span>\n        <span>flipColors</span><span>(</span>h<span>)</span><span>;</span>\n\n    <span><span>h<span>.</span></span>N</span> <span>=</span> <span>size</span><span>(</span>h<span>.</span>left<span>)</span> <span>+</span> <span>size</span><span>(</span>h<span>.</span>right<span>)</span> <span>+</span> <span>1</span><span>;</span>\n\n    <span>return</span> h<span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br></div></div><p>需要注意的是，有可能存在<strong>需要多次变换</strong>的情况，所以上述检测需要<strong>依次进行一遍</strong></p>\n<p><img src=\"https://ww3.sinaimg.cn/large/006tNc79gy1fcy5n5gp3vj30ia0ec3ze.jpg\" alt=\"\" /></p>\n<p>比如<strong>折线式的红链接（红色的左链接 + 红色的右链接）</strong>，此时就需要先将右链接向左旋转，变为<strong>连续的红链接</strong>，再将上面的链接进行右旋转，变为<strong>两个红色的子链接</strong>，随后进行颜色转换。</p>\n<p>这样做的原因在于，我们可以按照图示那样， <strong>逐步减少需要讨论的情况</strong>，从而节省代码</p>\n<p>同时，为了能让父节点也能进行正确的变形，<strong>变形操作要放置在递归方法之后</strong>，也就是修改值之后再进行变形操作。</p>\n<h2 id=\"_5-删除\"> 5. 删除</h2>\n<p>删除通常来说是符号表实现的一个比较难的部分。</p>\n<p>对于红黑树来说， <strong>我们不能直接删除一个黑节点</strong>，这样会导致黑节点出现不平衡。</p>\n<p>一般的红黑树实现中，通常是对红黑树做一个 BST 的删除操作，随后再进行恢复，不过这样在实践中会导致代码过于冗长。</p>\n<p>在左斜红黑树中，我们以 <strong>删除一个红节点</strong> 作为目标；</p>\n<p>在删除完成后，我们通过递归向上对链接进行修复。</p>\n<h3 id=\"_5-1-删除最大最小元素\"> 5.1 删除最大最小元素</h3>\n<p>为了能够让我们所删除的元素成为红节点，当出现连续两个子节点都是黑的时，我们就必须通过颜色变换将红链接向下传递；</p>\n<p>否则红链接的特性就会断绝</p>\n<p>但是，这样有可能导致<strong>两个连续的红链接</strong>，如下图所示；</p>\n<p><code>b</code>  节点并不在我们的递归路线中，我们无法对这种非法的 4-节点进行修复；</p>\n<p>所以我们要对这种情况进行处理。</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/006tNc79gy1fcy60inmvwj30hs0nijsu.jpg\" alt=\"\" /></p>\n<p>可以看到，我们首先将 <code>a</code> 节点进行颜色反转，从而将 <code>c</code> 染红；</p>\n<p>但是此时，由于 <code>b</code> 也是红节点，所以造成了两个连续的红链接；</p>\n<p>所以我们通过先将 <code>c</code> 向右旋转，再将 <code>a</code> 向左旋转，将其变为平衡态；</p>\n<p>再通过颜色反转避免了连续的红链接出现。</p>\n<p>实现如下：</p>\n<div><pre><code><span>private</span> <span>Node</span> <span>moveRedLeft</span><span>(</span><span>Node</span> h<span>)</span> <span>{</span>\n    <span>//红链接向下传递</span>\n    <span>colorFlip</span><span>(</span>h<span>)</span><span>;</span>\n\n    <span>// 出现红色后继</span>\n    <span>if</span> <span>(</span><span>isRed</span><span>(</span>h<span>.</span>right<span>.</span>left<span>)</span><span>)</span> <span>{</span>\n        h<span>.</span>right <span>=</span> <span>rotateRight</span><span>(</span>h<span>.</span>right<span>)</span><span>;</span>\n        h <span>=</span> <span>rotateLeft</span><span>(</span>h<span>)</span><span>;</span>\n        <span>colorFlip</span><span>(</span>h<span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>return</span> h<span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>完整的删除最小元素的代码如下：</p>\n<div><pre><code><span>public</span> <span>void</span> <span>deleteMin</span><span>(</span><span>)</span> <span>{</span>\n    <span>// 如果根节点的两个子节点都是黑色的，那么将根节点设为红</span>\n    <span>// 以求能够有红链接属性向下传递</span>\n    <span>if</span> <span>(</span><span>!</span><span>isRed</span><span>(</span>root<span>.</span>left<span>)</span> <span>&amp;&amp;</span> <span>!</span><span>isRed</span><span>(</span>root<span>.</span>right<span>)</span><span>)</span>\n        root<span>.</span>color <span>=</span> RED<span>;</span>\n\n    root <span>=</span> <span>deleteMin</span><span>(</span>root<span>)</span><span>;</span>\n\n    <span>// 递归结束，将根节点恢复颜色</span>\n    <span>if</span> <span>(</span><span>!</span><span>isEmpty</span><span>(</span><span>)</span><span>)</span>\n        root<span>.</span>color <span>=</span> BLACK<span>;</span>\n<span>}</span>\n\n<span>private</span> <span>Node</span> <span>deleteMin</span><span>(</span><span>Node</span> h<span>)</span> <span>{</span>\n    <span>if</span> <span>(</span>h<span>.</span>left <span>==</span> <span>null</span><span>)</span>\n        <span>return</span> <span>null</span><span>;</span>\n\n    <span>// 如果连续两个子节点都是黑链接，那么将红链接性质传递</span>\n    <span>if</span> <span>(</span><span>!</span><span>isRed</span><span>(</span>h<span>.</span>left<span>)</span> <span>&amp;&amp;</span> <span>!</span><span>isRed</span><span>(</span>h<span>.</span>left<span>.</span>left<span>)</span><span>)</span>\n        h <span>=</span> <span>moveRedLeft</span><span>(</span>h<span>)</span><span>;</span>\n\n    h<span>.</span>left <span>=</span> <span>deleteMin</span><span>(</span>h<span>.</span>left<span>)</span><span>;</span>\n\n    <span>// 递归向上修复链接性质</span>\n    <span>return</span> <span>balance</span><span>(</span>h<span>)</span><span>;</span>\n<span>}</span>\n\n<span>// 实际上就是插入时使用的性质修复</span>\n<span>private</span> <span>Node</span> <span>balance</span><span>(</span><span>Node</span> h<span>)</span> <span>{</span>\n\n    <span>if</span> <span>(</span><span>isRed</span><span>(</span>h<span>.</span>right<span>)</span><span>)</span>\n        h <span>=</span> <span>rotateLeft</span><span>(</span>h<span>)</span><span>;</span>\n    <span>if</span> <span>(</span><span>isRed</span><span>(</span>h<span>.</span>left<span>)</span> <span>&amp;&amp;</span> <span>isRed</span><span>(</span>h<span>.</span>left<span>.</span>left<span>)</span><span>)</span>\n        h <span>=</span> <span>rotateRight</span><span>(</span>h<span>)</span><span>;</span>\n    <span>if</span> <span>(</span><span>isRed</span><span>(</span>h<span>.</span>left<span>)</span> <span>&amp;&amp;</span> <span>isRed</span><span>(</span>h<span>.</span>right<span>)</span><span>)</span>\n        <span>flipColors</span><span>(</span>h<span>)</span><span>;</span>\n\n    h<span>.</span>size <span>=</span> <span>size</span><span>(</span>h<span>.</span>left<span>)</span> <span>+</span> <span>size</span><span>(</span>h<span>.</span>right<span>)</span> <span>+</span> <span>1</span><span>;</span>\n    <span>return</span> h<span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br></div></div><p>同理，在删除最大元素和删除通常元素的时候，我们也会出现由于红链接向下传递引起的连续红链接问题，如图所示：</p>\n<p><img src=\"https://ww4.sinaimg.cn/large/006tNc79gy1fcy81e0pw2j30i30dbq3f.jpg\" alt=\"\" /></p>\n<p>其中 <code>d</code> 不处在我们的递归路线上，所以就必须进行处理。</p>\n<p>实现如下：</p>\n<div><pre><code><span>private</span> <span>Node</span> <span>moveRedRight</span><span>(</span><span>Node</span> h<span>)</span> <span>{</span>\n    <span>// 红链接向下传递</span>\n    <span>flipColors</span><span>(</span>h<span>)</span><span>;</span>\n\n    <span>// 出现连续左斜红色</span>\n    <span>if</span> <span>(</span><span>isRed</span><span>(</span>h<span>.</span>left<span>.</span>left<span>)</span><span>)</span> <span>{</span>\n        h <span>=</span> <span>rotateRight</span><span>(</span>h<span>)</span><span>;</span>\n        <span>flipColors</span><span>(</span>h<span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>return</span> h<span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>完整实现如下：</p>\n<div><pre><code><span>public</span> <span>void</span> <span>deleteMax</span><span>(</span><span>)</span> <span>{</span>\n    <span>// 保证有红链接存在</span>\n    <span>if</span> <span>(</span><span>!</span><span>isRed</span><span>(</span>root<span>.</span>left<span>)</span> <span>&amp;&amp;</span> <span>!</span><span>isRed</span><span>(</span>root<span>.</span>right<span>)</span><span>)</span>\n        root<span>.</span>color <span>=</span> RED<span>;</span>\n\n    root <span>=</span> <span>deleteMax</span><span>(</span>root<span>)</span><span>;</span>\n\n    <span>// 恢复根节点的黑链接</span>\n    <span>if</span> <span>(</span><span>!</span><span>isEmpty</span><span>(</span><span>)</span><span>)</span>\n        root<span>.</span>color <span>=</span> BLACK<span>;</span>\n<span>}</span>\n\n<span>private</span> <span>Node</span> <span>deleteMax</span><span>(</span><span>Node</span> h<span>)</span> <span>{</span>\n    <span>// 由于是左斜红黑树，所以需要将左边的红链接右转</span>\n    <span>// 以能够向下传递</span>\n    <span>if</span> <span>(</span><span>isRed</span><span>(</span>h<span>.</span>left<span>)</span><span>)</span>\n        h <span>=</span> <span>rotateRight</span><span>(</span>h<span>)</span><span>;</span>\n\n    <span>if</span> <span>(</span>h<span>.</span>right <span>==</span> <span>null</span><span>)</span>\n        <span>return</span> <span>null</span><span>;</span>\n\n    <span>// 如果没有连续的红链接，那么就将红链接向下传递</span>\n    <span>if</span> <span>(</span><span>!</span><span>isRed</span><span>(</span>h<span>.</span>right<span>)</span> <span>&amp;&amp;</span> <span>!</span><span>isRed</span><span>(</span>h<span>.</span>right<span>.</span>left<span>)</span><span>)</span>\n        h <span>=</span> <span>moveRedRight</span><span>(</span>h<span>)</span><span>;</span>\n\n    h<span>.</span>right <span>=</span> <span>deleteMax</span><span>(</span>h<span>.</span>right<span>)</span><span>;</span>\n\n    <span>return</span> <span>balance</span><span>(</span>h<span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div><h3 id=\"_5-2-通常节点的删除\"> 5.2 通常节点的删除</h3>\n<p>对于通常内部节点的删除，由于红黑树的特殊特性，我们直接使用 BST 的删除方法需要考虑的问题颇多；</p>\n<p>但除此之外，我们可以使用一个巧妙的方法：</p>\n<ol>\n<li>将节点设置为其后继节点</li>\n<li>将其后继节点删除</li>\n</ol>\n<p>这样既符合 BST 删除原理，同时我们可以重用现有的代码；</p>\n<p>因为一个节点的后记节点，就是 <strong>其右子树的最小节点</strong>(<code>min(h.right)</code>)；</p>\n<p>因为我们已经实现了 <code>deleteMin()</code> 方法；</p>\n<p>所以只需要简单的将节点交换，同时将后继删除即可。</p>\n<p>完整的实现如下：</p>\n<div><pre><code><span>public</span> <span>void</span> <span>delete</span><span>(</span><span>Key</span> key<span>)</span> <span>{</span>\n    <span>if</span> <span>(</span>key <span>==</span> <span>null</span><span>)</span>\n        <span>throw</span> <span>new</span>  <span>IllegalArgumentException</span><span>(</span><span>\"argument to delete() is null\"</span><span>)</span><span>;</span>\n    <span>if</span> <span>(</span><span>!</span><span>contains</span><span>(</span>key<span>)</span><span>)</span> <span>return</span><span>;</span>\n\n    <span>// 保证红链接向下传递</span>\n    <span>if</span> <span>(</span><span>!</span><span>isRed</span><span>(</span>root<span>.</span>left<span>)</span> <span>&amp;&amp;</span> <span>!</span><span>isRed</span><span>(</span>root<span>.</span>right<span>)</span><span>)</span>\n        root<span>.</span>color <span>=</span> RED<span>;</span>\n\n    root <span>=</span> <span>delete</span><span>(</span>root<span>,</span> key<span>)</span><span>;</span>\n\n    <span>// 递归结束，将根节点恢复</span>\n    <span>if</span> <span>(</span><span>!</span><span>isEmpty</span><span>(</span><span>)</span><span>)</span>\n        root<span>.</span>color <span>=</span> BLACK<span>;</span>\n<span>}</span>\n\n<span>private</span> <span>Node</span> <span>delete</span><span>(</span><span>Node</span> h<span>,</span> <span>Key</span> key<span>)</span> <span>{</span>\n    <span>if</span> <span>(</span>key<span>.</span><span>compareTo</span><span>(</span>h<span>.</span>key<span>)</span> <span>&lt;</span> <span>0</span><span>)</span>  <span>{</span>    <span>// 在左子树</span>\n\n        <span>// 如果没有连续的红链接，则将红链接向下传递</span>\n        <span>if</span> <span>(</span><span>!</span><span>isRed</span><span>(</span>h<span>.</span>left<span>)</span> <span>&amp;&amp;</span> <span>!</span><span>isRed</span><span>(</span>h<span>.</span>left<span>.</span>left<span>)</span><span>)</span>\n            h <span>=</span> <span>moveRedLeft</span><span>(</span>h<span>)</span><span>;</span>\n\n        h<span>.</span>left <span>=</span> <span>delete</span><span>(</span>h<span>.</span>left<span>,</span> key<span>)</span><span>;</span>\n    <span>}</span>\n    <span>else</span> <span>{</span>  <span>// 在右子树或者命中</span>\n\n        <span>// 左斜红黑树</span>\n        <span>// 将左边的红链接向右转，以向下传递</span>\n        <span>if</span> <span>(</span><span>isRed</span><span>(</span>h<span>.</span>left<span>)</span><span>)</span>\n            h <span>=</span> <span>rotateRight</span><span>(</span>h<span>)</span><span>;</span>\n\n        <span>// 到达最大节点</span>\n        <span>if</span> <span>(</span>key<span>.</span><span>compareTo</span><span>(</span>h<span>.</span>key<span>)</span> <span>==</span> <span>0</span> <span>&amp;&amp;</span> <span>(</span>h<span>.</span>right <span>==</span> <span>null</span><span>)</span><span>)</span>\n            <span>return</span> <span>null</span><span>;</span>\n\n        <span>// 没有连续的红链接，将红链接向下传递</span>\n        <span>if</span> <span>(</span><span>!</span><span>isRed</span><span>(</span>h<span>.</span>right<span>)</span> <span>&amp;&amp;</span> <span>!</span><span>isRed</span><span>(</span>h<span>.</span>right<span>.</span>left<span>)</span><span>)</span>\n            h <span>=</span> <span>moveRedRight</span><span>(</span>h<span>)</span><span>;</span>\n\n        <span>// 内部节点</span>\n        <span>if</span> <span>(</span>key<span>.</span><span>compareTo</span><span>(</span>h<span>.</span>key<span>)</span> <span>==</span> <span>0</span><span>)</span> <span>{</span>\n\n            <span>// 后继</span>\n            <span>Node</span> x <span>=</span> <span>min</span><span>(</span>h<span>.</span>right<span>)</span><span>;</span>\n\n            <span>// 将节点交换为后继</span>\n            h<span>.</span>key <span>=</span> x<span>.</span>key<span>;</span>\n            h<span>.</span>val <span>=</span> x<span>.</span>val<span>;</span>\n\n            <span>// 删除后继节点</span>\n            h<span>.</span>right <span>=</span> <span>deleteMin</span><span>(</span>h<span>.</span>right<span>)</span><span>;</span>\n        <span>}</span>\n        <span>else</span>\n            h<span>.</span>right <span>=</span> <span>delete</span><span>(</span>h<span>.</span>right<span>,</span> key<span>)</span><span>;</span>\n    <span>}</span>\n    <span>return</span> <span>balance</span><span>(</span>h<span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br></div></div>",
      "image": "https://algs4.cs.princeton.edu/33balanced/images/redblack-encoding.png",
      "date_published": "2017-02-21T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "《Algorithm 第四版》笔记"
      ]
    },
    {
      "title": "并查集算法分析",
      "url": "https://wafer.li/blog-corners/learning-notes/algorithm-4th-edition/%E5%B9%B6%E6%9F%A5%E9%9B%86%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/",
      "id": "https://wafer.li/blog-corners/learning-notes/algorithm-4th-edition/%E5%B9%B6%E6%9F%A5%E9%9B%86%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/",
      "summary": "<p>并查集算法是用于判断互联网中我们是否需要新建立一条连接来使整个网络连通。即，元素的连通性问题。</p>\n",
      "content_html": "<p>并查集算法是用于判断互联网中我们是否需要新建立一条连接来使整个网络连通。即，元素的连通性问题。</p>\n\n<h2 id=\"_1-概念\"> 1. 概念</h2>\n<ul>\n<li>\n<p>连接</p>\n<p>连接是一种等价关系，它意味着以下特点：</p>\n<ul>\n<li>自反性：<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span>p</span></span></span></span> 连接着 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span>p</span></span></span></span></li>\n<li>对称性：如果 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span>p</span></span></span></span> 和 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.03588em;\">q</span></span></span></span> 相连，那么 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.03588em;\">q</span></span></span></span> 与 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span>p</span></span></span></span> 相连</li>\n<li>传递性：如果 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span>p</span></span></span></span> 与 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.03588em;\">q</span></span></span></span> 相连，<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.03588em;\">q</span></span></span></span> 与 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span style=\"margin-right:0.02778em;\">r</span></span></span></span> 相连，那么 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span>p</span></span></span></span> 与 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span style=\"margin-right:0.02778em;\">r</span></span></span></span> 相连</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"_2-union-find-的实现\"> 2. Union-Find 的实现</h2>\n<div><pre><code><span>public</span> <span>static</span> <span>void</span> <span>main</span><span>(</span><span>String</span><span>[</span><span>]</span> args<span>)</span> <span>{</span>\n    <span>int</span> <span>N</span> <span>=</span> <span>StdIn</span><span>.</span><span>readInt</span><span>(</span><span>)</span><span>;</span>    <span>//read the Number of CONTACTS</span>\n    <span>UF</span> UF <span>=</span> <span>new</span> <span>UF</span><span>(</span><span>N</span><span>)</span><span>;</span>          <span>//Initialize the data structure</span>\n\n    <span>while</span><span>(</span><span>!</span><span>StdIn</span><span>.</span><span>isEmpty</span><span>(</span><span>)</span><span>)</span> <span>{</span>\n        <span>int</span> p <span>=</span> <span>StdIn</span><span>.</span><span>readInt</span><span>(</span><span>)</span><span>;</span>\n        <span>int</span> q <span>=</span> <span>StdIn</span><span>.</span><span>readInt</span><span>(</span><span>)</span><span>;</span>\n\n        <span>if</span><span>(</span>uf<span>.</span><span>connected</span><span>(</span>p<span>,</span>q<span>)</span><span>)</span> <span>{</span>\n            <span>//If it is connected, ignore it</span>\n            <span>continue</span><span>;</span>\n        <span>}</span>\n\n        uf<span>.</span><span>uinon</span><span>(</span>p<span>,</span>q<span>)</span><span>;</span>          <span>//Merge the contacts</span>\n        <span>StdOut</span><span>.</span><span>println</span><span>(</span>p <span>+</span> <span>\" \"</span> <span>+</span> q<span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h2 id=\"_3-union-和-find-的实现\"> 3. <code>union()</code> 和 <code>find()</code> 的实现</h2>\n<p>基于 <code>id[]</code> 数组，他们的每一个索引都是一个节点</p>\n<h3 id=\"_3-1-quick-find-算法\"> 3.1 Quick-Find 算法</h3>\n<p>这是一个 naive 的实现，每次执行 <code>union()</code> 都需要扫描整个数组。</p>\n<div><pre><code><span>public</span> <span>int</span> find <span>(</span><span>int</span> p<span>)</span> <span>{</span>\n    <span>return</span> id<span>[</span>p<span>]</span><span>;</span>\n<span>}</span>\n\n<span>public</span> <span>void</span> <span>union</span><span>(</span><span>int</span> p<span>,</span> <span>int</span> q<span>)</span> <span>{</span>\n    <span>// Merge p and q into the same component</span>\n    <span>int</span> pID <span>=</span> <span>find</span><span>(</span>p<span>)</span><span>;</span>\n    <span>int</span> qID <span>=</span> <span>find</span><span>(</span>q<span>)</span><span>;</span>\n\n    <span>// If the p and q are at the same component,</span>\n    <span>// do nothing and return.</span>\n    <span>if</span><span>(</span>pID <span>=</span> qID<span>)</span> <span>{</span>\n        retrun<span>;</span>\n    <span>}</span>\n\n    <span>// Rename the p component to the q component</span>\n    <span>for</span><span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i<span>&lt;</span> id<span>.</span>lenth<span>;</span> i<span>++</span><span>)</span> <span>{</span>\n        <span>if</span><span>(</span>id<span>[</span>i<span>]</span> <span>==</span> pID<span>)</span> <span>{</span>\n            id<span>[</span>i<span>]</span> <span>=</span> qID<span>;</span>\n        <span>}</span>\n    <span>}</span>\n    count <span>--</span><span>;</span>   <span>// Decrease the component counter</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><p><code>connected()</code> 方法需要 2 次 <code>find()</code>；而对于 <code>union()</code> 方法则需要调用两次 <code>find()</code> ，检查 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> 个数组元素，改变其中 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∼</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span style=\"margin-right:0.10903em;\">N</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1</span></span></span></span> 个数组元素的值。</p>\n<p>所以，执行一次 <code>connected()</code> 和 <code>union()</code> 需要 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span style=\"margin-right:0.10903em;\">N</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>3</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∼</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span>2</span><span style=\"margin-right:0.10903em;\">N</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1</span></span></span></span> 数组访问。</p>\n<p>而如果最后仅得到一个连通分量，那么就需要进行 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span style=\"margin-right:0.10903em;\">N</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1</span></span></span></span> 次 <code>connected() + union()</code>，也就是至少需要 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>(</span><span style=\"margin-right:0.10903em;\">N</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>3</span><span>)</span><span>(</span><span style=\"margin-right:0.10903em;\">N</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>1</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∼</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span><span style=\"margin-right:0.10903em;\">N</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span></span></span></span> 次数组访问。</p>\n<h3 id=\"_3-2-quick-union-算法\"> 3.2 Quick-Union 算法</h3>\n<p>使用<strong>树</strong>作为基本结构以避免每次调用 <code>union()</code> 时，都要扫描<strong>整个数组</strong></p>\n<h4 id=\"_3-2-1-基本概念\"> 3.2.1 基本概念</h4>\n<ol>\n<li>\n<p>使用树作为基本的数据结构</p>\n</li>\n<li>\n<p>每一个节点的 <code>id[]</code> 元素就是<strong>另一个节点的名字</strong>，我们认为它们之间建立了一个<strong>连接</strong></p>\n<blockquote>\n<p>例如， <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span>p</span></span></span></span> 和 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.03588em;\">q</span></span></span></span> 是两个节点，如果 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span>p</span></span></span></span> 和 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.03588em;\">q</span></span></span></span> 连接，那么 <code>id[p] == q</code></p>\n</blockquote>\n</li>\n<li>\n<p>如果 <code>id[p] == p</code>，那么我们称 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span>p</span></span></span></span> 是一个根节点</p>\n</li>\n</ol>\n<h4 id=\"_3-2-2-实现\"> 3.2.2 实现</h4>\n<div><pre><code><span>private</span> <span>int</span> <span>find</span><span>(</span><span>int</span> p<span>)</span> <span>{</span>\n    <span>// Find the root of the contact's component</span>\n    <span>while</span> <span>(</span>p <span>!=</span> id<span>[</span>p<span>]</span><span>)</span> <span>{</span>\n        p <span>=</span> id<span>[</span>p<span>]</span><span>;</span>\n    <span>}</span>\n    <span>return</span> p<span>;</span>\n<span>}</span>\n\n<span>public</span> <span>void</span> <span>union</span><span>(</span><span>int</span> p<span>,</span> <span>int</span> q<span>)</span> <span>{</span>\n    <span>// Merge the root contact of the p's component and the q's component</span>\n    <span>int</span> pRoot <span>=</span> <span>find</span><span>(</span>p<span>)</span><span>;</span>\n    <span>int</span> qRoot <span>=</span> <span>find</span><span>(</span>q<span>)</span><span>;</span>\n\n    <span>// If the two components' root are the same, return.</span>\n    <span>if</span> <span>(</span>pRoot <span>==</span> qRoot<span>)</span> <span>{</span>\n        <span>return</span><span>;</span>\n    <span>}</span>\n\n    <span>// Set the p's tree links with q's tree.</span>\n    <span>// Now, the qRoot is the father contact of the qRoot.</span>\n    id<span>[</span>pRoot<span>]</span> <span>=</span> qRoot<span>;</span>\n\n    count <span>--</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><h4 id=\"_3-3-3-性能\"> 3.3.3 性能</h4>\n<p>虽然一般来说，并查集算法比 Quick-Find 算法要快，但是在最坏情况下，并查集算法仍然需要 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>2</span><span>(</span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span>2</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span>…</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.10903em;\">N</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∼</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span><span style=\"margin-right:0.10903em;\">N</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span></span></span></span> 次的数组访问</p>\n<p>原因在于， <code>union()</code> 方法是<strong>随机的连接两棵树</strong>，就有可能将<strong>大树连接到小树上</strong>，增加树的深度。</p>\n<p>如果所有的树都是大树连接到小树上，那么树就变成了线性表，此时即为最坏情况。</p>\n<h2 id=\"_4-加权的并查集算法\"> 4. 加权的并查集算法</h2>\n<p>我们通过给树增加权值，从而可以避免上面的随机连接的情况。\n权值即为树的大小。</p>\n<h3 id=\"_4-1-实现\"> 4.1 实现</h3>\n<div><pre><code><span>public</span> <span>class</span> <span>WeightedQuickUnionUF</span> <span>{</span>\n\n    <span>/**\n    * We need a new array to count the tree's size\n    * The index is the root contact\n    * The value is the corresponding size of the tree\n\n    * Baically, we use the root contact to stand for the tree\n    */</span>\n    <span>private</span> <span>int</span><span>[</span><span>]</span> sz<span>;</span>\n    <span>.</span><span>.</span><span>.</span><span>.</span>\n    <span>public</span> <span>WeightedQuickUnionUF</span> <span>(</span><span>int</span> <span>N</span><span>)</span> <span>{</span>\n        <span>.</span><span>.</span><span>.</span>\n        sz <span>=</span> <span>new</span> <span>int</span><span>[</span><span>N</span><span>]</span><span>;</span>\n        <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>N</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>\n            <span>// Initialize the sz[] as 1.</span>\n            <span>// No one was linked at the first.</span>\n            sz<span>[</span>i<span>]</span> <span>=</span> <span>1</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n    <span>.</span><span>.</span><span>.</span>\n    <span>public</span> <span>int</span> <span>find</span><span>(</span><span>int</span> p<span>)</span> <span>{</span>\n        <span>// Find the root contact</span>\n        <span>while</span> <span>(</span>p <span>!=</span> id<span>[</span>p<span>]</span><span>)</span> <span>{</span>\n            p <span>=</span> id<span>[</span>p<span>]</span><span>;</span>\n        <span>}</span>\n        retrun p<span>;</span>\n    <span>}</span>\n\n    <span>public</span> <span>void</span> <span>union</span><span>(</span><span>int</span> p<span>,</span> <span>int</span> q<span>)</span> <span>{</span>\n        <span>.</span><span>.</span><span>.</span>\n        <span>if</span> <span>(</span>sz<span>[</span>i<span>]</span> <span>&lt;</span> sz<span>[</span>j<span>]</span><span>)</span> <span>{</span>    <span>// Link the smaller tree's root contact to the bigger one</span>\n            id<span>[</span>i<span>]</span> <span>=</span> j<span>;</span>\n            sz<span>[</span>j<span>]</span> <span>+=</span> sz<span>[</span>i<span>]</span><span>;</span>     <span>// Adding the weight(or size) of the component</span>\n        <span>}</span>\n        <span>else</span> <span>{</span>\n            id<span>[</span>j<span>]</span> <span>=</span> i<span>;</span>\n            sz<span>[</span>i<span>]</span> <span>+=</span> sz<span>[</span>j<span>]</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br></div></div><h3 id=\"_4-2-性能\"> 4.2 性能</h3>\n<p>通过使用加权算法，构造的森林中，任意节点的深度最多为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.01968em;\">l</span><span>o</span><span style=\"margin-right:0.03588em;\">g</span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> <sup></sup></p>\n<h2 id=\"_5-路径压缩的并查集算法\"> 5. 路径压缩的并查集算法</h2>\n<p>更进一步，我们可以在遍历到一个节点的时候，就和它的根节点连在一起，\n由于我们<strong>只检查连通分量（即根节点）是否相连</strong>，所以上述做法在 <strong>Union-Find</strong> 问题中是没有副作用的，同时可以<strong>极大地减少树的深度</strong>，从而提升算法性能。</p>\n<h3 id=\"_5-1-实现-1-两个循环\"> 5.1  实现 1 ——两个循环</h3>\n<p>使用第二个循环，将寻找根节点路径上的所有的点都与根节点直接连接。</p>\n<div><pre><code><span>public</span> <span>int</span> <span>find</span><span>(</span><span>int</span> p<span>)</span> <span>{</span>\n    <span>int</span> pParent <span>=</span> p<span>;</span>\n\t<span>int</span> pRoot <span>=</span> p<span>;</span>\n\n    <span>// Find the p's root</span>\n    <span>while</span><span>(</span>pRoot <span>!=</span> id<span>[</span>pRoot<span>]</span><span>)</span> <span>{</span>\n        pRoot <span>=</span> id<span>[</span>pRoot<span>]</span><span>;</span>\n    <span>}</span>\n\n    <span>while</span> <span>(</span>id<span>[</span>p<span>]</span> <span>!=</span> p<span>)</span> <span>{</span>\n        pParent <span>=</span> id<span>[</span>p<span>]</span><span>;</span>\n        id<span>[</span>p<span>]</span> <span>=</span> pRoot<span>;</span>\n        p <span>=</span> pParent<span>;</span>\n    <span>}</span>\n\n    <span>return</span> pRoot<span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h3 id=\"_5-2-实现-2-将点指向其爷爷节点\"> 5.2 实现 2 ——将点指向其爷爷节点</h3>\n<p>一个更为简单的实现，直接将节点与其爷爷节点连接即可；</p>\n<p>虽然效果没有 实现 1 好，但是在实际运用中，两者效果相差不大，而且实现 2 只需要一行代码即可，更具备工程意义。</p>\n<div><pre><code><span>public</span> <span>int</span> <span>find</span><span>(</span><span>int</span> p<span>)</span> <span>{</span>\n\t<span>while</span><span>(</span>p <span>!=</span> id<span>[</span>p<span>]</span><span>)</span> <span>{</span>\n\t\tid<span>[</span>p<span>]</span> <span>=</span> id<span>[</span>id<span>[</span>p<span>]</span><span>]</span><span>;</span>\n\t\tp <span>=</span> id<span>[</span>p<span>]</span><span>;</span>\n\t<span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h3 id=\"_5-3-性能\"> 5.3 性能</h3>\n<p>这个算法的性能是一个 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span>a</span><span>rc</span></span></span></span> 函数，<strong>十分接近常数</strong>。</p>\n<h2 id=\"_6-比较\"> 6. 比较</h2>\n<p><img src=\"https://algs4.cs.princeton.edu/15uf/images/uf-performance.png\" alt=\"The comparation of the Union-Find algorithm\" /></p>\n<hr>\n<section>\n<ol>\n<li id=\"footnote1\"><p>在算法中 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.01968em;\">l</span><span>o</span><span style=\"margin-right:0.03588em;\">g</span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> 和 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.01968em;\">l</span><span>o</span><span><span style=\"margin-right:0.03588em;\">g</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span style=\"margin-right:0.10903em;\">N</span></span></span></span></span> 等价 </p>\n</li>\n</ol>\n</section>\n",
      "image": "https://algs4.cs.princeton.edu/15uf/images/uf-performance.png",
      "date_published": "2017-02-04T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "《Algorithm 第四版》笔记"
      ]
    },
    {
      "title": "归并排序",
      "url": "https://wafer.li/blog-corners/learning-notes/algorithm-4th-edition/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/",
      "id": "https://wafer.li/blog-corners/learning-notes/algorithm-4th-edition/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/",
      "summary": "<h2 id=\"_1-介绍\"> 1. 介绍</h2>\n<p>归并排序是一种递归算法；</p>\n<p>其主要思想是<strong>分而治之</strong>策略，通过将一个大数组分成一个个小数组，通过递归地分割，最后归并成一个有序的数组。</p>\n<p>需要注意的是，<strong>比较是在归并的过程中实行的</strong>，真正实施比较和排序的方法是归并方法，所以才被称为归并排序。</p>\n",
      "content_html": "<h2 id=\"_1-介绍\"> 1. 介绍</h2>\n<p>归并排序是一种递归算法；</p>\n<p>其主要思想是<strong>分而治之</strong>策略，通过将一个大数组分成一个个小数组，通过递归地分割，最后归并成一个有序的数组。</p>\n<p>需要注意的是，<strong>比较是在归并的过程中实行的</strong>，真正实施比较和排序的方法是归并方法，所以才被称为归并排序。</p>\n\n<h2 id=\"_2-归并过程\"> 2. 归并过程</h2>\n<ol>\n<li>\n<p>复制原数组内容到一个新的辅助数组中</p>\n</li>\n<li>\n<p>将辅助数组分为两半</p>\n</li>\n<li>\n<p>分别遍历两半部分，将其元素进行比较，按顺序复制回原数组中</p>\n</li>\n</ol>\n<h3 id=\"_2-1-实现\"> 2.1 实现</h3>\n<div><pre><code><span>private</span> <span>static</span> <span>void</span> <span>merge</span><span>(</span><span>Comparable</span><span>[</span><span>]</span> a<span>,</span> <span>Comparable</span><span>[</span><span>]</span> aux<span>,</span> <span>int</span> lo<span>,</span> <span>int</span> mid<span>,</span> <span>int</span> hi<span>)</span> <span>{</span>\n    <span>// i 表示左半边，j 表示右半边</span>\n    <span>int</span> i <span>=</span> lo<span>,</span> j <span>=</span> mid <span>+</span> <span>1</span><span>;</span>\n\n    <span>// Copy the a[lo...hi] to the assistant array</span>\n    <span>for</span> <span>(</span><span>int</span> k <span>=</span> lo<span>;</span> k <span>&lt;=</span> hi<span>;</span> k<span>++</span><span>)</span> <span>{</span>\n        aux<span>[</span>k<span>]</span> <span>=</span> a<span>[</span>k<span>]</span><span>;</span>\n    <span>}</span>\n\n    <span>for</span> <span>(</span><span>int</span> k <span>=</span> lo<span>;</span> k <span>&lt;=</span> hi<span>;</span> k<span>++</span><span>)</span> <span>{</span>\n\n        <span>if</span> <span>(</span>i <span>></span> mid<span>)</span> <span>{</span>          <span>// 左边空了</span>\n            a<span>[</span>k<span>]</span> <span>=</span> aux<span>[</span>j<span>++</span><span>]</span><span>;</span>\n        <span>}</span>\n        <span>else</span> <span>if</span> <span>(</span>j <span>></span> hi<span>)</span> <span>{</span>      <span>// 右边空了</span>\n            a<span>[</span>k<span>]</span> <span>=</span> aux<span>[</span>i<span>++</span><span>]</span><span>;</span>\n        <span>}</span>\n        <span>else</span> <span>if</span> <span>(</span><span>less</span><span>(</span>auk<span>[</span>j<span>]</span><span>,</span> auk<span>[</span>i<span>]</span><span>)</span><span>)</span> <span>{</span>\n            <span>// j 比 i 小，将 j 归并到数组中</span>\n            a<span>[</span>k<span>]</span> <span>=</span> aux<span>[</span>j<span>++</span><span>]</span><span>;</span>\n        <span>}</span>\n        <span>else</span> <span>{</span>\n            <span>// i 比 j 小，将 i 归并到数组中</span>\n            a<span>[</span>k<span>]</span> <span>=</span> aux<span>[</span>i<span>++</span><span>]</span><span>;</span>\n        <span>}</span>\n\n    <span>}</span>\n\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div><h2 id=\"_3-自顶向下的归并排序\"> 3. 自顶向下的归并排序</h2>\n<p>分治法思想，先排序左半边，后排序右半边，然后将两半归并。</p>\n<h3 id=\"_3-1-实现\"> 3.1 实现</h3>\n<div><pre><code><span>public</span> <span>class</span> <span>Merge</span> <span>{</span>\n\n    <span>private</span> <span>static</span> <span>Comparable</span><span>[</span><span>]</span> aux<span>;</span>\n\n    <span>public</span> <span>static</span> <span>void</span> <span>sort</span><span>(</span><span>Comparable</span><span>[</span><span>]</span> a<span>)</span> <span>{</span>\n        aux <span>=</span> <span>new</span> <span>Comparable</span><span>[</span>a<span>.</span>lenth<span>]</span><span>;</span>\n        <span>sort</span><span>(</span>a<span>,</span> <span>0</span><span>,</span> a<span>.</span>lenth <span>-</span> <span>1</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>private</span> <span>static</span> <span>void</span> <span>sort</span><span>(</span><span>Comparable</span><span>[</span><span>]</span> a<span>,</span> <span>Comparable</span><span>[</span><span>]</span> aux<span>,</span> <span>int</span> lo<span>,</span> <span>int</span> hi<span>)</span> <span>{</span>\n        <span>if</span> <span>(</span>hi <span>&lt;=</span> lo<span>)</span> <span>return</span><span>;</span>\n        <span>int</span> mid <span>=</span> lo <span>+</span> <span>(</span>hi <span>-</span> lo<span>)</span> <span>/</span> <span>2</span><span>;</span>\n\n        <span>sort</span><span>(</span>a<span>,</span> aux<span>,</span> lo<span>,</span> mid<span>)</span><span>;</span>       <span>// Sort the left side</span>\n        <span>sort</span><span>(</span>a<span>,</span> aux<span>,</span> mid <span>+</span> <span>1</span><span>,</span> hi<span>)</span><span>;</span>   <span>// Sort the right side</span>\n\n        <span>merge</span><span>(</span>a<span>,</span> aux<span>,</span> lo<span>,</span> mid<span>,</span> hi<span>)</span><span>;</span>  <span>// Merge the result</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><blockquote>\n<p>在这里 <code>sort()</code> 方法只是对数组进行了简单的分割，而没有进行真正的排序过程</p>\n</blockquote>\n<blockquote>\n<p>在一些改进版本中，会在数组较小时，采用其他排序方法进行排序。</p>\n</blockquote>\n<h3 id=\"_3-2-性能\"> 3.2 性能</h3>\n<p>对于自顶向下的归并排序，需要 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span><span><span></span><span><span><span><span style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span style=\"height:3em;\"></span><span><span><span>2</span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span style=\"height:3em;\"></span><span><span><span>1</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.345em;\"><span></span></span></span></span></span><span></span></span></span><span style=\"margin-right:0.01968em;\">Nl</span><span>o</span><span style=\"margin-right:0.03588em;\">g</span><span style=\"margin-right:0.10903em;\">N</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∼</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.01968em;\">Nl</span><span>o</span><span style=\"margin-right:0.03588em;\">g</span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> 次比较和 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span>6</span><span style=\"margin-right:0.01968em;\">Nl</span><span>o</span><span style=\"margin-right:0.03588em;\">g</span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> 次数组访问</p>\n<h3 id=\"_3-3-改进\"> 3.3 改进</h3>\n<h4 id=\"_3-3-1-小数组使用插入排序\"> 3.3.1 小数组使用插入排序</h4>\n<p>由于对于小数组来说，归并会产生不必要的复制消耗；</p>\n<p>所以，我们在数组较小时，采用插入排序进行排序过程，而不是全程使用归并算法。</p>\n<div><pre><code><span>public</span> <span>static</span> <span>void</span> <span>sort</span><span>(</span><span>Comparable</span><span>[</span><span>]</span> a<span>,</span> <span>int</span> lo<span>,</span> <span>int</span> hi<span>)</span> <span>{</span>\n    <span>if</span> <span>(</span>hi <span>&lt;=</span> lo <span>+</span> CUTOFF <span>-</span> <span>1</span><span>)</span> <span>{</span>\n        <span>Insertion</span><span>.</span><span>sort</span><span>(</span>a<span>,</span> lo<span>,</span> hi<span>)</span><span>;</span>\n        <span>return</span><span>;</span>\n    <span>}</span>\n\n    <span>int</span> mid <span>=</span> lo <span>+</span> <span>(</span>hi <span>-</span> lo<span>)</span> <span>/</span> <span>2</span><span>;</span>\n\n    <span>sort</span><span>(</span>a<span>,</span> lo<span>,</span> mid<span>)</span><span>;</span>       <span>// Sort the left side</span>\n    <span>sort</span><span>(</span>a<span>,</span> mid <span>+</span> <span>1</span><span>,</span> hi<span>)</span><span>;</span>   <span>// Sort the right side</span>\n    <span>merge</span><span>(</span>a<span>,</span> lo<span>,</span> mid<span>,</span> hi<span>)</span><span>;</span>  <span>// Merge the result</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h4 id=\"_3-3-2-避免不必要的归并过程\"> 3.3.2 避免不必要的归并过程</h4>\n<p>如果前半边数组和后半边数组 <strong>正好构成有序</strong>；</p>\n<p>那就可以直接跳过归并过程，从而节省时间。</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/006tKfTcgy1fcfpxg6z6mj31dg09q0u2.jpg\" alt=\"\" /></p>\n<div><pre><code><span>public</span> <span>static</span> <span>void</span> <span>sort</span><span>(</span><span>Comparable</span><span>[</span><span>]</span> a<span>,</span> <span>int</span> lo<span>,</span> <span>int</span> hi<span>)</span> <span>{</span>\n\n    <span>if</span> <span>(</span>hi <span>&lt;=</span> lo <span>+</span> CUTOFF <span>-</span> <span>1</span><span>)</span> <span>{</span>\n        <span>// 小数组使用插入排序</span>\n        <span>Insertion</span><span>.</span><span>sort</span><span>(</span>a<span>,</span> lo<span>,</span> hi<span>)</span><span>;</span>\n        <span>return</span><span>;</span>\n    <span>}</span>\n\n    <span>int</span> mid <span>=</span> lo <span>+</span> <span>(</span>hi <span>-</span> lo<span>)</span> <span>/</span> <span>2</span><span>;</span>\n\n    <span>sort</span><span>(</span>a<span>,</span> lo<span>,</span> mid<span>)</span><span>;</span>       <span>// Sort the left side</span>\n    <span>sort</span><span>(</span>a<span>,</span> mid <span>+</span> <span>1</span><span>,</span> hi<span>)</span><span>;</span>   <span>// Sort the right side</span>\n\n    <span>if</span> <span>(</span><span>less</span><span>(</span>a<span>[</span>mid<span>]</span><span>,</span> a<span>[</span>mid <span>+</span> <span>1</span><span>]</span><span>)</span><span>)</span> <span>{</span>\n        <span>// 如果已经有序，则跳过归并过程</span>\n        <span>return</span><span>;</span>\n    <span>}</span>\n\n    <span>merge</span><span>(</span>a<span>,</span> lo<span>,</span> mid<span>,</span> hi<span>)</span><span>;</span>  <span>// Merge the result</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><h4 id=\"_3-3-3-转换数组角色节省拷贝时间\"> 3.3.3 转换数组角色节省拷贝时间</h4>\n<p>由于归并需要先将原数组的内容拷贝到辅助数组中；</p>\n<p>为什么不直接将原输入数组当成辅助数组呢？</p>\n<p>所以，我们可以通过将数组的角色调换，以节省拷贝的时间。</p>\n<div><pre><code><span>private</span> <span>static</span> <span>void</span> <span>merge</span><span>(</span><span>Comparable</span><span>[</span><span>]</span> a<span>,</span> <span>Comparable</span><span>[</span><span>]</span> aux<span>,</span> <span>int</span> lo<span>,</span> <span>int</span> mid<span>,</span> <span>int</span> hi<span>)</span> <span>{</span>\n    <span>// i 表示左半边，j 表示右半边</span>\n    <span>int</span> i <span>=</span> lo<span>,</span> j <span>=</span> mid <span>+</span> <span>1</span><span>;</span>\n\n    <span>// 原来的拷贝数组的代码不见了</span>\n\n    <span>// 现在，aux 和 a 角色互换</span>\n    <span>for</span> <span>(</span><span>int</span> k <span>=</span> lo<span>;</span> k <span>&lt;=</span> hi<span>;</span> k<span>++</span><span>)</span> <span>{</span>\n\n        <span>if</span> <span>(</span>i <span>></span> mid<span>)</span> <span>{</span>          <span>// 左边空了</span>\n            aux<span>[</span>k<span>]</span> <span>=</span> a<span>[</span>j<span>++</span><span>]</span><span>;</span>\n        <span>}</span>\n        <span>else</span> <span>if</span> <span>(</span>j <span>></span> hi<span>)</span> <span>{</span>      <span>// 右边空了</span>\n            aux<span>[</span>k<span>]</span> <span>=</span> a<span>[</span>i<span>++</span><span>]</span><span>;</span>\n        <span>}</span>\n        <span>else</span> <span>if</span> <span>(</span><span>less</span><span>(</span>auk<span>[</span>j<span>]</span><span>,</span> auk<span>[</span>i<span>]</span><span>)</span><span>)</span> <span>{</span>\n            <span>// j 比 i 小，将 j 归并到数组中</span>\n            aux<span>[</span>k<span>]</span> <span>=</span> a<span>[</span>j<span>++</span><span>]</span><span>;</span>\n        <span>}</span>\n        <span>else</span> <span>{</span>\n            <span>// i 比 j 小，将 i 归并到数组中</span>\n            aux<span>[</span>k<span>]</span> <span>=</span> a<span>[</span>i<span>++</span><span>]</span><span>;</span>\n        <span>}</span>\n\n    <span>}</span>\n\n<span>}</span>\n\n\n<span>private</span> <span>static</span> <span>void</span> <span>sort</span><span>(</span><span>Comparable</span><span>[</span><span>]</span> a<span>,</span> <span>Comparable</span><span>[</span><span>]</span> aux<span>,</span> <span>int</span> lo<span>,</span> <span>int</span> hi<span>)</span> <span>{</span>\n            <span>if</span> <span>(</span>hi <span>&lt;=</span> lo<span>)</span> <span>return</span><span>;</span>\n        <span>int</span> mid <span>=</span> lo <span>+</span> <span>(</span>hi <span>-</span> lo<span>)</span> <span>/</span> <span>2</span><span>;</span>\n\n        <span>// 注意，下面 aux 和 a 的顺序互换了</span>\n        <span>sort</span><span>(</span>aux<span>,</span> a<span>,</span> lo<span>,</span> mid<span>)</span><span>;</span>       <span>// Sort the left side</span>\n        <span>sort</span><span>(</span>aux<span>,</span> a<span>,</span> mid <span>+</span> <span>1</span><span>,</span> hi<span>)</span><span>;</span>   <span>// Sort the right side</span>\n\n        <span>merge</span><span>(</span>a<span>,</span> aux<span>,</span> lo<span>,</span> mid<span>,</span> hi<span>)</span><span>;</span>  <span>// Merge the result</span>\n    <span>}</span>\n<span>}</span>\n\n\n<span>public</span> <span>static</span> <span>void</span> <span>sort</span><span>(</span><span>Comparable</span><span>[</span><span>]</span> a<span>)</span> <span>{</span>\n    aux <span>=</span> <span>new</span> <span>Comparable</span><span>[</span>a<span>.</span>length<span>]</span><span>;</span>\n\n    <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> a<span>.</span>length <span>;</span> i<span>++</span><span>)</span> <span>{</span>\n        aux<span>[</span>i<span>]</span> <span>=</span> a<span>[</span>i<span>]</span><span>;</span>\n    <span>}</span>\n\n    <span>sort</span><span>(</span>a<span>,</span> aux<span>,</span> <span>0</span><span>,</span> a<span>.</span>length <span>-</span> <span>1</span><span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br></div></div><h2 id=\"_4-自底向上的归并排序\"> 4. 自底向上的归并排序</h2>\n<p>它的主要思想是通过不断归并小数组，从而得到一个有序的大数组。\n注意与其不同的是，自顶向下是将整个数组分为<strong>左右半边分别处理</strong>，\n而这里的方法是将<strong>整个数组都打散为小数组</strong>之后再行合并。</p>\n<h3 id=\"_4-1-实现\"> 4.1 实现</h3>\n<div><pre><code><span>public</span> <span>class</span>  <span>MergeBU</span> <span>{</span>\n    <span>private</span> <span>static</span> <span>Comparable</span><span>[</span><span>]</span> aux<span>;</span>\n\n    <span>public</span> <span>static</span> <span>void</span> <span>sort</span><span>(</span><span>Comparable</span><span>[</span><span>]</span> a<span>)</span> <span>{</span>\n        <span>int</span> <span>N</span> <span>=</span> a<span>.</span>lenth<span>;</span>\n        aux <span>=</span> <span>new</span> <span>Comparable</span><span>[</span><span>N</span><span>]</span><span>;</span>\n\n        <span>for</span> <span>(</span><span>int</span> sz <span>=</span> <span>1</span><span>;</span> sz <span>&lt;</span> <span>N</span><span>;</span> sz <span>=</span> sz <span>+</span> sz<span>)</span> <span>{</span>\n            <span>for</span> <span>(</span><span>int</span> lo <span>=</span> <span>0</span><span>;</span> lo <span>&lt;</span> <span>N</span> <span>-</span> sz<span>;</span> lo <span>+</span> <span>=</span> sz <span>+</span> sz<span>)</span> <span>{</span>\n                merge <span>(</span>a<span>,</span> log<span>,</span> lo <span>+</span> sz <span>-</span> <span>1</span><span>,</span> <span>Math</span><span>.</span><span>min</span><span>(</span>lo <span>+</span> sz <span>+</span> sz <span>-</span> <span>1</span><span>,</span> <span>N</span> <span>-</span> <span>1</span><span>)</span><span>)</span><span>;</span>\n            <span>}</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><blockquote>\n<p>注意这里使用了循环的版本，而不是递归的版本</p>\n</blockquote>\n<h3 id=\"_4-2-性能\"> 4.2 性能</h3>\n<p>对于一个长度为 N 的数组，自底向上的归并排序需要 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span><span><span></span><span><span><span><span style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span style=\"height:3em;\"></span><span><span><span>2</span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span style=\"height:3em;\"></span><span><span><span>1</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.345em;\"><span></span></span></span></span></span><span></span></span></span><span style=\"margin-right:0.01968em;\">Nl</span><span>o</span><span style=\"margin-right:0.03588em;\">g</span><span style=\"margin-right:0.10903em;\">N</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∼</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.01968em;\">Nl</span><span>o</span><span style=\"margin-right:0.03588em;\">g</span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> 次比较和最多 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span>6</span><span style=\"margin-right:0.01968em;\">Nl</span><span>o</span><span style=\"margin-right:0.03588em;\">g</span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> 次的数组访问</p>\n<h2 id=\"_5-比较\"> 5. 比较</h2>\n<ol>\n<li>\n<p>当数组长度为 2 的幂的时候，这两个方法需要的开支是相同的</p>\n<blockquote>\n<p>它们的时间复杂度的增长级别是相同的，数组访问的增长级别也是相同的</p>\n</blockquote>\n</li>\n<li>\n<p>自底向上的归并排序适合于使用<strong>链表</strong>作为数据结构的数据，由于它只需要<strong>调整数组链接</strong>即可，而不需要去创建新的链表节点</p>\n</li>\n<li>\n<p>由于自底向上使用的是循环算法，一般来说都要比使用递归算法的自顶向下的归并排序要快</p>\n</li>\n</ol>\n<h2 id=\"_6-展望\"> 6. 展望</h2>\n<p>归并排序是<strong>基于比较的排序算法</strong>中<strong>渐进最优</strong>的</p>\n<p>归并排序<strong>确保了</strong> 即使在最坏情况，所需要的最少比较次数都是 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.36687em;vertical-align:0em;\"></span><span>∼</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.01968em;\">Nl</span><span>o</span><span style=\"margin-right:0.03588em;\">g</span><span style=\"margin-right:0.10903em;\">N</span></span></span></span>。</p>\n<p>由于没有一个基于比较的排序算法能<strong>保证</strong>所需要的最少次数都比 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.01968em;\">l</span><span>o</span><span style=\"margin-right:0.03588em;\">g</span><span>(</span><span style=\"margin-right:0.10903em;\">N</span><span>!)</span></span></span></span> 要少，由于 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.01968em;\">l</span><span>o</span><span style=\"margin-right:0.03588em;\">g</span><span>(</span><span style=\"margin-right:0.10903em;\">N</span><span>!)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∼</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.01968em;\">Nl</span><span>o</span><span style=\"margin-right:0.03588em;\">g</span><span style=\"margin-right:0.10903em;\">N</span></span></span></span>，所以归并排序是<strong>渐进最优</strong>的<strong>基于比较的</strong>排序算法</p>\n<p>基于比较的排序可以由<strong>决策树</strong>来描述。</p>\n<p>树的高度 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span>h</span></span></span></span> 即为所需要进行的比较次数，由排列原理可知，<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> 个元素有 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">N</span><span>!</span></span></span></span> 中排序方式，一个决策树的叶子个数必须要能容纳下 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">N</span><span>!</span></span></span></span> 中排序结果，<strong>否则将无法完成排序</strong>。</p>\n<p>因为如果不能容纳下所有的结果，一旦输入改变，那么得出的排序结果就可能是错误的。</p>\n<p>所以一棵比较算法的决策树，<strong>至少</strong>有 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">N</span><span>!</span></span></span></span> 个叶节点，而高为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span>h</span></span></span></span> 的树具有最多叶节点个数为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.849108em;vertical-align:0em;\"></span><span><span>2</span><span><span><span><span style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>h</span></span></span></span></span></span></span></span></span></span></span>，则有：</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:3.059108em;vertical-align:-1.279554em;\"></span><span><span><span><span><span><span style=\"height:1.779554em;\"><span style=\"top:-3.880446em;\"><span style=\"height:3em;\"></span><span><span><span>2</span><span><span><span><span style=\"height:0.8991079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>h</span></span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≥</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.01968em;\">l</span><span>e</span><span>a</span><span style=\"margin-right:0.03588em;\">v</span><span>es</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≥</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.10903em;\">N</span><span>!</span></span></span><span style=\"top:-2.380446em;\"><span style=\"height:3em;\"></span><span><span>⇒</span><span> </span><span style=\"margin-right:0.2777777777777778em;\"></span><span>h</span><span> </span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≥</span><span> </span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.01968em;\">l</span><span style=\"margin-right:0.03588em;\">g</span><span>(</span><span style=\"margin-right:0.10903em;\">N</span><span>!)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∼</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.01968em;\">Nl</span><span>o</span><span style=\"margin-right:0.03588em;\">g</span><span style=\"margin-right:0.10903em;\">N</span></span></span></span><span>​</span></span><span><span style=\"height:1.279554em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n",
      "image": "https://ww3.sinaimg.cn/large/006tKfTcgy1fcfpxg6z6mj31dg09q0u2.jpg",
      "date_published": "2017-02-05T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "《Algorithm 第四版》笔记"
      ]
    },
    {
      "title": "快速排序",
      "url": "https://wafer.li/blog-corners/learning-notes/algorithm-4th-edition/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/",
      "id": "https://wafer.li/blog-corners/learning-notes/algorithm-4th-edition/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/",
      "summary": "<h2 id=\"_1-介绍\"> 1. 介绍</h2>\n<p>快速排序是一种特殊的归并排序，它基于分治策略，\n将数组分成左和右两部分，然后将他们分别独立排序。</p>\n<p><strong>数组的切分是很关键的</strong></p>\n<p>快速排序和归并排序在原理上的唯一不同就是，</p>\n<p>快速排序的真正比较工作在 <strong>递归之前</strong> 完成，而归并排序在递归之后完成。</p>\n",
      "content_html": "<h2 id=\"_1-介绍\"> 1. 介绍</h2>\n<p>快速排序是一种特殊的归并排序，它基于分治策略，\n将数组分成左和右两部分，然后将他们分别独立排序。</p>\n<p><strong>数组的切分是很关键的</strong></p>\n<p>快速排序和归并排序在原理上的唯一不同就是，</p>\n<p>快速排序的真正比较工作在 <strong>递归之前</strong> 完成，而归并排序在递归之后完成。</p>\n\n<h2 id=\"_2-切分\"> 2. 切分</h2>\n<p>这是快速排序真正做比较的部分，也就是真正起作用的部分。</p>\n<p>切分的目标是找到一个元素：</p>\n<ol>\n<li>它的左边的所有元素都不大于它</li>\n<li>它的右边的所有元素都不小于它</li>\n</ol>\n<h3 id=\"_2-1-实现流程\"> 2.1 实现流程</h3>\n<p>一般来说，我们并不能找到这样的元素，所以我们进行以下的操作：</p>\n<ol>\n<li>\n<p>随机的选择元素</p>\n<blockquote>\n<p>通常来说，选择数组的第一个元素</p>\n</blockquote>\n</li>\n<li>\n<p>从数组的两端同时开始扫描数组</p>\n<blockquote>\n<p><code>i</code>, <code>j</code> 分别指向数组的两端；\n<code>i</code> 自增，直到 <code>i</code> 所指元素 <code>a[i]</code> 不小于切分元素 <code>a[lo]</code>；\n<code>j</code> 自减，直到 <code>j</code> 所指元素 <code>a[j]</code> 不大于切分元素 <code>a[lo]</code></p>\n</blockquote>\n</li>\n<li>\n<p>如果元素不在正确的位置，那么就交换它</p>\n<blockquote>\n<p>上述的 <code>i</code>, <code>j</code> 都停止后，交换 <code>a[i]</code> 和 <code>a[j]</code></p>\n</blockquote>\n</li>\n<li>\n<p>直到这两个指针相遇或者跨越对方，然后将切分元素放到相遇位置。</p>\n<blockquote>\n<p>事实上，此时 <code>j</code> 所指的元素就是不大于切分元素的元素；\n因此，将切分元素 <code>a[lo]</code> 和 <code>a[j]</code> 交换即可让切分元素放入正确位置</p>\n</blockquote>\n</li>\n</ol>\n<p><img src=\"https://algs4.cs.princeton.edu/23quicksort/images/partitioning-overview.png\" alt=\"The Partition\" /></p>\n<h3 id=\"_2-2-实现\"> 2.2 实现</h3>\n<div><pre><code><span>private</span> <span>static</span> <span>int</span> <span>partition</span><span>(</span><span>Comparable</span><span>[</span><span>]</span> a<span>,</span> <span>int</span> lo<span>,</span> <span>int</span> hi<span>)</span> <span>{</span>\n    <span>int</span> i <span>=</span> lo<span>,</span> j <span>=</span> hi <span>+</span> <span>1</span><span>;</span>     <span>// The scanner</span>\n    <span>Comparable</span> v <span>=</span> a<span>[</span>lo<span>]</span><span>;</span>\n    <span>while</span> <span>(</span><span>true</span><span>)</span> <span>{</span>\n\n        <span>// 指针 i 的扫描过程</span>\n        <span>while</span> <span>(</span><span>less</span><span>(</span>a<span>[</span><span>++</span>i<span>]</span><span>,</span> v<span>)</span><span>)</span> <span>{</span>\n            <span>if</span> <span>(</span>i <span>==</span> hi<span>)</span> <span>{</span>\n                <span>break</span><span>;</span>\n            <span>}</span>\n        <span>}</span>\n\n        <span>// 指针 j 的扫描过程</span>\n        <span>while</span> <span>(</span><span>less</span><span>(</span>v<span>,</span> a<span>[</span><span>--</span>j<span>]</span><span>)</span><span>)</span> <span>{</span>\n\n             <span>// 实际上这个 if 是多余的，</span>\n             <span>// 因为我们的切分元素就在 lo 的位置，</span>\n             <span>// 当 j 位于 lo 的位置时，由于不满足条件，</span>\n             <span>// j 就会停止扫描</span>\n             <span>if</span> <span>(</span>j <span>==</span> lo<span>)</span> <span>{</span>\n                <span>break</span><span>;</span>\n             <span>}</span>\n        <span>}</span>\n\n        <span>//两指针相遇，完成扫描过程</span>\n        <span>if</span> <span>(</span>i <span>>=</span> j<span>)</span> <span>{</span>\n            <span>break</span><span>;</span>\n        <span>}</span>\n\n        <span>// 此时两指针停止，说明 a[i] 和 a[j] 都不在正确位置</span>\n        <span>// 所以将 a[i] 和 a[j] 交换</span>\n        <span>exch</span><span>(</span>a<span>,</span> i<span>,</span> j<span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>// 扫描完成，将切分元素放入正确位置</span>\n    <span>exch</span><span>(</span>a<span>,</span> lo<span>,</span> j<span>)</span><span>;</span>\n    <span>return</span> j<span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br></div></div><h3 id=\"_2-3-注意事项\"> 2.3 注意事项</h3>\n<ol>\n<li>\n<p>切分<strong>在原本的数组</strong>中发生</p>\n<blockquote>\n<p>事实上， 也可以使用一个辅助数组；\n但是这样就丧失了相对于归并排序的不需要额外空间的优势</p>\n</blockquote>\n</li>\n<li>\n<p>不要越界</p>\n<blockquote>\n<p>注意检查扫描指针和边界的关系</p>\n</blockquote>\n</li>\n<li>\n<p>注意保持随机性</p>\n<blockquote>\n<p>在快速排序中保持随机性是保证此算法性能的关键</p>\n</blockquote>\n</li>\n<li>\n<p>注意循环的终止条件</p>\n<blockquote>\n<p>一个程序员常犯的错误就是没有考虑到数组可能包含与切分你元素的值相同的元素，从而导致了循环无法结束；\n所以在上面的实现中，即使扫描到相同元素也会停止扫描，保证了不会因为重复元素而影响性能</p>\n</blockquote>\n</li>\n<li>\n<p>注意递归的终止条件</p>\n<blockquote>\n<p>如果你不能把切分元素放入到正确的位置（放入到了错误的位置），那么就有可能引起一个无法终止的递归，这是要极力避免的。</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"_3-基本实现\"> 3. 基本实现</h2>\n<div><pre><code><span>public</span> <span>class</span> <span>Quick</span> <span>{</span>\n    <span>public</span> <span>static</span> <span>void</span> sort <span>(</span><span>Comparable</span><span>[</span><span>]</span> a<span>)</span> <span>{</span>\n        <span>// Disable the dependency to the input String</span>\n        <span>// It's very important.</span>\n        <span>StdRandom</span><span>.</span><span>shuffle</span><span>(</span>a<span>)</span><span>;</span>\n        <span>sort</span><span>(</span>a<span>,</span> <span>0</span><span>,</span> a<span>.</span>lenth <span>-</span> <span>1</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>private</span> <span>static</span> <span>void</span> sort <span>(</span><span>Comparable</span><span>[</span><span>]</span> a<span>,</span> <span>int</span> lo<span>,</span> <span>int</span> hi<span>)</span> <span>{</span>\n        <span>if</span> <span>(</span>hi <span>&lt;=</span> lo<span>)</span> <span>return</span><span>;</span>\n\n        <span>int</span> j <span>=</span> <span>partition</span><span>(</span>a<span>,</span> lo<span>,</span> hi<span>)</span><span>;</span>\n\n        <span>sort</span><span>(</span>a<span>,</span> lo<span>,</span> j <span>-</span> <span>1</span><span>)</span><span>;</span>\n        <span>sort</span><span>(</span>a<span>,</span> j <span>+</span> <span>1</span><span>,</span> hi<span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><blockquote>\n<p>可以看到，和归并排序一样，快速排序中真正做比较和交换的，实际上是<strong>切分</strong>这一个过程，而不是 <code>sort()</code> 方法</p>\n</blockquote>\n<h2 id=\"_4-性能\"> 4. 性能</h2>\n<p>快速排序需要 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.36687em;vertical-align:0em;\"></span><span>∼</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span>2</span><span style=\"margin-right:0.01968em;\">Nl</span><span>n</span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> 次的比较和 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>1/6</span></span></span></span> 的交换\n在最坏情况下，当输入数组本身就是有序时，快速排序需要 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span><span style=\"margin-right:0.10903em;\">N</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span><span>/2</span></span></span></span> 次的比较</p>\n<p><strong>但是通过打乱输入保证随机性可以防止这种情况的发生</strong></p>\n<h2 id=\"_5-改进\"> 5. 改进</h2>\n<h3 id=\"_5-1-切换到插入排序\"> 5.1 切换到插入排序</h3>\n<p>对于一些小型数组，插入排序会比快速排序要快，这是由于快速排序使用了递归方法进行排序</p>\n<div><pre><code><span>private</span> <span>static</span> <span>void</span> sort <span>(</span><span>Comparable</span><span>[</span><span>]</span> a<span>,</span> <span>int</span> lo<span>,</span> <span>int</span> hi<span>)</span> <span>{</span>\n\n    <span>if</span> <span>(</span>ho <span>&lt;=</span> lo <span>+</span> <span>M</span><span>)</span> <span>{</span>\n        <span>Insertion</span><span>.</span><span>sort</span><span>(</span>a<span>,</span> lo<span>,</span> hi<span>)</span><span>;</span>\n        <span>return</span><span>;</span>\n    <span>}</span>\n\n    <span>int</span> j <span>=</span> <span>partition</span><span>(</span>a<span>,</span> lo<span>,</span> hi<span>)</span><span>;</span>\n\n    <span>sort</span><span>(</span>a<span>,</span> lo<span>,</span> j <span>-</span> <span>1</span><span>)</span><span>;</span>\n    <span>sort</span><span>(</span>a<span>,</span> j <span>+</span> <span>1</span><span>,</span> hi<span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h3 id=\"_5-2-三取样切分\"> 5.2 三取样切分</h3>\n<p>快速排序基于切分，如果切分元素选择的好，那么就可以减少切分所用的时间，从而提高算法性能\n在实践中，我们一般使用<strong>三取样</strong>，然后取其<strong>中位数</strong>的形式来选取切分元素</p>\n<div><pre><code><span>private</span> <span>static</span> <span>void</span> sort <span>(</span><span>Comparable</span><span>[</span><span>]</span> a<span>,</span> <span>int</span> lo<span>,</span> <span>int</span> hi<span>)</span> <span>{</span>\n\n    <span>// 小数组使用插入排序</span>\n    <span>if</span> <span>(</span>ho <span>&lt;=</span> lo <span>+</span> <span>M</span><span>)</span> <span>{</span>\n        <span>Insertion</span><span>.</span><span>sort</span><span>(</span>a<span>,</span> lo<span>,</span> hi<span>)</span><span>;</span>\n        <span>return</span><span>;</span>\n    <span>}</span>\n\n    <span>// 三取样获取切分元素</span>\n    <span>int</span> m <span>=</span> <span>medianOf3</span><span>(</span>a<span>,</span> lo<span>,</span> lo <span>+</span> <span>(</span>hi <span>-</span> lo<span>)</span> <span>/</span> <span>2</span><span>,</span> hi<span>)</span><span>;</span>\n    <span>swap</span><span>(</span>a<span>,</span> lo<span>,</span> m<span>)</span><span>;</span>\n\n    <span>int</span> j <span>=</span> <span>partition</span><span>(</span>a<span>,</span> lo<span>,</span> hi<span>)</span><span>;</span>\n\n    <span>sort</span><span>(</span>a<span>,</span> lo<span>,</span> j <span>-</span> <span>1</span><span>)</span><span>;</span>\n    <span>sort</span><span>(</span>a<span>,</span> j <span>+</span> <span>1</span><span>,</span> hi<span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><blockquote>\n<p>三取样，即选取数组头部、尾部和中间<strong>位置</strong>的元素</p>\n</blockquote>\n<h2 id=\"_6-三向切分的快速排序\"> 6. 三向切分的快速排序</h2>\n<p>对于有大量重复性元素的数组，我们采用这个算法，实际上属于快速排序的一种改进形式。</p>\n<h3 id=\"_6-1-实现原理\"> 6.1 实现原理</h3>\n<p>使用 2 个指针 (<code>lt</code>,<code>gt</code>)来维护数组的 3 个部分：</p>\n<ol>\n<li>\n<p>小于切分元素的</p>\n<blockquote>\n<p>指针 <code>lo</code> 和 <code>lt</code> 之间属于这个部分</p>\n</blockquote>\n</li>\n<li>\n<p>等于切分元素的</p>\n<blockquote>\n<p>指针 <code>lt</code> 和 <code>gt</code> 之间属于这个部分</p>\n</blockquote>\n</li>\n<li>\n<p>大于切分元素的</p>\n<blockquote>\n<p>指针 <code>gt</code> 和 <code>hi</code> 之间属于这个部分</p>\n</blockquote>\n</li>\n</ol>\n<ul>\n<li>指针 <code>lt</code> 的左边都是小于切分元素的元素</li>\n<li>指针 <code>gt</code> 的右边都是大于切分元素的元素</li>\n<li>指针 <code>lt</code> 和 <code>gt</code> 之间都是等于切分元素的元素</li>\n</ul>\n<h3 id=\"_6-2-实现过程\"> 6.2 实现过程</h3>\n<p><img src=\"https://algs4.cs.princeton.edu/23quicksort/images/partitioning3-overview.png\" alt=\"3way Quick Sort\" /></p>\n<p>指针 <code>i</code> 实际上的作用是进行数组扫描；</p>\n<p>而 <code>lt</code> 和 <code>gt</code> 的工作是进行数组区域的划分。</p>\n<ol>\n<li>\n<p>初始状态，<code>lt</code> 在数组头部，<code>i</code> 位于 <code>lt</code> 的后一个位置， <code>gt</code> 在数组尾部</p>\n</li>\n<li>\n<p>当 <code>a[i]</code> 小于切分元素时，交换 <code>a[i]</code> 和 <code>a[lt]</code>，并自增<code>lt</code> 和 <code>i</code></p>\n<blockquote>\n<p>交换过后，<code>i</code> 所指的元素已经被检查过；\n而为了满足 <code>lt</code> 左边的元素都是小于切分元素的，所以 <code>lt</code> 要增加</p>\n</blockquote>\n</li>\n<li>\n<p>当 <code>a[i]</code> 大于切分元素时候，交换 <code>a[i]</code> 和 <code>a[gt]</code>，并自减 <code>gt</code></p>\n<blockquote>\n<p>此时，由于 <code>i</code> 所指的元素是从数组尾部交换来的；\n<strong>并没有经过检查</strong>；\n所以不能自增 <code>i</code></p>\n</blockquote>\n</li>\n<li>\n<p>当 <code>a[i]</code> 等于切分元素时候，自增 <code>i</code></p>\n<blockquote>\n<p>由于任何时候， <code>i</code> 都会在 <code>lt</code> 的前面；\n这种情况下，说明 <code>a[i]</code> 已经处于正确位置；\n不必进行交换操作</p>\n</blockquote>\n</li>\n<li>\n<p>当 <code>i</code> 与 <code>gt</code> 相遇时，切分完成</p>\n<blockquote>\n<p>此时，所有的元素都经过了 <code>i</code> 的检查，切分完成</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"_6-3-具体实现\"> 6.3 具体实现</h3>\n<div><pre><code><span>public</span> <span>class</span> <span>Quick3way</span> <span>{</span>\n    <span>private</span> <span>static</span> <span>void</span> <span>sort</span><span>(</span><span>Comparable</span> a<span>,</span> <span>int</span> lo<span>,</span> <span>int</span> hi<span>)</span> <span>{</span>\n\n        <span>if</span> <span>(</span>hi <span>&lt;=</span> lo<span>)</span> <span>return</span><span>;</span>\n\n        <span>int</span> lt <span>=</span> lo<span>,</span> i <span>=</span> lo <span>+</span> <span>1</span><span>,</span> gt <span>=</span> hi<span>;</span>\n\n        <span>Comararble</span> v <span>=</span> a<span>[</span>lo<span>]</span><span>;</span>   <span>// 切分元素</span>\n\n        <span>while</span> <span>(</span>i <span>&lt;=</span> gt<span>)</span> <span>{</span>\n\n            <span>int</span> cmp <span>=</span> a<span>[</span>i<span>]</span><span>.</span><span>compareTo</span><span>(</span>v<span>)</span><span>;</span>\n\n            <span>if</span> <span>(</span>cmp <span>&lt;</span> <span>0</span><span>)</span> <span>{</span>\n                <span>// i 比 v 小</span>\n                <span>exch</span><span>(</span>a<span>,</span> lt<span>++</span><span>,</span> i<span>++</span><span>)</span><span>;</span>\n            <span>}</span>\n            <span>else</span> <span>if</span> <span>(</span>cmp <span>></span><span>0</span><span>)</span> <span>{</span>\n                <span>// i 比 v 大</span>\n                <span>exch</span><span>(</span>a<span>,</span> i<span>,</span> gt<span>--</span><span>)</span><span>;</span>\n            <span>}</span>\n            <span>else</span> <span>{</span>\n                i<span>++</span><span>;</span>\n            <span>}</span>\n        <span>}</span>\n\n        <span>sort</span><span>(</span>a<span>,</span> lo<span>,</span> lt <span>-</span> <span>1</span><span>)</span><span>;</span>\n        <span>sort</span><span>(</span>a<span>,</span> gt <span>+</span> <span>1</span><span>,</span> hi<span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div><h3 id=\"_6-4-性能\"> 6.4 性能</h3>\n<p>对于含有重复元素的数组，我们有一个值来描述这个数组的信息含量，它叫做<strong>香农信息量(<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.08125em;\">H</span></span></span></span>)</strong></p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.08125em;\">H</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>−</span><span>(</span><span><span>p</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.01968em;\">l</span><span style=\"margin-right:0.03588em;\">g</span><span><span>p</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span>p</span><span>2</span><span style=\"margin-right:0.01968em;\">l</span><span style=\"margin-right:0.03588em;\">g</span><span><span>p</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span>⋯</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span><span>p</span><span><span><span><span style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.03148em;\">k</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.01968em;\">l</span><span style=\"margin-right:0.03588em;\">g</span><span><span>p</span><span><span><span><span style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.03148em;\">k</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span></span></span></span></span></p>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span style=\"margin-right:0.08125em;\">H</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.13889em;\">T</span><span>h</span><span>e</span><span> </span><span style=\"margin-right:0.05764em;\">S</span><span>hann</span><span>o</span><span>n</span><span> </span><span>in</span><span style=\"margin-right:0.10764em;\">f</span><span style=\"margin-right:0.02778em;\">or</span><span>ma</span><span>t</span><span>i</span><span>o</span><span>n</span></span></span></span>\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.7777700000000001em;vertical-align:-0.19444em;\"></span><span><span>p</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.13889em;\">T</span><span>h</span><span>e</span><span> </span><span>p</span><span>os</span><span>ibi</span><span>llt</span><span style=\"margin-right:0.03588em;\">y</span><span> </span><span>o</span><span style=\"margin-right:0.10764em;\">f</span><span> </span><span>t</span><span>h</span><span>e</span><span> </span><span>i</span><span>t</span><span>h</span><span> </span><span style=\"margin-right:0.03148em;\">k</span><span style=\"margin-right:0.03588em;\">ey</span><span> </span><span style=\"margin-right:0.02691em;\">w</span><span>a</span><span>s</span><span> </span><span>se</span><span style=\"margin-right:0.01968em;\">l</span><span>ec</span><span>t</span><span>e</span><span>d</span></span></span></span></p>\n<p>对于含有重复元素的数组，不存在任何基于比较的排序算法能够保证在 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span style=\"margin-right:0.10903em;\">N</span><span style=\"margin-right:0.08125em;\">H</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> 次比较之中将 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> 个元素排序。其中 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.08125em;\">H</span></span></span></span> 是由主键值概率定义的香农信息量</p>\n<p>所以，它证明了三向切分的快速排序是最好的基于比较的算法，<strong>信息量最优</strong></p>\n<p>事实上，对于拥有大量重复键值的数组来说，三向切分的快速排序的时间复杂度是 <strong>线性级别的</strong></p>\n",
      "image": "https://algs4.cs.princeton.edu/23quicksort/images/partitioning-overview.png",
      "date_published": "2017-02-06T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "《Algorithm 第四版》笔记"
      ]
    },
    {
      "title": "快速选择算法解 Top K 问题",
      "url": "https://wafer.li/blog-corners/learning-notes/algorithm-4th-edition/%E5%BF%AB%E9%80%9F%E9%80%89%E6%8B%A9%E7%AE%97%E6%B3%95%E8%A7%A3%20Top%20K%20%E9%97%AE%E9%A2%98/",
      "id": "https://wafer.li/blog-corners/learning-notes/algorithm-4th-edition/%E5%BF%AB%E9%80%9F%E9%80%89%E6%8B%A9%E7%AE%97%E6%B3%95%E8%A7%A3%20Top%20K%20%E9%97%AE%E9%A2%98/",
      "summary": "<h2 id=\"_1-top-k-问题\"> 1. Top K 问题</h2>\n<p>Top K 问题就是在序列中寻找到 <strong>第 K 个大（或者小）的元素</strong></p>\n<p>对此，我们可以研究一下它的上界和下界：</p>\n<ol>\n<li>\n<p>上界为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.01968em;\">Nl</span><span>o</span><span style=\"margin-right:0.03588em;\">g</span><span style=\"margin-right:0.10903em;\">N</span></span></span></span></p>\n<blockquote>\n<p>Top K 问题只要使用排序就一定能解决，所以其最坏的时间复杂度就是排序的复杂度</p>\n</blockquote>\n</li>\n<li>\n<p>当 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span style=\"margin-right:0.03148em;\">k</span></span></span></span> 的值较小时，如 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span>1</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>2</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>3</span></span></span></span>，则上界为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">N</span></span></span></span></p>\n<blockquote>\n<p>显然，当 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span style=\"margin-right:0.03148em;\">k</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1</span></span></span></span> 时，我们只需要遍历一次数组就能获取最小或者最大元素；\n当 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span style=\"margin-right:0.03148em;\">k</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>2</span></span></span></span> 时，我们只需要遍历两次数组就可以完成工作</p>\n</blockquote>\n</li>\n<li>\n<p>下界为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">N</span></span></span></span></p>\n<blockquote>\n<p>由 2 可知，我们可以有一个 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> 级别的算法；\n与此同时，我们至少需要遍历一次数组，才能获取到足够的信息来进行 Top K 判断</p>\n</blockquote>\n</li>\n</ol>\n<p>综上所述，我们可以拥有一个 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.02778em;\">O</span><span>(</span><span style=\"margin-right:0.10903em;\">N</span><span>)</span></span></span></span> 级别的算法来解决 Top K 问题，这就是这里介绍的快速选择算法。</p>\n",
      "content_html": "<h2 id=\"_1-top-k-问题\"> 1. Top K 问题</h2>\n<p>Top K 问题就是在序列中寻找到 <strong>第 K 个大（或者小）的元素</strong></p>\n<p>对此，我们可以研究一下它的上界和下界：</p>\n<ol>\n<li>\n<p>上界为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.01968em;\">Nl</span><span>o</span><span style=\"margin-right:0.03588em;\">g</span><span style=\"margin-right:0.10903em;\">N</span></span></span></span></p>\n<blockquote>\n<p>Top K 问题只要使用排序就一定能解决，所以其最坏的时间复杂度就是排序的复杂度</p>\n</blockquote>\n</li>\n<li>\n<p>当 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span style=\"margin-right:0.03148em;\">k</span></span></span></span> 的值较小时，如 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span>1</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>2</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>3</span></span></span></span>，则上界为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">N</span></span></span></span></p>\n<blockquote>\n<p>显然，当 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span style=\"margin-right:0.03148em;\">k</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1</span></span></span></span> 时，我们只需要遍历一次数组就能获取最小或者最大元素；\n当 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span style=\"margin-right:0.03148em;\">k</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>2</span></span></span></span> 时，我们只需要遍历两次数组就可以完成工作</p>\n</blockquote>\n</li>\n<li>\n<p>下界为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">N</span></span></span></span></p>\n<blockquote>\n<p>由 2 可知，我们可以有一个 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> 级别的算法；\n与此同时，我们至少需要遍历一次数组，才能获取到足够的信息来进行 Top K 判断</p>\n</blockquote>\n</li>\n</ol>\n<p>综上所述，我们可以拥有一个 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.02778em;\">O</span><span>(</span><span style=\"margin-right:0.10903em;\">N</span><span>)</span></span></span></span> 级别的算法来解决 Top K 问题，这就是这里介绍的快速选择算法。</p>\n\n<h2 id=\"_2-快速选择算法\"> 2.  快速选择算法</h2>\n<p>快速选择算法实际上是快速排序的一个变种，通过使用快速排序的 <strong>切分</strong> 来达到选择 Top K 的目的。</p>\n<p>事实上，由于快速排序的切分保证了：</p>\n<ol>\n<li>所有左边的元素都不大于切分元素</li>\n<li>所有右边的元素都不小于切分元素</li>\n</ol>\n<p>因此，实际上切分元素的所处位置，就指示了其 Top K 特性，也就是说：</p>\n<p>如果切分元素位于第 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span>h</span></span></span></span> 个位置，那么切分元素就是数组中的 Top <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span>h</span></span></span></span></p>\n<h3 id=\"_2-1-算法过程\"> 2.1 算法过程</h3>\n<ol>\n<li>\n<p>完成切分过程，获取到切分元素位置 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.05724em;\">j</span></span></span></span></p>\n</li>\n<li>\n<p>若 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span style=\"margin-right:0.03148em;\">k</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>&gt;</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.05724em;\">j</span></span></span></span>，则对切分元素的右半边数组进行切分</p>\n</li>\n<li>\n<p>若 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span style=\"margin-right:0.03148em;\">k</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>&lt;</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.05724em;\">j</span></span></span></span>，则对切分元素的左半边数组进行切分</p>\n</li>\n<li>\n<p>重复上述过程，直到 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span style=\"margin-right:0.03148em;\">k</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.05724em;\">j</span></span></span></span></p>\n</li>\n</ol>\n<h3 id=\"_2-2-实现\"> 2.2 实现</h3>\n<div><pre><code><span>public</span> <span>static</span> <span>Comparable</span> <span>select</span><span>(</span><span>Comparable</span><span>[</span><span>]</span>a<span>,</span> <span>int</span> k<span>)</span> <span>{</span>\n    <span>StdRamdom</span><span>.</span><span>shuffle</span><span>(</span>a<span>)</span><span>;</span>\n\n    <span>int</span> lo <span>=</span> <span>0</span><span>;</span>\n    <span>int</span> hi <span>=</span> a<span>.</span>length <span>-</span> <span>1</span><span>;</span>\n\n    <span>while</span><span>(</span>hi <span>></span> lo<span>)</span> <span>{</span>\n        <span>int</span> j <span>=</span> <span>partition</span><span>(</span>a<span>,</span> lo<span>,</span> hi<span>)</span><span>;</span>\n\n        <span>if</span> <span>(</span>k <span>></span> j<span>)</span> <span>{</span>\n            lo <span>=</span> j <span>+</span> <span>1</span><span>;</span>\n        <span>}</span>\n        <span>else</span> <span>if</span> <span>(</span>k <span>&lt;</span> j<span>)</span> <span>{</span>\n            hi <span>=</span> j <span>-</span> <span>1</span><span>;</span>\n        <span>}</span>\n        <span>else</span> <span>{</span>\n            <span>return</span> a<span>[</span>k<span>]</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n\n    <span>// 此时我们只有一个元素可以选择</span>\n    <span>// 说明此时的 a[k] 就是 Top K</span>\n    <span>return</span> a<span>[</span>k<span>]</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><h2 id=\"_3-性能\"> 3. 性能</h2>\n<p>快速选择算法的平均时间复杂度是 <strong>线性级别的</strong>（即 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.02778em;\">O</span><span>(</span><span style=\"margin-right:0.10903em;\">N</span><span>)</span></span></span></span>）</p>\n<p>其复杂度来源于切分过程，而对于切分过程，每次切分大约会将数组等分，所以需要：<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>(</span><span style=\"margin-right:0.10903em;\">N</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.10903em;\">N</span><span>/2</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.10903em;\">N</span><span>/4</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span>⋯</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>1</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∼</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>2</span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> 次的比较</p>\n<p>一个更精确的公式如下：</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span style=\"margin-right:0.07153em;\">C</span><span><span><span><span style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.10903em;\">N</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span>2</span><span style=\"margin-right:0.10903em;\">N</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>2</span><span style=\"margin-right:0.03148em;\">k</span><span style=\"margin-right:0.01968em;\">l</span><span>n</span><span>(</span><span style=\"margin-right:0.10903em;\">N</span><span>/</span><span style=\"margin-right:0.03148em;\">k</span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>2</span><span>(</span><span style=\"margin-right:0.10903em;\">N</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.07153em;\">K</span><span>)</span><span style=\"margin-right:0.01968em;\">l</span><span>n</span><span>(</span><span style=\"margin-right:0.10903em;\">N</span><span>/</span><span>(</span><span style=\"margin-right:0.10903em;\">N</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.03148em;\">k</span><span>))</span></span></span></span></span></p>\n<p>当 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span style=\"margin-right:0.03148em;\">k</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.10903em;\">N</span><span>/2</span></span></span></span> 时，有 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span style=\"margin-right:0.07153em;\">C</span><span><span><span><span style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.10903em;\">N</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>(</span><span>2</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>2</span><span style=\"margin-right:0.01968em;\">l</span><span>n</span><span>2</span><span>)</span><span style=\"margin-right:0.10903em;\">N</span></span></span></span></p>\n<p>但是与快速排序一样，快速选择的最坏情况下的时间复杂度是 <strong>平方级别</strong> 的，不过在上面的实现中，由于我们进行了随机洗牌，从而保证了性能。</p>\n",
      "date_published": "2017-02-06T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "《Algorithm 第四版》笔记"
      ]
    },
    {
      "title": "排序算法的应用",
      "url": "https://wafer.li/blog-corners/learning-notes/algorithm-4th-edition/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84%E5%BA%94%E7%94%A8/",
      "id": "https://wafer.li/blog-corners/learning-notes/algorithm-4th-edition/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84%E5%BA%94%E7%94%A8/",
      "summary": "<h2 id=\"_1-多种排序方式\"> 1. 多种排序方式</h2>\n<p>使用 <code>Comparator</code> 接口，我们可以定义不同的 <code>sort()</code> 方法或者使用不同的键来对数据进行排序。</p>\n<p><code>Comparator</code> 接口：</p>\n<div><pre><code><span>public</span> <span>interface</span> <span>Comparator</span> <span>{</span>\n    <span>int</span> <span>compare</span><span>(</span><span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p><strong>注意，此接口是被排序类提供的</strong>，排序方法只需要调用接口的 <code>compare</code>方法即可</p>\n<p>为了使用此接口，我们可以通过重载 <code>sort()</code> 方法来实现</p>\n<div><pre><code><span>// The original sort() method</span>\n<span>public</span> <span>void</span> <span>sort</span><span>(</span><span>Comparable</span><span>[</span><span>]</span> a<span>)</span> <span>{</span>\n    <span>/* The sort method body */</span>\n<span>}</span>\n<p><span>// Now we use new sort which comes wit Comparator</span>\n<span>public</span> <span>void</span> <span>sort</span><span>(</span><span>Object</span><span>[</span><span>]</span> a<span>,</span> <span>Comparator</span> c<span>)</span> <span>{</span>\n<span>/* The new sort method body */</span>\n<span>}</span></p>\n<p><span>// Also, we need to changge other</span>\n<span>// assistant method to use Comparator</span>\n<span>private</span> <span>int</span> <span>less</span><span>(</span><span>Comparator</span> c<span>,</span> <span>Key</span> v<span>,</span> <span>Key</span> w<span>)</span> <span>{</span>\n<span>// Invoke the interface method</span>\n<span>return</span> c<span>.</span><span>compare</span><span>(</span>v<span>,</span> w<span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>对于<strong>被排序类</strong>的实现，可以通过使用内部类的方式来提供 <code>Comparator</code></p>\n<div><pre><code><span>public</span> <span>class</span> <span>Student</span> <span>{</span>\n<span>public</span> <span>static</span> <span>final</span> <span>Comparator</span><span><span>&lt;</span><span>Student</span><span>&gt;</span></span> BY_NAME <span>=</span> <span>new</span> <span>ByName</span><span>(</span><span>)</span><span>;</span>\n<span>public</span> <span>static</span> <span>final</span> <span>Comparator</span><span><span>&lt;</span><span>Student</span><span>&gt;</span></span> BY_SECTION <span>=</span> <span>new</span> <span>BySection</span><span>(</span><span>)</span><span>;</span></p>\n<div><pre><code>&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ByName&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Comapator&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;\n    pubic &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Student&lt;/span&gt; v&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Student&lt;/span&gt; w&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;token comment&quot;&gt;// By name&lt;/span&gt;\n    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;\n&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;\n\n&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BySection&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Student&lt;/span&gt; v&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Student&lt;/span&gt; w&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;token comment&quot;&gt;// By Section&lt;/span&gt;\n    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;\n&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;\n</code></pre>\n</div><p><span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div></p>\n",
      "content_html": "<h2 id=\"_1-多种排序方式\"> 1. 多种排序方式</h2>\n<p>使用 <code>Comparator</code> 接口，我们可以定义不同的 <code>sort()</code> 方法或者使用不同的键来对数据进行排序。</p>\n<p><code>Comparator</code> 接口：</p>\n<div><pre><code><span>public</span> <span>interface</span> <span>Comparator</span> <span>{</span>\n    <span>int</span> <span>compare</span><span>(</span><span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p><strong>注意，此接口是被排序类提供的</strong>，排序方法只需要调用接口的 <code>compare</code>方法即可</p>\n<p>为了使用此接口，我们可以通过重载 <code>sort()</code> 方法来实现</p>\n<div><pre><code><span>// The original sort() method</span>\n<span>public</span> <span>void</span> <span>sort</span><span>(</span><span>Comparable</span><span>[</span><span>]</span> a<span>)</span> <span>{</span>\n    <span>/* The sort method body */</span>\n<span>}</span>\n\n<span>// Now we use new sort which comes wit Comparator</span>\n<span>public</span> <span>void</span> <span>sort</span><span>(</span><span>Object</span><span>[</span><span>]</span> a<span>,</span> <span>Comparator</span> c<span>)</span> <span>{</span>\n    <span>/* The new sort method body */</span>\n<span>}</span>\n\n<span>// Also, we need to changge other</span>\n<span>// assistant method to use Comparator</span>\n<span>private</span> <span>int</span> <span>less</span><span>(</span><span>Comparator</span> c<span>,</span> <span>Key</span> v<span>,</span> <span>Key</span> w<span>)</span> <span>{</span>\n    <span>// Invoke the interface method</span>\n    <span>return</span> c<span>.</span><span>compare</span><span>(</span>v<span>,</span> w<span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>对于<strong>被排序类</strong>的实现，可以通过使用内部类的方式来提供 <code>Comparator</code></p>\n<div><pre><code><span>public</span> <span>class</span> <span>Student</span> <span>{</span>\n    <span>public</span> <span>static</span> <span>final</span> <span>Comparator</span><span><span>&lt;</span><span>Student</span><span>></span></span> BY_NAME <span>=</span> <span>new</span> <span>ByName</span><span>(</span><span>)</span><span>;</span>\n    <span>public</span> <span>static</span> <span>final</span> <span>Comparator</span><span><span>&lt;</span><span>Student</span><span>></span></span> BY_SECTION <span>=</span> <span>new</span> <span>BySection</span><span>(</span><span>)</span><span>;</span>\n\n\n    <span>private</span> <span>class</span> <span>ByName</span> <span>implements</span> <span>Comapator</span><span><span>&lt;</span><span>Student</span><span>></span></span> <span>{</span>\n        pubic <span>int</span> <span>compare</span><span>(</span><span>Student</span> v<span>,</span> <span>Student</span> w<span>)</span> <span>{</span>\n            <span>// By name</span>\n        <span>}</span>\n    <span>}</span>\n\n    <span>private</span> <span>class</span> <span>BySection</span> <span>implements</span> <span>Comparator</span><span><span>&lt;</span><span>Student</span><span>></span></span> <span>{</span>\n        <span>public</span> <span>int</span> <span>compare</span><span>(</span><span>Student</span> v<span>,</span> <span>Student</span> w<span>)</span> <span>{</span>\n            <span>// By Section</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div>\n<h2 id=\"_2-稳定性\"> 2. 稳定性</h2>\n<p>稳定性指的是，在排序过程中，算法会保留<strong>具有相同键值</strong>的元素的相对顺序。</p>\n<p>如果能够保留，就说明排序算法是稳定的，如果不能够保留，则不稳定。</p>\n<p>排序算法稳定与否，在于<strong>在排序过程中，是否改变了相同键值元素的位置</strong></p>\n<h2 id=\"_3-排序算法的比较\"> 3. 排序算法的比较</h2>\n<table>\n<tr>\n<td rowspan=\"2\" style=\"text-align:center;vertical-align:middle\">Algorithm</td>\n<td rowspan=\"2\" style=\"text-align:center;vertical-align:middle\">Stable?</td>\n<td rowspan=\"2\" style=\"text-align:center;vertical-align:middle\">Inplace?</td>\n<td colspan=\"2\" style=\"text-align:center;\">Grow Rate to Sort N Items</td>\n<td rowspan=\"2\" style=\"text-align:center;vertical-align:middle\">Notes</td>\n</tr>\n<tr>\n<td style=\"text-align:center;vertical-align:middle;\">Running Time</td>\n<td style=\"width:6em;\">Extra Space</td>\n</tr>\n<tr>\n<td style=\"text-align:center;vertical-align:middle;\">Selection Sort</td>\n<td style=\"text-align:center;vertical-align:middle;\">No</td>\n<td style=\"text-align:center;vertical-align:middle;\">Yes</td>\n<td style=\"text-align:center;vertical-align:middle;\">$N^2$</td>\n<td style=\"text-align:center;vertical-align:middle;\">1</td>\n<td style=\"text-align:center;vertical-align:middle;\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center;vertical-align:middle;\">Insertion Sort</td>\n<td style=\"text-align:center;vertical-align:middle;\">Yes</td>\n<td style=\"text-align:center;vertical-align:middle;\">Yes</td>\n<td style=\"text-align:center;vertical-align:middle;\">Between $N$ and $N^2$</td>\n<td style=\"text-align:center;vertical-align:middle;\">1</td>\n<td style=\"text-align:center;vertical-align:middle;\">Base on the input</td>\n</tr>\n<tr>\n<td style=\"text-align:center;vertical-align:middle;\">Shell Sort</td>\n<td style=\"text-align:center;vertical-align:middle;\">No</td>\n<td style=\"text-align:center;vertical-align:middle;\">Yes</td>\n<td style=\"text-align:center;vertical-align:middle;\">$N^{6/5}$</td>\n<td style=\"text-align:center;vertical-align:middle;\">1</td>\n<td style=\"text-align:center;vertical-align:middle;\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center;vertical-align:middle;\">Quick Sort</td>\n<td style=\"text-align:center;vertical-align:middle;\">No</td>\n<td style=\"text-align:center;vertical-align:middle;\">Yes</td>\n<td style=\"text-align:center;vertical-align:middle;\">$NlogN$</td>\n<td style=\"text-align:center;vertical-align:middle;\">$lgN$</td>\n<td style=\"text-align:center;vertical-align:middle;\">The efficiency is guaranteed by the posibility</td>\n</tr>\n<tr>\n<td style=\"text-align:center;vertical-align:middle;\">3-way Partitioning <br/>Quick Sort</td>\n<td style=\"text-align:center;vertical-align:middle;\">No</td>\n<td style=\"text-align:center;vertical-align:middle;\">Yes</td>\n<td style=\"text-align:center;vertical-align:middle;\">between $N$ and $NlogN$</td>\n<td style=\"text-align:center;vertical-align:middle;\">$lgN$</td>\n<td style=\"text-align:center;vertical-align:middle;\">The efficiency is guaranteed by the posibility, meanwhile it also depens on the input</td>\n</tr>\n<tr>\n<td style=\"text-align:center;vertical-align:middle;\">Merge Sort</td>\n<td style=\"text-align:center;vertical-align:middle;\">Yes</td>\n<td style=\"text-align:center;vertical-align:middle;\">No</td>\n<td style=\"text-align:center;vertical-align:middle;\">$NlogN$</td>\n<td style=\"text-align:center;vertical-align:middle;\">$N$</td>\n<td style=\"text-align:center;vertical-align:middle;\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center;vertical-align:middle;\">Heap Sort</td>\n<td style=\"text-align:center;vertical-align:middle;\">No</td>\n<td style=\"text-align:center;vertical-align:middle;\">Yes</td>\n<td style=\"text-align:center;vertical-align:middle;\">$NlogN$</td>\n<td style=\"text-align:center;vertical-align:middle;\">$N$</td>\n<td style=\"text-align:center;vertical-align:middle;\"></td>\n</tr>\n</table>\n<h2 id=\"_4-结论\"> 4. 结论</h2>\n<ol>\n<li>\n<p>快速排序是最快的排序算法</p>\n<blockquote>\n<p>快速排序的时间复杂度为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.36687em;vertical-align:0em;\"></span><span>∼</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span>c</span><span style=\"margin-right:0.01968em;\">Nl</span><span>o</span><span style=\"margin-right:0.03588em;\">g</span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> 级别，同时它的 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span>c</span></span></span></span> 也比其他排序算法要小</p>\n</blockquote>\n</li>\n<li>\n<p>如果稳定性很重要，而空间并不是很紧张，那么<strong>归并排序</strong>是最好的选择</p>\n</li>\n<li>\n<p>如果空间非常小，那么<strong>堆排序</strong>是一个不错的选择</p>\n</li>\n</ol>\n",
      "date_published": "2017-02-12T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "《Algorithm 第四版》笔记"
      ]
    },
    {
      "title": "搜索算法的应用",
      "url": "https://wafer.li/blog-corners/learning-notes/algorithm-4th-edition/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95%E7%9A%84%E5%BA%94%E7%94%A8/",
      "id": "https://wafer.li/blog-corners/learning-notes/algorithm-4th-edition/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95%E7%9A%84%E5%BA%94%E7%94%A8/",
      "summary": "<h2 id=\"_1-寻找重复元素\"> 1. 寻找重复元素</h2>\n<p>在排序应用中也可以寻找重复元素，但是使用符号表则更为高效（特别是散列实现）。</p>\n<p>将数组遍历一遍，随后查找表内是否存在这一元素，如果不存在则添加进表中，如果存在，则说明找到了重复元素</p>\n<blockquote>\n<p>分析：遍历一遍数组所需要的时间是 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.02778em;\">O</span><span>(</span><span style=\"margin-right:0.10903em;\">N</span><span>)</span></span></span></span>，由于散列表的查找和插入都是<strong>常数级别</strong>的，所以整体的复杂度是 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.02778em;\">O</span><span>(</span><span style=\"margin-right:0.10903em;\">N</span><span>)</span></span></span></span></p>\n</blockquote>\n<blockquote>\n<p>排序则需要 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.02778em;\">O</span><span>(</span><span style=\"margin-right:0.01968em;\">Nl</span><span>o</span><span style=\"margin-right:0.03588em;\">g</span><span style=\"margin-right:0.10903em;\">N</span><span>)</span></span></span></span> 的时间，在最坏情形下需要遍历一遍整个数组(<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.02778em;\">O</span><span>(</span><span style=\"margin-right:0.10903em;\">N</span><span>)</span></span></span></span>)，时间复杂度是 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.02778em;\">O</span><span>(</span><span style=\"margin-right:0.10903em;\">N</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.01968em;\">Nl</span><span>o</span><span style=\"margin-right:0.03588em;\">g</span><span style=\"margin-right:0.10903em;\">N</span><span>)</span></span></span></span> 比符号表稍大。</p>\n</blockquote>\n",
      "content_html": "<h2 id=\"_1-寻找重复元素\"> 1. 寻找重复元素</h2>\n<p>在排序应用中也可以寻找重复元素，但是使用符号表则更为高效（特别是散列实现）。</p>\n<p>将数组遍历一遍，随后查找表内是否存在这一元素，如果不存在则添加进表中，如果存在，则说明找到了重复元素</p>\n<blockquote>\n<p>分析：遍历一遍数组所需要的时间是 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.02778em;\">O</span><span>(</span><span style=\"margin-right:0.10903em;\">N</span><span>)</span></span></span></span>，由于散列表的查找和插入都是<strong>常数级别</strong>的，所以整体的复杂度是 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.02778em;\">O</span><span>(</span><span style=\"margin-right:0.10903em;\">N</span><span>)</span></span></span></span></p>\n</blockquote>\n<blockquote>\n<p>排序则需要 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.02778em;\">O</span><span>(</span><span style=\"margin-right:0.01968em;\">Nl</span><span>o</span><span style=\"margin-right:0.03588em;\">g</span><span style=\"margin-right:0.10903em;\">N</span><span>)</span></span></span></span> 的时间，在最坏情形下需要遍历一遍整个数组(<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.02778em;\">O</span><span>(</span><span style=\"margin-right:0.10903em;\">N</span><span>)</span></span></span></span>)，时间复杂度是 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.02778em;\">O</span><span>(</span><span style=\"margin-right:0.10903em;\">N</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.01968em;\">Nl</span><span>o</span><span style=\"margin-right:0.03588em;\">g</span><span style=\"margin-right:0.10903em;\">N</span><span>)</span></span></span></span> 比符号表稍大。</p>\n</blockquote>\n\n<h2 id=\"_2-字典实现\"> 2. 字典实现</h2>\n<p>符号表的<strong>键值对</strong>特性最适合实现的就是一个字典类，其中包括<strong>电话黄页</strong>、<strong>字典</strong>、<strong>账户信息</strong> 等等</p>\n<h2 id=\"_3-过滤器\"> 3. 过滤器</h2>\n<p>可以用符号表过滤重复元素，建立黑名单和白名单等。这主要是依赖于符号宝的高效的查找操作。</p>\n<h2 id=\"_4-反向索引\"> 4. 反向索引</h2>\n<p>可以将键和值互换，建立反向索引，实现相互搜索。</p>\n<h2 id=\"_5-矩阵乘法\"> 5. 矩阵乘法</h2>\n<p>矩阵乘法中的 0 是无用的，所以我们可以通过构建一个 <strong>向量类</strong> ，使用一个符号表， 键值为向量中不为零元素的数组索引和相应的值。</p>\n<p>所以，我们就可以使用一个 <strong>向量数组</strong> 来代表矩阵；</p>\n<p>通过向量点乘的结果，来得到新矩阵的某个元素的值。</p>\n<p>进行点乘时，只需要查找出元素，再依照储存的索引找到相应的值相乘即可</p>\n<div><pre><code><span>public</span> <span>class</span> <span>SparseVector</span> <span>{</span>\n    <span>private</span> <span>HashST</span><span><span>&lt;</span><span>Integer</span><span>,</span> <span>Double</span><span>></span></span> st<span>;</span>\n    <span>public</span> <span>SparseVectro</span><span>(</span><span>)</span> <span>{</span>\n        st <span>=</span> <span>new</span> <span>HashST</span><span><span>&lt;</span><span>Integer</span><span>,</span> <span>Double</span><span>></span></span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>public</span> <span>int</span> <span>size</span><span>(</span><span>)</span> <span>{</span>\n        <span>return</span> st<span>.</span><span>size</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>public</span> <span>void</span> <span>put</span><span>(</span><span>int</span> i<span>,</span> <span>double</span> x<span>)</span> <span>{</span>\n        st<span>.</span><span>put</span><span>(</span>i<span>,</span> x<span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>public</span> <span>double</span> <span>get</span><span>(</span><span>int</span> i<span>)</span> <span>{</span>\n        <span>if</span> <span>(</span><span>!</span>st<span>.</span><span>contains</span><span>(</span>i<span>)</span><span>)</span> <span>{</span>\n            <span>return</span> <span>0.0</span><span>;</span>\n        <span>}</span>\n        <span>else</span> <span>{</span>\n            <span>return</span> st<span>.</span><span>get</span><span>(</span>i<span>)</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n\n    <span>public</span> <span>double</span> <span>dot</span><span>(</span><span>double</span><span>[</span><span>]</span> that<span>)</span> <span>{</span>\n        <span>double</span> sum <span>=</span> <span>0.0</span><span>;</span>\n        <span>for</span> <span>(</span><span>int</span> i <span>:</span> st<span>.</span><span>keys</span><span>(</span><span>)</span><span>)</span> <span>{</span>\n            sum <span>+=</span> that<span>[</span>i<span>]</span> <span>*</span> <span>this</span><span>.</span><span>get</span><span>(</span>i<span>)</span><span>;</span>\n        <span>}</span>\n        <span>return</span> sum<span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br></div></div>",
      "date_published": "2017-03-11T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "《Algorithm 第四版》笔记"
      ]
    },
    {
      "title": "散列表(Hash Table)",
      "url": "https://wafer.li/blog-corners/learning-notes/algorithm-4th-edition/%E6%95%A3%E5%88%97%E8%A1%A8(Hash%20Table)/",
      "id": "https://wafer.li/blog-corners/learning-notes/algorithm-4th-edition/%E6%95%A3%E5%88%97%E8%A1%A8(Hash%20Table)/",
      "summary": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>散列表是使用散列函数，将相应的键值对映射到数组的某个位置的数据结构。</p>\n<p>它在一般情况下相对于其他的数据结构要效率更高，你甚至可以实现在<strong>常数时间</strong>内进行查找和插入操作的符号表。</p>\n<p>但是它也有相应的缺点，下面将会详细讲述</p>\n",
      "content_html": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>散列表是使用散列函数，将相应的键值对映射到数组的某个位置的数据结构。</p>\n<p>它在一般情况下相对于其他的数据结构要效率更高，你甚至可以实现在<strong>常数时间</strong>内进行查找和插入操作的符号表。</p>\n<p>但是它也有相应的缺点，下面将会详细讲述</p>\n\n<h2 id=\"_2-散列函数\"> 2. 散列函数</h2>\n<p>散列表一个重要部分就是<strong>散列函数的计算</strong>，我们使用散列函数将键值转换为数组的索引。</p>\n<p>计算散列值一个很重要的方面就是让键值尽量分布到整个表中去，以避免碰撞的发生。</p>\n<p>如果我们拥有一个大小为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">M</span></span></span></span> 的数组，那么我们需要返回<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>[</span><span>0</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.10903em;\">M</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>1</span><span>]</span></span></span></span> 的散列值。</p>\n<p>散列值的计算与<strong>类型</strong>相关。</p>\n<h3 id=\"_2-1-java-的约定\"> 2.1 Java 的约定</h3>\n<p>对于 Java 来说，比较幸运的是，Java 对于内置类型都实现了一个 <code>hashCode()</code> 方法，返回一个 32 位的 <code>int</code> 作为 <code>hashCode</code>；</p>\n<p>我们可以直接使用这个 <code>hashCode</code> 来实现我们自己的散列值计算。</p>\n<p>需要注意的是，Java 要求如果 <code>x</code> 和 <code>y</code> 相等，那么它们两者的 <code>hashCode</code> 也相等。</p>\n<h3 id=\"_2-2-散列计算方法\"> 2.2 散列计算方法</h3>\n<p>常用的散列方法是<strong>除留余数法</strong>。</p>\n<p>我们选择大小为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">M</span></span></span></span> 的数组，对于任意的正整数 k，计算 <code>k % M</code>，这样就能有效的将键分布于 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>[</span><span>0</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.10903em;\">M</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>1</span><span>]</span></span></span></span></p>\n<blockquote>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">M</span></span></span></span> 最好选择使用<strong>质数</strong>。</p>\n</blockquote>\n<blockquote>\n<p>虽然现在给不出严谨的数学证明，但是工程实践中说明使用质数作为除数可以更好地利用键值的信息。</p>\n</blockquote>\n<h3 id=\"_2-3-使用-hashcode-的计算问题\"> 2.3 使用 <code>hashCode</code> 的计算问题</h3>\n<p>下面是一个实现的例子：</p>\n<div><pre><code><span>private</span> <span>int</span> <span>hash</span><span>(</span><span>Key</span> x<span>)</span> <span>{</span>\n    <span>return</span> <span>(</span><span>Math</span><span>.</span><span>abs</span><span>(</span>x<span>.</span><span>hashCode</span><span>(</span><span>)</span><span>)</span><span>)</span> <span>%</span> <span>M</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>在这个例子中，因为 Java 的 <code>hashCode</code> 返回的是一个 <code>int</code> 值；</p>\n<p>这说明 <code>hashCode</code> 的范围是 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span>−</span><span><span>2</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>31</span></span></span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∼</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span><span>2</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>31</span></span></span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1</span></span></span></span>；</p>\n<p>但是我们需要的散列值要位于 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>[</span><span>0</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.10903em;\">M</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>1</span><span>]</span></span></span></span>；</p>\n<p>所以我们首先要将 <code>hashCode</code> 取绝对值。</p>\n<p>通常来说，取绝对值一般使用 <code>Math.abs()</code>；</p>\n<p>但是，由于 <code>hashCode</code> 可以取到整个 32 位整形的范围；</p>\n<p>当 <code>hashCode</code> 为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span>−</span><span><span>2</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>31</span></span></span></span></span></span></span></span></span></span></span></span> 时，<code>Math.abs()</code> 是使用 <code>-1</code> 与之相乘；</p>\n<p>此时，数值变为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span><span>2</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>31</span></span></span></span></span></span></span></span></span></span></span></span>，出现 <strong>上溢</strong>，便会回绕至 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span>−</span><span><span>2</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>31</span></span></span></span></span></span></span></span></span></span></span></span>；</p>\n<p><strong>所以，<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span>−</span><span><span>2</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>31</span></span></span></span></span></span></span></span></span></span></span></span> 的绝对值是其本身！</strong></p>\n<p>正确的做法如下：</p>\n<div><pre><code><span>private</span> <span>int</span> <span>hash</span><span>(</span><span>Key</span> x<span>)</span> <span>{</span>\n    <span>return</span> <span>(</span>x<span>.</span><span>hashCode</span><span>(</span><span>)</span> <span>&amp;</span> <span>0x7fffffff</span><span>)</span> <span>%</span> <span>M</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>通过忽略整形中的符号位来达到取绝对值的作用。</p>\n<h3 id=\"_2-4-浮点数\"> 2.4 浮点数</h3>\n<p>对于 0 到 1 浮点数，我们可以将它乘以 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">M</span></span></span></span> 并四舍五入得到索引。</p>\n<p>但是这种方法下，浮点数的<strong>高位</strong>作用更大，所以我们可以先将浮点数转为二进制数，随后使用除留余数法</p>\n<h3 id=\"_2-5-字符串\"> 2.5 字符串</h3>\n<p>对于字符串，我们也可以使用除留余数法。</p>\n<p>通过 <code>chatAt()</code> 来返回一个 <code>char</code> 值。</p>\n<p>以下的代码使用 Horner 算法来生成散列值</p>\n<div><pre><code><span>int</span> hash <span>=</span> <span>0</span><span>;</span>\n<span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> s<span>.</span><span>lengh</span><span>(</span><span>)</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>\n    hash <span>=</span> <span>(</span><span>R</span> <span>*</span> hash <span>+</span> s<span>.</span><span>charAt</span><span>(</span>i<span>)</span><span>)</span> <span>%</span> <span>M</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id=\"_2-6-组合键\"> 2.6 组合键</h3>\n<p>如果键的类型含有多个整型变量，那么我们就可以将它们结合起来进行计算。</p>\n<p>例如：</p>\n<div><pre><code><span>int</span> hash <span>=</span> <span>(</span><span>(</span><span>(</span>day <span>*</span> <span>R</span> <span>+</span> month<span>)</span> <span>%</span> <span>M</span><span>)</span> <span>*</span> <span>R</span> <span>+</span> year<span>)</span> <span>%</span> <span>M</span><span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_2-7-缓存\"> 2.7 缓存</h3>\n<p>如果散列值的计算很耗时，那么我们或许可以<strong>将每个键的散列值缓存起来</strong></p>\n<p>Java 内置的 <code>String</code> 就使用了这种方法来减少计算量。</p>\n<h3 id=\"_2-8-结论\"> 2.8 结论</h3>\n<p>为一个数据类型实现散列函数需要满足三个条件：</p>\n<ol>\n<li>一致性——等价的键必定产生相等的散列值</li>\n<li>高效性</li>\n<li>均匀性</li>\n</ol>\n<h2 id=\"_3-碰撞处理\"> 3. 碰撞处理</h2>\n<p>散列表的另一个重要部分是<strong>碰撞处理</strong>。</p>\n<p>无论如何设计散列函数，总会出现两个不同的键得到同一个散列值的情况，这就叫做<strong>碰撞</strong>。</p>\n<p>此时，我们就需要对碰撞进行处理。</p>\n<h3 id=\"_3-1-拉链法\"> 3.1 拉链法</h3>\n<p>一种处理碰撞的方法就是拉链法，实际上就是<strong>使用链表储存碰撞的元素</strong>。</p>\n<p>每个数组元素都是一个链表头，随后跟着与其碰撞的元素</p>\n<p>此时，我们的数组大小 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">M</span></span></span></span> 可以小于键值数量 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">N</span></span></span></span></p>\n<h4 id=\"_3-1-1-实现\"> 3.1.1 实现</h4>\n<div><pre><code><span>public</span> <span>class</span> <span>SeparateChainingHashST</span><span><span>&lt;</span><span>Key</span><span>,</span> <span>Value</span><span>></span></span> <span>{</span>\n    <span>private</span> <span>int</span> <span>N</span><span>;</span>                              <span>// 键值对总数</span>\n    <span>private</span> <span>int</span> <span>M</span><span>;</span>                              <span>// 散列表的大小</span>\n    <span>private</span> <span>SequentialSearchST</span><span><span>&lt;</span><span>Key</span><span>,</span> <span>Value</span><span>></span></span><span>[</span><span>]</span> st<span>;</span> <span>// 存放链表的数组</span>\n\n    <span>public</span> <span>SeparateChainingHashST</span><span>(</span><span>)</span> <span>{</span>\n        <span>this</span><span>(</span><span>997</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>public</span> <span>SeparateChainingHashST</span><span>(</span><span>int</span> <span>M</span><span>)</span> <span>{</span>\n        <span>// Create linked list</span>\n        <span><span>this<span>.</span></span>M</span> <span>=</span> <span>M</span><span>;</span>\n        st <span>=</span> <span>(</span><span>SequentialSearchST</span><span><span>&lt;</span><span>Key</span><span>,</span> <span>Value</span><span>></span></span><span>[</span><span>]</span><span>)</span> <span>new</span> <span>SequentialSearchST</span><span>[</span><span>M</span><span>]</span><span>;</span>\n\n        <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>M</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>\n            st<span>[</span>i<span>]</span> <span>=</span> <span>new</span> <span>SequentialSearchST</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n\n    <span>private</span> <span>int</span> <span>hash</span><span>(</span><span>Key</span> key<span>)</span> <span>{</span>\n        <span>return</span> <span>(</span>key<span>.</span><span>hashCode</span><span>(</span><span>)</span> <span>&amp;</span> <span>0x7fffffff</span><span>)</span> <span>%</span> <span>M</span><span>;</span>\n    <span>}</span>\n\n    <span>private</span> <span>Value</span> <span>get</span><span>(</span><span>Key</span> key<span>)</span> <span>{</span>\n        <span>return</span> <span>(</span><span>Value</span><span>)</span> st<span>[</span><span>hash</span><span>(</span>key<span>)</span><span>]</span><span>.</span><span>get</span><span>(</span>key<span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>private</span> <span>void</span> <span>put</span><span>(</span>key<span>,</span> val<span>)</span> <span>{</span>\n        st<span>[</span><span>hash</span><span>(</span>key<span>)</span><span>]</span><span>.</span><span>put</span><span>(</span>key<span>,</span> val<span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br></div></div><blockquote>\n<p>关于删除操作，拉链法的删除操作相对简单，只需要找到 <code>SequentialSearchST</code> 对象，直接调用 <code>delete()</code> 方法即可。\n实际上就是链表的删除操作。</p>\n</blockquote>\n<h4 id=\"_3-1-2-性能\"> 3.1.2 性能</h4>\n<ol>\n<li>在一张含有 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">M</span></span></span></span> 条链表和 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> 个键的散列表中，任意一条链表的键的数量均在 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.10903em;\">N</span><span>/</span><span style=\"margin-right:0.10903em;\">M</span></span></span></span> 的常数范围内的概率无限趋向 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1</span></span></span></span></li>\n<li>在一张含有 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">M</span></span></span></span> 条链表和 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> 个键的散列表中，未命中查找和插入操作所需的比较次数为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.36687em;vertical-align:0em;\"></span><span>∼</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.10903em;\">N</span><span>/</span><span style=\"margin-right:0.10903em;\">M</span></span></span></span></li>\n</ol>\n<blockquote>\n<p>这里可以看到，散列表的效率是很高的，一般情况下只需要<strong>常数级别的</strong>时间即可完成搜索和插入</p>\n</blockquote>\n<h3 id=\"_3-2-开放地址法\"> 3.2 开放地址法</h3>\n<p>另一种碰撞处理方法啊就是开放地址法，它倾向于利用<strong>数组中的空位</strong>来解决冲突。</p>\n<p>所以如果使用这种方法来进行碰撞处理，那么就要求数组的数量 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">M</span></span></span></span> 大于键值数量 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">N</span></span></span></span>。</p>\n<h4 id=\"_3-2-1-实现\"> 3.2.1 实现</h4>\n<p>开放地址的最简单实现叫做<strong>线性探测法</strong>：当碰撞发生时，直接检查数组的下一个位置。</p>\n<p>这会产生三种结果：</p>\n<ol>\n<li>命中</li>\n<li>未命中（为空）</li>\n<li>未命中（该位置的键与被查找的键不同）</li>\n</ol>\n<blockquote>\n<p>特别重要的一点是，我们要在到达数组结尾时返回开头。</p>\n</blockquote>\n<div><pre><code><span>public</span> <span>class</span> <span>LinearProbingHashST</span><span><span>&lt;</span><span>Key</span><span>,</span> <span>Value</span><span>></span></span> <span>{</span>\n    <span>private</span> <span>int</span> <span>N</span><span>;</span>\n    <span>private</span> <span>int</span> <span>M</span><span>;</span>\n    <span>private</span> <span>Key</span><span>[</span><span>]</span> keys<span>;</span>\n    <span>private</span> <span>Value</span><span>[</span><span>]</span> vals<span>;</span>\n\n    <span>public</span> <span>LinearProbingHashST</span><span>(</span><span>)</span> <span>{</span>\n        keys <span>=</span> <span>(</span><span>Key</span><span>[</span><span>]</span><span>)</span> <span>new</span> <span>Object</span><span>[</span><span>M</span><span>]</span><span>;</span>\n        vals <span>=</span> <span>(</span><span>Value</span><span>[</span><span>]</span><span>)</span> <span>new</span> <span>Object</span><span>[</span><span>M</span><span>]</span><span>;</span>\n    <span>}</span>\n\n    <span>private</span> <span>int</span> <span>hash</span><span>(</span><span>Key</span> key<span>)</span> <span>{</span>\n        <span>return</span> <span>(</span>key<span>.</span><span>hashCode</span><span>(</span><span>)</span> <span>&amp;</span> <span>0x7fffffff</span><span>)</span> <span>%</span> <span>M</span><span>;</span>\n    <span>}</span>\n\n    <span>private</span> <span>void</span> <span>resize</span><span>(</span><span>)</span> <span>[</span>\n        <span>/* resize method*/</span>\n    <span>}</span>\n\n    <span>public</span> <span>put</span><span>(</span><span>Key</span> key<span>,</span> <span>Value</span> val<span>)</span> <span>{</span>\n        <span>if</span> <span>(</span><span>N</span> <span>>=</span> <span>M</span> <span>/</span> <span>2</span><span>)</span> <span>resize</span><span>(</span><span>2</span> <span>*</span> <span>M</span><span>)</span><span>;</span>\n\n        <span>int</span> i<span>;</span>\n        <span>for</span> <span>(</span>i <span>=</span> <span>hash</span><span>(</span>key<span>)</span><span>;</span> keys<span>[</span>i<span>]</span> <span>!=</span> <span>null</span><span>;</span> i <span>=</span> <span>(</span>i <span>+</span> <span>1</span><span>)</span> <span>%</span> <span>M</span><span>)</span> <span>{</span>\n            <span>if</span> <span>(</span>keys<span>[</span>i<span>]</span><span>.</span><span>equals</span><span>(</span>key<span>)</span><span>)</span> <span>{</span>\n                vals<span>[</span>i<span>]</span> <span>=</span> val<span>;</span>\n                <span>return</span><span>;</span>\n            <span>}</span>\n        <span>}</span>\n\n        keys<span>[</span>i<span>]</span> <span>=</span> key<span>;</span>\n        vals<span>[</span>i<span>]</span> <span>=</span> val<span>;</span>\n        <span>N</span><span>++</span><span>;</span>\n    <span>}</span>\n\n    <span>public</span> <span>Value</span> <span>get</span><span>(</span><span>Key</span> key<span>)</span> <span>{</span>\n        <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>hash</span><span>(</span>key<span>)</span><span>;</span> keys<span>[</span>i<span>]</span> <span>!=</span> nul<span>;</span> i <span>=</span> <span>(</span>i <span>+</span> <span>1</span><span>)</span> <span>%</span> <span>M</span><span>)</span> <span>{</span>\n            <span>if</span> <span>(</span>keys<span>[</span>i<span>]</span><span>.</span><span>equals</span><span>(</span>key<span>)</span><span>)</span> <span>{</span>\n                <span>return</span> vals<span>[</span>i<span>]</span><span>;</span>\n            <span>}</span>\n        <span>}</span>\n        <span>return</span> <span>null</span><span>;</span>\n    <span>}</span>\n\n    <span>public</span> <span>void</span> <span>delete</span><span>(</span><span>Key</span> key<span>)</span> <span>{</span>\n        <span>if</span> <span>(</span><span>!</span><span>contains</span><span>(</span>key<span>)</span><span>)</span> <span>{</span>\n            <span>return</span><span>;</span>\n        <span>}</span>\n\n        <span>int</span> i <span>=</span> <span>hash</span><span>(</span>key<span>)</span><span>;</span>\n\n        <span>while</span><span>(</span><span>!</span>key<span>.</span><span>equals</span><span>(</span>keys<span>[</span>i<span>]</span><span>)</span><span>)</span> <span>{</span>\n            i <span>=</span> <span>(</span>i <span>+</span> <span>1</span><span>)</span> <span>%</span> <span>M</span><span>;</span>\n        <span>}</span>\n        keys<span>[</span>i<span>]</span> <span>=</span> <span>null</span><span>;</span>\n        vals<span>[</span>i<span>]</span> <span>=</span> <span>null</span><span>;</span>\n\n        i <span>=</span> <span>(</span>i <span>+</span> <span>1</span><span>)</span> <span>%</span> <span>M</span><span>;</span>\n        <span>while</span> <span>(</span>keys<span>[</span>i<span>]</span> <span>!=</span> <span>null</span><span>)</span> <span>{</span>\n            <span>Key</span> keyToRedo <span>=</span> keys<span>[</span>i<span>]</span><span>;</span>\n            <span>Value</span> valToRedo <span>=</span> vals<span>[</span>i<span>]</span><span>;</span>\n            keys<span>[</span>i<span>]</span> <span>=</span> <span>null</span><span>;</span>\n            vals<span>[</span>i<span>]</span> <span>=</span> <span>null</span><span>;</span>\n            <span>N</span><span>--</span><span>;</span>\n            <span>put</span><span>(</span>keyToRedo<span>,</span> valToRedo<span>)</span><span>;</span>\n            i <span>=</span> <span>(</span>i <span>+</span> <span>1</span><span>)</span> <span>%</span> <span>M</span><span>;</span>\n        <span>}</span>\n        <span>N</span> <span>--</span><span>;</span>\n\n        <span>if</span> <span>(</span><span>N</span> <span>></span> <span>0</span> <span>&amp;&amp;</span> <span>N</span> <span>==</span> <span>M</span> <span>/</span> <span>8</span><span>)</span> <span>resize</span><span>(</span><span>M</span> <span>/</span><span>2</span><span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br></div></div><blockquote>\n<p>关于删除操作：\n我们不能直接将键的位置设置为 <code>null</code>，这会导致剩下的键无法被找到，所以我们需要<strong>将被删除键的右侧的键重新插入</strong></p>\n</blockquote>\n<h4 id=\"_3-2-2-性能\"> 3.2.2 性能</h4>\n<p>在一张大小为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">M</span></span></span></span> 并含有 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">N</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.0037em;\">α</span><span style=\"margin-right:0.10903em;\">M</span></span></span></span> 个键的基于线性探测的散列表中，命中和未命中的查找所需要的探测次数分别为：</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.36687em;vertical-align:0em;\"></span><span>∼</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>2</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span>(</span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:2.09077em;vertical-align:-0.7693300000000001em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>a</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span></span></span><span>)</span></span></span></span></span></p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.36687em;vertical-align:0em;\"></span><span>∼</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>2</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span>(</span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:2.25744em;vertical-align:-0.936em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>(</span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>a</span><span><span>)</span><span><span><span><span style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.936em;\"><span></span></span></span></span></span><span></span></span><span>)</span></span></span></span></span></p>\n<p>所以，如果要维护线性探测法的最佳性能；</p>\n<p>应尽量保证数组是<strong>半满</strong>的</p>\n<h2 id=\"_4-结论\"> 4. 结论</h2>\n<ol>\n<li>\n<p>散列表在一般情况下可以实现<strong>常数级别的</strong>查找和插入操作</p>\n</li>\n<li>\n<p>性能保证来自于散列函数的质量</p>\n<blockquote>\n<p>这会导致散列表性能的不稳定，同时容易受到外部攻击。\n一些特殊的数据在经过散列计算后会映射到同一个位置，此时散列表的性能就会急剧下降。</p>\n</blockquote>\n<blockquote>\n<p><strong>当需要性能保证时，优先考虑平衡二叉树（红黑树）</strong></p>\n</blockquote>\n</li>\n<li>\n<p>散列计算可能复杂而且昂贵</p>\n</li>\n<li>\n<p>难以支持有序性相关的符号表操作</p>\n<blockquote>\n<p>经过散列计算后，键值对会随机地分布于数组中，不能保持其插入顺序。</p>\n</blockquote>\n</li>\n</ol>\n",
      "date_published": "2017-03-09T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "《Algorithm 第四版》笔记"
      ]
    },
    {
      "title": "符号表",
      "url": "https://wafer.li/blog-corners/learning-notes/algorithm-4th-edition/%E7%AC%A6%E5%8F%B7%E8%A1%A8/",
      "id": "https://wafer.li/blog-corners/learning-notes/algorithm-4th-edition/%E7%AC%A6%E5%8F%B7%E8%A1%A8/",
      "summary": "<h2 id=\"_1-符号表\"> 1. 符号表</h2>\n<p>符号表是一个储存键值对的表，同时还有<strong>插入</strong>和删除的功能。</p>\n",
      "content_html": "<h2 id=\"_1-符号表\"> 1. 符号表</h2>\n<p>符号表是一个储存键值对的表，同时还有<strong>插入</strong>和删除的功能。</p>\n\n<h3 id=\"_1-1-符号表的设计\"> 1.1 符号表的设计</h3>\n<ol>\n<li>\n<p>符号表不允许重复的键</p>\n<blockquote>\n<p>键值对是唯一的，一个键只对应一个值</p>\n</blockquote>\n</li>\n<li>\n<p>符号表不允许空键和空值</p>\n<blockquote>\n<p>这是因为空键会导致 <code>Runtime Exception</code>\n不允许空值可以让我们通过更少的 API 来实现更多的类似插入删除的操作</p>\n</blockquote>\n<blockquote>\n<p>我们可以通过 <code>get()</code> 来测试一个键是否是空键\n通过 <code>put()</code> 的空值来删除这个键</p>\n</blockquote>\n</li>\n<li>\n<p>只通过 <code>compareTo()</code> 方法来去判断两个键的相等性</p>\n<blockquote>\n<p>如果我们混合使用 <code>equal()</code> 和 <code>compareTo()</code> 方法，那么这将会导致很多不必要的浪费</p>\n</blockquote>\n<blockquote>\n<p>为了避免这种使用不同方法所造成的浪费，我们决定只使用 <code>compareTo()</code> 来去判断相等性</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"_1-2-api\"> 1.2 API</h3>\n<p>这里展现了我们应该使用在符号表的 API ，这些 API 主要对键值对进行操作；\n之后的内容将基于这里给出的 API 来进行。</p>\n<h4 id=\"_1-2-1-关键的-api\"> 1.2.1 关键的 API</h4>\n<p>最为关键的符号表 API 是 <code>put()</code> 和 <code>get()</code></p>\n<div><pre><code><span>/**\n* Put the key and value pair into the symbols table.\n* @parma key The key you want to insert, when it is null, delete the key from table.\n* @parma value The value you want to insert\n*/</span>\n<span>void</span> <span>put</span><span>(</span><span>Key</span> key<span>,</span> <span>Value</span> value<span>)</span>\n\n<span>/**\n* Get the value of the specfic key in the table.\n* @parma key The key you specify\n* @return The value of the specific key, if the value doesn't exist, return null\n*/</span>\n<span>Value</span> <span>get</span><span>(</span><span>Key</span> key<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><h4 id=\"_1-2-2-在有序符号表中的其他方法\"> 1.2.2 在有序符号表中的其他方法</h4>\n<p>这些 API 是应用于<strong>有序符号表</strong>的\n这里只展示了一些关键方法，还有一些冗余方法用于更方便的操作，这里不予展示</p>\n<p>API 包括：</p>\n<ol>\n<li><code>min()</code> 和 <code>max()</code></li>\n<li><code>floor()</code> 和 <code>ceiling()</code></li>\n<li><code>rank()</code> 和 <code>select()</code></li>\n<li><code>keys()</code></li>\n</ol>\n<blockquote>\n<p>这里只展示了 <code>rank()</code>, <code>select()</code> 和 <code>keys()</code> 方法，其他的方法比较简单，而且其作用也很容易通过名字进行推断。\n所以在这里不予显示</p>\n</blockquote>\n<div><pre><code><span>// Rank &amp; Select</span>\n<span>/**\n* Get the number of the keys which are less than the specific one. Also called the RANK\n* @parma Key key The specific key\n* @return The number of keys in the table which are less than the specific one.\n*/</span>\n<span>int</span> <span>rank</span><span>(</span><span>Key</span> key<span>)</span>\n\n<span>/**\n* Get the key which is rank k\n* @parma int k The rank of the key\n* @return The specific key\n*/</span>\n<span>Key</span> <span>select</span><span>(</span><span>int</span> k<span>)</span>\n\n<span>// keys()</span>\n\n<span>/**\n* Get the all keys inside the table.\n* @return An Iterable Set of keys, such as List or Queue\n*/</span>\n<span>Iterable</span><span><span>&lt;</span><span>Key</span><span>></span></span> <span>keys</span><span>(</span><span>)</span>\n\n<span>/**\n* Get the set of the range of [lo..hi]\n* @parma Key lo The low range of the keys.\n* @parma Key hi The high range of the keys.\n* @return The Iterable Set of the keys.\n*/</span>\n<span>Iterable</span><span><span>&lt;</span><span>Key</span><span>></span></span> <span>keys</span><span>(</span><span>Key</span> lo<span>,</span> <span>Key</span> hi<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div><h2 id=\"_2-在无序表中的顺序查找\"> 2. 在无序表中的顺序查找</h2>\n<p>当我们实现一个符号表的时候，我们通常使用链表的形式来实现；</p>\n<p>使用这样的一个数据结构时，我们只能以<strong>顺序</strong>的形式进行搜索，仅仅通过在单链接链表中遍历所有的节点</p>\n<h3 id=\"_2-1-实现\"> 2.1 实现</h3>\n<div><pre><code><span>public</span> <span>class</span> <span>SequentialSearchST</span><span><span>&lt;</span><span>Key</span><span>,</span> <span>Value</span><span>></span></span> <span>{</span>\n    <span>private</span> <span>Node</span> first<span>;</span>\n\n    <span>private</span> <span>class</span> <span>Node</span> <span>{</span>\n        <span>// The linked List Node</span>\n        <span>Key</span> key<span>;</span>\n        <span>Value</span> val<span>;</span>\n        <span>Node</span> next<span>;</span>\n    <span>}</span>\n\n    <span>public</span> <span>Node</span> <span>(</span><span>Key</span> key<span>,</span> <span>Value</span> val<span>,</span> <span>Node</span> next<span>)</span> <span>{</span>\n        <span>this</span><span>.</span>key <span>=</span> key<span>;</span>\n        <span>this</span><span>.</span>val <span>=</span> val<span>;</span>\n        <span>this</span><span>.</span>next <span>=</span> next<span>;</span>\n    <span>}</span>\n\n    <span>public</span> <span>Value</span> <span>get</span><span>(</span><span>Key</span> key<span>)</span> <span>{</span>\n        <span>// get the specific key, return the corrsponding value</span>\n        <span>for</span><span>(</span><span>Node</span> x <span>=</span> first<span>;</span> x <span>!=</span> <span>null</span><span>;</span> x <span>=</span> x<span>.</span>next<span>)</span> <span>{</span>\n            <span>if</span><span>(</span>key<span>.</span><span>equals</span><span>(</span>x<span>.</span>key<span>)</span><span>)</span> <span>{</span>\n                <span>return</span> x<span>.</span>val<span>;</span>   <span>// hit</span>\n            <span>}</span>\n        <span>}</span>\n        <span>return</span> <span>null</span><span>;</span>    <span>// Not hit</span>\n    <span>}</span>\n\n    <span>public</span> <span>void</span> <span>put</span><span>(</span><span>Key</span> key<span>,</span> <span>Value</span> value<span>)</span> <span>{</span>\n        <span>for</span><span>(</span><span>Node</span> x <span>=</span> first<span>;</span> x <span>!=</span> <span>null</span><span>;</span> x <span>=</span> x<span>.</span>next<span>)</span> <span>{</span>\n            <span>if</span><span>(</span>key<span>.</span><span>equals</span><span>(</span>x<span>.</span>key<span>)</span><span>)</span> <span>{</span>\n                x<span>.</span>val <span>=</span> val<span>;</span>\n                <span>return</span><span>;</span>     <span>// hit</span>\n            <span>}</span>\n        <span>}</span>\n        <span>// Not hit, create new node</span>\n        <span>// Add  at the beginning</span>\n        first <span>=</span> <span>new</span> <span>Node</span><span>(</span>key<span>,</span> val<span>,</span> first<span>)</span><span>;</span>\n\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br></div></div><h3 id=\"_2-2-性能\"> 2.2 性能</h3>\n<p>在一个具有 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> 个节点的符号表中，使用顺序查找方法，在最坏情况下，需要 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> 次的比较。</p>\n<p>特别的是，插入 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> 个节点，需要 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.36687em;vertical-align:0em;\"></span><span>∼</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span><span style=\"margin-right:0.10903em;\">N</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span><span>/2</span></span></span></span> 次的比较</p>\n<h3 id=\"_2-3-结论\"> 2.3 结论</h3>\n<p>我们可以看到，使用链表实现符号表时，它需要使用顺序查找方法，这样子使得查找的效率变得很低下；</p>\n<p>这样子的实现方式，并不能满足我们现今对大数据处理的需求。</p>\n<h2 id=\"_3-在有序符号表中的二分查找\"> 3. 在有序符号表中的二分查找</h2>\n<p>为了实现更快的查找性能，我们需要转用<strong>数组</strong>来实现符号表；</p>\n<p>对于一个<strong>有序符号表</strong>来说，我们可以使用<strong>二分查找</strong>的方法来进行搜索；\n后面会看到，使用二分查找将会大大提高我们的搜索效率</p>\n<h3 id=\"_3-1-实现\"> 3.1 实现</h3>\n<p>我们使用两个平行的数组来分别储存键和值；</p>\n<p>然后我们使用 <code>rank()</code> 方法来帮助我们找到一个特定的键值对</p>\n<div><pre><code><span>/**\n* These method all base on the rank() method\n* Which return the number of the keys which are less than the spcific one\n* Or the right position of the specific key\n*/</span>\n\n<span>public</span> <span>Value</span> <span>get</span><span>(</span><span>Key</span> key<span>)</span> <span>{</span>\n    <span>if</span> <span>(</span><span>isEmpty</span><span>(</span><span>)</span><span>)</span> <span>return</span> <span>null</span><span>;</span>\n    <span>int</span> i <span>=</span> <span>rank</span><span>(</span>key<span>)</span><span>;</span>\n    <span>if</span> <span>(</span>i<span>&lt;</span> <span>N</span> <span>&amp;&amp;</span> keys<span>[</span>i<span>]</span><span>.</span><span>compareTo</span><span>(</span>key<span>)</span> <span>==</span> <span>0</span><span>)</span> <span>{</span>\n        <span>return</span> vals<span>[</span>i<span>]</span><span>;</span>     <span>// hit</span>\n    <span>}</span>\n    <span>else</span> <span>{</span>\n        <span>return</span> <span>null</span><span>;</span>    <span>// Not hit</span>\n    <span>}</span>\n<span>}</span>\n\n<span>public</span> <span>void</span> <span>put</span><span>(</span><span>Key</span> key<span>,</span> <span>Value</span> value<span>)</span> <span>{</span>\n    <span>// The specific position of the key</span>\n    <span>int</span> i <span>=</span> <span>rank</span><span>(</span>key<span>)</span><span>;</span>\n    <span>if</span> <span>(</span>i <span>&lt;</span> <span>N</span> <span>&amp;&amp;</span> keys<span>[</span>i<span>]</span><span>.</span><span>compareTo</span><span>(</span>key<span>)</span> <span>==</span> <span>0</span><span>)</span> <span>{</span>\n        <span>// Update: 2017-02-12</span>\n        vals<span>[</span>i<span>]</span> <span>=</span> val<span>;</span> <span>return</span><span>;</span>\n    <span>}</span>\n    <span>// Not hit, create new key-value pair</span>\n    <span>for</span> <span>(</span><span>int</span> j <span>=</span> <span>N</span><span>;</span> j <span>></span> i<span>;</span> j<span>--</span><span>)</span> <span>{</span>\n        <span>// MOVE THE DATA FORWARD</span>\n        keys<span>[</span>j<span>]</span> <span>=</span> keys<span>[</span>j <span>-</span> <span>1</span><span>]</span><span>;</span>\n        vals<span>[</span>j<span>]</span> <span>=</span> vals<span>[</span>j <span>-</span> <span>1</span><span>]</span><span>;</span>\n    <span>}</span>\n    keys<span>[</span>i<span>]</span> <span>=</span> key<span>;</span>\n    vals<span>[</span>i<span>]</span> <span>=</span> val<span>;</span>\n    <span>N</span><span>++</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br></div></div><blockquote>\n<p>对于 <code>rank()</code> 方法的一些需要注意的点：\n这个方法的返回值是<strong>小于这个键的所有键的个数</strong>\n换句话来说就是这个键在<strong>数组中的排名</strong>，也就是它的<strong>位置</strong>\n重要的是，由于 <code>get()</code> 和 <code>put()</code> 方法也使用了</p>\n</blockquote>\n<div><pre><code><span>/**\n* Using the Binary Searching method, due to the ordered talbe.\n*/</span>\n<span>public</span> <span>int</span> <span>rank</span><span>(</span><span>Key</span> key<span>)</span> <span>{</span>\n    <span>// Notice that, the lo, hi, mid is the</span>\n    <span>// POSITION of the array</span>\n    <span>int</span> lo <span>=</span> <span>0</span><span>,</span> hi <span>=</span> <span>N</span> <span>-</span> <span>1</span><span>;</span>\n    <span>while</span> <span>(</span>lo <span>&lt;=</span> hi<span>)</span> <span>{</span>\n        <span>int</span> mid <span>=</span> lo <span>+</span> <span>(</span>hi <span>-</span> lo<span>)</span> <span>/</span> <span>2</span><span>;</span>     <span>// Use this format to avoid the overflow</span>\n        <span>int</span> cmp <span>=</span> key<span>.</span><span>compareTo</span><span>(</span>keys<span>[</span>mid<span>]</span><span>)</span><span>;</span>\n        <span>if</span> <span>(</span>cmp <span>&lt;</span> <span>0</span><span>)</span> <span>{</span>\n            hi <span>=</span> mid <span>-</span> <span>1</span><span>;</span>\n        <span>}</span>\n        <span>else</span> <span>if</span><span>(</span>cmp <span>></span> <span>0</span> <span>)</span> <span>{</span>\n            lo <span>=</span> mid <span>+</span> <span>1</span><span>;</span>\n        <span>}</span>\n        <span>else</span> <span>{</span>\n            <span>return</span> mid<span>;</span>\n        <span>}</span>\n    <span>}</span>\n    <span>return</span> lo<span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><blockquote>\n<p>二分查找是很简单的，通过在一个<strong>有序的</strong>序列中比较<strong>中间位置</strong>的数据元素，从而逐步缩减查找范围，达到减少比较次数的作用。</p>\n</blockquote>\n<p>需要注意的是：</p>\n<ol>\n<li>\n<p>使用 <code>mid = lo + (hi - lo) / 2;</code> 来避免溢出</p>\n<blockquote>\n<p>为了理解这点，你需要明白，<code>lo</code>, <code>hi</code> 和 <code>mid</code> 只是键值的<strong>位置</strong>，而不是键值的值。</p>\n</blockquote>\n<blockquote>\n<p>我们只需要获取中间元素的<strong>位置</strong>，如果一个数组的元素总数很大，那么使用 <code>hi + lo</code> 就会导致溢出，使得 <code>mid</code> 的结果甚至都不在 <code>[lo...hi]</code> 之间。</p>\n</blockquote>\n<blockquote>\n<p>为了防止溢出，或者说为了保证 <code>mid</code> 的结果落在 <code>[lo...hi]</code> 之间，那么我们就需要使用另一种计算方式；\n即，通过<strong>步长</strong>的方式来获取中间位置，通过使用 <code>lo + 步长</code> 的方式，可以有效的避免溢出的出现。</p>\n</blockquote>\n<blockquote>\n<p>所以，我们使用 <code>mid = lo + (hi - lo) / 2</code> 来获取中间位置。</p>\n</blockquote>\n</li>\n<li>\n<p>当数据元素小于 5 时，使用顺序查找来降低出错率</p>\n<blockquote>\n<p>顺序查找比二分查找更不容易出错。</p>\n</blockquote>\n<blockquote>\n<p>当数据元素小于 5 的时候，顺序查找和二分查找并没有什么大的性能差异，此时使用顺序查找来降低出错率是可以接受的。</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"_3-2-性能\"> 3.2 性能</h3>\n<p>在一个 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> 个键值的符号表中，使用二分查找，需要不超过 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.01968em;\">l</span><span style=\"margin-right:0.03588em;\">g</span><span style=\"margin-right:0.10903em;\">N</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1</span></span></span></span> 次的比较</p>\n<p>但是在同时需要插入和删除的操作的时候，二分查找的效率还是远远不能满足我们的需求</p>\n<p>如果你需要在一个 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> 个元素个数组中插入一个元素，你需要 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.36687em;vertical-align:0em;\"></span><span>∼</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>2</span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> 次的数组访问；</p>\n<p>而且如果你需要插入 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> 个元素到一个空表里，你需要 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.36687em;vertical-align:0em;\"></span><span>∼</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span><span style=\"margin-right:0.10903em;\">N</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span></span></span></span> 次的数组访问。</p>\n<h3 id=\"_3-3-结论\"> 3.3 结论</h3>\n<p>在有序符号表中使用二分查找，可以将时间复杂度减少到 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.01968em;\">l</span><span>o</span><span style=\"margin-right:0.03588em;\">g</span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> 级别。</p>\n<p>对于一个静态的符号表（即不允许插入和删除元素的表），在查找之前将其进行排序是值得的；</p>\n<p>但是这种形式的查找还是不能满足我们对于<strong>快速的查找的同时支持快速的插入和删除操作</strong>。</p>\n",
      "date_published": "2017-02-12T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "《Algorithm 第四版》笔记"
      ]
    },
    {
      "title": "算法分析",
      "url": "https://wafer.li/blog-corners/learning-notes/algorithm-4th-edition/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/",
      "id": "https://wafer.li/blog-corners/learning-notes/algorithm-4th-edition/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/",
      "summary": "<h2 id=\"_1-观察\"> 1. 观察</h2>\n<ul>\n<li>运行程序，然后使用时间计算器来计算时间的使用。</li>\n<li>使用大数据来猜测和验证数学模型</li>\n</ul>\n",
      "content_html": "<h2 id=\"_1-观察\"> 1. 观察</h2>\n<ul>\n<li>运行程序，然后使用时间计算器来计算时间的使用。</li>\n<li>使用大数据来猜测和验证数学模型</li>\n</ul>\n\n<h2 id=\"_2-时间模型\"> 2. 时间模型</h2>\n<p>时间使用的多少一般和以下因素有关：</p>\n<ul>\n<li>每个操作的所需时间</li>\n<li>每个操作使用的频率</li>\n</ul>\n<h3 id=\"_2-1-估计\"> 2.1 估计</h3>\n<p>我们使用 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.36687em;vertical-align:0em;\"></span><span>∼</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span style=\"margin-right:0.10903em;\">N</span><span>)</span></span></span></span> 来代表，当 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> 增长时，所用时间的结果和 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span style=\"margin-right:0.10903em;\">N</span><span>)</span></span></span></span> 的比值为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1</span></span></span></span>，使用 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.03588em;\">g</span><span>(</span><span style=\"margin-right:0.10903em;\">N</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∼</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span style=\"margin-right:0.10903em;\">N</span><span>)</span></span></span></span> 来代表当 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> 增长时，结果和 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.03588em;\">g</span><span>(</span><span style=\"margin-right:0.10903em;\">N</span><span>)</span><span>/</span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span style=\"margin-right:0.10903em;\">N</span><span>)</span></span></span></span> 的比值为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1</span></span></span></span></p>\n<h3 id=\"_2-2-内循环\"> 2.2 内循环</h3>\n<ul>\n<li>内循环指的是程序执行时，<strong>最频繁的操作</strong></li>\n<li>程序的时间复杂度一般都取决于内循环</li>\n</ul>\n<h3 id=\"_2-3-成本模型\"> 2.3 成本模型</h3>\n<p>成本模型指的是基本的算法操作\n例如 3-Sum 问题，其成本模型是数组访问的次数</p>\n<h3 id=\"_2-4-确定成本模型的步骤\"> 2.4 确定成本模型的步骤</h3>\n<ol>\n<li>确定输入模型和问题规模</li>\n<li>确定内循环</li>\n<li>根据内循环来确定成本模型</li>\n<li>根据输入模型，来确定操作的频率和次数</li>\n</ol>\n<h3 id=\"_2-5-增长级别的分类\"> 2.5 增长级别的分类</h3>\n<p><img src=\"https://algs4.cs.princeton.edu/14analysis/images/classifications.png\" alt=\"Classification\" /></p>\n<ol>\n<li>\n<p>常数级别</p>\n<blockquote>\n<p>大多数的 Java <strong>基本操作</strong> 都是常数级别的。</p>\n</blockquote>\n</li>\n<li>\n<p>对数级别</p>\n<blockquote>\n<p>比常数级别稍慢，例如 <strong>二分查找</strong></p>\n</blockquote>\n</li>\n<li>\n<p>线性级别</p>\n<blockquote>\n<p>单独的 <code>for</code> 循环</p>\n</blockquote>\n</li>\n<li>\n<p>线性对数级别</p>\n<blockquote>\n<p>例如归并排序和快速排序</p>\n</blockquote>\n</li>\n<li>\n<p>平方级别</p>\n<blockquote>\n<p>两个嵌套的 <code>for</code> 循环，例如选择排序，插入排序，冒泡排序都是平方级别的</p>\n</blockquote>\n</li>\n<li>\n<p>立方级别</p>\n<blockquote>\n<p>三个嵌套的 <code>for</code> 循环是立方级别的，例如 3-sum 的暴力解法</p>\n</blockquote>\n</li>\n<li>\n<p>指数级别</p>\n<blockquote>\n<p>非常慢，尽量避免去使用这种级别的算法</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"_2-6-设计更快的算法\"> 2.6 设计更快的算法</h3>\n<p>使用分治策略</p>\n<p>例如 3-sum 问题，我们可以先尝试解决较为简单的 2-sum 问题</p>\n<blockquote>\n<p>3-sum 问题：即给出一个数和给定的数据集合，在数据集合中寻</p>\n</blockquote>\n<ul>\n<li>\n<p>2-sum 问题</p>\n<p>2-sum 问题即为找到所有的数对，它们的和为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0</span></span></span></span>，我们注意到，当 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span>A</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0</span></span></span></span> 成立时，说明，两个数<strong>互为相反数</strong>，即 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span>−</span><span style=\"margin-right:0.05017em;\">B</span></span></span></span>\n所以我们可以采取 <strong>二分查找</strong> 的方法来查找数据的相反数，从而查找到数对。</p>\n<p>这样，我们就将时间复杂度由 <strong>平方级别</strong>(<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.02778em;\">O</span><span>(</span><span><span style=\"margin-right:0.10903em;\">N</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span><span>)</span></span></span></span>) 减少到了 <strong>线性对数级别</strong>(<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.02778em;\">O</span><span>(</span><span style=\"margin-right:0.01968em;\">Nl</span><span>o</span><span style=\"margin-right:0.03588em;\">g</span><span style=\"margin-right:0.10903em;\">N</span><span>)</span></span></span></span>)</p>\n<blockquote>\n<p>注意，如果二分查找返回的 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.05724em;\">j</span></span></span></span> 在 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0</span></span></span></span> 和 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.65952em;vertical-align:0em;\"></span><span>i</span></span></span></span> 之间，那么说明我们查找到了重复数据，（由于我们是对整个数组进行遍历，所以数据就会出现重复）应该不增加计数。</p>\n</blockquote>\n</li>\n<li>\n<p>3-sum 问题</p>\n<p>和 2-sum 问题一样，当 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>−</span><span>(</span><span>a</span><span>[</span><span>i</span><span>]</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>a</span><span>[</span><span style=\"margin-right:0.05724em;\">j</span><span>])</span></span></span></span> 在数组中（不是 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>a</span><span>[</span><span>i</span><span>]</span></span></span></span> 也不是 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>a</span><span>[</span><span style=\"margin-right:0.05724em;\">j</span><span>]</span></span></span></span> ）时，整数对 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>(</span><span>a</span><span>[</span><span>i</span><span>]</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>a</span><span>[</span><span style=\"margin-right:0.05724em;\">j</span><span>])</span></span></span></span> 是三元组的一部分。</p>\n<p>由此，通过分治策略和使用 <strong>二分查找</strong>，我们将 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span><span style=\"margin-right:0.10903em;\">N</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>3</span></span></span></span></span></span></span></span></span></span></span> 级别的问题降低到了 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span><span style=\"margin-right:0.10903em;\">N</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span><span style=\"margin-right:0.01968em;\">l</span><span>o</span><span style=\"margin-right:0.03588em;\">g</span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> 级别。</p>\n</li>\n</ul>\n<h3 id=\"_2-7-根据增长数量级做出的预测\"> 2.7 根据增长数量级做出的预测</h3>\n<p>| Describe   | Function | Modulus is 2  | Modulus is 10 | Handle the 10N | Handle 10N in 10 times faster|\n|--------|------|------|-------|-----|--mathjax: true\n---|\n| Linear| <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">N</span></span></span></span>|2|10| a day| couples of hours|\n| Linearrithmic|<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.01968em;\">Nl</span><span>o</span><span style=\"margin-right:0.03588em;\">g</span><span style=\"margin-right:0.10903em;\">N</span></span></span></span>|2|10|a day | couples of hours|\n| Quadratic| <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span><span style=\"margin-right:0.10903em;\">N</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span></span></span></span>| 4| 100| a few weeks| a day|\n| Cubic| <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span><span style=\"margin-right:0.10903em;\">N</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>3</span></span></span></span></span></span></span></span></span></span></span> | 8 | 1000 | a few months | couples of weeks|\n| Exponential| <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span><span>2</span><span><span><span><span style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.10903em;\">N</span></span></span></span></span></span></span></span></span></span></span> | <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span><span>2</span><span><span><span><span style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.10903em;\">N</span></span></span></span></span></span></span></span></span></span></span> | <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span><span>2</span><span><span><span><span style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>10</span><span style=\"margin-right:0.10903em;\">N</span></span></span></span></span></span></span></span></span></span></span></span> | forever | forever</p>\n<h3 id=\"_2-8-注意事项\"> 2.8 注意事项</h3>\n<ol>\n<li>\n<p>大常数</p>\n<blockquote>\n<p>一般来说，我们认为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span>2</span><span><span style=\"margin-right:0.10903em;\">N</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>c</span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> 是 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.36687em;vertical-align:0em;\"></span><span>∼</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span>2</span><span><span style=\"margin-right:0.10903em;\">N</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span></span></span></span> 的，但是当 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span>c</span></span></span></span> 为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span>1</span><span><span>0</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>3</span></span></span></span></span></span></span></span></span></span></span>，或者 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span>1</span><span><span>0</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>6</span></span></span></span></span></span></span></span></span></span></span> 的时候，这种估计是不正确的。</p>\n</blockquote>\n</li>\n<li>\n<p>非决定性的内循环</p>\n<blockquote>\n<p>由于错误的内循环，导致了错误的成本模型，从而导致了错误的分析结果</p>\n</blockquote>\n</li>\n<li>\n<p>指令时间</p>\n<blockquote>\n<p>对于当今的现代计算机，由于缓存技术的使用，使得访问大数组的非相邻元素所需的时间可能会很长</p>\n</blockquote>\n</li>\n<li>\n<p>系统因素</p>\n<blockquote>\n<p>当你在运行算法分析程序的时候，可能你的电脑并不只是在运行这一程序，同时还运行着其他程序，这样的话就有可能导致算法分析的结果的不正确。</p>\n</blockquote>\n</li>\n<li>\n<p>不分伯仲</p>\n<blockquote>\n<p>比较执行相同任务的程序时，通常会出现一个情形下这个算法比较好，另一个情形下另一个算法比较好的情况。</p>\n</blockquote>\n</li>\n<li>\n<p>对于输入的强烈依赖</p>\n<blockquote>\n<p>在 3-sum 问题中，如果我们将问题改成 <em>是否存在和为0的三个数？</em> 如果第一组的三个数都是 0，那么时间复杂度为<strong>常数级别</strong>，如果输入中不存在这样的数，则时间复杂度为 <strong>立方级别</strong></p>\n</blockquote>\n<blockquote>\n<p>在这种情况下，我们通常使用 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span style=\"margin-right:0.13889em;\">T</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.02691em;\">w</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> （最坏情况的时间复杂度） 和 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span style=\"margin-right:0.13889em;\">T</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>a</span><span style=\"margin-right:0.03588em;\">v</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> （平均时间复杂度） 来表示这种情况</p>\n</blockquote>\n</li>\n<li>\n<p>多个问题参量</p>\n<blockquote>\n<p>成本模型并不总是单因素函数，也有可能是多因素函数。例如使用二分查找来进行白名单问题分析时，时间复杂度和 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.01968em;\">Ml</span><span>o</span><span style=\"margin-right:0.03588em;\">g</span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> 成正比</p>\n<blockquote>\n<p>其中白名单有 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> 个整数，输入中有 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">M</span></span></span></span> 个整数</p>\n</blockquote>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"_3-内存模型\"> 3. 内存模型</h2>\n<p>在 Java 中，内存的使用一般会被填充为 <strong>8的倍数</strong></p>\n<h3 id=\"_3-1-对象\"> 3.1 对象</h3>\n<ul>\n<li>Integer\n<ul>\n<li>一共需要 24 byte</li>\n<li>16 bytes 为对象本身的开销</li>\n<li>4 bytes 的 <code>int</code> 值</li>\n<li>对象的引用，一般为 内存地址，使用 8 byte</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"_3-2-链表\"> 3.2 链表</h3>\n<ul>\n<li>Node(inner class)\n<ul>\n<li>一共 40 byte</li>\n<li>16 bytes 为对象的开销</li>\n<li>2 * 8 bytes 的引用（<code>Node</code> 中有两个引用）</li>\n<li>当作为内部类时，需要一个额外的指向外围类的引用</li>\n<li>数据的开销</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"_3-3-数组\"> 3.3 数组</h3>\n<blockquote>\n<p>在 Java 中，数组被实现为了对象</p>\n</blockquote>\n<ul>\n<li>数组\n<ul>\n<li>24 bytes 的头信息\n<ul>\n<li>16 bytes 对象开销</li>\n<li>4 bytes 填补开销</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"_3-4-string\"> 3.4 String</h3>\n<ul>\n<li>40 bytes</li>\n<li>Object cost, 16 bytes</li>\n<li>reference, 8 bytes</li>\n<li>3 int, 12 bytes\n<ul>\n<li>offset</li>\n<li>counter</li>\n<li>hash</li>\n</ul>\n</li>\n</ul>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>Δ</span></span></span></span> The subString</p>\n<blockquote>\n<p>当你调用 <code>substring()</code> 方法时， 它重新创建了 <code>String</code> 对象， 但是并没有创建 <code>value[]</code> 数组, 这个数组被存在<strong>常量区</strong></p>\n</blockquote>\n<blockquote>\n<p>所以，<code>subString()</code> 所需的内存是一个常量</p>\n</blockquote>\n<h2 id=\"_4-展望\"> 4. 展望</h2>\n<ul>\n<li>\n<p>不成熟的优化是万恶之源</p>\n<blockquote>\n<p>Premature optimization is the root of all evil</p>\n</blockquote>\n</li>\n<li>\n<p>如果运行时间已经足够快了，那么对运行时间的改进就不值得了</p>\n<blockquote>\n<p>不值得花费 2 倍的开发时间来提高 10 % 的性能</p>\n</blockquote>\n</li>\n<li>\n<p>但是我们当我们处理大型问题的时候，我们的确需要好的算法，好的算法在大规模问题中能带来巨大的收益</p>\n</li>\n</ul>\n",
      "image": "https://algs4.cs.princeton.edu/14analysis/images/classifications.png",
      "date_published": "2017-02-04T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "《Algorithm 第四版》笔记"
      ]
    },
    {
      "title": "背包，队列和栈",
      "url": "https://wafer.li/blog-corners/learning-notes/algorithm-4th-edition/%E8%83%8C%E5%8C%85%EF%BC%8C%E9%98%9F%E5%88%97%E5%92%8C%E6%A0%88/",
      "id": "https://wafer.li/blog-corners/learning-notes/algorithm-4th-edition/%E8%83%8C%E5%8C%85%EF%BC%8C%E9%98%9F%E5%88%97%E5%92%8C%E6%A0%88/",
      "summary": "<p>它们都是一些数据对象的集合</p>\n<h2 id=\"_1-特点\"> 1. 特点</h2>\n<h3 id=\"_1-1-背包\"> 1.1 背包</h3>\n<ul>\n<li><strong>不支持</strong> 删除元素</li>\n<li>使用其来收集元素，遍历和递归它们</li>\n<li>元素的顺序是不确定的</li>\n</ul>\n",
      "content_html": "<p>它们都是一些数据对象的集合</p>\n<h2 id=\"_1-特点\"> 1. 特点</h2>\n<h3 id=\"_1-1-背包\"> 1.1 背包</h3>\n<ul>\n<li><strong>不支持</strong> 删除元素</li>\n<li>使用其来收集元素，遍历和递归它们</li>\n<li>元素的顺序是不确定的</li>\n</ul>\n\n<h3 id=\"_1-2-队列-先进先出\"> 1.2 队列(先进先出)</h3>\n<p>这里所说的队列指的是先进先出的队列。</p>\n<ul>\n<li>数据元素相对此集合的顺序是<strong>先进先出</strong></li>\n<li>队列能收集数据，同时保持它们的相对顺序</li>\n</ul>\n<h3 id=\"_1-3-栈\"> 1.3 栈</h3>\n<ul>\n<li>正好与队列相反，数据元素在栈中是后进先出的。</li>\n<li>栈也会保持数据元素的相对顺序</li>\n</ul>\n<h3 id=\"_1-4-例子-算数表达式的表示法\"> 1.4 例子：算数表达式的表示法</h3>\n<p>使用两个栈来表达算数表达式</p>\n<p>当接收到一个算数表达式的时候：</p>\n<ol>\n<li>将数值压入<strong>数值栈</strong></li>\n<li>将操作符压入<strong>操作符栈</strong></li>\n<li>忽略<strong>左括号</strong></li>\n<li>当遇到<strong>右括号</strong>的时候，弹出<strong>一个操作符</strong>，和<strong>所需要的数值</strong>，并且将计算结果压入数值栈</li>\n</ol>\n<h2 id=\"_2-实现\"> 2. 实现</h2>\n<h3 id=\"_2-1-使用数组实现栈\"> 2.1 使用数组实现栈</h3>\n<ul>\n<li><code>push()</code> 方法需要检查当前栈是否是满的，如果满，则进行扩容</li>\n<li><code>resize()</code> 方法会将当前数组的空间加倍（或减半）</li>\n<li><code>pop()</code> 方法需要检查当前栈的大小是否<strong>小于数组的 1/4</strong>，如果成立，则将数组的空间减少为它的一半。</li>\n<li>需要防止<strong>对象游离</strong>，当数据对象被弹出后，将其声明为 <code>null</code></li>\n<li>缺点\n<ul>\n<li>时间复杂度与<strong>数组的大小</strong>相关</li>\n<li>所需要的空间是不可预知的</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>如果当前栈的大小小于数组的 1/4，那么即使 <code>pop()</code> 方法使其减少了，它仍然比当前栈的大小还要<strong>大一倍</strong>，所以我们依旧有空间储存数据，为了防止空间的浪费，将数组的空间减少。</p>\n<p>当一个数据对象被弹出栈后，它就<strong>再也不会被栈使用了</strong>，但是数据的引用依旧存在，所以 Java 不会将这块内存回收。这种情况就被叫做<strong>对象游离</strong></p>\n</blockquote>\n<h3 id=\"_2-2-链表\"> 2.2 链表</h3>\n<p>链表是一个递归的数据结果，它可以是空，或者是一个指向一个节点的引用；\n这个节点储存一个数据元素和一个指向<strong>下一个节点或列表</strong>的引用；\n<code>Node</code>（节点）类经常被用于内部类。</p>\n<h4 id=\"_2-2-1-创建\"> 2.2.1 创建</h4>\n<div><pre><code><span>private</span> <span>class</span> <span>Node</span>\n<span>{</span>\n    <span>Item</span> item<span>;</span>\n    <span>Node</span> next<span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><blockquote>\n<ul>\n<li>只要声明一个 <code>Node</code> 变量，我们就能表示一个链表\n因为 <code>Node</code> 被用作内部类，所以我们能直接地声明其成员。</li>\n</ul>\n</blockquote>\n<div><pre><code><span>Node</span> first <span>=</span> <span>new</span> <span>Node</span><span>(</span><span>)</span><span>;</span>\n<span>Node</span> second <span>=</span> <span>new</span> <span>Node</span><span>(</span><span>)</span><span>;</span>\n<span>Node</span> thrid <span>=</span> <span>new</span> <span>Node</span><span>(</span><span>)</span><span>;</span>\n\n<span>//Items</span>\nfirst<span>.</span>item <span>=</span> <span>\"to\"</span><span>;</span>\nsecond<span>.</span>item <span>=</span> <span>\"be\"</span><span>;</span>\nthrid<span>.</span>item <span>=</span> <span>\"or\"</span><span>;</span>\n\n<span>//Nexts</span>\nfirst<span>.</span>next <span>=</span> second<span>;</span>\nsecond<span>.</span>next <span>=</span> thrid<span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p><img src=\"https://algs4.cs.princeton.edu/13stacks/images/linked-list.png\" alt=\"Build linked List\" /></p>\n<h4 id=\"_2-2-2-在头部插入\"> 2.2.2 在头部插入</h4>\n<p>使用另一个引用（例如 <code>oldfirst</code>） 来储存头结点，然后建立新节点来储存数据，然后将 <code>next</code> 指向头结点</p>\n<p><img src=\"https://algs4.cs.princeton.edu/13stacks/images/linked-list-insert-front.png\" alt=\"Insert at beginning\" /></p>\n<h4 id=\"_2-2-3-从头部删除\"> 2.2.3 从头部删除</h4>\n<p>将头指针<code>first</code>直接指向 <code>first.next</code> 即可\nJava 的 garbage collector 会将内存回收。</p>\n<p><img src=\"https://algs4.cs.princeton.edu/13stacks/images/linked-list-remove-first.png\" alt=\"Remove from the beginning\" /></p>\n<h4 id=\"_2-2-4-在尾部插入\"> 2.2.4 在尾部插入</h4>\n<p>就像在头部插入一样，用一个另外的引用 <code>oldlast</code> 来保存尾部节点，然后建立一个新的节点来储存数据，然后将 <code>oldlast.next</code> 声明为 <code>last</code></p>\n<blockquote>\n<p>注意，对于单链表，尾部节点的引用可能要通过从头结点的层层遍历才能取到，这也是为什么一般仅使用头节点来作为主要的操作节点。</p>\n</blockquote>\n<p><img src=\"https://algs4.cs.princeton.edu/13stacks/images/linked-list-insert-end.png\" alt=\"Insert at the end\" /></p>\n<h4 id=\"_2-2-5-在其他地方插入和删除\"> 2.2.5 在其他地方插入和删除</h4>\n<p>进行这个操作，我们必须要拿到所需要插入位置的前一个节点的信息来辅助我们的插入删除操作，因此我们需要<strong>遍历</strong> 链表来取得指定插入位置的前一个位置。</p>\n<h4 id=\"_2-2-6-遍历\"> 2.2.6 遍历</h4>\n<p>一般来说，我们使用 <code>foreach</code> 语句来进行遍历操作。</p>\n<p>使用这个语句的类必须要实现 <code>Iterable</code> 和 <code>Iterator</code> 接口来返回一个迭代器和定义迭代方法。</p>\n<p>但是对于链表这种简单结构来说，我们只需要使用一般的 <code>for</code> 语句即可。</p>\n<div><pre><code><span>for</span><span>(</span><span>Node</span> x <span>=</span> first<span>;</span> x <span>!=</span> <span>null</span><span>;</span> x <span>=</span> x<span>.</span>next<span>)</span> <span>{</span>\n    <span>//handle x.item</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id=\"_3-链表的使用\"> 3. 链表的使用</h2>\n<p>使用链表可以：</p>\n<ul>\n<li>处理任何数据</li>\n<li>需求的空间仅仅和集合的大小成正比</li>\n<li>时间复杂度和集合的大小<strong>无关</strong></li>\n</ul>\n<blockquote>\n<p>链表的插入和删除操作仅仅是变量的<strong>赋值</strong>，以及<strong>对象的构建</strong>，它们的时间复杂度都是<strong>常数级别</strong> 的</p>\n</blockquote>\n<h3 id=\"_3-1-实现栈\"> 3.1 实现栈</h3>\n<p>将链表的头部设定为栈顶</p>\n<ul>\n<li>当压入数据的时候，我们<strong>在头部</strong>插入数据元素</li>\n<li>当弹出数据的时候，我们<strong>在头部</strong>删除数据元素</li>\n</ul>\n<blockquote>\n<p>选择链表头部而不是尾部进行操作的原因：链表的插入和删除操作都是在一端进行的；</p>\n<p>链表的尾部元素一般不好获取，特别是对于单链表而言，如果采用尾部作为栈顶，那么当删除栈顶元素之后，我们无法很快的获取新的栈顶元素的引用（<strong>因为要从头部进行遍历，或者维护两个指针，这都是不必要的</strong>）；</p>\n<p>而采用头部作为栈的顶部，仅仅需要一句声明语句 <code>newTop = top.next;</code> 即可获取到新的栈顶元素。</p>\n</blockquote>\n<h3 id=\"_3-2-实现队列\"> 3.2 实现队列</h3>\n<ul>\n<li>设定链表的头部为队列的头部，链表的尾部为队列的尾部。</li>\n<li>当插入元素时，在尾部插入数据。</li>\n<li>当删除元素时，在头部删除数据。</li>\n</ul>\n<blockquote>\n<p>由于队列插入和删除的位置不同，在尾部删除元素很麻烦，但是相应的插入操作却变得十分简单，仅需要改变其 <code>next</code> 域即可，而不是类似删除操作还要返回前一个数据的引用。</p>\n</blockquote>\n<h3 id=\"_3-3-背包的实现\"> 3.3 背包的实现</h3>\n<p>将栈或队列的 <code>pop()</code> 操作去掉，就是一个背包结构。</p>\n",
      "image": "https://algs4.cs.princeton.edu/13stacks/images/linked-list.png",
      "date_published": "2017-02-04T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "《Algorithm 第四版》笔记"
      ]
    },
    {
      "title": "递归树分析归并排序算法复杂度",
      "url": "https://wafer.li/blog-corners/learning-notes/algorithm-4th-edition/%E9%80%92%E5%BD%92%E6%A0%91%E5%88%86%E6%9E%90%E5%BD%92%E5%B9%B6%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6/",
      "id": "https://wafer.li/blog-corners/learning-notes/algorithm-4th-edition/%E9%80%92%E5%BD%92%E6%A0%91%E5%88%86%E6%9E%90%E5%BD%92%E5%B9%B6%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6/",
      "summary": "<p>之前学算法分析的时候只知道通过数语句来计算算法的复杂度，而对于递归算法没有很好的方法；</p>\n<p>由于递归算法通常采用分治思路，每递归一次，子问题在增多，但是子问题的规模在减少，所以如何去计算这种递归类算法的复杂度呢？\n斯坦福的教授提供了一种使用 <strong>递归树</strong> 的方法。</p>\n",
      "content_html": "<p>之前学算法分析的时候只知道通过数语句来计算算法的复杂度，而对于递归算法没有很好的方法；</p>\n<p>由于递归算法通常采用分治思路，每递归一次，子问题在增多，但是子问题的规模在减少，所以如何去计算这种递归类算法的复杂度呢？\n斯坦福的教授提供了一种使用 <strong>递归树</strong> 的方法。</p>\n\n<h2 id=\"归并的复杂度\"> 归并的复杂度</h2>\n<p>这里我们采用经典的归并排序算法作为一个例子，使用递归树来分析它的复杂度。</p>\n<p>我们知道，归并排序算法主要分为三个步骤：</p>\n<ol>\n<li>递归左半部分</li>\n<li>递归右半部份</li>\n<li>将排好序的左半边和右半边合并</li>\n</ol>\n<p>对于归并(merge)部分，我们可以很清楚地计算出其复杂度：</p>\n<div><pre><code>for k from 0 to N-1:\n    if A[i] &lt; B[j]:\n        C[k] = A[i]\n        i++\n    else if B[j] &lt; A[i]:\n        C[k] = B[j]\n        j++\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>首先在循环部分，循环的每一次执行了 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>4</span></span></span></span> 次操作，所以一共需要 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>4</span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> 次操作；</p>\n<p>然后初始化 <code>i</code> 和 <code>j</code> 需要两次操作；</p>\n<p>所以，归并部分一共执行 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span>4</span><span style=\"margin-right:0.10903em;\">N</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>2</span></span></span></span> 次操作，由于 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span style=\"margin-right:0.10903em;\">N</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≥</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1</span></span></span></span>，所以：</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span>4</span><span style=\"margin-right:0.10903em;\">N</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span>2</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≤</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>6</span><span style=\"margin-right:0.10903em;\">N</span></span></span></span></span></p>\n<p>粗糙一点，我们可以使用 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>6</span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> 作为归并部分的复杂度。</p>\n<h2 id=\"递归树和归并排序的复杂度\"> 递归树和归并排序的复杂度</h2>\n<p>对于我们的递归程序，我们采用递归树来分析它的复杂度：</p>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tNc79gy1fomd2buxgyj30h208vglh.jpg\" alt=\"\" /></p>\n<p>其中，横条表示的是 <strong>输入数据的长度</strong>，根节点的输入规模为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">N</span></span></span></span>；</p>\n<p>每进行一次递归，树就向下深入一层；</p>\n<p>那么，根据二叉树结论，树的总层数为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span>lo<span style=\"margin-right:0.01389em;\">g</span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span style=\"margin-right:0.10903em;\">N</span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1</span></span></span></span>；</p>\n<p>对于第 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.05724em;\">j</span></span></span></span> 层，拥有 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.824664em;vertical-align:0em;\"></span><span><span>2</span><span><span><span><span style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.05724em;\">j</span></span></span></span></span></span></span></span></span></span></span> 个节点，同时每个节点的输入规模为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.0746639999999998em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.10903em;\">N</span><span>/</span><span><span><span>2</span><span><span><span><span style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.05724em;\">j</span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>所以，对于第 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.05724em;\">j</span></span></span></span> 层，其执行的操作数为：</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.957994em;vertical-align:-0.08333em;\"></span><span><span>2</span><span><span><span><span style=\"height:0.874664em;\"><span style=\"top:-3.1130000000000004em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.05724em;\">j</span></span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1.124664em;vertical-align:-0.25em;\"></span><span>6</span><span>(</span><span style=\"margin-right:0.10903em;\">N</span><span>/</span><span><span>2</span><span><span><span><span style=\"height:0.874664em;\"><span style=\"top:-3.1130000000000004em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.05724em;\">j</span></span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>6</span><span style=\"margin-right:0.10903em;\">N</span></span></span></span></span></p>\n<p>而二叉树一共有 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span>lo<span style=\"margin-right:0.01389em;\">g</span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span style=\"margin-right:0.10903em;\">N</span></span></span></span></span> 层，所以，归并排序的总复杂度是：</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>(</span><span>lo<span style=\"margin-right:0.01389em;\">g</span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span style=\"margin-right:0.10903em;\">N</span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>1</span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>6</span><span style=\"margin-right:0.10903em;\">N</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span>6</span><span style=\"margin-right:0.10903em;\">N</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>lo<span style=\"margin-right:0.01389em;\">g</span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span style=\"margin-right:0.10903em;\">N</span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>6</span><span style=\"margin-right:0.10903em;\">N</span></span></span></span></span></p>\n<p>所以，我们就得到了归并排序的总复杂度 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.02778em;\">O</span><span>(</span><span style=\"margin-right:0.10903em;\">N</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>lo<span style=\"margin-right:0.01389em;\">g</span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span style=\"margin-right:0.10903em;\">N</span></span><span>)</span></span></span></span></p>\n<h2 id=\"总结\"> 总结</h2>\n<p>这里来总结一下使用递归树进行算法分析的步骤：</p>\n<ol>\n<li>计算递归的每一步中的复杂度</li>\n<li>按照递归的分裂程度，画出不同的递归树</li>\n<li>分析 <strong>每一层</strong> 的时间复杂度，重点关注<strong>节点数量</strong>和<strong>该层每节点的输入规模</strong></li>\n<li>每一层的复杂度乘以层数，就是递归算法的总复杂度</li>\n</ol>\n",
      "image": "https://ws3.sinaimg.cn/large/006tNc79gy1fomd2buxgyj30h208vglh.jpg",
      "date_published": "2021-07-15T11:52:03.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "《Algorithm 第四版》笔记"
      ]
    },
    {
      "title": "Head First 设计模式",
      "url": "https://wafer.li/blog-corners/learning-notes/head-first-design-pattern/",
      "id": "https://wafer.li/blog-corners/learning-notes/head-first-design-pattern/",
      "summary": "<p>本目录内容基于 <em>Head First 设计模式</em>。</p>\n<p>代码实例点<a href=\"https://github.com/wafer-li/DesignPatternExample\" target=\"_blank\" rel=\"noopener noreferrer\">这里</a></p>\n<h2 id=\"为什么要学习设计模式\"> 为什么要学习设计模式</h2>\n<ol>\n<li>设计模式是程序员的共通语言，减少沟通成本</li>\n<li>设计模式会让你保持高层级的观感</li>\n<li>设计模式可以让开发团队和开发人员快速成长</li>\n</ol>\n",
      "content_html": "<p>本目录内容基于 <em>Head First 设计模式</em>。</p>\n<p>代码实例点<a href=\"https://github.com/wafer-li/DesignPatternExample\" target=\"_blank\" rel=\"noopener noreferrer\">这里</a></p>\n<h2 id=\"为什么要学习设计模式\"> 为什么要学习设计模式</h2>\n<ol>\n<li>设计模式是程序员的共通语言，减少沟通成本</li>\n<li>设计模式会让你保持高层级的观感</li>\n<li>设计模式可以让开发团队和开发人员快速成长</li>\n</ol>\n\n<h2 id=\"有没有现成的设计模式轮子\"> 有没有现成的设计模式轮子</h2>\n<p>没有，学习设计模式以组织类来解决对应的问题是程序员责无旁贷的事情。</p>\n<p>虽然库和框架可能使用了某种设计模式，但是不代表它就是一个设计模式的库</p>\n<h2 id=\"如果找不到对应的设计模式怎么办\"> 如果找不到对应的设计模式怎么办</h2>\n<p>记住设计原则，从设计原则出发来解决问题。</p>\n",
      "date_published": "2016-11-13T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "《Head First 设计模式》笔记"
      ]
    },
    {
      "title": "再谈单例模式",
      "url": "https://wafer.li/blog-corners/learning-notes/head-first-design-pattern/%E5%86%8D%E8%B0%88%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/",
      "id": "https://wafer.li/blog-corners/learning-notes/head-first-design-pattern/%E5%86%8D%E8%B0%88%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/",
      "summary": "<p>之前提到枚举实现是单例的最佳实现，这毋庸置疑；</p>\n<p>不过，对比枚举和静态内部类，好像它们的区别就在于防止了反射攻击；</p>\n<p>那么，都『攻击』了，为啥偏偏没事去改你的单例呢？直接获取更有意思的信息不是更好吗？</p>\n",
      "content_html": "<p>之前提到枚举实现是单例的最佳实现，这毋庸置疑；</p>\n<p>不过，对比枚举和静态内部类，好像它们的区别就在于防止了反射攻击；</p>\n<p>那么，都『攻击』了，为啥偏偏没事去改你的单例呢？直接获取更有意思的信息不是更好吗？</p>\n\n<h2 id=\"_1-『反射攻击』不是攻击\"> 1. 『反射攻击』不是攻击</h2>\n<p>这里所提到的『反射攻击』的概念，实际上并不是信息安全领域的 『攻击』 的概念；</p>\n<p>而是， <strong>通过反射的合理利用，可以令单例失效</strong>；</p>\n<p>那么在日常开发中，最常遇到的反射攻击就是 <strong>对象的序列化</strong>。</p>\n<p>当单例需要实现序列化的时候，反序列化过程实际上就是使用 <strong>反射</strong> 来生成了新的实例。</p>\n<p>那么在序列化和反序列化的过程中，单例模式就被破坏掉了。</p>\n<p>这时，有人提出可以利用 <code>readResolve()</code> 方法来防止这种事情的发生；</p>\n<p>而实际上， <strong>单纯利用</strong> <code>readResolve()</code> 也并不能防止单例被破坏；</p>\n<p>《Effective Java 第二版》在 77 条提出：</p>\n<blockquote>\n<p><strong>如果依赖 <code>readResolve()</code> 方法来进行实例控制，带有对象引用类型的所有实例域都必须声明为 <code>transient</code> 的。</strong></p>\n<p>否则，那种破釜沉舟式的攻击者，就有可能在 <code>readResolve()</code> 方法运行之前，保护指向反序列化对象的引用。</p>\n</blockquote>\n<p>此时，枚举类型就派上用场了，枚举为了防止这种事情的发生，单独实现了一套序列化和反序列化的机制；</p>\n<p>大体就是利用 <code>valueOf()</code> 来进行反序列化，而不是使用普通的序列化机制；</p>\n<p>同时，也禁止声明 <code>readResolve()</code> 和 <code>readObject()</code> 这类方法。</p>\n<h2 id=\"_2-kotlin-单例是懒加载的\"> 2. Kotlin 单例是懒加载的</h2>\n<p>下面是 Kotlin 单例的反编译 Java 代码</p>\n<div><pre><code><span>public</span> <span>final</span> <span>class</span> <span>Test</span> <span>{</span>\n   <span>public</span> <span>static</span> <span>final</span> <span>Test</span> INSTANCE<span>;</span>\n\n   <span>private</span> <span>Test</span><span>(</span><span>)</span> <span>{</span>\n      INSTANCE <span>=</span> <span>(</span><span>Test</span><span>)</span><span>this</span><span>;</span>\n   <span>}</span>\n\n   <span>static</span> <span>{</span>\n      <span>new</span> <span>Test</span><span>(</span><span>)</span><span>;</span>\n   <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>虽然它和所谓的饿汉式 Java 单例很类似，但是在实际使用中，它是 <strong>懒加载</strong> 的。</p>\n<p>为什么呢？</p>\n<p>原因就在于 JVM 类的加载时机；</p>\n<p>JVM Specification 中在 <a href=\"https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-5.html#jvms-5.4.2\" target=\"_blank\" rel=\"noopener noreferrer\">准备阶段</a> 中提出：</p>\n<blockquote>\n<p>explicit initializers for static fields are executed as part of initialization (§5.5), not preparation.</p>\n</blockquote>\n<p>所以，上面的 <code>INSTANCE</code> 的实例化，即 <code>static</code> 块是在类加载的 <strong>初始化阶段</strong> 进行的；</p>\n<p>而对于初始化阶段，JVM Specification 强制规定了有且仅有 <a href=\"https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-5.html#jvms-5.5\" target=\"_blank\" rel=\"noopener noreferrer\">5 种情况</a> 可以触发初始化阶段；</p>\n<p>而这 5 种情况，都是你真正使用到类的实例的时候才会出现的；</p>\n<p>根据这 5 种情况，再结合 Kotlin <code>object</code> 的单例语法和使用，可以得出有且仅有 2 种情况会导致 <code>object</code> 单例提前进行初始化：</p>\n<ol>\n<li>反射</li>\n<li>调用类中其他的静态变量</li>\n</ol>\n<p>对于反射，一个很典型的应用场景就是使用 classpath scanner 进行注解扫描；</p>\n<p>不过，JB 的工程师提出，classpath scanner 并不需要反射来实现注解扫描<sup></sup>；</p>\n<p>于是我随便找了一个 classpath scanner: <a href=\"https://github.com/lukehutch/fast-classpath-scanner\" target=\"_blank\" rel=\"noopener noreferrer\">fast-classpath-scanner</a>；</p>\n<p>经过使用之后，发现即使打印出了单例的信息，但是 JVM 只加载了 <code>main</code> 方法的类，而并没有加载单例。</p>\n<p>相关的结果在 <a href=\"https://gist.github.com/wafer-li/1931170fd79c0ec1567f5737454f61ab\" target=\"_blank\" rel=\"noopener noreferrer\">这个 gist</a> 中。</p>\n<blockquote>\n<p>单例的名字叫 <code>Test</code>，而 <code>main()</code> 方法类的名字叫 <code>SingletonTest</code></p>\n</blockquote>\n<p>对于第二种情况，在 Kotlin 中是不存在的。为什么呢？</p>\n<p>因为对于 Kotlin <code>object</code> 中，声明值的方法只有 <code>var</code> <code>val</code> 和 <code>const val</code> 三种；</p>\n<p>对于前两种，虽然反编译出来的代码指明这样的确定义了两个静态的值；</p>\n<p><code>var</code> 的情况：</p>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tNbRwgy1ffzakmwghkj30rc0uotax.jpg\" alt=\"\" /></p>\n<p><code>val</code> 的情况：</p>\n<p><img src=\"https://ws4.sinaimg.cn/large/006tNbRwgy1ffzalhmszqj30rs0ty40u.jpg\" alt=\"\" /></p>\n<p>但是，当你使用的时候，却是通过 <code>INSTANCE</code> 来引用的。</p>\n<p>这样无论如何都会导致单例的实例化。</p>\n<p>而使用 <code>const val</code> 的确得到了一个 <code>public static</code> 的值；</p>\n<p>但是，当你使用的时候，编译器会自动替换为 <strong>字面量</strong>，不会导致单例加载；</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/006tNbRwgy1ffzamh0h4pj30tc0q276e.jpg\" alt=\"\" /></p>\n<p>所以，综上所述，Kotlin 中 <code>object</code> 单例是懒加载的。</p>\n<hr>\n<section>\n<ol>\n<li id=\"footnote1\"><p>https://discuss.kotlinlang.org/t/kotlin-singleton-implementation/2853/6?u=omysho </p>\n</li>\n</ol>\n</section>\n",
      "image": "https://ws3.sinaimg.cn/large/006tNbRwgy1ffzakmwghkj30rc0uotax.jpg",
      "date_published": "2021-07-15T11:52:03.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "《Head First 设计模式》笔记"
      ]
    },
    {
      "title": "单例模式",
      "url": "https://wafer.li/blog-corners/learning-notes/head-first-design-pattern/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/",
      "id": "https://wafer.li/blog-corners/learning-notes/head-first-design-pattern/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/",
      "summary": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>单例模式，顾名思义，它可以保证在系统运行中，整个系统只存在某个类的 <strong>一个对象</strong>；</p>\n<p>该对象在系统中是 <strong>唯一的</strong></p>\n",
      "content_html": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>单例模式，顾名思义，它可以保证在系统运行中，整个系统只存在某个类的 <strong>一个对象</strong>；</p>\n<p>该对象在系统中是 <strong>唯一的</strong></p>\n\n<h2 id=\"_2-经典实现\"> 2. 经典实现</h2>\n<p>需要注意的是，虽然这个实现很经典，但是它是错误的，在实际中不应该使用；</p>\n<p>但是，由于它较为简单，所以拿这种实现来说明单例的原理。</p>\n<div><pre><code><span>public</span> <span>class</span> <span>Singleton</span> <span>{</span>\n    <span>// 存储自身的引用</span>\n    <span>private</span> <span>static</span> <span>Singleton</span> instance <span>=</span> <span>null</span><span>;</span>\n\n    <span>private</span> <span>Singleton</span><span>(</span><span>)</span> <span>{</span>\n        <span>// 不允许外界通过构造器构建</span>\n    <span>}</span>\n\n    <span>private</span> <span>static</span> <span>Singleton</span> <span>getInstance</span><span>(</span><span>)</span> <span>{</span>\n        <span>if</span> <span>(</span>instance <span>==</span> <span>null</span><span>)</span> <span>{</span>\n            instance <span>=</span> <span>new</span> <span>Singleton</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n        <span>return</span> instance<span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>该实现中，最为核心的就是 <code>getInstance()</code> 方法；</p>\n<p>通过 <code>if</code> 的判断，如果实例为空，那么进行构造；</p>\n<p>当实例构造完毕后，<code>instance</code> 就不为空了，直接返回自身。</p>\n<p>这样就保证了在普通情况下，对象只会有一个。</p>\n<p>但是，这种实现在多线程时不成立！</p>\n<p>当有两个线程同时尝试获取单例实例时，就会造成对象的重复构建：</p>\n<p>这是由于两个线程可能同时进入 <code>if</code> 区域中，导致两个线程分别执行对象的构建，最后就会出现两个单例对象。</p>\n<h2 id=\"_3-懒汉式\"> 3. 懒汉式</h2>\n<p>由于经典实现的缺陷是因为多线程导致的；</p>\n<p>那么我们只要把 <code>getInstance()</code> 设置为同步方法不就完了吗？</p>\n<div><pre><code><span>private</span> <span>static</span> <span>synchronized</span> <span>Singleton</span> <span>getInstance</span><span>(</span><span>)</span> <span>{</span>\n    <span>if</span> <span>(</span>instance <span>==</span> <span>null</span><span>)</span> <span>{</span>\n        instance <span>=</span> <span>new</span> <span>Singleton</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>return</span> instance<span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>但是，这种实现方法具有很严重的 <strong>性能缺陷</strong>；</p>\n<p>由于每次获取单例实例都需要先获取锁，导致性能低下；</p>\n<p>而实际上，只需要在单例的构建过程进行同步即可；</p>\n<p>没有必要在每次获取对象的时候都进行同步。</p>\n<h2 id=\"_4-饿汉式\"> 4. 饿汉式</h2>\n<p>既然多线程造成的问题是在 <code>getInstance()</code> 时发生的；</p>\n<p>而使用 <code>synchronized</code> 关键字又存在性能缺陷；</p>\n<p>那么，为什么不在类加载的一开始就进行实例构建呢？</p>\n<p>这样，既避免了多线程问题，又没有同步损失。</p>\n<div><pre><code><span>public</span> <span>class</span> <span>Singleton</span> <span>{</span>\n\n    <span>private</span> <span>Singleton</span><span>(</span><span>)</span> <span>{</span>\n\n    <span>}</span>\n\n    <span>private</span> <span>static</span> <span>final</span> <span>Singleton</span> instance <span>=</span> <span>new</span> <span>Singleton</span><span>(</span><span>)</span><span>;</span>\n\n    <span>public</span> <span>static</span> <span>Singleton</span> <span>getInstance</span><span>(</span><span>)</span> <span>{</span>\n        <span>return</span> instance<span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>这样虽然解决了同步损失，但是，单例的构建很可能是一个耗时操作；</p>\n<p>它并不是一个懒加载操作，同时，如果单例的构建需要外部参数的话，这个方法就用不上了。</p>\n<h2 id=\"_5-双检锁单例\"> 5. 双检锁单例</h2>\n<p>这种单例实现是目前用的比较多的形式；</p>\n<p>既然单例的多线程同步只需要在对象构建时进行，那么，我们就可以通过对 <code>instance</code> 进行两次检查。</p>\n<div><pre><code><span>private</span> <span>static</span> <span>Singleton</span> <span>getInstance</span><span>(</span><span>)</span> <span>{</span>\n    <span>// 检查对象是否已经构建</span>\n    <span>if</span> <span>(</span>instance <span>==</span> <span>null</span><span>)</span> <span>{</span>\n        <span>synchronized</span><span>(</span><span>Singleton</span><span>.</span><span>class</span><span>)</span> <span>{</span>\n            <span>// 防止两个线程同时进入第一个 if 造成的对象重复构建</span>\n            <span>if</span> <span>(</span>instance <span>==</span> <span>null</span><span>)</span> <span>{</span>\n                instance <span>=</span> <span>new</span> <span>Singleton</span><span>(</span><span>)</span><span>;</span>\n            <span>}</span>\n        <span>}</span>\n    <span>}</span>\n\n    <span>return</span> instance<span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>这里着重解释第二个判断：</p>\n<p>当两个线程通过第一个 <code>if</code> 进入同步区后；</p>\n<p>线程一先获取锁，进行对象构建；</p>\n<p>线程一完毕后，线程二进入同步区；</p>\n<p>如果此时没有第二个 <code>if</code>，那么对象就会进行重复构建。</p>\n<p>当对象构建完毕后，外部的 <code>if</code> 将会跳过，不会再进行同步过程；</p>\n<p>这样就解决了同步的性能损失。</p>\n<p>看起来这个实现已经很完美了，但是还是有问题；</p>\n<p>问题就在于，<code>instance = new Singleton()</code>  <strong>不是一个原子操作</strong></p>\n<p>这个操作分为三步：</p>\n<ol>\n<li>给 <code>instance</code> 分配内存</li>\n<li>调用 <code>Singleton</code> 的构造函数进行对象构造</li>\n<li>将 <code>instance</code> 指向分配的内存空间</li>\n</ol>\n<p>而在 JIT 即时编译优化中，会出现指令重排；</p>\n<p>最终的执行顺序很可能不是 1-2-3 而是 1-3-2；</p>\n<p>那么在 3 完成后，线程二抢占锁，此时 <code>instance</code> 不为空，于是线程二返回，报错。</p>\n<p>一个改进则是对于 <code>instance</code> 变量采用 <code>volatile</code> 进行修饰，防止指令重排；</p>\n<p><code>volatile</code> 变量在赋值操作后会存在 <strong>内存屏障</strong>，防止读操作在赋值操作之前进行。</p>\n<p>所以，双检锁单例的正确实现形式如下：</p>\n<div><pre><code><span>public</span> <span>class</span> <span>Singleton</span> <span>{</span>\n    <span>private</span> <span>static</span> <span>volatile</span> <span>Singleton</span> instance <span>=</span> <span>null</span><span>;</span>\n\n    <span>private</span> <span>Singleton</span><span>(</span><span>)</span> <span>{</span>\n\n    <span>}</span>\n\n    <span>public</span> <span>static</span> <span>Singleton</span> <span>getInstance</span><span>(</span><span>)</span> <span>{</span>\n        <span>if</span> <span>(</span>instance <span>==</span> <span>null</span><span>)</span> <span>{</span>\n            <span>synchronized</span><span>(</span><span>Singleton</span><span>.</span><span>class</span><span>)</span> <span>{</span>\n                <span>if</span> <span>(</span>instance <span>==</span> <span>null</span><span>)</span> <span>{</span>\n                    instance <span>=</span> <span>new</span> <span>Singleton</span><span>(</span><span>)</span><span>;</span>\n                <span>}</span>\n            <span>}</span>\n        <span>}</span>\n\n        <span>return</span> instance<span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><h2 id=\"_6-静态内部类\"> 6. 静态内部类</h2>\n<p>可以看到，上面的双检锁单例的实现过于繁琐；</p>\n<p>有没有一种既线程安全，又采用懒加载而且实现简单的实现方法呢？</p>\n<p>有的，我们可以采用静态内部类来实现单例。</p>\n<div><pre><code><span>public</span> <span>class</span> <span>Singleton</span> <span>{</span>\n    <span>private</span> <span>Singleton</span><span>(</span><span>)</span> <span>{</span>\n\n    <span>}</span>\n\n    <span>private</span> <span>static</span> <span>class</span> <span>SingletonHolder</span> <span>{</span>\n        <span>private</span> <span>static</span> <span>final</span> <span>Singleton</span> INSTANCE <span>=</span> <span>new</span> <span>Singleton</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>public</span> <span>static</span> <span>Singleton</span> <span>getInstance</span><span>(</span><span>)</span> <span>{</span>\n        <span>return</span> <span>SingletonHolder</span><span>.</span>INSTANCE<span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>首先看到，我们把单例的实例放入了它的静态内部类中；</p>\n<p>这种实现方法的难度比双检锁单例下降了许多；</p>\n<p>其原理在于，我们不再 <strong>自行实现</strong> 线程安全；</p>\n<p>通过将实例交给静态内部类，我们可以让 JVM 保证天生的线程安全。</p>\n<p>当 <code>Singleton</code> 被加载时，其内部类并不会初始化；</p>\n<p>而当 <code>getInstance()</code> 调用时，其内部类被 <strong>加载</strong> 入内存中；</p>\n<p>JVM 保证所有对类的读写操作均在类加载 <strong>之后</strong> 进行；</p>\n<p>这样，就保证了线程安全；</p>\n<p>同时，由于 <code>getInstance()</code> 不是同步方法，也不会有同步损失。</p>\n<h2 id=\"_7-序列化和反射攻击\"> 7. 序列化和反射攻击</h2>\n<p>那么，我们的单例实现是否已经没有问题了呢？</p>\n<p>并不是！</p>\n<p>由于我们都是通过设定 <strong>访问修饰符</strong> 来达到将构造函数封装的目的；</p>\n<p>但是，当其他使用者使用 <strong>反射</strong> 来进行对象构建时，单例模式就会被破坏了！</p>\n<div><pre><code><span>Constructor</span><span><span>&lt;</span><span>?</span><span>></span></span><span>[</span><span>]</span> cons <span>=</span> <span>getDeclaredConstructors</span><span>(</span><span>)</span><span>;</span>\ncons<span>.</span> <span>setAccessible</span><span>(</span><span>true</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>其中，一个很常见的问题就是单例的序列化；</p>\n<p>当我们采用 <code>Serializable</code> 接口时；</p>\n<p>对象在序列化和反序列化的过程中，会使用 <strong>反射</strong> 调用无参构造方法进行对象构造。</p>\n<p>那么，我们该如何防止对象被反射攻击呢？</p>\n<p>一种方法是采用 <code>flag</code>，如果对象被反射攻击，那么就抛出异常；</p>\n<div><pre><code><span>public</span> <span>class</span> <span>Singleton</span> <span>{</span>\n    <span>private</span> <span>static</span> <span>boolean</span> flag <span>=</span> <span>false</span><span>;</span>\n\n    <span>private</span> <span>Singleton</span><span>(</span><span>)</span> <span>{</span>\n        <span>if</span> <span>(</span><span>Singleton</span><span>.</span>flag <span>==</span> <span>false</span><span>)</span> <span>{</span>\n            <span>Singleton</span><span>.</span>flag <span>=</span> <span>true</span><span>;</span>\n        <span>}</span>\n        <span>else</span> <span>{</span>\n            <span>throw</span> <span>new</span> <span>RuntimeException</span><span>(</span><span>\"Reflect Attack!\"</span><span>)</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>而对于序列化造成的对象的重复构建，我们可以采用重载 <code>readResolve()</code> 的方法进行。</p>\n<div><pre><code><span>private</span> <span>Object</span> <span>readResolve</span><span>(</span><span>)</span> <span>{</span>\n    <span>return</span> INSTANCE<span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id=\"_8-枚举实现-best-practice\"> 8. 枚举实现(Best Practice)</h2>\n<p>可以看到，当我们把所有问题都考虑到之后，单例的实现已经变得非常复杂了。</p>\n<p>所以有没有一种更为简单的方法能满足上面的所有要求呢？</p>\n<p>这就是枚举实现：</p>\n<div><pre><code><span>public</span> <span>enum</span> <span>Singleton</span> <span>{</span>\n    INSTANCE<span>;</span>\n\n    <span>public</span> <span>void</span> <span>doSomeThing</span><span>(</span><span>)</span> <span>{</span>\n        <span>// operations</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>使用：</p>\n<div><pre><code><span>public</span> <span>static</span> <span>void</span> <span>main</span><span>(</span><span>String</span><span>[</span><span>]</span> args<span>)</span> <span>{</span>\n    <span>Singleton</span><span>.</span>INSTANCE<span>.</span><span>doSomeThing</span><span>(</span><span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>它满足：</p>\n<ol>\n<li>线程安全</li>\n<li>无性能损失</li>\n<li>防反射攻击</li>\n<li>防止序列化重复构建</li>\n</ol>\n<p>而且是最为简单的一种单例实现方法。</p>\n",
      "date_published": "2017-03-12T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "《Head First 设计模式》笔记"
      ]
    },
    {
      "title": "策略模式(Strategy Pattern)",
      "url": "https://wafer.li/blog-corners/learning-notes/head-first-design-pattern/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F(Strategy%20Pattern)/",
      "id": "https://wafer.li/blog-corners/learning-notes/head-first-design-pattern/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F(Strategy%20Pattern)/",
      "summary": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>策略模式：定义算法族，分别封装起来，使它们可以相互替换。</p>\n<p>此模式让算法的变化独立于使用算法的用户。</p>\n",
      "content_html": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>策略模式：定义算法族，分别封装起来，使它们可以相互替换。</p>\n<p>此模式让算法的变化独立于使用算法的用户。</p>\n\n<h2 id=\"_2-oo-基础\"> 2. OO 基础</h2>\n<ul>\n<li>抽象</li>\n<li>封装</li>\n<li>多态</li>\n<li>继承</li>\n</ul>\n<h2 id=\"_3-设计原则\"> 3. 设计原则</h2>\n<ul>\n<li>\n<p>封装变化</p>\n<blockquote>\n<p>将应用（类）中有可能变化的部分封装出来，和稳定的部分相互隔离</p>\n</blockquote>\n</li>\n<li>\n<p>针对接口编程，而非针对 实现编程</p>\n<blockquote>\n<p>为了运行时能动态改变类的行为，我们应该<strong>针对接口编程</strong>，而非针对实现编程。</p>\n<p>也就是说，使用接口来实现各个行为，而不是将行为固定在类的具体实现中。</p>\n</blockquote>\n</li>\n<li>\n<p>多用组合，少用继承</p>\n<blockquote>\n<p><code>has-a</code> 比 <code>is-a</code> 更好，能够得到更多的应用弹性。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"_4-具体实现\"> 4.  具体实现</h2>\n<p><strong>关键：使用委托，并使用 setter 实现行为的动态变化。</strong></p>\n<h3 id=\"_4-1-使用接口封装行为\"> 4.1 使用接口封装行为</h3>\n<p><img src=\"https://ww3.sinaimg.cn/large/65e4f1e6gw1f9psjbgdc1j20le0a6mxh.jpg\" alt=\"\" /></p>\n<h3 id=\"_4-2-对象包含接口\"> 4.2 对象包含接口</h3>\n<p><img src=\"https://ww4.sinaimg.cn/large/65e4f1e6gw1f9pszct1akj20tz0efab4.jpg\" alt=\"\" /></p>\n<h3 id=\"_4-3-使用-setter-实现运行时更改行为\"> 4.3 使用 Setter 实现运行时更改行为</h3>\n<p><img src=\"https://ww3.sinaimg.cn/large/65e4f1e6jw1f9ptf31737j20tu0fcq43.jpg\" alt=\"\" /></p>\n<div><pre><code><span>ModelDuck</span> modelDuck <span>=</span> <span>new</span> <span>ModelDuck</span><span>(</span><span>)</span><span>;</span>\nmodelDuck<span>.</span><span>performFly</span><span>(</span><span>)</span><span>;</span>\t\t<span>// FlyNoWay</span>\nmodelDuck<span>.</span><span>setFlyBehavior</span><span>(</span><span>new</span> <span>FlywithWings</span><span>(</span><span>)</span><span>)</span><span>;</span>\nmodelDuck<span>.</span><span>performFly</span><span>(</span><span>)</span><span>;</span>\t\t<span>// FlywithWings</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div>",
      "image": "https://ww3.sinaimg.cn/large/65e4f1e6gw1f9psjbgdc1j20le0a6mxh.jpg",
      "date_published": "2016-11-25T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "《Head First 设计模式》笔记"
      ]
    },
    {
      "title": "装饰者模式(Decorator Pattern)",
      "url": "https://wafer.li/blog-corners/learning-notes/head-first-design-pattern/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F(Decorator%20Pattern)/",
      "id": "https://wafer.li/blog-corners/learning-notes/head-first-design-pattern/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F(Decorator%20Pattern)/",
      "summary": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>装饰者模式 <strong>动态的</strong> 将责任附加到对象上。</p>\n<p>若要扩展功能，装饰者提供了比继承更有弹性的解决方案</p>\n",
      "content_html": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>装饰者模式 <strong>动态的</strong> 将责任附加到对象上。</p>\n<p>若要扩展功能，装饰者提供了比继承更有弹性的解决方案</p>\n\n<h2 id=\"_2-新的设计原则\"> 2. 新的设计原则</h2>\n<p><strong>类应当对扩展开放，对修改关闭</strong></p>\n<p>这乍看上去很矛盾，如何做到“既开放又关闭” 呢？</p>\n<p>实际上，我们可以采用 <strong>组合</strong> 和 <strong>委托</strong> 来达到扩展的目的；</p>\n<p>而 <strong>避免因为扩展而需要修改代码</strong></p>\n<blockquote>\n<p>Bug 总是在修改、新增代码时引入的；\n如果能够尽量减少对代码的反复更改，那么就可以更有效的减少和避免 Bug</p>\n</blockquote>\n<p>装饰者模式就很好的体现了 “开放——关闭” 原则。</p>\n<h2 id=\"_3-原理\"> 3. 原理</h2>\n<p>使用不同的 <strong>装饰者对象</strong> 来对 <strong>主体对象</strong> 进行装饰；</p>\n<p><img src=\"https://i48.tinypic.com/2jabxva.jpg\" alt=\"\" /></p>\n<p>通过 <strong>委托</strong> 来进行组合工作。</p>\n<p><img src=\"https://i50.tinypic.com/2zrg968.jpg\" alt=\"\" /></p>\n<p>这里有一个很重要的地方就是，为什么能实现上面图示的 <strong>包装</strong> 和 <strong>方法委托</strong></p>\n<p>其使用到的技巧就是， <strong>装饰者对象实际上也是主体对象</strong>，即它们有相同的超类。</p>\n<p>如果不具备相同超类的话，最多只能做到一层包装，而无法做到动态的，多层包装。</p>\n<p>注意，这里采用相同的超类，实际上只是为了做到 <strong>类型匹配</strong>，而装饰者并没有从超类中继承它的 <strong>行为</strong>。</p>\n<blockquote>\n<p>继承的原罪在于， <strong>在运行时，行为需要改变！</strong> 如果行为从继承中得到，那么它在编译时就会被确定，也就是所谓的 <strong>与具体实现绑定</strong>。</p>\n<p>但是，如果<strong>行为不从继承中得到</strong>，那么继承反而成了优点，因为继承可以实现多态，为我们的动态扩展提供合适的条件</p>\n</blockquote>\n<h2 id=\"_4-特点\"> 4. 特点</h2>\n<ol>\n<li>装饰者和被装饰对象有 <strong>相同的超类型</strong></li>\n<li>可以使用一个或者 <strong>多个</strong> 装饰者来包装对象</li>\n<li>由于有相同的超类型，所以在需要被装饰对象的场合时，可以使用装饰过后的对象来替代</li>\n<li><strong>装饰者可以在所委托被装饰者的行为之前、之后，加上自己的行为，以达到特定的目的</strong></li>\n<li>对象可以在任何时候被装饰，可以在运行时，动态地、不限量地对对象进行装饰</li>\n</ol>\n<h2 id=\"_5-uml-图解\"> 5. UML 图解</h2>\n<p><img src=\"https://ww2.sinaimg.cn/large/65e4f1e6jw1faice8oa2nj20bq0aqwfr.jpg\" alt=\"\" /></p>\n<p>可以看到，装饰者和主体对象有一个 <strong>共同的超类</strong></p>\n<p>同时， <code>Decorator</code> 和 <code>Component</code> 都是 <strong>抽象类</strong></p>\n<p>对于实际的装饰者，他们都包含了一个 <code>Component</code> 实例，这就是被其装饰的对象，通过多态来进行方法委托。</p>\n<p>图中的 <code>wrappedObject</code> 需要从外部获得，一般来说，是通过 <strong>构造函数</strong> 传入的。</p>\n<h2 id=\"_6-例子图解\"> 6. 例子图解</h2>\n<p><img src=\"https://ww1.sinaimg.cn/large/006tKfTcly1fdsfoe6vu5j30nn0amgm6.jpg\" alt=\"\" /></p>\n<h2 id=\"_7-真实的装饰者模式-java-io\"> 7. 真实的装饰者模式——Java IO</h2>\n<p>Java IO 库中大量使用了装饰者模式，这也就是为什么会出现如下的代码：</p>\n<div><pre><code><span>InputStream</span> in <span>=</span>\n    <span>new</span> <span>BufferdInpuStream</span><span>(</span><span>new</span> <span>FileInputSteram</span><span>(</span><span>)</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>可以看到 <code>FileInputSteram</code> 是被装饰的主体对象，而 <code>BufferdInpuStream</code> 是装饰对象。</p>\n<h2 id=\"_8-缺陷\"> 8. 缺陷</h2>\n<p>装饰者对象的缺陷很明显，就是会 <strong>增加大量的小对象</strong>。</p>\n<p>同时，由于装饰者模式是通过 <strong>层层委托</strong> 来实现扩展的；</p>\n<p>所以，当装饰者需要改变的时候，就需要将改变应用到 <strong>所有的装饰者</strong>；</p>\n<p>此时，当装饰者数量较多时，更改难度大。</p>\n",
      "image": "https://i48.tinypic.com/2jabxva.jpg",
      "date_published": "2017-03-20T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "《Head First 设计模式》笔记"
      ]
    },
    {
      "title": "观察者模式(Observer Pattern)",
      "url": "https://wafer.li/blog-corners/learning-notes/head-first-design-pattern/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F(Observer%20Pattern)/",
      "id": "https://wafer.li/blog-corners/learning-notes/head-first-design-pattern/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F(Observer%20Pattern)/",
      "summary": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>观察者模式，是在对象间定义一个<strong>一对多</strong>的关系。</p>\n<p>当“一个” 对象的改变状态，依赖它的对象都会<strong>收到通知</strong>，并自动更新。</p>\n<p>其中，“一个” 对象称作<strong>主题、可观察者、被观察者</strong>；</p>\n<p>“多个” 对象被称作<strong>观察者、倾听者、订阅者</strong>。</p>\n<blockquote>\n<p>这有点类似报社和读者的关系：发生新闻后，报社通过报纸来通知读者。</p>\n<p>实际上就是一个典型的观察者模式。</p>\n</blockquote>\n<blockquote>\n<p>事实上，观察者模式是 JDK 乃至实际程序和库中使用得最多的设计模式。</p>\n<p>基本上所有的 Java GUI 均实现了观察者模式。（也就是 <code>Listener</code>）</p>\n</blockquote>\n",
      "content_html": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>观察者模式，是在对象间定义一个<strong>一对多</strong>的关系。</p>\n<p>当“一个” 对象的改变状态，依赖它的对象都会<strong>收到通知</strong>，并自动更新。</p>\n<p>其中，“一个” 对象称作<strong>主题、可观察者、被观察者</strong>；</p>\n<p>“多个” 对象被称作<strong>观察者、倾听者、订阅者</strong>。</p>\n<blockquote>\n<p>这有点类似报社和读者的关系：发生新闻后，报社通过报纸来通知读者。</p>\n<p>实际上就是一个典型的观察者模式。</p>\n</blockquote>\n<blockquote>\n<p>事实上，观察者模式是 JDK 乃至实际程序和库中使用得最多的设计模式。</p>\n<p>基本上所有的 Java GUI 均实现了观察者模式。（也就是 <code>Listener</code>）</p>\n</blockquote>\n\n<h2 id=\"_2-实现方式\"> 2. 实现方式</h2>\n<h3 id=\"_2-1-实现思路\"> 2.1 实现思路</h3>\n<ol>\n<li>\n<p>封装变化</p>\n<blockquote>\n<p>观察者模式中，主题的状态和观察者的种类和数量都会变化。</p>\n<p>所以，需要对观察者进行封装。</p>\n<p>同理，观察者也可能订阅多个主题，所以主题也需要进行封装。</p>\n</blockquote>\n</li>\n<li>\n<p>针对接口编程，不针对实现编程</p>\n<blockquote>\n<p>所以，我们使用接口，分别将主题和观察者进行封装。</p>\n<p>实际上就是让各个主题实现统一的 <code>Subject</code> 接口；观察者实现统一的 <code>Observer</code> 接口。</p>\n</blockquote>\n</li>\n<li>\n<p>多用组合，少用继承</p>\n<blockquote>\n<p>观察者模式是一个一对多的<strong>依赖关系</strong>，这意味着，主题必须维护一个<strong>观察者列表</strong>。</p>\n<p>状态改变后，通过调用通知方法来<strong>逐个</strong>通知观察者。</p>\n<p>实际上，这意味着将观察者<strong>组合</strong>进了主题中。</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"_2-2-图解\"> 2.2 图解</h3>\n<p><img src=\"https://www.plantuml.com/plantuml/png/oymhIIrAIqnELGWkJSfAJIvHgEPIK2XAJSyi1ahu9nMd5fMb5cbeWWLpyyjIKOJoyaioqofXGiL0iLgkJBY9C76maQK5AOabgM0LoJc9nSKAplbvoKMf9Qd8zYh4nsErNQ5QJq-l5eiRu18OBe7BwEa1YVJKak0IYFqA2iK83hfZi3ePrIXzVOMdhTkUx9xsRDhEPvkd0es0-S165-vbBdJV0UNGxK3egz7JGmyEBhXBK6HXeW00\" alt=\"\" /></p>\n<h2 id=\"_3-新设计原则-松耦合\"> 3. 新设计原则——松耦合</h2>\n<p><strong>为了交互对象之间的松耦合设计而努力！</strong></p>\n<blockquote>\n<p>所谓的<strong>松耦合</strong>，指的就是两个类、函数、模块之间相关度不高，改变其中的一个类不会造成另一个类的大幅变化。</p>\n</blockquote>\n<p>观察者模式通过<strong>接口</strong>的形式来进行交互，主题可以随时增加和删除观察者列表中的观察者；</p>\n<p>观察者也不需要关心主题的内容，它只需要接受主题的通知就可以了。</p>\n<h2 id=\"_4-气象站例子的-uml-图解\"> 4. 气象站例子的 UML 图解</h2>\n<p><img src=\"https://www.plantuml.com/plantuml/png/bLD1JiCm4Bpx5Jw2LD8FS44jY4j5fLRYM6sJRJ5gd6YzgOX2_ewRO9FOAL8lbkoPdPtPR9Hcf0EaA3VL_XDJbesG3UmD4wJSIiAZCfRojZT8PwIx-m3EYpDU0NN1wb0xq5Yq5KBvXWu8EbPb1emXUQbCUOBw-OGvwj1areDzJNe2O-Gx0dyWBO7XGfPojxDdd4OsIPAq7JHEue4eXKUIn1v7v2tc9H9mHHVRtTDhbQjCSUtkQq9ZUjnRN5H4DikYq9Qf2cr-CtP-tHJ6pNnGsSpdJg2rahtYXe5jFfNUBBM2hvbSAJsJe3FvP8F24Ti_hoy5OGg6RzLrTGEfxOUYR0t4zQrYNQKiBwMTdjlOnmU_IsButUtxjHc7l6Xo8I4OG0X7eGRklfDak8v2-CNleAiMnxJOuHWF3OxH2NyY-AN-DpD5ZYrDiK9ZKvp8tWy0\" alt=\"\" /></p>\n<h2 id=\"_5-推和拉\"> 5. 推和拉</h2>\n<p>实际上，主题向观察者发送通知并不只有<strong>主题向观察者推送</strong>这一个方法；</p>\n<p>我们还可以<strong>让观察者主动从主题拉取数据</strong>。</p>\n<p>它们的主要区别在于：推的通知方法包含数据，而拉的不包含，只负责传输主题的引用。</p>\n<div><pre><code><span>// Push</span>\n<span>public</span> <span>void</span> <span>notifyObservers</span><span>(</span><span>)</span> <span>{</span>\n  <span>for</span> <span>(</span>observer <span>:</span> list<span>)</span> <span>{</span>\n    observer<span>.</span>update<span>:</span> <span>2016</span><span>-</span><span>11</span><span>-</span><span>25</span>\n  <span>}</span>\n<span>}</span>\n\n<span>// Pull</span>\n<span>public</span> <span>void</span> <span>notifyObservers</span><span>(</span><span>)</span> <span>{</span>\n  <span>for</span> <span>(</span>observer <span>:</span> list<span>)</span> <span>{</span>\n    observer<span>.</span>update<span>:</span> <span>2016</span><span>-</span><span>11</span><span>-</span><span>25</span>\n  <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>拉的方法实现起来也很方便：</p>\n<ol>\n<li>首先主题提供 getter</li>\n<li>随后将<strong>主题本身</strong>作为参数传递给观察者即可。</li>\n</ol>\n<p>采用拉的好处在于，观察者种类繁多，需要的数据不尽相同，这样一来，观察者只需要获取自己感兴趣的数据即可，而不需要同时拿到一大堆自己不想要的数据。</p>\n<p>书中提到</p>\n<blockquote>\n<p>如果采用拉，当扩展功能的时候，就不必要更新和修改观察者的调用，而只需改变自己来允许更多的 getter 方法来取得新增的状态。</p>\n</blockquote>\n<p>这个观点固然不错，但是实际上，我们可以通过将数据<strong>封装成一个类</strong>来解决调用的问题。</p>\n<p>事实上，根据 OO 设计的原则，应该 <strong>Tell, Don't Ask</strong> ，所以使用<strong>推的方法会更好。</strong></p>\n<h2 id=\"_6-java-内置的观察者模式\"> 6. Java 内置的观察者模式</h2>\n<p>Java API 中内置了一个观察者模式，包含一个基本的 <code>Observer</code> 接口和一个 <code>Observable</code> <strong>类</strong>。</p>\n<p>我们可以使用 Java 的内置 API 来快速的实现观察者模式，而不需要自己再造轮子。</p>\n<p>基本的类图如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/wafer-li/UMLStorage/master/image/observer_java_built_in.png\" alt=\"\" /></p>\n<p>其中，<code>setChanged()</code> 方法是用来<strong>指示状态改变的</strong>。在调用 <code>notifyObservers()</code> 之前，需要先调用这个方法。</p>\n<p>同时，Java 也实现了推和拉的方式。</p>\n<p>不带参数的 <code>notifyObservers()</code> 使用的是<strong>拉的方法</strong>，而带参数的使用的是推。</p>\n<div><pre><code><span>public</span> <span>notifyObservers</span><span>(</span><span>Objecgt</span> arg<span>)</span> <span>{</span>\n  <span>if</span> <span>(</span>changed<span>)</span> <span>{</span>\n    <span>for</span> <span>(</span>observer <span>:</span> list<span>)</span> <span>{</span>\n      observer<span>.</span>update<span>:</span> <span>2016</span><span>-</span><span>11</span><span>-</span><span>25</span>\n    <span>}</span>\n  <span>}</span>\n<span>}</span>\n\n<span>public</span> <span>notifyObservers</span><span>(</span><span>)</span> <span>{</span>\n  <span>notifyObservers</span><span>(</span><span>null</span><span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h2 id=\"_7-java-内置观察者模式的缺陷\"> 7. Java 内置观察者模式的缺陷</h2>\n<ol>\n<li>\n<p>违反面对接口编程原则</p>\n<blockquote>\n<p>由于 <code>Observable</code> 是一个<strong>类</strong>，并且实现了<strong>自己的通知方法</strong>，我们的通知途径就被绑定在了 <code>Observable</code> 的具体实现上，无法轻易改变。这也导致了对观察者的通知次序被绑定而无法改变。</p>\n<p>同时，由于 Java 禁止多重继承，所以无法对 <code>Observable</code> 进行复用。</p>\n</blockquote>\n</li>\n<li>\n<p>违反多用组合，少用继承</p>\n<blockquote>\n<p><code>Observable</code>  中的 <code>setChanged()</code> 方法是 <code>protected</code> 的，</p>\n<p>这意味着如果不继承 <code>Observable</code> 就无法修改 <code>setChanged()</code> 方法。</p>\n</blockquote>\n</li>\n</ol>\n<p>所以，如果应用要求弹性高，那么更好的方法应该是：</p>\n<p><strong>自己重新造轮子！</strong></p>\n",
      "image": "https://www.plantuml.com/plantuml/png/oymhIIrAIqnELGWkJSfAJIvHgEPIK2XAJSyi1ahu9nMd5fMb5cbeWWLpyyjIKOJoyaioqofXGiL0iLgkJBY9C76maQK5AOabgM0LoJc9nSKAplbvoKMf9Qd8zYh4nsErNQ5QJq-l5eiRu18OBe7BwEa1YVJKak0IYFqA2iK83hfZi3ePrIXzVOMdhTkUx9xsRDhEPvkd0es0-S165-vbBdJV0UNGxK3egz7JGmyEBhXBK6HXeW00",
      "date_published": "2016-11-25T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "《Head First 设计模式》笔记"
      ]
    },
    {
      "title": "学习笔记",
      "url": "https://wafer.li/blog-corners/learning-notes/",
      "id": "https://wafer.li/blog-corners/learning-notes/",
      "content_html": "<p>我的学习笔记记录地，大部分是读书笔记，以后可能有一些网课的笔记。</p>\n",
      "date_published": "2021-07-09T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": []
    },
    {
      "title": "《编写可读代码的艺术》笔记",
      "url": "https://wafer.li/blog-corners/learning-notes/%E7%BC%96%E5%86%99%E5%8F%AF%E8%AF%BB%E4%BB%A3%E7%A0%81%E7%9A%84%E8%89%BA%E6%9C%AF%20%E7%AC%94%E8%AE%B0/",
      "id": "https://wafer.li/blog-corners/learning-notes/%E7%BC%96%E5%86%99%E5%8F%AF%E8%AF%BB%E4%BB%A3%E7%A0%81%E7%9A%84%E8%89%BA%E6%9C%AF%20%E7%AC%94%E8%AE%B0/",
      "summary": "<h2 id=\"_1-代码应该易于理解\"> 1. 代码应该易于理解</h2>\n<p>好的代码，应该能让人易于理解。</p>\n<p>理解难度指的是别人<strong>读懂</strong>你的代码所需的时间。</p>\n<blockquote>\n<p>读懂指的是，能对代码进行修改和扩展，并保持原有功能不变。</p>\n</blockquote>\n<p>易于理解的代码也易于测试，集成，模块化和扩展。</p>\n<p>从提高编码能力来看：<strong>程序员应该以写出易于理解的代码为核心目标。</strong></p>\n",
      "content_html": "<h2 id=\"_1-代码应该易于理解\"> 1. 代码应该易于理解</h2>\n<p>好的代码，应该能让人易于理解。</p>\n<p>理解难度指的是别人<strong>读懂</strong>你的代码所需的时间。</p>\n<blockquote>\n<p>读懂指的是，能对代码进行修改和扩展，并保持原有功能不变。</p>\n</blockquote>\n<p>易于理解的代码也易于测试，集成，模块化和扩展。</p>\n<p>从提高编码能力来看：<strong>程序员应该以写出易于理解的代码为核心目标。</strong></p>\n\n<h2 id=\"_2-把信息装到名字中\"> 2. 把信息装到名字中</h2>\n<h3 id=\"_2-1-选择专业的词-不要空洞\"> 2.1 选择专业的词, 不要空洞</h3>\n<p><code>get</code> 这个词很抽象，应该使用 <code>download</code> <code>fetch</code> 等更具有明显指向的词。</p>\n<p>下表是一个建议：</p>\n<table>\n<thead>\n<tr>\n<th>单词</th>\n<th>更多选择</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>send</td>\n<td>deliver, dispatch, announce, distribute, route</td>\n</tr>\n<tr>\n<td>find</td>\n<td>search, extract, locate, recover</td>\n</tr>\n<tr>\n<td>start</td>\n<td>launch, create, begin, open</td>\n</tr>\n<tr>\n<td>make</td>\n<td>create, set up, build, generate, compose, add, new</td>\n</tr>\n</tbody>\n</table>\n<p><strong>关键思想：清晰精确比装可爱要好</strong></p>\n<h3 id=\"_2-2-避免使用泛泛的名字\"> 2.2 避免使用泛泛的名字</h3>\n<p>例如 <code>tmp</code> 和 <code>retval</code> 这种空洞的词语不要使用。</p>\n<p><code>tmp</code> 这个名字只应用于<strong>短期</strong>存在且<strong>临时性</strong>为其主要存在因素的变量。</p>\n<p><code>i</code> <code>j</code> <code>k</code> 经常被应用于迭代器，但是应该优先考虑比这些变量更为贴切的命名。</p>\n<h3 id=\"_2-3-使用具体的名字代替抽象的名字\"> 2.3 使用具体的名字代替抽象的名字</h3>\n<p>例如 <code>ServerCanStart()</code>，如果它是检测服务是否可以监听某个给定的端口的话，那么就应该声明为 <code>CanListenOnPort()</code></p>\n<h4 id=\"例子-run-locally\"> 例子： <code>run_locally</code></h4>\n<p>如果我们有个命令行标识叫 <code>run_locally</code>，那么很难推断出它究竟有什么用处，可能需要在本地运行的时候使用它？但不明白为什么使用它。</p>\n<p>假如 <code>run_locally</code> 是用于输出日志，那么就应该把它改成 <code>extra_logging</code> ，如果 <code>run_locally</code> 不仅做这个工作怎么办呢？假如说它还承担了建立和使用一个本地数据库的工作。</p>\n<p>那么就应该 <strong>新建另一个标志</strong> <code>use_local_database</code></p>\n<h3 id=\"_2-4-为名字附带更多信息\"> 2.4 为名字附带更多信息</h3>\n<p>为你的名字带上一些具体的信息，比如说变量的 <strong>内在格式</strong>，和变量的 <strong>单位</strong></p>\n<div><pre><code><span><span>string</span></span> id<span>;</span>  <span>// Example: \"af84ef845cd8\"</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>如上，如果这个变量的格式很重要，那么就应该在名字附上 <code>hex_id</code></p>\n<p>这里指的就是变量的 <strong>内在格式</strong>，而不是类似匈牙利命名法的变量的类型。</p>\n<p>有时候单位也是很重要的，那么就应该加上单位。</p>\n<div><pre><code><span>var</span> start_ms <span>=</span> <span>(</span><span>new</span> <span>Date</span><span>(</span><span>)</span><span>)</span><span>.</span><span>getTime</span><span>(</span><span>)</span><span>;</span>\n\n<span>var</span> elapsed_ms <span>=</span> <span>(</span><span>new</span> <span>Date</span><span>(</span><span>)</span><span>)</span><span>.</span><span>getTime</span><span>(</span><span>)</span> <span>-</span> start<span>;</span>\ndocument<span>.</span><span>writeln</span><span>(</span><span>\"load time was: \"</span> <span>+</span> elapsed <span>+</span> <span>\" seconds\"</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id=\"_2-5-名字的长度\"> 2.5 名字的长度</h3>\n<ol>\n<li>大作用域采用较长名称，小作用域采用短名称</li>\n<li>使用快捷键来快速输入长名字和使用名字自动补全</li>\n<li>不要使用大家都不认得的首字母缩写词</li>\n<li>丢掉没用的词</li>\n</ol>\n<h3 id=\"_2-6-利用名字的格式来传递含义\"> 2.6 利用名字的格式来传递含义</h3>\n<p>比如说大驼峰是类，小驼峰是变量等等；格式可以指明一个名字的类型。</p>\n",
      "date_published": "2016-12-13T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": []
    },
    {
      "title": "Android Gradle 介绍",
      "url": "https://wafer.li/blog-corners/old-inventory/Android/Android%20Gradle%20%E4%BB%8B%E7%BB%8D/",
      "id": "https://wafer.li/blog-corners/old-inventory/Android/Android%20Gradle%20%E4%BB%8B%E7%BB%8D/",
      "summary": "<h2 id=\"_1-简介\"> 1. 简介</h2>\n<p>Android Studio 使用 gradle 自动化编译工具用于替代老旧的 Ant Build。目前已经成为 Android App 构建的主流工具。</p>\n<p>本篇文章简单介绍了 Android Gradle 的有关配置段和相关的简介。</p>\n<p>Gradle 工具通过读取 <code>build.gradle</code> 文件的配置来对工程进行构建，同时，工程中的每一个分模块都有相应的 <code>build.gralde</code> 文件。</p>\n",
      "content_html": "<h2 id=\"_1-简介\"> 1. 简介</h2>\n<p>Android Studio 使用 gradle 自动化编译工具用于替代老旧的 Ant Build。目前已经成为 Android App 构建的主流工具。</p>\n<p>本篇文章简单介绍了 Android Gradle 的有关配置段和相关的简介。</p>\n<p>Gradle 工具通过读取 <code>build.gradle</code> 文件的配置来对工程进行构建，同时，工程中的每一个分模块都有相应的 <code>build.gralde</code> 文件。</p>\n\n<h2 id=\"_2-顶层文件-top-level\"> 2. 顶层文件（Top-Level）</h2>\n<p>顶层的 <code>build.gradle</code> 存储在工程根目录，定义一些用于所有模块的属性和设置。其中包括</p>\n<div><pre><code><span>/**\n* buildscript{} 是用于 gradle 自身的配置，在构建工程时，gradle 会首先读取构建必要的依赖用于构建工程。\n* 不要将 APP 用的依赖项加到这里来！\n* 通常包含 respositories{} 和 dependencies{} 块。\n*/</span>\nbuildscript <span>{</span>\n\n    <span>/**\n    * 这个区块是定义 gradle 寻找所有依赖项的 Java 包库。\n    * 默认为 jcenter。\n    * 也可以添加一些自己的库进去。\n    *\n    * 由于 jcenter 是 MavenCentral 的超集，所以直接使用 jcenter 即可\n    */</span>\n    respositories <span>{</span>\n        <span>jcenter</span><span>(</span><span>)</span>\n    <span>}</span>\n\n    <span>/**\n    * 这个区块是 gradle 构建用的依赖项，android 工程中，\n    * 一般是与 AS 版本号对应的 gradle 版本。\n    */</span>\n    dependencies <span>{</span>\n        classpath <span>'com.android.tools.build:gradle:2.2.0'</span>\n    <span>}</span>\n<span>}</span>\n\n<span>/**\n* allprojects{} 区块用于定义所有模块构建共用的代码库和依赖项。\n* 原则上应在各模块对应的 build.gradle 设定相应的代码库和依赖项。\n* Android Studio 默认配置了 jcenter() 作为默认的代码库。\n*/</span>\nallprojects <span>{</span>\n    repositories <span>{</span>\n        <span>jcenter</span><span>(</span><span>)</span>\n    <span>}</span>\n<span>}</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br></div></div><h2 id=\"_3-模块级别文件\"> 3. 模块级别文件</h2>\n<p>在各个模块的根目录中，也有对应的 <code>build.gradle</code> 文件，它是用来配置各个模块各自的编译构建项的，也是我们最常修改的文件。</p>\n<div><pre><code>apply plugin<span>:</span> <span>'com.android.application'</span>\n</code></pre>\n<div><span>1</span><br></div></div>",
      "date_published": "2016-10-14T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Android"
      ]
    },
    {
      "title": "Android 多个 icon 问题",
      "url": "https://wafer.li/blog-corners/old-inventory/Android/Android%20%E5%A4%9A%E4%B8%AA%20icon%20%E9%97%AE%E9%A2%98/",
      "id": "https://wafer.li/blog-corners/old-inventory/Android/Android%20%E5%A4%9A%E4%B8%AA%20icon%20%E9%97%AE%E9%A2%98/",
      "content_html": "<p>最近在开发中遇到的 Android App 安装后，同一个 app 居然在应用列表里出现了<strong>两个或者以上的图标</strong>，这是怎么回事呢？</p>\n<p>原来，Android 只要指定了 <code>action.MAIN</code> 的 <code>Activity</code> 就会显示一个图标，\n而且图标的名字和 <code>Activity</code> 的 <code>android:label</code> 相同。</p>\n<p>所以，解决办法就是只保留一个 <code>action.MAIN</code>。</p>\n<p>同时，如果引入了其他 <code>module</code>，<strong>也要检查那个 <code>module</code> 的 manifest</strong>；</p>\n<p>保证整个工程就只有一个 <code>action.MAIN</code></p>\n",
      "date_published": "2016-10-17T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Android"
      ]
    },
    {
      "title": "Android 官方 Navigation Drawer",
      "url": "https://wafer.li/blog-corners/old-inventory/Android/Android%20%E5%AE%98%E6%96%B9%20Navigation%20Drawer/",
      "id": "https://wafer.li/blog-corners/old-inventory/Android/Android%20%E5%AE%98%E6%96%B9%20Navigation%20Drawer/",
      "summary": "\n<p> <br>\n <br>\n <br>\n <br>\n <br>\n <br>\n <br>\n  <br>\n  <br>\n  <br>\n  <br>\n </p>\n\n<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>Navigation drawer 作为 Android Material Design 中主流的一种导航方式，当然受到 Google 的重视，所以，作为 MD 设计推出的实现部分，Android 更新了 support library 增加了关于 Navigation Drawer 的支持。</p>\n<p>下面就来看看如何进行 Navigation Drawer 的构建。</p>\n",
      "content_html": "\n<p> <br>\n <br>\n <br>\n <br>\n <br>\n <br>\n <br>\n  <br>\n  <br>\n  <br>\n  <br>\n </p>\n\n<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>Navigation drawer 作为 Android Material Design 中主流的一种导航方式，当然受到 Google 的重视，所以，作为 MD 设计推出的实现部分，Android 更新了 support library 增加了关于 Navigation Drawer 的支持。</p>\n<p>下面就来看看如何进行 Navigation Drawer 的构建。</p>\n\n<h2 id=\"_2-添加依赖\"> 2. 添加依赖</h2>\n<p>官方的 Navigation Drawer 需要用到 <code>DrawerLayout</code> 和 <code>NavigationView</code>，它们都在 support design 包下。</p>\n<div><pre><code>compile <span>'com.android.support:design:24.2.1'</span>\n</code></pre>\n<div><span>1</span><br></div></div><blockquote>\n<p>这里不使用最新的 <code>25.0.0</code> 的原因在于，最新版在 UI Editor 渲染时存在 bug。Google 不愧是世界上最伟大的半成品公司。</p>\n</blockquote>\n<h2 id=\"_3-设计-layout-activity-main-xml\"> 3. 设计 <code>layout/activity_main.xml</code></h2>\n<div><pre><code><span>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span>\n<span><span><span>&lt;</span>android.support.v4.widget.DrawerLayout</span>\n    <span><span>android:</span>id</span><span><span>=</span><span>\"</span>@+id/drawer_layout<span>\"</span></span>\n    <span><span>xmlns:</span>android</span><span><span>=</span><span>\"</span>http://schemas.android.com/apk/res/android<span>\"</span></span>\n    <span><span>xmlns:</span>app</span><span><span>=</span><span>\"</span>http://schemas.android.com/apk/res-auto<span>\"</span></span>\n    <span><span>xmlns:</span>tools</span><span><span>=</span><span>\"</span>http://schemas.android.com/tools<span>\"</span></span>\n    <span><span>android:</span>layout_width</span><span><span>=</span><span>\"</span>match_parent<span>\"</span></span>\n    <span><span>android:</span>layout_height</span><span><span>=</span><span>\"</span>match_parent<span>\"</span></span>\n    <span><span>android:</span>fitsSystemWindows</span><span><span>=</span><span>\"</span>true<span>\"</span></span>\n    <span><span>tools:</span>context</span><span><span>=</span><span>\"</span>com.wafer.toy.github_client.ui.activity.MainActivity<span>\"</span></span><span>></span></span>\n\n    <span>&lt;!-- Your main content --></span>\n\n\n    <span><span><span>&lt;</span>android.support.design.widget.NavigationView</span>\n        <span><span>android:</span>id</span><span><span>=</span><span>\"</span>@+id/navigation_drawer<span>\"</span></span>\n        <span><span>android:</span>layout_width</span><span><span>=</span><span>\"</span>wrap_content<span>\"</span></span>\n        <span><span>android:</span>layout_height</span><span><span>=</span><span>\"</span>match_parent<span>\"</span></span>\n        <span><span>android:</span>layout_gravity</span><span><span>=</span><span>\"</span>start<span>\"</span></span>\n        <span><span>app:</span>headerLayout</span><span><span>=</span><span>\"</span>@layout/drawer_header<span>\"</span></span>\n        <span><span>app:</span>menu</span><span><span>=</span><span>\"</span>@menu/drawer_item<span>\"</span></span><span>/></span></span>\n<span><span><span>&lt;/</span>android.support.v4.widget.DrawerLayout</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><p>需要注意的是，<code>DrawerLayout</code> 是布局的<strong>根目录</strong>，同时要设置 <code>fitsSystemWindows=&quot;true&quot;</code>，否则，将会覆盖掉顶部状态栏。</p>\n<p>还有，注意要设置 <code>NavigationView</code> 的 <code>layout_gravity=&quot;start&quot;</code>，否则不会生效。</p>\n<h2 id=\"_4-构建-layout-drawer-header-xml\"> 4. 构建 <code>layout/drawer_header.xml</code></h2>\n<p>一般来说，Nav Drawer 都需要有一个 header 来存放用户头像等等有关用户账户的概览信息。</p>\n<p>所以我们还要定义一个 header 的布局，然后像上面一样，将其赋予 <code>app:headerLayout</code></p>\n<p>header 的布局注意满足 <a href=\"https://material.google.com/patterns/navigation-drawer.html\" target=\"_blank\" rel=\"noopener noreferrer\">Material Design</a> 即可；布局样式和摆放不限。</p>\n<h2 id=\"_5-定义-menu-drawer-item-xml\"> 5. 定义 <code>menu/drawer_item.xml</code></h2>\n<p>是时候给我们的 Nav Drawer 加上一点内容了，通过在 <code>menu/drawer_item.xml</code> 中定义相应的组件即可。</p>\n<div><pre><code><span><span><span>&lt;</span>menu</span> <span><span>xmlns:</span>android</span><span><span>=</span><span>\"</span>http://schemas.android.com/apk/res/android<span>\"</span></span><span>></span></span>\n\n    <span><span><span>&lt;</span>group</span> <span><span>android:</span>checkableBehavior</span><span><span>=</span><span>\"</span>single<span>\"</span></span><span>></span></span>\n        <span><span><span>&lt;</span>item</span>\n            <span><span>android:</span>id</span><span><span>=</span><span>\"</span>@+id/nav_home<span>\"</span></span>\n            <span><span>android:</span>icon</span><span><span>=</span><span>\"</span>@drawable/ic_drawer_home<span>\"</span></span>\n            <span><span>android:</span>title</span><span><span>=</span><span>\"</span>@string/nav_home<span>\"</span></span> <span>/></span></span>\n        <span><span><span>&lt;</span>item</span>\n            <span><span>android:</span>id</span><span><span>=</span><span>\"</span>@+id/nav_about<span>\"</span></span>\n            <span><span>android:</span>icon</span><span><span>=</span><span>\"</span>@drawable/ic_drawer_about<span>\"</span></span>\n            <span><span>android:</span>title</span><span><span>=</span><span>\"</span>@string/nav_about<span>\"</span></span> <span>/></span></span>\n        <span><span><span>&lt;</span>item</span>\n            <span><span>android:</span>id</span><span><span>=</span><span>\"</span>@+id/nav_settings<span>\"</span></span>\n            <span><span>android:</span>icon</span><span><span>=</span><span>\"</span>@drawable/ic_drawer_settings<span>\"</span></span>\n            <span><span>android:</span>title</span><span><span>=</span><span>\"</span>@string/nav_settings<span>\"</span></span> <span>/></span></span>\n\n        <span><span><span>&lt;</span>item</span>\n            <span><span>android:</span>id</span><span><span>=</span><span>\"</span>@+id/navigation_subheader<span>\"</span></span>\n            <span><span>android:</span>title</span><span><span>=</span><span>\"</span>@string/nav_sub_header<span>\"</span></span><span>></span></span>\n            <span><span><span>&lt;</span>menu</span><span>></span></span>\n                <span><span><span>&lt;</span>item</span>\n                    <span><span>android:</span>id</span><span><span>=</span><span>\"</span>@+id/navigation_sub_item_1<span>\"</span></span>\n                    <span><span>android:</span>icon</span><span><span>=</span><span>\"</span>@drawable/ic_drawer_about<span>\"</span></span>\n                    <span><span>android:</span>title</span><span><span>=</span><span>\"</span>@string/nav_sub_item_1<span>\"</span></span> <span>/></span></span>\n                <span><span><span>&lt;</span>item</span>\n                    <span><span>android:</span>id</span><span><span>=</span><span>\"</span>@+id/navigation_sub_item_2<span>\"</span></span>\n                    <span><span>android:</span>icon</span><span><span>=</span><span>\"</span>@drawable/ic_drawer_home<span>\"</span></span>\n                    <span><span>android:</span>title</span><span><span>=</span><span>\"</span>@string/nav_sub_item_2<span>\"</span></span> <span>/></span></span>\n            <span><span><span>&lt;/</span>menu</span><span>></span></span>\n        <span><span><span>&lt;/</span>item</span><span>></span></span>\n    <span><span><span>&lt;/</span>group</span><span>></span></span>\n<span><span><span>&lt;/</span>menu</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br></div></div><p>注意，项目的分界通过内嵌的 <code>&lt;menu&gt;</code> 来实现。</p>\n<p>需要注意的是，官方的 nav drawer 中的 item 没有 ripple，只有长按才能显示。</p>\n<p>最后我们再将这个 <code>menu</code> 赋到 <code>NavgationView</code>的 <code>app:menu=&quot;@menu/drawer_item&quot;</code>上</p>\n<h2 id=\"_6-显示汉堡包图标\"> 6. 显示汉堡包图标</h2>\n<p>Drawer 到这里就完全搭建好了，但是，没有汉堡包图标，用户就不知道我们的应有有个 Nav Drawer。所以，我们就需要给 <code>toolbar</code> 加上一个汉堡包图标来凸显 Nav Drawer 的存在。</p>\n<p>在这里，我们需要进入到 <code>java</code> 文件中进行修改了，由于我用的是 Kotlin，这里使用 Kotlin 来做演示。</p>\n<p>下面就是增加显示汉堡包的方法：</p>\n<div><pre><code><span>class</span> MainActivity <span>:</span> <span>BaseActivity</span><span>(</span><span>)</span> <span>{</span>\n\n    <span>private</span> <span>val</span> actionBarDrawerToggle<span>:</span> ActionBarDrawerToggle <span>by</span> lazy <span>{</span> <span>createActionBarDrawerToggle</span><span>(</span><span>)</span> <span>}</span>\n\n    <span>override</span> <span>fun</span> <span>initView</span><span>(</span><span>)</span> <span>{</span>\n        <span>initToolbar</span><span>(</span><span>)</span>\n        <span>initActionBarDrawerToggle</span><span>(</span><span>)</span>\n    <span>}</span>\n\n    <span>private</span> <span>fun</span> <span>initActionBarDrawerToggle</span><span>(</span><span>)</span> <span>{</span>\n        drawer_layout<span>.</span><span>addDrawerListener</span><span>(</span>actionBarDrawerToggle<span>)</span>\n        actionBarDrawerToggle<span>.</span><span>syncState</span><span>(</span><span>)</span>\n    <span>}</span>\n\n    <span>private</span> <span>fun</span> <span>initToolbar</span><span>(</span><span>)</span> <span>{</span>\n        <span>setSupportActionBar</span><span>(</span>toolbar<span>)</span>\n    <span>}</span>\n\n\n\n    <span>private</span> <span>fun</span> <span>createActionBarDrawerToggle</span><span>(</span><span>)</span><span>:</span> ActionBarDrawerToggle <span>{</span>\n        <span>return</span> <span>ActionBarDrawerToggle</span><span>(</span>\n                <span>this</span><span>,</span> drawer_layout<span>,</span> toolbar<span>,</span> R<span>.</span>string<span>.</span>open_drawer<span>,</span> R<span>.</span>string<span>.</span>close_drawer<span>)</span>\n    <span>}</span>\n\n    <span>override</span> <span>fun</span> <span>getLayoutRes</span><span>(</span><span>)</span><span>:</span> Int <span>{</span>\n        <span>return</span> R<span>.</span>layout<span>.</span>activity_main\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div><p>首先，使用 <code>DrawerLayout</code> 对象和 <code>toolbar</code> 对象来构建一个 <code>ActionBarDrawerToggle</code> 对象；</p>\n<p>然后让 <code>ActionBarDrawerToggle</code> 成为 <code>drawer_layout</code> 的一个接口；</p>\n<p>最后设置 <code>actionBarDrawerToggle.syncState()</code> 即可。</p>\n<h2 id=\"_7-使状态栏透明\"> 7. 使状态栏透明</h2>\n<p>我们已经成功的构建出了一个 Navigation Drawer，但是，其显示出来的效果是这样的</p>\n<p><img src=\"https://img.readitlater.com/i/matthewwear.xyz/content/images/2016/05/Screenshot-2016-05-31-09-57-54/RS/w1408.png\" alt=\"\" /></p>\n<p>而官方的 MD 规范上，状态栏的效果是半透明的。</p>\n<p>所以，我们还要做一些额外的步骤来让我们的 Nav Drawer 更符合规范。</p>\n<h3 id=\"_7-1-去除-actionbar\"> 7.1 去除 Actionbar</h3>\n<p>这个步骤通常已经在初步搭建构架的时候就完成了。也就是说为 <code>style.xml</code> 增加如下两项：</p>\n<div><pre><code><span><span><span>&lt;</span>item</span> <span>name</span><span><span>=</span><span>\"</span>windowActionBar<span>\"</span></span><span>></span></span>false<span><span><span>&lt;/</span>item</span><span>></span></span>\n<span><span><span>&lt;</span>item</span> <span>name</span><span><span>=</span><span>\"</span>windowNoTitle<span>\"</span></span><span>></span></span>true<span><span><span>&lt;/</span>item</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>并且继承 <code>Theme.AppCompact.Light.DarkActionBar</code></p>\n<h3 id=\"_7-2-v21-增加关于状态栏的属性\"> 7.2 v21 增加关于状态栏的属性</h3>\n<p>在 <code>value-21/style.xml</code> 中，增加另外的两项：</p>\n<div><pre><code><span><span><span>&lt;</span>item</span> <span>name</span><span><span>=</span><span>\"</span>windowActionBar<span>\"</span></span><span>></span></span>false<span><span><span>&lt;/</span>item</span><span>></span></span>\n<span><span><span>&lt;</span>item</span> <span>name</span><span><span>=</span><span>\"</span>windowNoTitle<span>\"</span></span><span>></span></span>true<span><span><span>&lt;/</span>item</span><span>></span></span>\n<span><span><span>&lt;</span>item</span> <span>name</span><span><span>=</span><span>\"</span>android:windowDrawsSystemBarBackgrounds<span>\"</span></span><span>></span></span>true<span><span><span>&lt;/</span>item</span><span>></span></span>\n<span><span><span>&lt;</span>item</span> <span>name</span><span><span>=</span><span>\"</span>android:statusBarColor<span>\"</span></span><span>></span></span>@android:color/transparent<span><span><span>&lt;/</span>item</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id=\"_7-3-设置-drawerlayout-使用-fitssystemwindow\"> 7.3 设置 DrawerLayout 使用 <code>fitsSystemWindow</code></h3>\n<div><pre><code><span><span><span>&lt;</span>android.support.v4.widget.DrawerLayout</span>\n    <span>...</span>\n    <span><span>android:</span>fitsSystemWindows</span><span><span>=</span><span>\"</span>true<span>\"</span></span>\n    <span><span>app:</span>insetForeground</span><span><span>=</span><span>\"</span>@color/inset_color<span>\"</span></span>\n    <span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>OK，到这里就大功告成了！</p>\n<p><img src=\"https://img.readitlater.com/i/matthewwear.xyz/content/images/2016/05/Screenshot-2016-05-31-10-24-05/RS/w1408.png\" alt=\"\" /></p>\n<h3 id=\"_7-4-补充-动态改变-status-bar-颜色\"> 7.4 补充：动态改变 status bar 颜色</h3>\n<p>如果你想动态改变状态栏颜色的话，也有相应的 Java 接口。</p>\n<div><pre><code>drawerLayout<span>.</span><span>setStatusBarBackgroundColor</span><span>(</span><span>ContextCompat</span><span>.</span><span>getColor</span><span>(</span><span>this</span><span>,</span> <span>R</span><span>.</span>color<span>.</span>wierd_green<span>)</span><span>)</span><span>;</span>\n\ndrawerLayout<span>.</span><span>setScrimColor</span><span>(</span><span>ContextCompat</span><span>.</span><span>getColor</span><span>(</span><span>this</span><span>,</span> <span>R</span><span>.</span>color<span>.</span>wierd_transparent_orange<span>)</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id=\"_8-总结\"> 8. 总结</h2>\n<p>这样构造出来的 Nav Drawer 和 MaterialDrawer 不同的一个地方在于，Nav Drawer 是在设计层面上进行修改，而 MaterialDrawer 是在代码层面上进行修改，侵入性不强，不过也较为麻烦。</p>\n<p>总的来说，如果要快速搭建，则选择 MaterialDrawer；\n但是要选择使用清真的写法，那么 Nav Drawer 则会更好。</p>\n",
      "image": "https://img.readitlater.com/i/matthewwear.xyz/content/images/2016/05/Screenshot-2016-05-31-09-57-54/RS/w1408.png",
      "date_published": "2016-11-08T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Android"
      ]
    },
    {
      "title": "Android 获取屏幕尺寸",
      "url": "https://wafer.li/blog-corners/old-inventory/Android/Android%20%E8%8E%B7%E5%8F%96%E5%B1%8F%E5%B9%95%E5%B0%BA%E5%AF%B8/",
      "id": "https://wafer.li/blog-corners/old-inventory/Android/Android%20%E8%8E%B7%E5%8F%96%E5%B1%8F%E5%B9%95%E5%B0%BA%E5%AF%B8/",
      "content_html": "<p>有时候为了实现 Respnsive 或者一些其他的需求，我们就需要拿到当前屏幕的尺寸。</p>\n<p>那么在 Android 中该如何做到呢？请看如下代码：</p>\n<div><pre><code><span>fun</span> <span>getScreenSizeDp</span><span>(</span>activity<span>:</span> Activity<span>)</span><span>:</span> Pair<span>&lt;</span>Float<span>,</span> Float<span>></span> <span>{</span>\n    <span>val</span> display<span>:</span> Display <span>=</span> activity<span>.</span>windowManager<span>.</span>defaultDisplay\n    <span>val</span> displayMetrics <span>=</span> <span>DisplayMetrics</span><span>(</span><span>)</span>\n    display<span>.</span><span>getMetrics</span><span>(</span>displayMetrics<span>)</span>\n\n    <span>val</span> density <span>=</span> activity<span>.</span>resources<span>.</span>displayMetrics<span>.</span>density\n\n    <span>return</span> <span>Pair</span><span>(</span>displayMetrics<span>.</span>widthPixels <span>/</span> density<span>,</span> displayMetrics<span>.</span>heightPixels <span>/</span> density<span>)</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>首先，我们使用 <code>Activity</code> 对象来获取到 <code>WindowManager</code> 的 <code>defaultDisplay</code>。</p>\n<p>然后，我们构建一个 <code>DisplayMetrics</code> 对象，用来存储特定的尺寸数据。</p>\n<p>注意，我们只能获取到屏幕的<strong>像素大小</strong>，而不能获取到 Android 常用的 dp。</p>\n<p>所以，我们就要先拿到屏幕的像素密度，然后再用像素除以像素密度来得到屏幕的 dp 尺寸。</p>\n",
      "date_published": "2016-11-08T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Android"
      ]
    },
    {
      "title": "Android Studio FAQ",
      "url": "https://wafer.li/blog-corners/old-inventory/Android/AndroidStudio/Android%20Studio%20FAQ/",
      "id": "https://wafer.li/blog-corners/old-inventory/Android/AndroidStudio/Android%20Studio%20FAQ/",
      "summary": "<h2 id=\"_1-gitignore-文件\"> 1. .gitignore 文件</h2>\n<blockquote>\n<p>如果你想要尽量的减少冲突，就<strong>不要直接使用</strong> Android Studio 默认生成的 <code>.gitignore</code> 文件，而是要在 <code>.gitignore</code> 中添加一些项目，或者直接导入其内置的许多模板。</p>\n</blockquote>\n",
      "content_html": "<h2 id=\"_1-gitignore-文件\"> 1. .gitignore 文件</h2>\n<blockquote>\n<p>如果你想要尽量的减少冲突，就<strong>不要直接使用</strong> Android Studio 默认生成的 <code>.gitignore</code> 文件，而是要在 <code>.gitignore</code> 中添加一些项目，或者直接导入其内置的许多模板。</p>\n</blockquote>\n\n<p>这里有一些应该加入的项目:</p>\n<ol>\n<li>\n<p><code>/.idea</code> 文件夹</p>\n<blockquote>\n<p><code>/.idea</code> 文件夹是 <code>gradle</code> 导入工程时生成的文件夹，它会被 gradle <strong>自动生成</strong>。在添加一个新依赖的时候，build 流程会自动添加依赖项的描述到 <code>/.idea</code> 文件夹里，所以很容易会引起冲突。</p>\n</blockquote>\n</li>\n<li>\n<p><code>.iml</code> 文件</p>\n<blockquote>\n<p><code>iml</code> 文件会在当你导入 gradle 工程的时候被 gradle <strong>自动生成</strong>，和上面一样，gradle 会自动添加一些描述到 <code>.iml</code> 文件里面，其中也包括了依赖项的描述</p>\n</blockquote>\n</li>\n<li>\n<p><code>/gradle.properties</code> 文件</p>\n<blockquote>\n<p>这个文件经常只保存了 gradle 的代理设置，1.5 版本以后的 Anroid Studio 会在当你进行 Gradle Sync 的时候自动将 Android Studio 的代理设置导入到这个文件里面。\n<strong>如果组员各自使用不同的代理设置，那么就应该忽略它</strong></p>\n</blockquote>\n</li>\n<li>\n<p>补充1：别忘记执行 <code>git rm -r --cached</code> 来删除 git 版本树中的版本</p>\n<blockquote>\n<p><code>.gitigonre</code> 仅对那些没有追踪的文件起作用，如果已经被 git 系统追踪了，仅将其加入到 <code>.gitignore</code> 是没有作用的。</p>\n</blockquote>\n</li>\n<li>\n<p>补充2：当你需要忽略一个文件夹的时候，别忘记添加 <code>/</code> 后缀</p>\n<blockquote>\n<p>例如：当你需要忽略 <code>.gradle</code> 文件夹的时候，你需要输入 <code>/.gradle/</code> ，这样，它才能忽略整个文件夹，否则，当你删除这个文件夹，然后被重新生成时， Android Studio 就不会识别出它是已经忽略掉的了。</p>\n</blockquote>\n</li>\n</ol>\n<p>综上所述，这里是我的 <code>.gitignore</code> 例子。</p>\n<div><pre><code>*.iml\n/.idea/\n/gradle.properties\n.gradle/\n/local.properties\n.DS_Store\n/build\n/captures\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id=\"_2-当出现-cannot-resolve-symbols-时\"> 2. 当出现 cannot resolve symbols 时</h2>\n<p>首先，你需要检查依赖是否已经被正确加载了，如果依赖项没有问题\n那么请依照以下流程来尝试进行修复</p>\n<ol>\n<li>\n<p>检查使用的 gradle 是否正确</p>\n<blockquote>\n<p>在 <code>Settings</code> 中检查 <code>gradle</code> 的选项，一般推荐使用 Anroid Studio 内置的 gradle。</p>\n</blockquote>\n</li>\n<li>\n<p>删除本地的代码库，重新克隆一份</p>\n</li>\n<li>\n<p>尝试点击 <code>Gradle Sync</code> 按钮进行 <code>Gradle Sync</code></p>\n</li>\n<li>\n<p>在 <code>Build</code> 菜单选择 <code>Clean the Project</code></p>\n</li>\n<li>\n<p>在 <code>Build</code> 菜单选择 <code>Rebuild the Project</code></p>\n</li>\n</ol>\n<blockquote>\n<p>需要注意的是，当你克隆完毕后，使用 <code>Open existing Project</code> 或者 <code>Import from gradle</code> 来打开工程，而不是在 <code>recently projects</code> 中打开。</p>\n</blockquote>\n<h2 id=\"_3-当不能识别出-android-框架时\"> 3. 当不能识别出 Android 框架时</h2>\n<blockquote>\n<p>如果你的 Android Studio 不能识别出 Gradle 或者整个 Anroid 框架的时候，例如，导航条没有 <code>app</code> module，在 Build 菜单只有一点点东西的时候。</p>\n</blockquote>\n<p><img src=\"https://ww2.sinaimg.cn/large/8c1fca6bjw1eyyb1dvnnmj20zk0qotb3.jpg\" alt=\"Poisonous\" /></p>\n<span style=\"font-size:1.5em;font-weight:bold\">\n备份你的代码库到远端，然后重新克隆它。\n当你克隆完毕的时候， rebuild project.\n</span>\n",
      "image": "https://ww2.sinaimg.cn/large/8c1fca6bjw1eyyb1dvnnmj20zk0qotb3.jpg",
      "date_published": "2016-10-14T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Android"
      ]
    },
    {
      "title": "Android Studio 卡 buliding gradle info",
      "url": "https://wafer.li/blog-corners/old-inventory/Android/AndroidStudio/Android%20Studio%20%E5%8D%A1%20buliding%20gradle%20info/",
      "id": "https://wafer.li/blog-corners/old-inventory/Android/AndroidStudio/Android%20Studio%20%E5%8D%A1%20buliding%20gradle%20info/",
      "summary": "<h2 id=\"_1-问题\"> 1. 问题</h2>\n<p>有时候第一次使用 Android Studio 打开某个项目时，会出现项目一直卡在 <code>buliding gradle info</code> 的问题，如图所示：</p>\n<center>![Building project  info](https://i4.buimg.com/563021/c4ee7577d3d0bcde.jpg)</center>\n<p>此问题的原因在于：<strong>用于下载 gradle 本体的网站被墙了，导致下载速度缓慢。</strong></p>\n",
      "content_html": "<h2 id=\"_1-问题\"> 1. 问题</h2>\n<p>有时候第一次使用 Android Studio 打开某个项目时，会出现项目一直卡在 <code>buliding gradle info</code> 的问题，如图所示：</p>\n<center>![Building project  info](https://i4.buimg.com/563021/c4ee7577d3d0bcde.jpg)</center>\n<p>此问题的原因在于：<strong>用于下载 gradle 本体的网站被墙了，导致下载速度缓慢。</strong></p>\n\n<h2 id=\"_2-解决办法\"> 2. 解决办法</h2>\n<p>打开 gradle 的 <code>gradle.properties</code>，然后直接从里面的链接下载 gradle，放入 gradle 的文件夹中即可。</p>\n<p>当然，最靠谱的方法还是去翻墙啦。</p>\n",
      "image": "https://i4.buimg.com/563021/c4ee7577d3d0bcde.jpg",
      "date_published": "2016-10-14T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Android"
      ]
    },
    {
      "title": "AsyncTask with Callback",
      "url": "https://wafer.li/blog-corners/old-inventory/Android/AsyncTask%20with%20Callback/",
      "id": "https://wafer.li/blog-corners/old-inventory/Android/AsyncTask%20with%20Callback/",
      "summary": "<h2 id=\"_1-定义一个用于回调的接口\"> 1. 定义一个用于回调的接口</h2>\n<div><pre><code><span>public</span> <span>interface</span> <span>TaskListener</span> <span>{</span>\n    <span>void</span> <span>onResult</span><span>(</span><span>Object</span> result<span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div>",
      "content_html": "<h2 id=\"_1-定义一个用于回调的接口\"> 1. 定义一个用于回调的接口</h2>\n<div><pre><code><span>public</span> <span>interface</span> <span>TaskListener</span> <span>{</span>\n    <span>void</span> <span>onResult</span><span>(</span><span>Object</span> result<span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div>\n<h2 id=\"_2-添加-listener-作为-task-的类成员\"> 2. 添加 Listener 作为 Task 的类成员</h2>\n<div><pre><code><span>class</span> <span>Task</span> <span>extends</span> <span>AsyncTask</span><span><span>&lt;</span><span>Void</span><span>,</span><span>Void</span><span>,</span><span>Object</span><span>></span></span> <span>{</span>\n\n    <span>private</span> <span>TaskListener</span> taskListener<span>;</span>\n\n    <span>public</span> <span>void</span> <span>setListener</span><span>(</span><span>TaskListener</span> taskListener<span>)</span> <span>{</span>\n        <span>this</span><span>.</span>taskListener <span>=</span> taskListener<span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id=\"_3-通过接口成员调用其方法\"> 3.通过接口成员调用其方法</h2>\n<blockquote>\n<p>为保证线程安全，应该在 Task 的 <code>onPostExecute()</code> 方法中完成该操作</p>\n</blockquote>\n<div><pre><code><span>protected</span> <span>Object</span> <span>onPostExecute</span><span>(</span><span>Object</span> result<span>)</span> <span>{</span>\n    taskListener<span>.</span><span>onResult</span><span>(</span>result<span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id=\"_4-activity-实现该接口处理回调数据\"> 4. Activity 实现该接口处理回调数据</h2>\n<div><pre><code><span>public</span> <span>class</span> <span>MainTread</span> <span>extends</span> <span>Activity</span> implement <span>TaskListener</span><span>{</span>\n    <span>//your stuff</span>\n    <span>Task</span> task <span>=</span> <span>new</span> <span>Task</span><span>(</span><span>this</span><span>)</span><span>;</span>\n    task<span>.</span><span>execute</span><span>(</span><span>)</span><span>;</span>\n\n    <span>@Override</span>\n    <span>public</span> <span>void</span> <span>onResult</span><span>(</span><span>Object</span> result<span>)</span><span>{</span>\n        <span>//UPDATE YOUR UI HERE</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div>",
      "date_published": "2016-10-14T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Android"
      ]
    },
    {
      "title": "Butter Knife",
      "url": "https://wafer.li/blog-corners/old-inventory/Android/Butter%20Knife/",
      "id": "https://wafer.li/blog-corners/old-inventory/Android/Butter%20Knife/",
      "summary": "<h2 id=\"_1-安装与配置\"> 1. 安装与配置</h2>\n<h3 id=\"_1-1-添加-gradle-依赖\"> 1.1 添加 Gradle 依赖</h3>\n<p>在 <code>app/build.gradle</code> 中加入如下语句</p>\n<div><pre><code>compile <span>'com.jakewharton:butterknife:7.0.1'</span>\n</code></pre>\n<div><span>1</span><br></div></div>",
      "content_html": "<h2 id=\"_1-安装与配置\"> 1. 安装与配置</h2>\n<h3 id=\"_1-1-添加-gradle-依赖\"> 1.1 添加 Gradle 依赖</h3>\n<p>在 <code>app/build.gradle</code> 中加入如下语句</p>\n<div><pre><code>compile <span>'com.jakewharton:butterknife:7.0.1'</span>\n</code></pre>\n<div><span>1</span><br></div></div>\n<h3 id=\"_1-2-压制-lint-warnning\"> 1.2 压制 Lint Warnning</h3>\n<p>在使用 Butter Knife 时，由于它是动态生成代码，Lint 由于没有检测到代码，所以会提示一些错误的警告，所以需要压制 Lint Warning。</p>\n<p>在 <code>app/build.gradle</code> 中添加如下代码</p>\n<div><pre><code>lintOptions <span>{</span>\n  disable <span>'InvalidPackage'</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"_1-3-配置-proguard\"> 1.3 配置 ProGuard</h3>\n<p>由于 Android 在 Release apk 时，会使用 ProGuard 来进行代码优化和混淆，但是它很可能无法正确区分所需要的代码，从而将 Butter Knife 的代码删除，所以要配置一些 Keep 选项。</p>\n<p>在 <code>proguard.cfg</code> 文件中配置</p>\n<div><pre><code>-keep class butterknife.** { *; }\n-dontwarn butterknife.internal.**\n-keep class **$$ViewBinder { *; }\n\n-keepclasseswithmembernames class * {\n    @butterknife.* &lt;fields&gt;;\n}\n\n-keepclasseswithmembernames class * {\n    @butterknife.* &lt;methods&gt;;\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h2 id=\"_2-使用\"> 2. 使用</h2>\n<p>Butter Knife 最大的好处就是使用注解式开发，从而减少大量重复冗余的代码。</p>\n<h3 id=\"_2-1-绑定视图\"> 2.1 绑定视图</h3>\n<p>这里需要注意的是，<strong>重点是要调用 <code>ButterKnife.bind()</code> 方法</strong>，否则是无法起作用的。</p>\n<h4 id=\"_2-1-1-在-activity-中进行绑定\"> 2.1.1 在 Activity 中进行绑定</h4>\n<p>使用 <code>@Bind</code> 注释，并传入相应的视图 <code>id</code>，就可以将一个组件和它的视图快速绑定</p>\n<p>例如：</p>\n<div><pre><code><span>class</span> <span>ExampleActivity</span> <span>extends</span> <span>Activity</span> <span>{</span>\n  <span>@Bind</span><span>(</span><span>R</span><span>.</span>id<span>.</span>title<span>)</span> <span>TextView</span> title<span>;</span>\n  <span>@Bind</span><span>(</span><span>R</span><span>.</span>id<span>.</span>subtitle<span>)</span> <span>TextView</span> subtitle<span>;</span>\n  <span>@Bind</span><span>(</span><span>R</span><span>.</span>id<span>.</span>footer<span>)</span> <span>TextView</span> footer<span>;</span>\n\n  <span>@Override</span>\n  <span>public</span> <span>void</span> <span>onCreate</span><span>(</span><span>Bundle</span> savedInstanceState<span>)</span> <span>{</span>\n    <span>super</span><span>.</span><span>onCreate</span><span>(</span>savedInstanceState<span>)</span><span>;</span>\n    <span>setContentView</span><span>(</span><span>R</span><span>.</span>layout<span>.</span>simple_activity<span>)</span><span>;</span>\n    <span>// 注意，这个必须在 setContentView之后执行</span>\n    <span>ButterKnife</span><span>.</span><span>bind</span><span>(</span><span>this</span><span>)</span><span>;</span>\n    <span>// TODO Use fields...</span>\n  <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>注意， Butter Knife 的原理是通过生成代码来实现的，上面的使用相当于（生成了）以下代码</p>\n<div><pre><code><span>public</span> <span>void</span> <span>bind</span><span>(</span><span>ExampleActivity</span> activity<span>)</span> <span>{</span>\n  activity<span>.</span>subtitle <span>=</span> <span>(</span><span><span>android<span>.</span>widget<span>.</span></span>TextView</span><span>)</span> activity<span>.</span><span>findViewById</span><span>(</span><span>2130968578</span><span>)</span><span>;</span>\n  activity<span>.</span>footer <span>=</span> <span>(</span><span><span>android<span>.</span>widget<span>.</span></span>TextView</span><span>)</span> activity<span>.</span><span>findViewById</span><span>(</span><span>2130968579</span><span>)</span><span>;</span>\n  activity<span>.</span>title <span>=</span> <span>(</span><span><span>android<span>.</span>widget<span>.</span></span>TextView</span><span>)</span> activity<span>.</span><span>findViewById</span><span>(</span><span>2130968577</span><span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h4 id=\"_2-1-2-在-fragment-中进行绑定\"> 2.1.2 在 Fragment 中进行绑定</h4>\n<p>Butter Knife 提供了其 <code>bind()</code> 方法的几个重载，也可以通过接受一个根布局来进行绑定，所以在 Fragment 中应如下使用：</p>\n<div><pre><code><span>public</span> <span>class</span> <span>FancyFragment</span> <span>extends</span> <span>Fragment</span> <span>{</span>\n  <span>@Bind</span><span>(</span><span>R</span><span>.</span>id<span>.</span>button1<span>)</span> <span>Button</span> button1<span>;</span>\n  <span>@Bind</span><span>(</span><span>R</span><span>.</span>id<span>.</span>button2<span>)</span> <span>Button</span> button2<span>;</span>\n\n  <span>@Override</span> <span>public</span> <span>View</span> <span>onCreateView</span><span>(</span><span>LayoutInflater</span> inflater<span>,</span> <span>ViewGroup</span> container<span>,</span> <span>Bundle</span> savedInstanceState<span>)</span> <span>{</span>\n    <span>View</span> view <span>=</span> inflater<span>.</span><span>inflate</span><span>(</span><span>R</span><span>.</span>layout<span>.</span>fancy_fragment<span>,</span> container<span>,</span> <span>false</span><span>)</span><span>;</span>\n    <span>// 通过提供一个根布局实现 Fragment 的绑定</span>\n    <span>ButterKnife</span><span>.</span><span>bind</span><span>(</span><span>this</span><span>,</span> view<span>)</span><span>;</span>\n    <span>// TODO Use fields...</span>\n    <span>return</span> view<span>;</span>\n  <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h4 id=\"_2-1-3-在-viewholder-中实现绑定\"> 2.1.3 在 ViewHolder 中实现绑定</h4>\n<p>Android APP 中， ListView 或 RecyclerView 是最为常见的视图组件，对此，Butter Knife 也实现了 ViewHolder 的绑定方法。如下：</p>\n<p>这里使用的是 ListView, 但是由于绑定的实现都在 ViewHolder 内部类中，因而 RecyclerView 的使用同理。</p>\n<div><pre><code><span>public</span> <span>class</span> <span>MyAdapter</span> <span>extends</span> <span>BaseAdapter</span> <span>{</span>\n  <span>@Override</span> <span>public</span> <span>View</span> <span>getView</span><span>(</span><span>int</span> position<span>,</span> <span>View</span> view<span>,</span> <span>ViewGroup</span> parent<span>)</span> <span>{</span>\n    <span>ViewHolder</span> holder<span>;</span>\n    <span>if</span> <span>(</span>view <span>!=</span> <span>null</span><span>)</span> <span>{</span>\n      holder <span>=</span> <span>(</span><span>ViewHolder</span><span>)</span> view<span>.</span><span>getTag</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span> <span>else</span> <span>{</span>\n      view <span>=</span> inflater<span>.</span><span>inflate</span><span>(</span><span>R</span><span>.</span>layout<span>.</span>whatever<span>,</span> parent<span>,</span> <span>false</span><span>)</span><span>;</span>\n      holder <span>=</span> <span>new</span> <span>ViewHolder</span><span>(</span>view<span>)</span><span>;</span>\n      view<span>.</span><span>setTag</span><span>(</span>holder<span>)</span><span>;</span>\n    <span>}</span>\n\n    holder<span>.</span>name<span>.</span><span>setText</span><span>(</span><span>\"John Doe\"</span><span>)</span><span>;</span>\n    <span>// etc...</span>\n\n    <span>return</span> view<span>;</span>\n  <span>}</span>\n\n  <span>static</span> <span>class</span> <span>ViewHolder</span> <span>{</span>\n    <span>@Bind</span><span>(</span><span>R</span><span>.</span>id<span>.</span>title<span>)</span> <span>TextView</span> name<span>;</span>\n    <span>@Bind</span><span>(</span><span>R</span><span>.</span>id<span>.</span>job_title<span>)</span> <span>TextView</span> jobTitle<span>;</span>\n\n    <span>public</span> <span>ViewHolder</span><span>(</span><span>View</span> view<span>)</span> <span>{</span>\n      <span>ButterKnife</span><span>.</span><span>bind</span><span>(</span><span>this</span><span>,</span> view<span>)</span><span>;</span>\n    <span>}</span>\n  <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div><h4 id=\"_2-1-4-其他情形\"> 2.1.4 其他情形</h4>\n<p>实际上，@Bind 注解只是起到了一个引入视图的作用，真正起到作用的是 <code>ButterKnife.bind</code> 方法，这一方法可以被放在任何你想使用 <code>findViewById</code> 的地方</p>\n<h4 id=\"_2-1-5-其他绑定-api\"> 2.1.5 其他绑定 API</h4>\n<ol>\n<li>\n<p>ButterKnife.bind(this, activity)</p>\n<blockquote>\n<p>这个方法可以在将导入的视图 xml 在任何地方进行绑定，如果采用了类似 <strong>MVC</strong> 的编程模式，那么就可以使用这个方法在 <code>Controller</code> 中进行绑定</p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"_2-1-6-绑定-view-列表\"> 2.1.6 绑定 View 列表</h4>\n<p>你可以一次性将多个 View 绑定到一个 List 或者数组上</p>\n<div><pre><code><span>@Bind</span><span>(</span><span>{</span> <span>R</span><span>.</span>id<span>.</span>first_name<span>,</span> <span>R</span><span>.</span>id<span>.</span>middle_name<span>,</span> <span>R</span><span>.</span>id<span>.</span>last_name <span>}</span><span>)</span>\n<span>List</span><span><span>&lt;</span><span>EditText</span><span>></span></span> nameViews<span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>可以使用统一的 apply() 方法来对 View 进行统一的操作</p>\n<div><pre><code><span>ButterKnife</span><span>.</span><span>apply</span><span>(</span>nameViews<span>,</span> DISABLE<span>)</span><span>;</span>\n<span>ButterKnife</span><span>.</span><span>apply</span><span>(</span>nameViews<span>,</span> ENABLED<span>,</span> <span>false</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><blockquote>\n<p>上面的代码实际上就相当于对列表中的每一个元素都采用这样的操作。\n注意，上面的 DISABLE 和 ENABLE 需要定义 Action 和 Setter 的接口方法之后才能有效</p>\n</blockquote>\n<div><pre><code><span>static</span> <span>final</span> <span>ButterKnife<span>.</span>Action</span><span><span>&lt;</span><span>View</span><span>></span></span> DISABLE <span>=</span> <span>new</span> <span>ButterKnife<span>.</span>Action</span><span><span>&lt;</span><span>View</span><span>></span></span><span>(</span><span>)</span> <span>{</span>\n  <span>@Override</span> <span>public</span> <span>void</span> <span>apply</span><span>(</span><span>View</span> view<span>,</span> <span>int</span> index<span>)</span> <span>{</span>\n    view<span>.</span><span>setEnabled</span><span>(</span><span>false</span><span>)</span><span>;</span>\n  <span>}</span>\n<span>}</span><span>;</span>\n<span>static</span> <span>final</span> <span>ButterKnife<span>.</span>Setter</span><span><span>&lt;</span><span>View</span><span>,</span> <span>Boolean</span><span>></span></span> ENABLED <span>=</span> <span>new</span> <span>ButterKnife<span>.</span>Setter</span><span><span>&lt;</span><span>View</span><span>,</span> <span>Boolean</span><span>></span></span><span>(</span><span>)</span> <span>{</span>\n  <span>@Override</span> <span>public</span> <span>void</span> <span>set</span><span>(</span><span>View</span> view<span>,</span> <span>Boolean</span> value<span>,</span> <span>int</span> index<span>)</span> <span>{</span>\n    view<span>.</span><span>setEnabled</span><span>(</span>value<span>)</span><span>;</span>\n  <span>}</span>\n<span>}</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>同时，也可以将 Android 的 Property 应用到 apply() 方法中</p>\n<div><pre><code><span>ButterKnife</span><span>.</span><span>apply</span><span>(</span>nameViews<span>,</span> <span>View</span><span>.</span>ALPHA<span>,</span> <span>0.0f</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_2-2-绑定监听器\"> 2.2 绑定监听器</h3>\n<p>Butter Knife 也同时提供了绑定监听器的方法；\n通过使用 @OnClick 注解，在随后的方法中实现监听处理即可。</p>\n<div><pre><code><span>@OnClick</span><span>(</span><span>R</span><span>.</span>id<span>.</span>submit<span>)</span>\n<span>public</span> <span>void</span> <span>submit</span><span>(</span><span>View</span> view<span>)</span> <span>{</span>\n  <span>// TODO submit data to server...</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>监听器的所有参数都是可选的</p>\n<div><pre><code><span>@OnClick</span><span>(</span><span>R</span><span>.</span>id<span>.</span>submit<span>)</span>\n<span>public</span> <span>void</span> <span>submit</span><span>(</span><span>)</span> <span>{</span>\n  <span>// TODO submit data to server...</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>定义一个其他的类型，Butter Knife 也能够识别，并进行自动 Cast</p>\n<blockquote>\n<p>为了尽量避免 Cast，所以应该尽量少使用这一种模式</p>\n</blockquote>\n<div><pre><code><span>@OnClick</span><span>(</span><span>R</span><span>.</span>id<span>.</span>submit<span>)</span>\n<span>public</span> <span>void</span> <span>sayHi</span><span>(</span><span>Button</span> button<span>)</span> <span>{</span>\n  button<span>.</span><span>setText</span><span>(</span><span>\"Hello!\"</span><span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>自定义的组件可以通过不传入 id 来实现监听器绑定</p>\n<div><pre><code><span>public</span> <span>class</span> <span>FancyButton</span> <span>extends</span> <span>Button</span> <span>{</span>\n  <span>@OnClick</span>\n  <span>public</span> <span>void</span> <span>onClick</span><span>(</span><span>)</span> <span>{</span>\n    <span>// TODO do something!</span>\n  <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>还可以绑定多个控件到同一个事件监听器上</p>\n<div><pre><code><span>@OnClick</span><span>(</span><span>{</span> <span>R</span><span>.</span>id<span>.</span>door1<span>,</span> <span>R</span><span>.</span>id<span>.</span>door2<span>,</span> <span>R</span><span>.</span>id<span>.</span>door3 <span>}</span><span>)</span>\n<span>public</span> <span>void</span> <span>pickDoor</span><span>(</span><span>DoorView</span> door<span>)</span> <span>{</span>\n  <span>if</span> <span>(</span>door<span>.</span><span>hasPrizeBehind</span><span>(</span><span>)</span><span>)</span> <span>{</span>\n    <span>Toast</span><span>.</span><span>makeText</span><span>(</span><span>this</span><span>,</span> <span>\"You win!\"</span><span>,</span> LENGTH_SHORT<span>)</span><span>.</span><span>show</span><span>(</span><span>)</span><span>;</span>\n  <span>}</span> <span>else</span> <span>{</span>\n    <span>Toast</span><span>.</span><span>makeText</span><span>(</span><span>this</span><span>,</span> <span>\"Try again\"</span><span>,</span> LENGTH_SHORT<span>)</span><span>.</span><span>show</span><span>(</span><span>)</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h3 id=\"_2-3-取消绑定\"> 2.3 取消绑定</h3>\n<p>这个步骤通常在 Fragment 的使用中出现，由于 Fragment 的生命周期和 Activity 不同，我们可能需要在 <code>onCreateView()</code> 中构建视图，然后在 <code>onDestroyView()</code> 中将视图进行销毁。\n这时候，我们就需要在 <code>onDestroyView()</code> 中将视图取消绑定</p>\n<div><pre><code><span>public</span> <span>class</span> <span>FancyFragment</span> <span>extends</span> <span>Fragment</span> <span>{</span>\n  <span>@Bind</span><span>(</span><span>R</span><span>.</span>id<span>.</span>button1<span>)</span> <span>Button</span> button1<span>;</span>\n  <span>@Bind</span><span>(</span><span>R</span><span>.</span>id<span>.</span>button2<span>)</span> <span>Button</span> button2<span>;</span>\n\n  <span>@Override</span> <span>public</span> <span>View</span> <span>onCreateView</span><span>(</span><span>LayoutInflater</span> inflater<span>,</span> <span>ViewGroup</span> container<span>,</span> <span>Bundle</span> savedInstanceState<span>)</span> <span>{</span>\n    <span>View</span> view <span>=</span> inflater<span>.</span><span>inflate</span><span>(</span><span>R</span><span>.</span>layout<span>.</span>fancy_fragment<span>,</span> container<span>,</span> <span>false</span><span>)</span><span>;</span>\n    <span>ButterKnife</span><span>.</span><span>bind</span><span>(</span><span>this</span><span>,</span> view<span>)</span><span>;</span>\n    <span>// TODO Use fields...</span>\n    <span>return</span> view<span>;</span>\n  <span>}</span>\n\n  <span>@Override</span> <span>public</span> <span>void</span> <span>onDestroyView</span><span>(</span><span>)</span> <span>{</span>\n    <span>super</span><span>.</span><span>onDestroyView</span><span>(</span><span>)</span><span>;</span>\n    <span>ButterKnife</span><span>.</span><span>unbind</span><span>(</span><span>this</span><span>)</span><span>;</span>   <span>// 在这里取消绑定</span>\n  <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><h3 id=\"_2-4-可选的绑定\"> 2.4 可选的绑定</h3>\n<p>在默认情况下， <code>@Bind</code> 和监听器的绑定都是需要的，如果目标 View 没有找到的话，Butter Knife 将会抛出一个异常。\n可以通过设置 <code>@Nullable</code> 注解来取消这个绑定</p>\n<blockquote>\n<p>注意，<code>@Nullable</code> 注解来源于 Android 的 <code>support-annotations</code> 库</p>\n</blockquote>\n<div><pre><code><span>@Nullable</span> <span>@Bind</span><span>(</span><span>R</span><span>.</span>id<span>.</span>might_not_be_there<span>)</span> <span>TextView</span> mightNotBeThere<span>;</span>\n\n<span>@Nullable</span> <span>@OnClick</span><span>(</span><span>R</span><span>.</span>id<span>.</span>maybe_missing<span>)</span> <span>void</span> <span>onMaybeMissingClicked</span><span>(</span><span>)</span> <span>{</span>\n  <span>// TODO ...</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id=\"_2-5-对于多个方法的监听器绑定\"> 2.5 对于多个方法的监听器绑定</h3>\n<p>当一个监听器拥有多个回调方法时，使用 <code>callback</code> 参数来指定所需要绑定的回调方法</p>\n<div><pre><code><span>@OnItemSelected</span><span>(</span><span>R</span><span>.</span>id<span>.</span>list_view<span>)</span>\n<span>void</span> <span>onItemSelected</span><span>(</span><span>int</span> position<span>)</span> <span>{</span>\n  <span>// TODO ...</span>\n<span>}</span>\n\n<span>@OnItemSelected</span><span>(</span>value <span>=</span> <span>R</span><span>.</span>id<span>.</span>maybe_missing<span>,</span> callback <span>=</span> NOTHING_SELECTED<span>)</span>\n<span>void</span> <span>onNothingSelected</span><span>(</span><span>)</span> <span>{</span>\n  <span>// TODO ...</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h3 id=\"_2-6-简化的-findviewbyid\"> 2.6 简化的 findViewById()</h3>\n<p>Butter Knife 同时还提供了一个简化版本的 <code>findViewById()</code> —— <code>findById()</code>；\n用这个方法可以在 <code>View</code>, <code>Acitivity</code>, <code>Dialog</code> 中找到想要的 View；\n同时，该方法通过泛型来对返回值进行转换，所以可以省去 <code>findViewById()</code> 的强制转换了。</p>\n<div><pre><code><span>View</span> view <span>=</span> <span>LayoutInflater</span><span>.</span><span>from</span><span>(</span>context<span>)</span><span>.</span><span>inflate</span><span>(</span><span>R</span><span>.</span>layout<span>.</span>thing<span>,</span> <span>null</span><span>)</span><span>;</span>\n<span>TextView</span> firstName <span>=</span> <span>ButterKnife</span><span>.</span><span>findById</span><span>(</span>view<span>,</span> <span>R</span><span>.</span>id<span>.</span>first_name<span>)</span><span>;</span>\n<span>TextView</span> lastName <span>=</span> <span>ButterKnife</span><span>.</span><span>findById</span><span>(</span>view<span>,</span> <span>R</span><span>.</span>id<span>.</span>last_name<span>)</span><span>;</span>\n<span>ImageView</span> photo <span>=</span> <span>ButterKnife</span><span>.</span><span>findById</span><span>(</span>view<span>,</span> <span>R</span><span>.</span>id<span>.</span>photo<span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div>",
      "date_published": "2016-10-14T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Android"
      ]
    },
    {
      "title": "Create Asserts Folder",
      "url": "https://wafer.li/blog-corners/old-inventory/Android/Create%20Asserts%20Folder/",
      "id": "https://wafer.li/blog-corners/old-inventory/Android/Create%20Asserts%20Folder/",
      "summary": "<h2 id=\"概述\"> 概述</h2>\n<p>Android 如何创建 Asserts 文件夹，用来存储一些需要内置在 app 里的大资源呢？</p>\n<p>步骤如下：</p>\n",
      "content_html": "<h2 id=\"概述\"> 概述</h2>\n<p>Android 如何创建 Asserts 文件夹，用来存储一些需要内置在 app 里的大资源呢？</p>\n<p>步骤如下：</p>\n\n<h2 id=\"_1-右边栏移动到-android-视图\"> 1. 右边栏移动到 Android 视图</h2>\n<p><img src=\"https://ooo.0o0.ooo/2016/10/17/5804f86dc041d.png\" alt=\"QQ20161018-0@2x\" /></p>\n<h2 id=\"_2-在-app-处右键\"> 2. 在 app 处右键</h2>\n<p><strong>New -&gt; Folder -&gt; Asserts Folder</strong></p>\n<p><img src=\"https://code2care.org/2015/create-assets-folder-in-android-studio/images//Click on New folder assets folder.png\" alt=\"\" /></p>\n<h2 id=\"_3-按照对话框提示进行即可\"> 3. 按照对话框提示进行即可</h2>\n<p><img src=\"https://code2care.org/2015/create-assets-folder-in-android-studio/images//Create a source root for assets which will be incuded in APK.png\" alt=\"\" /></p>\n",
      "image": "https://ooo.0o0.ooo/2016/10/17/5804f86dc041d.png",
      "date_published": "2016-10-18T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Android"
      ]
    },
    {
      "title": "Genymotion Problems and Solutions",
      "url": "https://wafer.li/blog-corners/old-inventory/Android/Genymotion%20Problems%20and%20Solutions/",
      "id": "https://wafer.li/blog-corners/old-inventory/Android/Genymotion%20Problems%20and%20Solutions/",
      "summary": "<h2 id=\"_1-简介\"> 1. 简介</h2>\n<p>这里是一些 Genymotion 安卓模拟器的问题解答集\n虽然这个工具很出名，但是由于它使用 VirtualBox 来实现一个 x86 的虚拟机，\n它在 Windows 上就显得有些烦人（和反人类）</p>\n",
      "content_html": "<h2 id=\"_1-简介\"> 1. 简介</h2>\n<p>这里是一些 Genymotion 安卓模拟器的问题解答集\n虽然这个工具很出名，但是由于它使用 VirtualBox 来实现一个 x86 的虚拟机，\n它在 Windows 上就显得有些烦人（和反人类）</p>\n\n<h2 id=\"_2-unable-connect-to-virtual-device\"> 2. Unable connect to virtual_device</h2>\n<p>当这个错误发生的时候，Genymotion 会让你在 VirtualBox 里面启动你的安卓虚拟机。请遵循这个执行，然后你就会获取到一个出错信息</p>\n<p>这里有一些已知的情况：</p>\n<h3 id=\"_2-1-virtual-host-error\"> 2.1 Virtual Host Error</h3>\n<p>如果你收到了一个关于 Virtual Host 的出错信息，那它将会像这样子：</p>\n<div><pre><code>Failed to open/create the internal network <span>'HostInterfaceNetworking-VirtualBox Host-Only Ethernet Adapter'</span> <span>(</span>VERR_INTNET_FLT_IF_NOT_FOUND<span>)</span>.\nFailed to attach the network LUN <span>(</span>VERR_INTNET_FLT_IF_NOT_FOUND<span>)</span>.\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>解决办法：</p>\n<p>解决办法很简单，根据这个 <a href=\"http://stackoverflow.com/questions/33725779/failed-to-open-create-the-internal-network-vagrant-on-windows10\" target=\"_blank\" rel=\"noopener noreferrer\">stackoverflow</a> :</p>\n<ol>\n<li>\n<p>打开 Windows 网络与共享中心</p>\n</li>\n<li>\n<p>点击<strong>更改适配器设置</strong></p>\n</li>\n<li>\n<p>右键 VirtualBox 建立的 VirtualBox Host only adapter</p>\n<blockquote>\n<p>这个通常可以在 VirtualBox 的你的虚拟机选项中的网络选项查看。\n也可以从 VirtualBox 的设置 -&gt; 网络中查看</p>\n</blockquote>\n</li>\n<li>\n<p>点击<strong>属性</strong></p>\n</li>\n<li>\n<p>勾选 &quot;VirtualBox NDIS6 Bridged Networking driver&quot;</p>\n</li>\n<li>\n<p>禁用并重新启用这个适配器</p>\n</li>\n</ol>\n<p><img src=\"https://i.stack.imgur.com/Tkkws.png\" alt=\"Solution for Virtual Host Error\" /></p>\n<blockquote>\n<p>When this error occurs, genymotion will ask you to start the virtual device on VirtualBox, plase follow the instruction, and then you will get a ERROR message.</p>\n</blockquote>\n<h2 id=\"_3-虚拟机链接不上网络\"> 3. 虚拟机链接不上网络</h2>\n<p>这个有时会让人挺困惑——“为什么我的虚拟机连不上网络呢？”</p>\n<p>解决办法：</p>\n<p>其实并不是什么大事，在虚拟机中打开 wifi 选项，然后<strong>直接连接里面的 wifi</strong> 即可</p>\n<blockquote>\n<p>它<strong>不会连接到真实的 wifi</strong>，而仅仅是虚拟网络</p>\n</blockquote>\n",
      "image": "https://i.stack.imgur.com/Tkkws.png",
      "date_published": "2016-10-14T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Android"
      ]
    },
    {
      "title": "Material Drawer Tint Icon",
      "url": "https://wafer.li/blog-corners/old-inventory/Android/MaterailDrawer/Material%20Drawer%20Tint%20Icon/",
      "id": "https://wafer.li/blog-corners/old-inventory/Android/MaterailDrawer/Material%20Drawer%20Tint%20Icon/",
      "summary": "<p>Material Drawer 是 GitHub 上有名的 Android Navigation Drawer 的实现库，目前有 6000 左右个星，充分说明它的流行和稳定性。</p>\n<p>这里来说说它的 Account Header 的 Profile Icon 的染色问题。</p>\n<p>目前，对于透明背景的图片，Profile Item 不会对背景进行染色；这样就可能导致在有背景图的时候，对于这种 Icon 有看不清的问题。</p>\n<p>作者对此表示不想修复，于是提供了一个 workaround 进行图片的染色。</p>\n<p>以下的 Kotlin 就是对一个默认的用户图标进行染色，然后返回染色后的 <code>Drawable</code> 的代码</p>\n",
      "content_html": "<p>Material Drawer 是 GitHub 上有名的 Android Navigation Drawer 的实现库，目前有 6000 左右个星，充分说明它的流行和稳定性。</p>\n<p>这里来说说它的 Account Header 的 Profile Icon 的染色问题。</p>\n<p>目前，对于透明背景的图片，Profile Item 不会对背景进行染色；这样就可能导致在有背景图的时候，对于这种 Icon 有看不清的问题。</p>\n<p>作者对此表示不想修复，于是提供了一个 workaround 进行图片的染色。</p>\n<p>以下的 Kotlin 就是对一个默认的用户图标进行染色，然后返回染色后的 <code>Drawable</code> 的代码</p>\n\n<div><pre><code><span>fun</span> <span>getTintDefaultProfileIcon</span><span>(</span>activity<span>:</span> Activity<span>)</span><span>:</span> LayerDrawable <span>{</span>\n\n    <span>val</span> res <span>=</span> activity<span>.</span>resources\n\n    <span>val</span> background <span>=</span> <span>ShapeDrawable</span><span>(</span><span>)</span>\n    background<span>.</span>paint<span>.</span>color <span>=</span> res<span>.</span><span>getColor</span><span>(</span>R<span>.</span>color<span>.</span>default_icon_bg<span>,</span> activity<span>.</span>theme<span>)</span>\n\n    <span>val</span> icon <span>=</span> res<span>.</span><span>getDrawable</span><span>(</span>R<span>.</span>drawable<span>.</span>default_user_icon<span>,</span> activity<span>.</span>theme<span>)</span>\n\n    <span>return</span> <span>LayerDrawable</span><span>(</span><span>arrayOf</span><span>(</span>background<span>,</span> icon<span>)</span><span>)</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div>",
      "date_published": "2016-11-08T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Android"
      ]
    },
    {
      "title": "Material Drawer Tutorial",
      "url": "https://wafer.li/blog-corners/old-inventory/Android/MaterailDrawer/Material%20Drawer%20Tutorial/",
      "id": "https://wafer.li/blog-corners/old-inventory/Android/MaterailDrawer/Material%20Drawer%20Tutorial/",
      "summary": "<h2 id=\"添加依赖\"> 添加依赖</h2>\n<p>按照<a href=\"https://github.com/mikepenz/MaterialDrawer\" target=\"_blank\" rel=\"noopener noreferrer\">官方网站</a>上的依赖添加即可。</p>\n<p>不过需要注意的是，必须等到 <code>MavenCentral</code> <strong>同步了最新版本</strong>才能使用最新版本，否则请退回前一个版本。</p>\n<p>不然的话就要自己管理 Material Drawer 的依赖了。</p>\n",
      "content_html": "<h2 id=\"添加依赖\"> 添加依赖</h2>\n<p>按照<a href=\"https://github.com/mikepenz/MaterialDrawer\" target=\"_blank\" rel=\"noopener noreferrer\">官方网站</a>上的依赖添加即可。</p>\n<p>不过需要注意的是，必须等到 <code>MavenCentral</code> <strong>同步了最新版本</strong>才能使用最新版本，否则请退回前一个版本。</p>\n<p>不然的话就要自己管理 Material Drawer 的依赖了。</p>\n\n<h2 id=\"建立-drawer\"> 建立 Drawer</h2>\n<h3 id=\"最简单的版本\"> 最简单的版本</h3>\n<div><pre><code><span>new</span> <span>DrawerBuilder</span><span>(</span><span>)</span><span>.</span><span>withActivity</span><span>(</span><span>this</span><span>)</span><span>.</span><span>build</span><span>(</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"带有汉堡包的版本\"> 带有汉堡包的版本</h3>\n<div><pre><code><span>Drawer</span> drawer <span>=</span> <span>new</span> <span>DrawerBuilder</span><span>(</span><span>)</span>\n                            <span>.</span><span>withActivity</span><span>(</span><span>this</span><span>)</span>\n                            <span>.</span><span>withToolbar</span><span>(</span>toolbar<span>)</span>\n                            <span>.</span><span>withActionbarToggle</span><span>(</span><span>true</span><span>)</span>\n                            <span>.</span><span>build</span><span>(</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h4 id=\"汉堡包会动的版本\"> 汉堡包会动的版本</h4>\n<div><pre><code><span>Drawer</span> drawer <span>=</span> <span>new</span> <span>DrawerBuilder</span><span>(</span><span>)</span>\n                        <span>.</span><span>withActivity</span><span>(</span><span>this</span><span>)</span>\n                        <span>.</span><span>withToolbar</span><span>(</span>toolbar<span>)</span>\n                        <span>.</span><span>withActionbarToggle</span><span>(</span><span>true</span><span>)</span>\n                        <span>.</span><span>withActionBarDrawerToggleAnimated</span><span>(</span><span>true</span><span>)</span>\n                        <span>.</span><span>build</span><span>(</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h3 id=\"带有-header-的版本\"> 带有 Header 的版本</h3>\n<div><pre><code><span>Drawer</span> drawer <span>=</span> <span>new</span> <span>DrawerBuilder</span><span>(</span><span>)</span>\n                            <span>.</span><span>withActivity</span><span>(</span><span>this</span><span>)</span>\n                            <span>.</span><span>withAccountHeader</span><span>(</span>accountHeader<span>)</span>\n                            <span>// ...</span>\n                            <span>.</span><span>build</span><span>(</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id=\"调整宽度\"> 调整宽度</h3>\n<p>可以通过 <code>DrawerBuilder</code> 中的 <code>withDrawerWidth*()</code> 来调整宽度。</p>\n<p>其中 <code>*</code> 可以是 <code>dp</code> 也可以是 <code>px</code></p>\n<div><pre><code><span>Drawer</span> drawer <span>=</span> <span>new</span> <span>DrawerBuilder</span><span>(</span><span>)</span>\n                        <span>.</span><span>withActivity</span><span>(</span><span>this</span><span>)</span>\n                        <span>.</span><span>withToolbar</span><span>(</span>toolbar<span>)</span>\n                        <span>.</span><span>withActionbarToggle</span><span>(</span><span>true</span><span>)</span>\n                        <span>.</span><span>withActionBarDrawerToggleAnimated</span><span>(</span><span>true</span><span>)</span>\n                        <span>.</span><span>withDrawerWidthDp</span><span>(</span><span>100</span><span>)</span>\n                        <span>.</span><span>build</span><span>(</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id=\"建立-accountheader\"> 建立 AccountHeader</h2>\n<p>上面演示了如何建立带有 Header 的版本，但是，其中的 <code>accountHeader</code> 也是要我们自己建立和配置的。</p>\n<h3 id=\"最简单的版本-2\"> 最简单的版本</h3>\n<div><pre><code><span>AccontHeader</span> accountHeader <span>=</span> <span>new</span> <span>AccountHeaderBuilder</span><span>(</span><span>)</span>\n                                <span>.</span><span>withActivity</span><span>(</span><span>this</span><span>)</span>\n                                <span>.</span><span>withHeaderBackground</span><span>(</span><span>R</span><span>.</span>drawable<span>.</span>header<span>)</span>\n                                <span>.</span><span>build</span><span>(</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id=\"单个账户时关闭下拉菜单\"> 单个账户时关闭下拉菜单</h3>\n<div><pre><code>builder<span>.</span><span>withSelectionListEnabledForSingleProfile</span><span>(</span><span>false</span><span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div>",
      "date_published": "2016-11-08T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Android"
      ]
    },
    {
      "title": "RecyclerView",
      "url": "https://wafer.li/blog-corners/old-inventory/Android/RecyclerView/",
      "id": "https://wafer.li/blog-corners/old-inventory/Android/RecyclerView/",
      "summary": "<h2 id=\"_1-一般的使用\"> 1. 一般的使用</h2>\n<h3 id=\"_1-1-添加编译依赖\"> 1.1 添加编译依赖</h3>\n<div><pre><code>compile &#39;com.android.support:recyclerview-v7:+&#39;\n</code></pre>\n<div><span>1</span><br></div></div>",
      "content_html": "<h2 id=\"_1-一般的使用\"> 1. 一般的使用</h2>\n<h3 id=\"_1-1-添加编译依赖\"> 1.1 添加编译依赖</h3>\n<div><pre><code>compile &#39;com.android.support:recyclerview-v7:+&#39;\n</code></pre>\n<div><span>1</span><br></div></div>\n<h3 id=\"_1-2-界面的基本设置\"> 1.2 界面的基本设置</h3>\n<ol>\n<li>\n<p>将 RecyclerView 加入到 <code>layout.xml</code></p>\n<blockquote>\n<p><code>layout.xml</code> 指的是 <code>Activity</code> 或者 <code>Fragment</code> 的布局</p>\n</blockquote>\n<div><pre><code></code></pre>\n<div></div></div></li>\n</ol>\n<p>&lt;android.support.v7.widget.RecyclerView\nandroid:layout_width=&quot;match_parent&quot;\nandroid:layout_height=&quot;match_parent&quot;\nandroid:id=&quot;@+id/recycler&quot;\nandroid:scrollbars=&quot;vertical&quot;/&gt;</p>\n<div><pre><code>&lt;!-- Must define the scrollbars attr --&gt;\n```\n</code></pre>\n</div><ol start=\"2\">\n<li>\n<p>新建一个 <code>item_layout.xml</code> 用于 <code>item</code> 的界面</p>\n<div><pre><code><span>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span>\n<span><span><span>&lt;</span>LinearLayout</span> <span><span>xmlns:</span>android</span><span><span>=</span><span>\"</span>http://schemas.android.com/apk/res/android<span>\"</span></span>\n    <span><span>android:</span>orientation</span><span><span>=</span><span>\"</span>vertical<span>\"</span></span>\n    <span><span>android:</span>layout_width</span><span><span>=</span><span>\"</span>match_parent<span>\"</span></span>\n    <span><span>android:</span>layout_height</span><span><span>=</span><span>\"</span>wrap_content<span>\"</span></span><span>></span></span>\n\n<span><span><span>&lt;</span>TextView</span>\n    <span><span>android:</span>layout_width</span><span><span>=</span><span>\"</span>match_parent<span>\"</span></span>\n    <span><span>android:</span>layout_height</span><span><span>=</span><span>\"</span>match_parent<span>\"</span></span>\n    <span><span>android:</span>id</span><span><span>=</span><span>\"</span>@+id/quest_item<span>\"</span></span> <span>/></span></span>\n\n<span><span><span>&lt;/</span>LinearLayout</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><blockquote>\n<p>注意，在 <code>support-library 23.2.0</code> 之后，<code>LayoutManager</code> 提供了<strong>自动调整</strong>功能，所以对 <code>item</code> 的根布局应采用 <code>wrap_content</code> 的 <code>layout_hight</code></p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"_1-3-设置-layoutmanager-和-adapter\"> 1.3 设置 <strong>LayoutManager</strong> 和 <strong>Adapter</strong></h3>\n<div><pre><code><span>@Override</span>\n<span>public</span> <span>View</span> <span>onCreateView</span><span>(</span><span>LayoutInflater</span> inflater<span>,</span> <span>ViewGroup</span> parent<span>,</span> <span>Bundle</span> savedInstanceState<span>)</span> <span>{</span>\n\n    <span>View</span> v <span>=</span> inflater<span>.</span><span>inflate</span><span>(</span><span>R</span><span>.</span>layout<span>.</span>fragment_recyclerview<span>,</span> parent<span>,</span> <span>false</span><span>)</span><span>;</span>\n\n    <span>//set the Recycler</span>\n    mRecyclerView <span>=</span> <span>(</span><span>RecyclerView</span><span>)</span> v<span>.</span><span>findViewById</span><span>(</span><span>R</span><span>.</span>id<span>.</span>recycler_view<span>)</span><span>;</span>\n\n    <span>//set LayoutManager</span>\n    mRecyclerView<span>.</span><span>setLayoutManager</span><span>(</span><span>new</span> <span>LinearLayoutManager</span><span>(</span><span>getActivity</span><span>(</span><span>)</span><span>)</span><span>)</span><span>;</span>\n\n    <span>//DataSet</span>\n    mCrimes <span>=</span> <span>CrimeLab</span><span>.</span><span>get</span><span>(</span><span>getActivity</span><span>(</span><span>)</span><span>)</span><span>.</span><span>getCrimes</span><span>(</span><span>)</span><span>;</span>\n\n    <span>//set the Adapter</span>\n    mRecyclerView<span>.</span><span>setAdapter</span><span>(</span><span>new</span> <span>CrimeAdapter</span><span>(</span><span>)</span><span>)</span><span>;</span>\n\n    <span>return</span> v<span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><h3 id=\"_1-4-定义-adapter-和重载方法\"> 1.4 定义 Adapter 和重载方法</h3>\n<p>你需要自定义一个自己的 <code>MyAdapter</code> 并继承 <code>Adapter</code>\n注意以下几点：</p>\n<ol>\n<li>\n<p>Adapter 储存着数据的集合，还有一个作为内部类的 <code>ViewHolder</code></p>\n<div><pre><code></code></pre>\n<div></div></div></li>\n</ol>\n<p>public class MyAdapter extends RecyclerView.Adapter&lt;MyAdapter.ViewHolder&gt; {</p>\n<div><pre><code>//The DataSet\nprivate List&lt;Object&gt; mDatas;\n//...other stuff\n\n//The inner ViewHolder\nclass MyViewHolder extends Recycler.ViewHolder {\n    //The views\n    public TextView textView;\n\n    //The Ctor is Auto-Generate\n    public MyViewHolder (View itemView) {\n        super(itemView);\n        //Just set the view as the @param is Ok\n    }\n}\n</code></pre>\n</div><p>}\n```</p>\n<ol start=\"2\">\n<li>\n<p>重载方法的使用</p>\n<div><pre><code><span>@Override</span>\n<span>public</span> <span>MyViewHolder</span> <span>onCreateViewHolder</span><span>(</span><span>ViewGroup</span> parent<span>,</span> <span>int</span> <span>ViewType</span><span>)</span> <span>{</span>\n    <span>// Build a ViewHolder which is the inner class, and return it</span>\n\n    <span>/**\n    * Notice: The ViewType is use to build the diffirent ViewHolder\n    * to display diffirent ViewHolder\n    */</span>\n    <span>return</span> <span>new</span> <span>MyViewHolder</span><span>(</span>mLayoutInflater<span>.</span><span>inflate</span><span>(</span><span>R</span><span>.</span>layout<span>.</span>item_text<span>,</span> parent<span>,</span> <span>false</span><span>)</span><span>)</span><span>;</span>\n<span>}</span>\n\n<span>@Override</span>\n<span>public</span> <span>void</span> <span>onBindViewHolder</span><span>(</span><span>MyViewHolder</span> holder<span>,</span> <span>int</span> position<span>)</span> <span>{</span>\n    <span>// Bind the view with the DataSet</span>\n    <span>// Just like the getView() method in ListView</span>\n    <span>// But it's more easier</span>\n\n    holder<span>.</span>mTextView<span>.</span><span>setText</span><span>(</span>mData<span>[</span>position<span>]</span><span>)</span><span>;</span>\n\n<span>}</span>\n\n<span>public</span> <span>int</span> <span>getItemCount</span><span>(</span><span>)</span> <span>{</span>\n    <span>// Return the amount of item</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div></li>\n</ol>\n<h2 id=\"_2-多-item-布局实现\"> 2. 多 Item 布局实现</h2>\n<p>使用 <code>getItemViewType(int position)</code> 方法来获取每个 <code>position</code> 的 <code>ViewType</code></p>\n<blockquote>\n<p>RecyclerView 中取消了 <code>getItemViewTypeCount()</code> 方法</p>\n</blockquote>\n<p>例如：</p>\n<div><pre><code><span>@Override</span>\n<span>public</span> <span>int</span> <span>getItemViewType</span><span>(</span><span>int</span> position<span>)</span> <span>{</span>\n    <span>return</span> position <span>%</span> <span>2</span> <span>==</span> <span>0</span> <span>?</span> ITEM_TYPE<span>.</span>ITEM_TYPE_IMAGE<span>.</span><span>ordinal</span><span>(</span><span>)</span> <span>:</span>\n    ITEM_TYPE<span>.</span>ITEM_TYPE_TEXT<span>.</span><span>ordinal</span><span>(</span><span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>然后使用 <code>onCreateViewHolder()</code> 中的 <code>int ViewType</code> 属性来判别构建的 View 类型。</p>\n<h2 id=\"_3-设置-onitemclicklistener\"> 3. 设置 OnItemClickListener</h2>\n<blockquote>\n<p>官方并没有为 RecyclerView 实现一个 OnItemClickListener，所以只能由开发者自行实现</p>\n</blockquote>\n<p>一般来说，我们使用回调来实现这个监听器\n需要注意的是，官方并没有为 Item 实现一个点击的 feedback 动画（至少在 5.1.1(API 22)中），所以我们需要添加一个 <code>&lt;ripple&gt;</code> 的 <code>drawable</code> 然后将其设置为背景来实现一个点击回馈的效果。</p>\n<h3 id=\"_3-1-定义一个-listener-接口\"> 3.1 定义一个 Listener 接口</h3>\n<p>通常作为 Adapter 的一个内部类</p>\n<div><pre><code><span>public</span> <span>interface</span> <span>OnItemClickListener</span> <span>{</span>\n\n    <span>/**\n    * This is the callback method.\n    * Aimed to notify the context the Click Event.\n    * To modify UI, also need to pass the position for UI updating or do othertings\n    */</span>\n    <span>void</span> onItemClick <span>(</span><span>View</span> view<span>,</span> <span>int</span> position<span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h3 id=\"_3-2-为-adapter-添加接口成员\"> 3.2 为 Adapter 添加接口成员</h3>\n<div><pre><code><span>class</span> <span>MyAdapter</span> <span>.</span><span>.</span><span>.</span> <span>{</span>\n    <span>private</span> <span>OnItemClickListener</span> mOnItemClickListener<span>;</span>\n\n    <span>public</span> <span>void</span> <span>setOnItemClickListener</span><span>(</span><span>OnItemClickListener</span> mOnItemClickListener<span>)</span> <span>{</span>\n        <span>this</span><span>.</span>mOnItemClickListener <span>=</span> mOnItemClickListener<span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h3 id=\"_3-3-设置点击响应并将其回调\"> 3.3 设置点击响应并将其回调</h3>\n<p>这里在 <code>onBindViewHolder()</code> 中设置 <code>ViewHolder</code> 中 <code>View</code> 的 <code>onClick()</code> 事件，并将这个事件回调到上面的接口成员中。</p>\n<div><pre><code><span>public</span> <span>void</span> onBindViewHolder <span>(</span><span>final</span> <span>MyViewHolder</span> holder<span>,</span> <span>final</span> <span>int</span> position<span>)</span> <span>{</span>\n    <span>// Bind the View with Data</span>\n    holder<span>.</span>textView<span>.</span><span>setText</span><span>(</span>mDatas<span>.</span><span>get</span><span>(</span>position<span>)</span><span>)</span><span>;</span>\n\n    <span>// Set the Listener</span>\n    <span>// Notice: if the callback was set,</span>\n    <span>// then set the Click Event for the ViewHolder</span>\n    <span>if</span><span>(</span>mOnItemClickLitener <span>!=</span> <span>null</span><span>)</span> <span>{</span>\n        holder<span>.</span>textView<span>.</span>setOnClickListener <span>(</span><span>new</span> <span>OnClickListener</span><span>(</span><span>)</span> <span>{</span>\n            <span>@Override</span>\n            <span>public</span> <span>void</span> onClick <span>(</span><span>View</span> v<span>)</span> <span>{</span>\n                <span>int</span> pos <span>=</span> holder<span>.</span><span>getLayoutPosition</span><span>(</span><span>)</span><span>;</span>\n                <span>// Call the callback method</span>\n                mOnItemClickListener<span>.</span><span>onItemClick</span><span>(</span>hodler<span>.</span>textView<span>,</span> pos<span>)</span><span>;</span>\n            <span>}</span>\n        <span>}</span><span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><h3 id=\"_3-4-在-acitivity-或者-fragment-中响应回调\"> 3.4 在 Acitivity 或者 Fragment 中响应回调</h3>\n<p>注意，这个方法是在 Fragment 中进行的。</p>\n<div><pre><code><span>@Override</span>\n<span>public</span> <span>void</span> <span>onCreateView</span><span>(</span><span>.</span><span>.</span><span>.</span><span>)</span> <span>{</span>\n    mAdapter<span>.</span>setOnClickListener <span>(</span><span>new</span> <span>OnItemClickListener</span><span>(</span><span>)</span> <span>{</span>\n        <span>@Override</span>\n        <span>public</span> <span>void</span> <span>onItemClick</span><span>(</span><span>View</span> v<span>,</span> <span>int</span> position<span>)</span> <span>{</span>\n            <span>//Update: 2016-10-14</span>\n        <span>}</span>\n    <span>}</span><span>)</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div>",
      "date_published": "2016-10-14T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Android"
      ]
    },
    {
      "title": "Retrofit 离线缓存",
      "url": "https://wafer.li/blog-corners/old-inventory/Android/Retrofit/Retrofit%20%E7%A6%BB%E7%BA%BF%E7%BC%93%E5%AD%98/",
      "id": "https://wafer.li/blog-corners/old-inventory/Android/Retrofit/Retrofit%20%E7%A6%BB%E7%BA%BF%E7%BC%93%E5%AD%98/",
      "summary": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>Retrofit2 自从默认使用 OkHttp 库之后，自带了缓存功能；</p>\n<p>但是，这个缓存功能是在线缓存，也就是<strong>向服务器发起请求，服务器返回 304</strong>，而不是直接从缓存读取而不发起网络请求。</p>\n<p>这样，当我们的应用处在离线状态时候，就无法读取缓存中的内容了。</p>\n<p>这对于用户体验来说显然是不好的，所以这篇文章就介绍一下如何配置 Retrofit 和 OkHttp 来进行<strong>离线缓存</strong></p>\n",
      "content_html": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>Retrofit2 自从默认使用 OkHttp 库之后，自带了缓存功能；</p>\n<p>但是，这个缓存功能是在线缓存，也就是<strong>向服务器发起请求，服务器返回 304</strong>，而不是直接从缓存读取而不发起网络请求。</p>\n<p>这样，当我们的应用处在离线状态时候，就无法读取缓存中的内容了。</p>\n<p>这对于用户体验来说显然是不好的，所以这篇文章就介绍一下如何配置 Retrofit 和 OkHttp 来进行<strong>离线缓存</strong></p>\n\n<h2 id=\"_2-设置缓存路径\"> 2. 设置缓存路径</h2>\n<p>为了使用 OkHttp 的缓存，我们就必须设置相应的缓存路径。</p>\n<div><pre><code><span>File</span> cacheDir <span>=</span> <span>getCacheDir</span><span>(</span><span>)</span><span>;</span>\n<span>Cache</span> cache <span>=</span> <span>new</span> <span>Cache</span><span>(</span>cacheDir<span>)</span><span>;</span>\n\nclient <span>=</span> builder<span>.</span><span>cache</span><span>(</span>cacheDir<span>)</span><span>.</span><span>build</span><span>(</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id=\"_3-配置拦截器\"> 3. 配置拦截器</h2>\n<p>OkHttp 可以通过拦截器来实现对请求(<code>Request</code>)和响应(<code>Response</code>)的魔改。</p>\n<p>我们实现离线缓存的方式，就是采用这个拦截器对响应进行魔改。</p>\n<h3 id=\"_3-1-通过-cachecontrol-配置缓存\"> 3.1 通过 <code>CacheControl</code> 配置缓存</h3>\n<p>首先，我们要对我们的缓存策略进行配置，最好的当然就是使用 OkHttp 自带的 <code>CacheControl</code> 进行配置。</p>\n<div><pre><code><span>CacheControl<span>.</span>Builder</span> cacheBuilder <span>=</span> <span>new</span> <span>CacheControl<span>.</span>Builder</span><span>(</span><span>)</span><span>;</span>\ncacheBuilder<span>.</span><span>maxAge</span><span>(</span><span>0</span><span>,</span> <span>TimeUnit</span><span>.</span>SECONDS<span>)</span><span>;</span><span>//这个是控制缓存的最大生命时间</span>\ncacheBuilder<span>.</span><span>maxStale</span><span>(</span><span>365</span><span>,</span><span>TimeUnit</span><span>.</span>DAYS<span>)</span><span>;</span><span>//这个是控制缓存的过时时间</span>\n<span>CacheControl</span> cacheControl <span>=</span> cacheBuilder<span>.</span><span>build</span><span>(</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id=\"_3-2-建立拦截器\"> 3.2 建立拦截器</h3>\n<p>和自定义 <code>Response</code> 缓存不同，对于离线缓存，我们对 <code>Request</code> 进行处理；</p>\n<p>当离线时，给 <code>Request</code> 赋予一个缓存控制对象，然后直接 proceed 即可。</p>\n<div><pre><code><span>Request</span> request <span>=</span> chain<span>.</span><span>request</span><span>(</span><span>)</span><span>;</span>\n\n<span>// 离线状态下才进行自定义缓存控制</span>\n<span>if</span><span>(</span><span>!</span><span>StateUtils</span><span>.</span><span>isNetworkAvailable</span><span>(</span><span>MyApp</span><span>.</span>mContext<span>)</span><span>)</span><span>{</span>\n    request <span>=</span> request<span>.</span><span>newBuilder</span><span>(</span><span>)</span>\n            <span>.</span><span>cacheControl</span><span>(</span>cacheControl<span>)</span>\n            <span>.</span><span>build</span><span>(</span><span>)</span><span>;</span>\n<span>}</span>\n\n<span>Response</span> response <span>=</span> chain<span>.</span><span>proceed</span><span>(</span>request<span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div>",
      "date_published": "2016-10-26T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Android"
      ]
    },
    {
      "title": "Retrofit2 + Rxjava2",
      "url": "https://wafer.li/blog-corners/old-inventory/Android/Retrofit/Retrofit2%20+%20Rxjava2/",
      "id": "https://wafer.li/blog-corners/old-inventory/Android/Retrofit/Retrofit2%20+%20Rxjava2/",
      "summary": "<p>Retrofit 和 Rxjava 结合应该算得上是 Rxjava 在 Android  应用得最广泛的一个方面了。</p>\n<p>这里就来讲讲关于这两个库具体组合的用法。</p>\n",
      "content_html": "<p>Retrofit 和 Rxjava 结合应该算得上是 Rxjava 在 Android  应用得最广泛的一个方面了。</p>\n<p>这里就来讲讲关于这两个库具体组合的用法。</p>\n\n<h2 id=\"_1-添加依赖\"> 1. 添加依赖</h2>\n<p>具体需要添加的依赖库有： <code>Retrofit2</code>、<code>Rxjava2</code>、<code>RxAndroid2</code>、<code>Gson</code> 、<code>Rtrofit2</code> 到 <code>Rxjava2</code> 的转换器、<code>Retrofit2</code> 到 <code>Gson</code> 的转换器</p>\n<div><pre><code>    <span>// Retrofit</span>\n    compile <span>'com.squareup.retrofit2:retrofit:2.2.0'</span>\n    compile group<span>:</span> <span>'com.squareup.retrofit2'</span><span>,</span> name<span>:</span> <span>'converter-gson'</span><span>,</span> version<span>:</span> <span>'2.2.0'</span>\n    compile group<span>:</span> <span>'com.squareup.retrofit2'</span><span>,</span> name<span>:</span> <span>'adapter-rxjava2'</span><span>,</span> version<span>:</span> <span>'2.2.0'</span>\n\n    <span>// Rx*</span>\n    compile <span>'io.reactivex.rxjava2:rxjava:2.1.0'</span>\n    compile <span>'io.reactivex.rxjava2:rxandroid:2.0.1'</span>\n    compile <span>'io.reactivex.rxjava2:rxkotlin:2.0.1-RC1'</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>其中，<code>Gson</code> 是 JSON 解析库，也可以使用 <code>Jackson</code> 替代；</p>\n<p>上面的 <code>rxkotlin</code> 是 <code>Rxjava</code> 的 <code>Kotlin</code> 轻量支持库；</p>\n<p>如果不使用 Kotlin 可以无视。</p>\n<h2 id=\"_2-构建-api\"> 2. 构建 API</h2>\n<p>使用 <code>Retrofit</code> 的第一步当然就是构建 API 接口；</p>\n<p>不过既然我们使用的是 Rxjava2，那么，这个 API 接口当然就稍微有点不一样：</p>\n<div><pre><code><span>interface</span> TrendingApi <span>{</span>\n\n    <span>@GET</span><span>(</span><span>\"{language}\"</span><span>)</span>\n    <span>fun</span> <span>getTrending</span><span>(</span><span>@Path</span><span>(</span><span>\"language\"</span><span>)</span> language<span>:</span> String <span>=</span> <span>\".\"</span><span>,</span> <span>@Query</span><span>(</span><span>\"since\"</span><span>)</span> since<span>:</span> String<span>)</span>\n            <span>:</span> Observable<span>&lt;</span>ResponseBody<span>></span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>可以看到，我们 API 返回的是一个 <code>Observable&lt;T&gt;</code> 对象，而非通常的 <code>Call&lt;T&gt;</code> 对象。</p>\n<p>对于这个 <code>Observable</code>，假设我们的 Body 对象为 <code>T</code>，那么 <code>Observable</code> 一共有以下的几种可能情况：</p>\n<ul>\n<li><code>Observable&lt;T&gt;</code></li>\n<li><code>Observable&lt;Response&lt;T&gt;&gt;</code></li>\n<li><code>Observable&lt;Result&lt;T&gt;&gt;</code></li>\n</ul>\n<p>前两个自然不用说，第三个 <code>Result</code> 是 <code>Response&lt;T&gt;</code> 和 <code>Throwable</code> 的包装对象；</p>\n<p>也就是说，如果使用 <code>Result</code> 的话，我们可以在 <code>onNext()</code> 中同时处理正常情况和异常情况。</p>\n<blockquote>\n<p>所谓的异常情况指的是抛出了 Exception</p>\n</blockquote>\n<h2 id=\"_3-三种-observable-的区别\"> 3. 三种 <code>Observable</code> 的区别</h2>\n<p>那么这三种 <code>Observable</code> 究竟有什么区别呢？</p>\n<p>我们来看看具体 <code>adapter-rxjava2</code> 的源码：</p>\n<div><pre><code><span>Observable</span><span><span>&lt;</span><span>Response</span><span>&lt;</span><span>R</span><span>></span><span>></span></span> responseObservable <span>=</span> isAsync\n      <span>?</span> <span>new</span> <span>CallEnqueueObservable</span><span><span>&lt;</span><span>></span></span><span>(</span>call<span>)</span>\n      <span>:</span> <span>new</span> <span>CallExecuteObservable</span><span><span>&lt;</span><span>></span></span><span>(</span>call<span>)</span><span>;</span>\n\n  <span>Observable</span><span><span>&lt;</span><span>?</span><span>></span></span> observable<span>;</span>\n  <span>if</span> <span>(</span>isResult<span>)</span> <span>{</span>\n    observable <span>=</span> <span>new</span> <span>ResultObservable</span><span><span>&lt;</span><span>></span></span><span>(</span>responseObservable<span>)</span><span>;</span>\n  <span>}</span> <span>else</span> <span>if</span> <span>(</span>isBody<span>)</span> <span>{</span>\n    observable <span>=</span> <span>new</span> <span>BodyObservable</span><span><span>&lt;</span><span>></span></span><span>(</span>responseObservable<span>)</span><span>;</span>\n  <span>}</span> <span>else</span> <span>{</span>\n    observable <span>=</span> responseObservable<span>;</span>\n  <span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>从这段代码可以看到，默认的情况就是 <code>Observable&lt;Response&lt;T&gt;&gt;</code>；</p>\n<p>而这个默认的 <code>Observable</code> 是通过执行 <code>CallEnqueueObservable</code> 或者 <code>CallExecuteObservable</code> 得到的。</p>\n<p>然后再通过判断 <code>Observable</code> 的包装状态，对上面得到的 <code>Observable&lt;Response&lt;T&gt;&gt;</code> 进行转换。</p>\n<h3 id=\"_3-1-observable-t\"> 3.1 <code>Observable&lt;T&gt;</code></h3>\n<p>首先来看我们的 <code>BodyObservable</code>：</p>\n<div><pre><code><span>@Override</span> <span>protected</span> <span>void</span> <span>subscribeActual</span><span>(</span><span>Observer</span><span><span>&lt;</span><span>?</span> <span>super</span> <span>T</span><span>></span></span> observer<span>)</span> <span>{</span>\n  upstream<span>.</span><span>subscribe</span><span>(</span><span>new</span> <span>BodyObserver</span><span><span>&lt;</span><span>T</span><span>></span></span><span>(</span>observer<span>)</span><span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>可以看到，在 <code>subscribeActual()</code> 中，对我们传入的 <code>observer</code> 封装了一层外壳 <code>BodyObserver</code>；</p>\n<p>然后将其传入上层的 <code>subscribe</code> 中，以启动网络请求。</p>\n<p>这层外壳正是这个 <code>Adapter</code> 的关键所在，通过使用另一个对象，来处理不同的网络情况，然后再委派到我们真正传入的 <code>observer</code></p>\n<div><pre><code><span>private</span> <span>static</span> <span>class</span> <span>BodyObserver</span><span><span>&lt;</span><span>R</span><span>></span></span> <span>implements</span> <span>Observer</span><span><span>&lt;</span><span>Response</span><span>&lt;</span><span>R</span><span>></span><span>></span></span> <span>{</span>\n  <span>private</span> <span>final</span> <span>Observer</span><span><span>&lt;</span><span>?</span> <span>super</span> <span>R</span><span>></span></span> observer<span>;</span>\n  <span>private</span> <span>boolean</span> terminated<span>;</span>\n\n  <span>BodyObserver</span><span>(</span><span>Observer</span><span><span>&lt;</span><span>?</span> <span>super</span> <span>R</span><span>></span></span> observer<span>)</span> <span>{</span>\n    <span>this</span><span>.</span>observer <span>=</span> observer<span>;</span>\n  <span>}</span>\n\n  <span>@Override</span> <span>public</span> <span>void</span> <span>onSubscribe</span><span>(</span><span>Disposable</span> disposable<span>)</span> <span>{</span>\n    observer<span>.</span><span>onSubscribe</span><span>(</span>disposable<span>)</span><span>;</span>\n  <span>}</span>\n\n  <span>@Override</span> <span>public</span> <span>void</span> <span>onNext</span><span>(</span><span>Response</span><span><span>&lt;</span><span>R</span><span>></span></span> response<span>)</span> <span>{</span>\n    <span>if</span> <span>(</span>response<span>.</span><span>isSuccessful</span><span>(</span><span>)</span><span>)</span> <span>{</span>\n      observer<span>.</span><span>onNext</span><span>(</span>response<span>.</span><span>body</span><span>(</span><span>)</span><span>)</span><span>;</span>\n    <span>}</span> <span>else</span> <span>{</span>\n      terminated <span>=</span> <span>true</span><span>;</span>\n      <span>Throwable</span> t <span>=</span> <span>new</span> <span>HttpException</span><span>(</span>response<span>)</span><span>;</span>\n      <span>try</span> <span>{</span>\n        observer<span>.</span><span>onError</span><span>(</span>t<span>)</span><span>;</span>\n      <span>}</span> <span>catch</span> <span>(</span><span>Throwable</span> inner<span>)</span> <span>{</span>\n        <span>Exceptions</span><span>.</span><span>throwIfFatal</span><span>(</span>inner<span>)</span><span>;</span>\n        <span>RxJavaPlugins</span><span>.</span><span>onError</span><span>(</span><span>new</span> <span>CompositeException</span><span>(</span>t<span>,</span> inner<span>)</span><span>)</span><span>;</span>\n      <span>}</span>\n    <span>}</span>\n  <span>}</span>\n\n  <span>@Override</span> <span>public</span> <span>void</span> <span>onComplete</span><span>(</span><span>)</span> <span>{</span>\n    <span>if</span> <span>(</span><span>!</span>terminated<span>)</span> <span>{</span>\n      observer<span>.</span><span>onComplete</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n  <span>}</span>\n\n  <span>@Override</span> <span>public</span> <span>void</span> <span>onError</span><span>(</span><span>Throwable</span> throwable<span>)</span> <span>{</span>\n    <span>if</span> <span>(</span><span>!</span>terminated<span>)</span> <span>{</span>\n      observer<span>.</span><span>onError</span><span>(</span>throwable<span>)</span><span>;</span>\n    <span>}</span> <span>else</span> <span>{</span>\n      <span>// This should never happen! onNext handles and forwards errors automatically.</span>\n      <span>Throwable</span> broken <span>=</span> <span>new</span> <span>AssertionError</span><span>(</span>\n          <span>\"This should never happen! Report as a bug with the full stacktrace.\"</span><span>)</span><span>;</span>\n      <span>//noinspection UnnecessaryInitCause Two-arg AssertionError constructor is 1.7+ only.</span>\n      broken<span>.</span><span>initCause</span><span>(</span>throwable<span>)</span><span>;</span>\n      <span>RxJavaPlugins</span><span>.</span><span>onError</span><span>(</span>broken<span>)</span><span>;</span>\n    <span>}</span>\n  <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br></div></div><p>可以看到，其实这层壳处理的并不是我们的 <code>Body</code> 对象，而是之前使用 <code>Call</code> 调用时返回的 <code>Response</code> 对象。</p>\n<p>我们重点来看看 <code>onNext()</code>：</p>\n<div><pre><code><span>@Override</span> <span>public</span> <span>void</span> <span>onNext</span><span>(</span><span>Response</span><span><span>&lt;</span><span>R</span><span>></span></span> response<span>)</span> <span>{</span>\n  <span>if</span> <span>(</span>response<span>.</span><span>isSuccessful</span><span>(</span><span>)</span><span>)</span> <span>{</span>\n    observer<span>.</span><span>onNext</span><span>(</span>response<span>.</span><span>body</span><span>(</span><span>)</span><span>)</span><span>;</span>\n  <span>}</span> <span>else</span> <span>{</span>\n    terminated <span>=</span> <span>true</span><span>;</span>\n    <span>Throwable</span> t <span>=</span> <span>new</span> <span>HttpException</span><span>(</span>response<span>)</span><span>;</span>\n    <span>try</span> <span>{</span>\n      observer<span>.</span><span>onError</span><span>(</span>t<span>)</span><span>;</span>\n    <span>}</span> <span>catch</span> <span>(</span><span>Throwable</span> inner<span>)</span> <span>{</span>\n      <span>Exceptions</span><span>.</span><span>throwIfFatal</span><span>(</span>inner<span>)</span><span>;</span>\n      <span>RxJavaPlugins</span><span>.</span><span>onError</span><span>(</span><span>new</span> <span>CompositeException</span><span>(</span>t<span>,</span> inner<span>)</span><span>)</span><span>;</span>\n    <span>}</span>\n  <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>可以看到，当成功访问并响应的时候(2xx)，结果返回给了我们的 <code>onNext()</code> ；</p>\n<p>而当成功访问但不成功响应的时候(4xx/5xx)，返回的结果通过 <code>HttpException</code> 的包装，然后返回给了我们的 <code>onError()</code> 方法。</p>\n<p>而当这个壳子中出现 <code>onError()</code> 时，意味着可能出现了断网的情况，或者其他异常；</p>\n<p>此时也是通过 <code>onError()</code> 返回到我们的观察者中。</p>\n<p>结论：</p>\n<ul>\n<li>2xx 结果通过 <code>onNext()</code> 返回</li>\n<li>4xx/5xx 结果通过 <code>onError()</code> 返回</li>\n<li>断网和其他异常情况也通过 <code>onError()</code> 返回</li>\n</ul>\n<h3 id=\"_3-2-observable-result-t\"> 3.2 <code>Observable&lt;Result&lt;T&gt;&gt;</code></h3>\n<p><code>Result</code> 是 <code>adapter-rxjava2</code> 新增的包装类，包装了 <code>error</code> 和 <code>response</code> ；</p>\n<p>关于它具体如何工作的，我们来看看它的源码：</p>\n<p>首先是 <code>Result</code> 类，下面的是 <code>ResultObservable</code> 使用到的静态工厂方法和 <code>Result</code> 的构造函数：</p>\n<div><pre><code><span>public</span> <span>static</span> <span><span>&lt;</span><span>T</span><span>></span></span> <span>Result</span><span><span>&lt;</span><span>T</span><span>></span></span> <span>error</span><span>(</span><span>Throwable</span> error<span>)</span> <span>{</span>\n  <span>if</span> <span>(</span>error <span>==</span> <span>null</span><span>)</span> <span>throw</span> <span>new</span> <span>NullPointerException</span><span>(</span><span>\"error == null\"</span><span>)</span><span>;</span>\n  <span>return</span> <span>new</span> <span>Result</span><span><span>&lt;</span><span>></span></span><span>(</span><span>null</span><span>,</span> error<span>)</span><span>;</span>\n<span>}</span>\n\n<span>public</span> <span>static</span> <span><span>&lt;</span><span>T</span><span>></span></span> <span>Result</span><span><span>&lt;</span><span>T</span><span>></span></span> <span>response</span><span>(</span><span>Response</span><span><span>&lt;</span><span>T</span><span>></span></span> response<span>)</span> <span>{</span>\n  <span>if</span> <span>(</span>response <span>==</span> <span>null</span><span>)</span> <span>throw</span> <span>new</span> <span>NullPointerException</span><span>(</span><span>\"response == null\"</span><span>)</span><span>;</span>\n  <span>return</span> <span>new</span> <span>Result</span><span><span>&lt;</span><span>></span></span><span>(</span>response<span>,</span> <span>null</span><span>)</span><span>;</span>\n<span>}</span>\n\n<span>private</span> <span>final</span> <span>Response</span><span><span>&lt;</span><span>T</span><span>></span></span> response<span>;</span>\n<span>private</span> <span>final</span> <span>Throwable</span> error<span>;</span>\n\n<span>private</span> <span>Result</span><span>(</span><span>Response</span><span><span>&lt;</span><span>T</span><span>></span></span> response<span>,</span> <span>Throwable</span> error<span>)</span> <span>{</span>\n  <span>this</span><span>.</span>response <span>=</span> response<span>;</span>\n  <span>this</span><span>.</span>error <span>=</span> error<span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>可以看到，<code>error</code> 和 <code>response</code> 是不共戴天的关系，符合 <code>Retrofit</code>  的设计。</p>\n<p>下面我们来看看具体的 <code>ResultObservable</code> 的包装类：</p>\n<div><pre><code>  <span>private</span> <span>static</span> <span>class</span> <span>ResultObserver</span><span><span>&lt;</span><span>R</span><span>></span></span> <span>implements</span> <span>Observer</span><span><span>&lt;</span><span>Response</span><span>&lt;</span><span>R</span><span>></span><span>></span></span> <span>{</span>\n    <span>private</span> <span>final</span> <span>Observer</span><span><span>&lt;</span><span>?</span> <span>super</span> <span>Result</span><span>&lt;</span><span>R</span><span>></span><span>></span></span> observer<span>;</span>\n\n    <span>ResultObserver</span><span>(</span><span>Observer</span><span><span>&lt;</span><span>?</span> <span>super</span> <span>Result</span><span>&lt;</span><span>R</span><span>></span><span>></span></span> observer<span>)</span> <span>{</span>\n      <span>this</span><span>.</span>observer <span>=</span> observer<span>;</span>\n    <span>}</span>\n\n    <span>@Override</span> <span>public</span> <span>void</span> <span>onSubscribe</span><span>(</span><span>Disposable</span> disposable<span>)</span> <span>{</span>\n      observer<span>.</span><span>onSubscribe</span><span>(</span>disposable<span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>@Override</span> <span>public</span> <span>void</span> <span>onNext</span><span>(</span><span>Response</span><span><span>&lt;</span><span>R</span><span>></span></span> response<span>)</span> <span>{</span>\n      observer<span>.</span><span>onNext</span><span>(</span><span>Result</span><span>.</span><span>response</span><span>(</span>response<span>)</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>@Override</span> <span>public</span> <span>void</span> <span>onError</span><span>(</span><span>Throwable</span> throwable<span>)</span> <span>{</span>\n      <span>try</span> <span>{</span>\n        observer<span>.</span><span>onNext</span><span>(</span><span>Result</span><span>.</span><span><span>&lt;</span><span>R</span><span>></span></span><span>error</span><span>(</span>throwable<span>)</span><span>)</span><span>;</span>\n      <span>}</span> <span>catch</span> <span>(</span><span>Throwable</span> t<span>)</span> <span>{</span>\n        <span>try</span> <span>{</span>\n          observer<span>.</span><span>onError</span><span>(</span>t<span>)</span><span>;</span>\n        <span>}</span> <span>catch</span> <span>(</span><span>Throwable</span> inner<span>)</span> <span>{</span>\n          <span>Exceptions</span><span>.</span><span>throwIfFatal</span><span>(</span>inner<span>)</span><span>;</span>\n          <span>RxJavaPlugins</span><span>.</span><span>onError</span><span>(</span><span>new</span> <span>CompositeException</span><span>(</span>t<span>,</span> inner<span>)</span><span>)</span><span>;</span>\n        <span>}</span>\n        <span>return</span><span>;</span>\n      <span>}</span>\n      observer<span>.</span><span>onComplete</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>@Override</span> <span>public</span> <span>void</span> <span>onComplete</span><span>(</span><span>)</span> <span>{</span>\n      observer<span>.</span><span>onComplete</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n  <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br></div></div><p>可以看到，这回，重点在 <code>onError</code> 方法；</p>\n<p>通过重载 <code>onError</code> 并使用 <code>Result</code> 的静态工厂；</p>\n<p>让我们的 <code>observer</code> 也能通过 <code>onNext</code> 获取到具体的 <code>Throwable</code>；</p>\n<p>也就是说，我们可以在 <code>onNext()</code> 处理网络错误。</p>\n<p>而当更严重的错误发生时，<code>onError()</code> 才会被调用</p>\n<p>结论：</p>\n<p>网络异常和正常的网络内容都通过 <code>onNext()</code> 进行处理。</p>\n<h3 id=\"_3-3-observable-response-t-的获取\"> 3.3 <code>Observable&lt;Response&lt;T&gt;&gt;</code> 的获取</h3>\n<p>那么作为关键的 <code>Observable&lt;Response&lt;T&gt;&gt;</code> 对象是从哪里获取的呢？</p>\n<p>让我们将目光转向在开头的两个 <code>Call</code> 开头的 <code>Observable</code>；</p>\n<p>很容易知道，一个对应了 <code>Retrofit</code> 的 <code>call.execute()</code>；</p>\n<p>而另外一个对应了 <code>call.enqueue()</code></p>\n<p>为了简便，我们只看 <code>execute()</code> 部分的源码：</p>\n<p>下面就是关键的 <code>subscribeActual</code> 方法：</p>\n<div><pre><code><span>@Override</span> <span>protected</span> <span>void</span> <span>subscribeActual</span><span>(</span><span>Observer</span><span><span>&lt;</span><span>?</span> <span>super</span> <span>Response</span><span>&lt;</span><span>T</span><span>></span><span>></span></span> observer<span>)</span> <span>{</span>\n  <span>// Since Call is a one-shot type, clone it for each new observer.</span>\n  <span>Call</span><span><span>&lt;</span><span>T</span><span>></span></span> call <span>=</span> originalCall<span>.</span><span>clone</span><span>(</span><span>)</span><span>;</span>\n  observer<span>.</span><span>onSubscribe</span><span>(</span><span>new</span> <span>CallDisposable</span><span>(</span>call<span>)</span><span>)</span><span>;</span>\n\n  <span>boolean</span> terminated <span>=</span> <span>false</span><span>;</span>\n  <span>try</span> <span>{</span>\n    <span>Response</span><span><span>&lt;</span><span>T</span><span>></span></span> response <span>=</span> call<span>.</span><span>execute</span><span>(</span><span>)</span><span>;</span>\n    <span>if</span> <span>(</span><span>!</span>call<span>.</span><span>isCanceled</span><span>(</span><span>)</span><span>)</span> <span>{</span>\n      observer<span>.</span><span>onNext</span><span>(</span>response<span>)</span><span>;</span>\n    <span>}</span>\n    <span>if</span> <span>(</span><span>!</span>call<span>.</span><span>isCanceled</span><span>(</span><span>)</span><span>)</span> <span>{</span>\n      terminated <span>=</span> <span>true</span><span>;</span>\n      observer<span>.</span><span>onComplete</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n  <span>}</span> <span>catch</span> <span>(</span><span>Throwable</span> t<span>)</span> <span>{</span>\n    <span>Exceptions</span><span>.</span><span>throwIfFatal</span><span>(</span>t<span>)</span><span>;</span>\n    <span>if</span> <span>(</span>terminated<span>)</span> <span>{</span>\n      <span>RxJavaPlugins</span><span>.</span><span>onError</span><span>(</span>t<span>)</span><span>;</span>\n    <span>}</span> <span>else</span> <span>if</span> <span>(</span><span>!</span>call<span>.</span><span>isCanceled</span><span>(</span><span>)</span><span>)</span> <span>{</span>\n      <span>try</span> <span>{</span>\n        observer<span>.</span><span>onError</span><span>(</span>t<span>)</span><span>;</span>\n      <span>}</span> <span>catch</span> <span>(</span><span>Throwable</span> inner<span>)</span> <span>{</span>\n        <span>Exceptions</span><span>.</span><span>throwIfFatal</span><span>(</span>inner<span>)</span><span>;</span>\n        <span>RxJavaPlugins</span><span>.</span><span>onError</span><span>(</span><span>new</span> <span>CompositeException</span><span>(</span>t<span>,</span> inner<span>)</span><span>)</span><span>;</span>\n      <span>}</span>\n    <span>}</span>\n  <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div><p>可以看到，通过调用 <code>call.execute()</code> 获取 <code>Response</code> 对象；</p>\n<p>然后将获取到的 <code>Response</code> 对象进行传递，就实现了一个 <code>Observable</code> 的功能。</p>\n<h3 id=\"_3-4-原理和结论\"> 3.4 原理和结论</h3>\n<p>通过以上的源码解读，我们得出了 <code>adapter-rxjava2</code> 的具体原理：</p>\n<p>首先通过  <code>CallExecuteObservable</code> 获取到 <code>Observable&lt;Response&lt;T&gt;&gt;</code> 对象；</p>\n<p>然后根据不同的 <code>Observable</code> 类型对这个对象进行变换，最后传出，得到了我们需要的 <code>Observable</code>；</p>\n<p>在调用 <code>Observable.subscribe(observer)</code> 时；</p>\n<p>首先是最外层的 <code>subscribeActual()</code> 被调用；</p>\n<p>然后被层层传递，直到 <code>CallExecuteObservable</code> 的 <code>subscribeActual()</code> 调用 <code>call.execute()</code>；</p>\n<p>然后将 <code>Response</code>  向下进行层层传递，完成了整个订阅流程。</p>\n<p>结论：</p>\n<ol>\n<li>\n<p>只有最后 <code>subscribe()</code> 调用，才会触发网络请求</p>\n<blockquote>\n<p>在此之前可以先保留 <code>Observable</code> 对象；\n直到需要的时候再进行调用</p>\n</blockquote>\n</li>\n<li>\n<p><code>Observable&lt;T&gt;</code> 的 2xx 结果在 <code>onNext()</code>  调用，4xx/5xx 结果在 <code>onError()</code> 调用</p>\n</li>\n<li>\n<p><code>Observable&lt;Result&lt;T&gt;&gt;</code> 的 <code>error</code> 和 <code>response</code> 都在 <code>onNext()</code> 调用</p>\n</li>\n</ol>\n<h2 id=\"_4-创建-retrofit-实例\"> 4. 创建 <code>Retrofit</code> 实例</h2>\n<p>当我们的 API 创建好之后，我们就可以开始创建 <code>Retrofit</code> 实例；</p>\n<p>为了能够使用 Rxjava，必须给 <code>Retrofit</code> 加上 <code>CallAdapterFactory</code>：</p>\n<div><pre><code><span>private</span> <span>val</span> retrofitBuilder<span>:</span> Retrofit<span>.</span>Builder <span>=</span>\n         Retrofit<span>.</span><span>Builder</span><span>(</span><span>)</span>\n                 <span>.</span><span>baseUrl</span><span>(</span>BASE_URL<span>)</span>\n                 <span>.</span><span>addCallAdapterFactory</span><span>(</span>RxJava2CallAdapterFactory<span>.</span><span>create</span><span>(</span><span>)</span><span>)</span>\n                 <span>.</span><span>addConverterFactory</span><span>(</span>GsonConverterFactory<span>.</span><span>create</span><span>(</span>gson<span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>这里来说一下有关 <code>RxJava2CallAdapterFactory</code> 的几个 <code>create()</code> 的区别；</p>\n<p>这个工厂一共有三个静态构造方法：</p>\n<ul>\n<li><code>create()</code></li>\n<li><code>createAsync()</code></li>\n<li><code>createScheduler(scheduler)</code></li>\n</ul>\n<p>第一个是产生一个同步的 <code>Adapter</code>，相当于调用 <code>call.execute()</code>；</p>\n<p>同时，也不对 <code>call.execute()</code> 的线程进行提前控制。</p>\n<p>第二个是产生一个异步的 <code>Adapter</code>，相当于调用 <code>call.enqueue()</code>；</p>\n<blockquote>\n<p><strong>此时，<code>Observable</code> 的 <code>subscribeOn()</code> 方法失效</strong></p>\n</blockquote>\n<p>第三个是指定一个 <code>Scheduler</code>，让 <code>Adapter</code> 产生的 <code>Observable</code> 一开始就 <code>subscribeOn</code> 到那个线程上。</p>\n<h2 id=\"_5-调用网络-api\"> 5. 调用网络 API</h2>\n<p>终于，我们可以开始对构建起来的 API 进行调用了，调用的方法和 Rxjava 的普通使用无异；</p>\n<p>下面给出一个基本的例子：</p>\n<div><pre><code><span>ApiManager</span><span>.</span><span>createTrendingService</span><span>(</span><span>TrendingApi</span><span>::</span><span>class</span><span>)</span>\n                   <span>.</span><span>getTrending</span><span>(</span>since<span>)</span>\n                   <span>.</span><span>subscribeOn</span><span>(</span><span>Schedulers</span><span>.</span><span>io</span><span>(</span><span>)</span><span>)</span>\n                   <span>.</span><span>observeOn</span><span>(</span><span>AndroidSchedulers</span><span>.</span><span>mainThread</span><span>(</span><span>)</span><span>)</span>\n                   <span>.</span><span>subscribe</span><span>(</span>observer<span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>这里，让我们的网络请求在 <code>io()</code> 线程上发生；</p>\n<p>然后在 Android 的主线程进行回调；</p>\n<p>需要注意的是，我们需要使用 <code>AndroidSchedulers</code> 来进行主线程的指定。</p>\n<blockquote>\n<p>特别需要注意的是，<code>observeOn()</code> 是可以多次指定的\n如果你需要对结果进行变换操作\n请务必将 <code>observeOn()</code> 紧挨在 <code>subscribe()</code> 进行设置\n否则就会在主线程进行请求的变换操作</p>\n</blockquote>\n<h2 id=\"_6-取消请求\"> 6. 取消请求</h2>\n<p>讲了这么多都是在讲发起请求，那么该如何取消请求呢？</p>\n<p>没有了 <code>Call</code> 对象，我们该如何取消已经发出去的请求呢？</p>\n<p>实际上 <code>adapter-rxjava2</code> 已经考虑到了这一点。</p>\n<p>在 <code>CallExecuteObservable</code> 中，它向 <code>observer</code> 的 <code>onSubscribe()</code> 传入了一个 <code>CallDisposable</code> 对象；</p>\n<p>通过这个 <code>CallDisposable</code>，当我们取消订阅时，就会自动地将请求取消。</p>\n<div><pre><code><span>private</span> <span>static</span> <span>final</span> <span>class</span> <span>CallDisposable</span> <span>implements</span> <span>Disposable</span> <span>{</span>\n   <span>private</span> <span>final</span> <span>Call</span><span><span>&lt;</span><span>?</span><span>></span></span> call<span>;</span>\n\n   <span>CallDisposable</span><span>(</span><span>Call</span><span><span>&lt;</span><span>?</span><span>></span></span> call<span>)</span> <span>{</span>\n     <span>this</span><span>.</span>call <span>=</span> call<span>;</span>\n   <span>}</span>\n\n   <span>@Override</span> <span>public</span> <span>void</span> <span>dispose</span><span>(</span><span>)</span> <span>{</span>\n     call<span>.</span><span>cancel</span><span>(</span><span>)</span><span>;</span>\n   <span>}</span>\n\n   <span>@Override</span> <span>public</span> <span>boolean</span> <span>isDisposed</span><span>(</span><span>)</span> <span>{</span>\n     <span>return</span> call<span>.</span><span>isCanceled</span><span>(</span><span>)</span><span>;</span>\n   <span>}</span>\n <span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>所以，只要在 <code>onSubscribe()</code> 中获取到 <code>Disposable</code> 对象；</p>\n<p>通过调用 <code>dispose()</code> 就能取消请求。</p>\n<h2 id=\"_7-其他\"> 7. 其他</h2>\n<p><code>adapter-rxjava2</code> 除了支持 <code>Observable</code> 以外，还支持了 <code>Flowable</code>、<code>Single</code> 和 <code>Maybe</code> 等对象；</p>\n<p>由于原理都是类似的，在这里就不详细展开了。</p>\n<blockquote>\n<p>不过，请务必注意 <code>Flowable</code> 和 <code>Observable</code> 的区别。</p>\n</blockquote>\n",
      "date_published": "2021-07-15T11:52:03.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Android"
      ]
    },
    {
      "title": "Retrofit2 使用简明手册",
      "url": "https://wafer.li/blog-corners/old-inventory/Android/Retrofit/Retrofit2%20%E4%BD%BF%E7%94%A8%E7%AE%80%E6%98%8E%E6%89%8B%E5%86%8C/",
      "id": "https://wafer.li/blog-corners/old-inventory/Android/Retrofit/Retrofit2%20%E4%BD%BF%E7%94%A8%E7%AE%80%E6%98%8E%E6%89%8B%E5%86%8C/",
      "summary": "<h2 id=\"_1-介绍\"> 1. 介绍</h2>\n<p>Retrofit 是 Square 公司出品的 Android 开源网络框架，使用注解和代理实现各项 HTTP 操作和 body 解析处理等。</p>\n<p>Retrofit2 通过与 Square 公司的另一开源库 OkHttp3 合并，由 OkHttp 进行 HTTP 操作，重定向响应，以及缓存支持。</p>\n",
      "content_html": "<h2 id=\"_1-介绍\"> 1. 介绍</h2>\n<p>Retrofit 是 Square 公司出品的 Android 开源网络框架，使用注解和代理实现各项 HTTP 操作和 body 解析处理等。</p>\n<p>Retrofit2 通过与 Square 公司的另一开源库 OkHttp3 合并，由 OkHttp 进行 HTTP 操作，重定向响应，以及缓存支持。</p>\n\n<h2 id=\"_2-初始化设置\"> 2. 初始化设置</h2>\n<h3 id=\"_2-1-添加依赖\"> 2.1 添加依赖</h3>\n<div><pre><code>compile &#39;com.squareup.retrofit2:retrofit:2.1.0&#39;\n</code></pre>\n<div><span>1</span><br></div></div><p>注意现在已经是 <strong>Retrofit2</strong> 的年代了。</p>\n<h3 id=\"_2-2-配置-proguard\"> 2.2 配置 Proguard</h3>\n<div><pre><code># Platform calls Class.forName on types which do not exist on Android to determine platform.\n-dontnote retrofit2.Platform\n# Platform used when running on RoboVM on iOS. Will not be used at runtime.\n-dontnote retrofit2.Platform$IOS$MainThreadExecutor\n# Platform used when running on Java 8 VMs. Will not be used at runtime.\n-dontwarn retrofit2.Platform$Java8\n# Retain generic type information for use by reflection by converters and adapters.\n-keepattributes Signature\n# Retain declared checked exceptions for use by a Proxy instance.\n-keepattributes Exceptions\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h2 id=\"_3-基本使用\"> 3. 基本使用</h2>\n<h3 id=\"_3-1-创建-apiservice-interface\"> 3.1 创建 ApiService interface</h3>\n<p>创建一个 <code>interface</code>，用于储存需要进行的网络操作 API</p>\n<div><pre><code><span>public</span> <span>interface</span> <span>GitHubService</span> <span>{</span>\n  <span>@GET</span><span>(</span><span>\"users/{user}/repos\"</span><span>)</span>\n  <span>Call</span><span><span>&lt;</span><span>List</span><span>&lt;</span><span>Repo</span><span>></span><span>></span></span> <span>listRepos</span><span>(</span><span>@Path</span><span>(</span><span>\"user\"</span><span>)</span> <span>String</span> user<span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>其中，方法的返回值是一个 <code>Call</code> 对象，泛型内部的 <code>List&lt;Repo&gt;</code> 是 GET 请求获取到的 HTTP Body 解析后的内容。\n方法的参数通过注解来区分是 Request 的 URL 参数还是 Body 参数。</p>\n<p>方法顶上的注解表明了该请求的 <strong>HTTP method</strong>，括号中的内容是请求<strong>所涉及到的 URL 部分</strong>。URL 的<strong>基础部分</strong>由 Retrofit 类构建时指定。</p>\n<h3 id=\"_3-2-构建-retrofit-类-获取-apiservice-实例\"> 3.2 构建 Retrofit 类，获取 ApiService 实例</h3>\n<div><pre><code><span>Retrofit</span> retrofit <span>=</span> <span>new</span> <span>Retrofit<span>.</span>Builder</span><span>(</span><span>)</span>\n    <span>.</span><span>baseUrl</span><span>(</span><span>\"https://api.github.com/\"</span><span>)</span>\n    <span>.</span><span>build</span><span>(</span><span>)</span><span>;</span>\n\n<span>GitHubService</span> service <span>=</span> retrofit<span>.</span><span>create</span><span>(</span><span>GitHubService</span><span>.</span><span>class</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id=\"_3-3-通过-apiservice-实例发起请求\"> 3.3 通过 ApiService 实例发起请求</h3>\n<ol>\n<li>\n<p>发起同步请求</p>\n<div><pre><code><span>Call</span><span><span>&lt;</span><span>List</span><span>&lt;</span><span>Repo</span><span>></span><span>></span></span> repos <span>=</span> service<span>.</span>listRepos<span>;</span>\nrepos<span>.</span><span>execute</span><span>(</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div></li>\n<li>\n<p>发起异步请求</p>\n<div><pre><code><span>Call</span><span><span>&lt;</span><span>List</span><span>&lt;</span><span>Repo</span><span>></span><span>></span></span> repos <span>=</span> service<span>.</span>listRepos<span>;</span>\nrepos<span>.</span><span>enqueue</span><span>(</span><span>new</span> <span>CallBack</span><span>(</span><span>)</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div></li>\n</ol>\n<h3 id=\"_3-4-取消请求\"> 3.4 取消请求</h3>\n<div><pre><code>repos<span>.</span><span>cancel</span><span>(</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"_4-可变-url-和-get-请求参数\"> 4. 可变 URL 和 GET 请求参数</h2>\n<h3 id=\"_4-1-可变-url\"> 4.1 可变 URL</h3>\n<div><pre><code><span>@GET</span><span>(</span><span>\"group/{id}/users\"</span><span>)</span>\n<span>Call</span><span><span>&lt;</span><span>List</span><span>&lt;</span><span>User</span><span>></span><span>></span></span> <span>groupList</span><span>(</span><span>@Path</span><span>(</span><span>\"id\"</span><span>)</span> <span>int</span> groupId<span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>上面的 <code>id</code> 在程序运行时可能会动态变化，对于这种参数， retrofit2 采用 <code>{}</code> 将其包住进行区分，并在方法形参中使用 <strong>@Path</strong> 注解来指定动态参数。</p>\n<h3 id=\"_4-2-query-参数\"> 4.2 Query 参数</h3>\n<div><pre><code><span>@GET</span><span>(</span><span>\"group/{id}/users\"</span><span>)</span>\n<span>Call</span><span><span>&lt;</span><span>List</span><span>&lt;</span><span>User</span><span>></span><span>></span></span> <span>groupList</span><span>(</span><span>@Path</span><span>(</span><span>\"id\"</span><span>)</span> <span>int</span> groupId<span>,</span> <span>@Query</span><span>(</span><span>\"sort\"</span><span>)</span> <span>String</span> sort<span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>通过使用 <strong>@Query</strong> 注解来指定请求参数。</p>\n<p>同时也可以直接在 URL 中添加。</p>\n<div><pre><code><span>@GET</span><span>(</span><span>\"users/list?sort=desc\"</span><span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>如果 query 参数过于复杂，可以使用 <code>Map</code> 对象来指定，此时需要使用 <strong>@QueryMap</strong> 注解来表示</p>\n<div><pre><code><span>@GET</span><span>(</span><span>\"group/{id}/users\"</span><span>)</span>\n<span>Call</span><span><span>&lt;</span><span>List</span><span>&lt;</span><span>User</span><span>></span><span>></span></span> <span>groupList</span><span>(</span><span>@Path</span><span>(</span><span>\"id\"</span><span>)</span> <span>int</span> groupId<span>,</span> <span>@QueryMap</span> <span>Map</span><span><span>&lt;</span><span>String</span><span>,</span> <span>String</span><span>></span></span> options<span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h2 id=\"_5-通过-body-请求\"> 5. 通过 Body 请求</h2>\n<div><pre><code><span>@POST</span><span>(</span><span>\"users/new\"</span><span>)</span>\n<span>Call</span><span><span>&lt;</span><span>User</span><span>></span></span> <span>createUser</span><span>(</span><span>@Body</span> <span>User</span> user<span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>POST 等方法均是通过 HTTP Body 来传输内容的， retrofit 中通过使用 <strong>@Body</strong> 注解来表示该参数通过 HTTP Body 来进行传输。</p>\n<p>Body 的类型会通过转换器(converter)反序列化成对应的类，如果没有指定转换器，则只能使用 Okhttp 的 <strong>RequestBody</strong> 作为转换的对象。</p>\n<h2 id=\"_6-form-url-encode-数据\"> 6. Form URL encode 数据</h2>\n<p>使用 <strong>@FormUrlEncoded</strong> 注解来发送 <code>application/x-www-form-urlencoded</code> 类型的数据。</p>\n<p>使用 <strong>@Field</strong> 注解来指示表单的项。</p>\n<div><pre><code><span>@FormUrlEncoded</span>\n<span>@POST</span><span>(</span><span>\"user/edit\"</span><span>)</span>\n<span>Call</span><span><span>&lt;</span><span>User</span><span>></span></span> update<span>:</span> <span>2016</span><span>-</span><span>11</span><span>-</span><span>26</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><blockquote>\n<p><code>application/x-www-form-urlencoded</code> 和 <code>application/json</code> 的异同\n前者说明，客户端会将表单参数通过 URL 加密传输，后者说明客户端会使用 HTTP Body 来传送 json。\n<code>application/x-www-form-urlendoced</code></p>\n<div><pre><code>{ Name : &#39;John Smith&#39;, Age: 23}\n</code></pre>\n<div><span>1</span><br></div></div><p><code>application/json</code></p>\n<div><pre><code>Name=John+Smith&amp;Age=23\n</code></pre>\n<div><span>1</span><br></div></div></blockquote>\n<h2 id=\"_7-上传文件\"> 7. 上传文件</h2>\n<p>使用 <strong>@Multipart</strong> 注解来表示要上传文件</p>\n<div><pre><code><span>@Multipart</span>\n<span>@PUT</span><span>(</span><span>\"user/photo\"</span><span>)</span>\n<span>Call</span><span><span>&lt;</span><span>User</span><span>></span></span> update<span>:</span> <span>2016</span><span>-</span><span>11</span><span>-</span><span>26</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id=\"_7-指定-header\"> 7. 指定 Header</h2>\n<p>通过 <strong>@Header</strong> 注解来指定 HTTP Header</p>\n<div><pre><code><span>@Headers</span><span>(</span><span>\"Cache-Control: max-age=640000\"</span><span>)</span>\n<span>@GET</span><span>(</span><span>\"widget/list\"</span><span>)</span>\n<span>Call</span><span><span>&lt;</span><span>List</span><span>&lt;</span><span>Widget</span><span>></span><span>></span></span> <span>widgetList</span><span>(</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>这个方法只适合用于单独的一个或者几个 API 设置头，如果需要加入公有头，则需要使用 OkHttp 拦截器实现。</p>\n<h2 id=\"_8-指定转换器\"> 8. 指定转换器</h2>\n<p>retrofit 除了 okhttp 默认的 RequestBody 外，还提供了其他知名的序列化和反序列化的库用作转换器。\n其中包括：</p>\n<ul>\n<li>Gson: <code>com.squareup.retrofit2:converter-gson</code></li>\n<li>Jackson: <code>com.squareup.retrofit2:converter-jackson</code></li>\n<li>Moshi: <code>com.squareup.retrofit2:converter-moshi</code></li>\n<li>Protobuf: <code>com.squareup.retrofit2:converter-protobuf</code></li>\n<li>Wire: <code>com.squareup.retrofit2:converter-wire</code></li>\n<li>Simple XML: <code>com.squareup.retrofit2:converter-simplexml</code></li>\n<li>Scalars (primitives, boxed, and String): <code>com.squareup.retrofit2:converter-scalars</code></li>\n</ul>\n<p>通过在构建 <code>Retorfit</code> 实例时，使用 <code>addConverterFactory()</code> 来实现。</p>\n<div><pre><code><span>Retrofit</span> retrofit <span>=</span> <span>new</span> <span>Retrofit<span>.</span>Builder</span><span>(</span><span>)</span>\n    <span>.</span><span>baseUrl</span><span>(</span><span>\"https://api.github.com\"</span><span>)</span>\n    <span>.</span><span>addConverterFactory</span><span>(</span><span>GsonConverterFactory</span><span>.</span><span>create</span><span>(</span><span>)</span><span>)</span>\n    <span>.</span><span>build</span><span>(</span><span>)</span><span>;</span>\n\n<span>GitHubService</span> service <span>=</span> retrofit<span>.</span><span>create</span><span>(</span><span>GitHubService</span><span>.</span><span>class</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><hr>\n<p>参考资料：</p>\n<p>Retrofit 主页：http://square.github.io/retrofit/</p>\n",
      "date_published": "2016-11-26T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Android"
      ]
    },
    {
      "title": "Retrofit2 高级配置",
      "url": "https://wafer.li/blog-corners/old-inventory/Android/Retrofit/Retrofit2%20%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE/",
      "id": "https://wafer.li/blog-corners/old-inventory/Android/Retrofit/Retrofit2%20%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE/",
      "summary": "<h2 id=\"_1-介绍\"> 1. 介绍</h2>\n<p>有时候，retrofit 提供的基础功能不够我们使用，比如我们需要打网络日志、强制缓存，设置公有头等。\n此时，我们就需要对 OkHttp 的 client 进行定制，随后让 retrofit 使用我们定制的 client，从而实现我们的需求。</p>\n",
      "content_html": "<h2 id=\"_1-介绍\"> 1. 介绍</h2>\n<p>有时候，retrofit 提供的基础功能不够我们使用，比如我们需要打网络日志、强制缓存，设置公有头等。\n此时，我们就需要对 OkHttp 的 client 进行定制，随后让 retrofit 使用我们定制的 client，从而实现我们的需求。</p>\n\n<h2 id=\"_2-初始化操作\"> 2. 初始化操作</h2>\n<p>为了定制我们自己的 Okhttp client，需要先获取 <code>Okhttp.Builder</code> 对象，通过对 builder 的不断处理，从而构建出我们所需要的 client。</p>\n<div><pre><code><span>OkHttpClient<span>.</span>Builder</span> builder <span>=</span> <span>new</span> <span>OkHttpClient<span>.</span>Builder</span><span>(</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"_3-设置缓存\"> 3. 设置缓存</h2>\n<p>Retrofit 在很长的一段时间内，都没有内置的缓存处理框架，但是在 Retrofit2 强制使用 OkHttp 之后，这个问题就不再存在了。\n我一开始入门 retrofit 的时候也是花了很长时间在找如何建立缓存处理机制，实际上这是没有必要的。</p>\n<p><strong>只要服务端提供正确的头信息，OkHttp 就能对应的实现缓存功能，而不需要其他设置。</strong></p>\n<p>当然，如果需要强制使用缓存的话，可以通过增加拦截器的办法设置 <code>Cache-Control</code> 头，从而构建客户端自己的缓存处理。</p>\n<p>但是，只要服务端提供正确的头信息，这一步就可以省略，OkHttp 会自动进行缓存。</p>\n<p>不过，我们还是需要通过 builder 的 <code>cache()</code> 方法来<strong>设置缓存的路径</strong></p>\n<div><pre><code><span>File</span> cacheDir <span>=</span> <span>getCacheDir</span><span>(</span><span>)</span><span>;</span>\n<span>Cache</span> cache <span>=</span> <span>new</span> <span>Cache</span><span>(</span>cacheDir<span>)</span><span>;</span>\nbuilder<span>.</span><span>cache</span><span>(</span>cache<span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"_3-1-构建自己的缓存处理策略\"> 3.1 构建自己的缓存处理策略</h3>\n<p>通过拦截器设置 <code>Cache-Control</code> 头，可以构建自己的缓存处理策略。</p>\n<div><pre><code><span>File</span> cacheFile <span>=</span> <span>new</span> <span>File</span><span>(</span><span>DemoApplication</span><span>.</span><span>getContext</span><span>(</span><span>)</span><span>.</span><span>getExternalCacheDir</span><span>(</span><span>)</span><span>,</span> <span>\"WuXiaolongCache\"</span><span>)</span><span>;</span>\n<span>Cache</span> cache <span>=</span> <span>new</span> <span>Cache</span><span>(</span>cacheFile<span>,</span> <span>1024</span> <span>*</span> <span>1024</span> <span>*</span> <span>50</span><span>)</span><span>;</span>\n<span>Interceptor</span> cacheInterceptor <span>=</span> <span>new</span> <span>Interceptor</span><span>(</span><span>)</span> <span>{</span>\n    <span>@Override</span>\n    <span>public</span> <span>Response</span> <span>intercept</span><span>(</span><span>Chain</span> chain<span>)</span> <span>throws</span> <span>IOException</span> <span>{</span>\n        <span>Request</span> request <span>=</span> chain<span>.</span><span>request</span><span>(</span><span>)</span><span>;</span>\n        <span>if</span> <span>(</span><span>!</span><span>AppUtils</span><span>.</span><span>networkIsAvailable</span><span>(</span><span>DemoApplication</span><span>.</span><span>getContext</span><span>(</span><span>)</span><span>)</span><span>)</span> <span>{</span>\n            request <span>=</span> request<span>.</span><span>newBuilder</span><span>(</span><span>)</span>\n                    <span>.</span><span>cacheControl</span><span>(</span><span>CacheControl</span><span>.</span>FORCE_CACHE<span>)</span>\n                    <span>.</span><span>build</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n        <span>Response</span> response <span>=</span> chain<span>.</span><span>proceed</span><span>(</span>request<span>)</span><span>;</span>\n        <span>if</span> <span>(</span><span>AppUtils</span><span>.</span><span>networkIsAvailable</span><span>(</span><span>DemoApplication</span><span>.</span><span>getContext</span><span>(</span><span>)</span><span>)</span><span>)</span> <span>{</span>\n            <span>int</span> maxAge <span>=</span> <span>0</span><span>;</span>\n            <span>// 有网络时 设置缓存超时时间0个小时</span>\n            response<span>.</span><span>newBuilder</span><span>(</span><span>)</span>\n                    <span>.</span><span>header</span><span>(</span><span>\"Cache-Control\"</span><span>,</span> <span>\"public, max-age=\"</span> <span>+</span> maxAge<span>)</span>\n                    <span>.</span><span>removeHeader</span><span>(</span><span>\"WuXiaolong\"</span><span>)</span><span>// 清除头信息，因为服务器如果不支持，会返回一些干扰信息，不清除下面无法生效</span>\n                    <span>.</span><span>build</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span> <span>else</span> <span>{</span>\n            <span>// 无网络时，设置超时为4周</span>\n            <span>int</span> maxStale <span>=</span> <span>60</span> <span>*</span> <span>60</span> <span>*</span> <span>24</span> <span>*</span> <span>28</span><span>;</span>\n            response<span>.</span><span>newBuilder</span><span>(</span><span>)</span>\n                    <span>.</span><span>header</span><span>(</span><span>\"Cache-Control\"</span><span>,</span> <span>\"public, only-if-cached, max-stale=\"</span> <span>+</span> maxStale<span>)</span>\n                    <span>.</span><span>removeHeader</span><span>(</span><span>\"nyn\"</span><span>)</span>\n                    <span>.</span><span>build</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n        <span>return</span> response<span>;</span>\n    <span>}</span>\n<span>}</span><span>;</span>\nbuilder<span>.</span><span>cache</span><span>(</span>cache<span>)</span><span>.</span><span>addInterceptor</span><span>(</span>cacheInterceptor<span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br></div></div><h2 id=\"_4-头信息\"> 4. 头信息</h2>\n<p>有时候我们需要自己定义头信息；\n包括最基本的 <code>Accept</code> 和 <code>Content-Type</code> 信息；\n还有就是服务器要求验证的时候，我们需要提供 <code>Authentication</code> 信息。</p>\n<p>头信息当然可以在 <code>ApiServices</code> 接口中通过注解来指定；\n但是如果我们要所有的请求都带上头信息的话，使用注解来指定势必显得太过麻烦了。</p>\n<p>此时，我们使用 OkHttp 的 <code>Interceptor</code> 来进行。</p>\n<div><pre><code><span>Interceptor</span> interceptor <span>=</span> <span>new</span> <span>Interceptor</span><span>(</span><span>)</span> <span>{</span>\n    <span>@Override</span>\n    <span>public</span> <span>Response</span> <span>intercept</span><span>(</span><span>Chain</span> chain<span>)</span> <span>throws</span> <span>IOException</span> <span>{</span>\n        <span>// 直接使用旧请求新建</span>\n        <span>Request</span> originalRequest <span>=</span> chain<span>.</span><span>request</span><span>(</span><span>)</span><span>;</span>\n\n        <span>Request</span> request <span>=</span> originalRequest<span>.</span><span>newBuilder</span><span>(</span><span>)</span>\n                        <span>.</span><span>header</span><span>(</span><span>\"Accept\"</span><span>,</span> <span>\"application/json\"</span><span>)</span><span>;</span>\n                        <span>.</span><span>header</span><span>(</span><span>\"Content-Type\"</span><span>,</span> <span>\"application/json\"</span><span>)</span><span>;</span>\n\n       <span>return</span> chain<span>.</span><span>proceed</span><span>(</span>request<span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span><span>;</span>\n\nbuilder<span>.</span><span>addInterceptor</span><span>(</span>interceptor<span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><h2 id=\"_5-日志\"> 5. 日志</h2>\n<p>众所周知，网络如果没有日志打印是无法调 bug 的。\n那么如何在使用 retrofit 时打印网络日志呢？</p>\n<p>同样，我们使用还是 OkHttp 的 <code>Interceptor</code>。</p>\n<p>但是，这次稍微有点不同，因为我们使用的是 retrofit 提供的官方打日志专用拦截器。</p>\n<p><strong>注意，日志拦截器必须在第一位！</strong></p>\n<h3 id=\"_5-1-添加依赖\"> 5.1 添加依赖</h3>\n<div><pre><code>compile <span>'com.squareup.okhttp3:logging-interceptor:3.4.1'</span>\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_5-2-配置拦截器\"> 5.2 配置拦截器</h3>\n<div><pre><code><span>HttpLoggingInterceptor</span> logging <span>=</span> <span>new</span> <span>HttpLoggingInterceptor</span><span>(</span><span>)</span><span>;</span>\nlogging<span>.</span><span>setLevel</span><span>(</span><span>Level</span><span>.</span>BASIC<span>)</span><span>;</span>\n\nbuilder<span>.</span><span>addIntercetor</span><span>(</span>logging<span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id=\"_6-构建-client\"> 6. 构建 client</h2>\n<p>当配置完毕后，就可以用我们的 Builder 生成 client 了。</p>\n<div><pre><code>client <span>=</span> builder<span>.</span><span>build</span><span>(</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"_7-将-client-加入-retrofit-builder\"> 7. 将 client 加入 retrofit builder</h2>\n<p>最后，要让我们的 retrofit 使用 client 才能达到效果。</p>\n<div><pre><code>retrofitBuilder<span>.</span><span>client</span><span>(</span>client<span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div>",
      "date_published": "2016-11-07T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Android"
      ]
    },
    {
      "title": "Splash Screen",
      "url": "https://wafer.li/blog-corners/old-inventory/Android/Splash%20Screen/",
      "id": "https://wafer.li/blog-corners/old-inventory/Android/Splash%20Screen/",
      "summary": "<h2 id=\"_1-在-activity-中实现\"> 1. 在 Activity 中实现</h2>\n<ul>\n<li>\n<p>将此 <code>Activity</code> 设置为 <strong>LANCHER</strong> <code>Activity</code></p>\n</li>\n<li>\n<p>记得加载完之后要跳转到其他 <code>Activity</code> 同时 <code>finish()</code> 这个 Activity</p>\n</li>\n<li>\n<p>使用 <code>Handler.postDelayed()</code> 方法去增强延迟，以免加载过快引起用户体验下降</p>\n<blockquote>\n<p>记得要在<strong>视图被加载之后</strong>使用</p>\n</blockquote>\n</li>\n</ul>\n<div><pre><code><span>/**\n* Use it after\n* setContentView() in onCreate() in Activity\n*/</span>\n<span>new</span> <span>Handler</span><span>(</span><span>)</span><span>.</span><span>postDelayed</span><span>(</span><span>new</span> <span>Runnable</span><span>(</span><span>)</span> <span>{</span>\n            <span>public</span> <span>void</span> <span>run</span><span>(</span><span>)</span> <span>{</span>\n            <span>goHome</span><span>(</span><span>)</span><span>;</span>\n            <span>}</span>\n            <span>}</span><span>,</span> SPLASH_DELAY_MILLIS<span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div>",
      "content_html": "<h2 id=\"_1-在-activity-中实现\"> 1. 在 Activity 中实现</h2>\n<ul>\n<li>\n<p>将此 <code>Activity</code> 设置为 <strong>LANCHER</strong> <code>Activity</code></p>\n</li>\n<li>\n<p>记得加载完之后要跳转到其他 <code>Activity</code> 同时 <code>finish()</code> 这个 Activity</p>\n</li>\n<li>\n<p>使用 <code>Handler.postDelayed()</code> 方法去增强延迟，以免加载过快引起用户体验下降</p>\n<blockquote>\n<p>记得要在<strong>视图被加载之后</strong>使用</p>\n</blockquote>\n</li>\n</ul>\n<div><pre><code><span>/**\n* Use it after\n* setContentView() in onCreate() in Activity\n*/</span>\n<span>new</span> <span>Handler</span><span>(</span><span>)</span><span>.</span><span>postDelayed</span><span>(</span><span>new</span> <span>Runnable</span><span>(</span><span>)</span> <span>{</span>\n            <span>public</span> <span>void</span> <span>run</span><span>(</span><span>)</span> <span>{</span>\n            <span>goHome</span><span>(</span><span>)</span><span>;</span>\n            <span>}</span>\n            <span>}</span><span>,</span> SPLASH_DELAY_MILLIS<span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div>\n<h2 id=\"_2-在-fragment-中使用\"> 2. 在 Fragment 中使用</h2>\n<p>当在 Fragment 中时，与 Activity 并无显著区别，<strong>记住要在视图被加载之后使用</strong>\n所以一般在 <code>onCreateView()</code> 之后调用 delay。</p>\n<p>根据 <code>Fragment</code> 生命周期来看，应该在 <code>onStart()</code> 方法中使用这个比较合适</p>\n",
      "date_published": "2016-10-14T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Android"
      ]
    },
    {
      "title": "Style 和 Theme 的简明对比",
      "url": "https://wafer.li/blog-corners/old-inventory/Android/Style%20%E5%92%8C%20Theme%20%E7%9A%84%E7%AE%80%E6%98%8E%E5%AF%B9%E6%AF%94/",
      "id": "https://wafer.li/blog-corners/old-inventory/Android/Style%20%E5%92%8C%20Theme%20%E7%9A%84%E7%AE%80%E6%98%8E%E5%AF%B9%E6%AF%94/",
      "summary": "<h2 id=\"_1-style-应用于局部-而-theme-应用于整体\"> 1. Style 应用于局部，而 Theme 应用于整体</h2>\n<p>一个 <code>Style</code> 只对一个 <code>View</code> 组件有效；</p>\n<p>而一个 <code>Theme</code> 对整个 <code>application</code> 或 <code>activity</code> 或者一个 <code>ViewGroup</code>(<code>View</code> 组件和它的子项) 有效。</p>\n",
      "content_html": "<h2 id=\"_1-style-应用于局部-而-theme-应用于整体\"> 1. Style 应用于局部，而 Theme 应用于整体</h2>\n<p>一个 <code>Style</code> 只对一个 <code>View</code> 组件有效；</p>\n<p>而一个 <code>Theme</code> 对整个 <code>application</code> 或 <code>activity</code> 或者一个 <code>ViewGroup</code>(<code>View</code> 组件和它的子项) 有效。</p>\n\n<h2 id=\"_2-style-是组件多种属性的集合\"> 2. Style 是组件多种属性的集合</h2>\n<p>实际上，一个组件的 style 就是其多种属性的集合。</p>\n<p>也就是说，可以直接在 style 中设置 theme。</p>\n",
      "date_published": "2016-10-14T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Android"
      ]
    },
    {
      "title": "TextInputLayout 使用",
      "url": "https://wafer.li/blog-corners/old-inventory/Android/TextInputLayout%20%E4%BD%BF%E7%94%A8/",
      "id": "https://wafer.li/blog-corners/old-inventory/Android/TextInputLayout%20%E4%BD%BF%E7%94%A8/",
      "summary": "<h2 id=\"_1-介绍\"> 1. 介绍</h2>\n<p><code>TextInputLayout</code> 是 Android 6.0 提供的新的输入框架，可以显示一个更好的输入效果。</p>\n<p>以下是 <code>TextInputLaout</code> 的显示效果</p>\n<center>![](https://blog.incredibleandros.com/images/textInputlayout.gif)</center>\n",
      "content_html": "<h2 id=\"_1-介绍\"> 1. 介绍</h2>\n<p><code>TextInputLayout</code> 是 Android 6.0 提供的新的输入框架，可以显示一个更好的输入效果。</p>\n<p>以下是 <code>TextInputLaout</code> 的显示效果</p>\n<center>![](https://blog.incredibleandros.com/images/textInputlayout.gif)</center>\n\n<h2 id=\"_2-基本使用\"> 2. 基本使用</h2>\n<h3 id=\"_2-1-添加依赖框架\"> 2.1 添加依赖框架</h3>\n<p>TextInputLayout 是 Android design 库的控件，所以需要添加 Android 的 design 库。</p>\n<div><pre><code>  compile &#39;com.android.support:appcompat-v7:23.3.0&#39;\n  compile &#39;com.android.support:design:23.3.0&#39;\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h3 id=\"_2-2-xml-代码\"> 2.2 XML 代码</h3>\n<p>在这里要注意， <code>TextInputLayout</code> 实际上是一个 <code>Layout</code> 控件，<strong>不能提供输入框功能</strong></p>\n<p>输入框应由其中的 <code>TextInputEditText</code> 提供。</p>\n<p>其实使用 <code>EditText</code> 代替也是可以的，但是 Google 官方更加推崇 TextInput 系列的配套使用</p>\n<div><pre><code>&lt;android.support.design.widget.TextInputLayout\n          android:layout_width=&quot;fill_parent&quot;\n          android:id=&quot;@+id/your_matchcode_holder&quot;\n          app:errorEnabled=&quot;true&quot;\n          android:layout_height=&quot;wrap_content&quot;&gt;\n\n        &lt;android.support.design.widget.TextInputEditText\n            android:id=&quot;@+id/your_matchcode&quot;\n            android:layout_width=&quot;match_parent&quot;\n            android:layout_height=&quot;wrap_content&quot;\n&lt;/android.support.design.widget.TextInputLayout&gt;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h3 id=\"_2-3-相应效果的设置\"> 2.3 相应效果的设置</h3>\n<p><code>TextInputLayout</code> 区别于 <code>EditText</code> 的一点在于，一些提示效果，如 Hint 和 Error Message 需要在 <strong>Java</strong> 代码中进行设置。</p>\n<p>注意，因为 <code>TextInputLayout</code> 中内置了 <code>getEditText()</code> 方法，所以<strong>只需要给 <code>TextInputLayout</code> 设置 id 即可</strong>。</p>\n<h4 id=\"_2-3-1-hint-效果\"> 2.3.1 Hint 效果</h4>\n<p>设置 <code>TextInputLayout</code> 的 Hint 效果很简单，只需要调用 <code>setHint()</code> 方法即可。</p>\n<div><pre><code>phoneWrapper<span>.</span><span>setHint</span><span>(</span><span>getString</span><span>(</span><span>R</span><span>.</span>string<span>.</span>login_hint_phone<span>)</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div><h4 id=\"_2-3-2-error-效果\"> 2.3.2 Error 效果</h4>\n<p>设置 <code>TextInputLayout</code> 的 Error 效果则有点 tricky。</p>\n<p>一般来说，设置 Error 效果和 Hint 一样，调用 <code>setError()</code> 即可。</p>\n<div><pre><code>phoneWrapper<span>.</span><span>setError</span><span>(</span>phoneNumberErrorMessage<span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div><blockquote>\n<p><code>setError(&quot;error message&quot;)</code> 会判断如果 Error 没有 Enable 的话，会先调用 <code>setErrorEnable(true)</code>，所以设置 Error <strong>不需要事先设置 <code>setErrorEnable(true)</code></strong></p>\n</blockquote>\n<p>但是，当需要清除 Error 效果时，则<strong>必须需要两步。</strong></p>\n<ol>\n<li>设置 <code>setError(null)</code></li>\n<li>设置 <code>setErrorEnable(false)</code></li>\n</ol>\n<blockquote>\n<p>原因在于，<code>setError(null)</code> 只会把 <code>Error</code> 设置为 <code>View.INVISIABLE</code>，不会消除错误信息所占的空间。\n所以，我们需要使用 <code>setErrorEnable(false)</code> 去将显示错误的 <code>TextView</code> 删除掉，从而消除错误所占的空间。</p>\n</blockquote>\n<blockquote>\n<p>那能不能<strong>只调用 <code>setErrorEnable(false)</code> 呢</strong>？\n答案是<strong>不能</strong>。\n原因在于，<code>setErrorEnable(false)</code>，不会消除存储错误信息的 <code>mError</code>，而当再次出现同样的错误，设置 <code>setError(&quot;error message&quot;)</code> 时，由于 <code>mError</code> 没有更新，导致 <code>setError()</code> 判断<strong>前后错误信息一致，直接返回，没有重新生成 <code>TextView</code>，从而错误信息就不会再显示了。</strong></p>\n</blockquote>\n",
      "image": "https://blog.incredibleandros.com/images/textInputlayout.gif",
      "date_published": "2016-10-14T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Android"
      ]
    },
    {
      "title": "ToolBar",
      "url": "https://wafer.li/blog-corners/old-inventory/Android/ToolBar/",
      "id": "https://wafer.li/blog-corners/old-inventory/Android/ToolBar/",
      "summary": "<h2 id=\"_1-使用\"> 1.  使用</h2>\n<ol>\n<li>1 定义风格</li>\n</ol>\n<p>在使用 Toolbar 之前，我们首先要对其风格进行一些调整。</p>\n<ol>\n<li>\n<p>使用 <code>AppTheme.Base</code> 进行一些方便的全局设定</p>\n<blockquote>\n<p>5.0(API 21) 之后，Google 发表了 Material Design，由于和之前的风格有很大的不同， Google 采用了两个文件—— <code>res/values/style.xml</code> 和 <code>res/values-v21/style.xml</code></p>\n</blockquote>\n</li>\n</ol>\n",
      "content_html": "<h2 id=\"_1-使用\"> 1.  使用</h2>\n<ol>\n<li>1 定义风格</li>\n</ol>\n<p>在使用 Toolbar 之前，我们首先要对其风格进行一些调整。</p>\n<ol>\n<li>\n<p>使用 <code>AppTheme.Base</code> 进行一些方便的全局设定</p>\n<blockquote>\n<p>5.0(API 21) 之后，Google 发表了 Material Design，由于和之前的风格有很大的不同， Google 采用了两个文件—— <code>res/values/style.xml</code> 和 <code>res/values-v21/style.xml</code></p>\n</blockquote>\n</li>\n</ol>\n\n<div><pre><code><span><span><span>&lt;</span>resources</span><span>></span></span>\n\n  <span>&lt;!-- Base application theme. --></span>\n  <span><span><span>&lt;</span>style</span> <span>name</span><span><span>=</span><span>\"</span>AppTheme<span>\"</span></span> <span>parent</span><span><span>=</span><span>\"</span>AppTheme.Base<span>\"</span></span><span>></span></span>\n  <span><span><span>&lt;/</span>style</span><span>></span></span>\n\n  <span><span><span>&lt;</span>style</span> <span>name</span><span><span>=</span><span>\"</span>AppTheme.Base<span>\"</span></span> <span>parent</span><span><span>=</span><span>\"</span>Theme.AppCompat<span>\"</span></span><span>></span></span>\n    <span>&lt;!-- 取消 ActionBar，使用 ToolBar 来代替 ActionBar --></span>\n    <span><span><span>&lt;</span>item</span> <span>name</span><span><span>=</span><span>\"</span>windowActionBar<span>\"</span></span><span>></span></span>false<span><span><span>&lt;/</span>item</span><span>></span></span>\n\n\t<span>&lt;!--\n\t\t用这条语句来防止复制粘贴时把 ToolBar 挤下去的问题；\n\t\t两句只能选一句来使用\n\t--></span>\n    <span>&lt;!-- 编译 API 低于 22 时，使用下面这条 --></span>\n    <span><span><span>&lt;</span>del</span><span>></span></span><span><span><span>&lt;</span>item</span> <span>name</span><span><span>=</span><span>\"</span>android:windowNoTitle<span>\"</span></span><span>></span></span>true<span><span><span>&lt;/</span>item</span><span>></span></span><span><span><span>&lt;/</span>del</span><span>></span></span>\n    <span>&lt;!-- 使用 API Level 22 编译的话，使用下面这条 --></span>\n    <span><span><span>&lt;</span>item</span> <span>name</span><span><span>=</span><span>\"</span>windowNoTitle<span>\"</span></span><span>></span></span>true<span><span><span>&lt;/</span>item</span><span>></span></span>\n  <span><span><span>&lt;/</span>style</span><span>></span></span>\n\n<span><span><span>&lt;/</span>resources</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><h3 id=\"_1-2-添加组件到界面\"> 1.2 添加组件到界面</h3>\n<p>在 <code>Activity</code> 或 <code>Fragment</code> 的布局 xml 文件中添加 Toolbar 控件</p>\n<div><pre><code>&lt;android.support.v7.widget.Toolbar\n  android:id=&quot;@+id/toolbar&quot;\n  android:layout_height=&quot;?attr/actionBarSize&quot;\n  android:layout_width=&quot;match_parent&quot; &gt;\n\n&lt;/android.support.v7.widget.Toolbar&gt;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>注意采用 <code>support v7</code> 包的 <code>toolbar</code> 否则只有 <strong>API 21</strong> 以后的版本才能使用，即不兼容 4.0</p>\n<h3 id=\"_1-3-自定义颜色等其他属性\"> 1.3 自定义颜色等其他属性</h3>\n<p>在上述的两个 style 文件中设定你想要的 Toolbar 的各种属性。添加属性时，在 <code>&lt;style&gt;</code> 下添加一个 <code>&lt;item&gt;</code> 即可。</p>\n<p>例如：</p>\n<div><pre><code><span><span><span>&lt;</span>style</span> <span>name</span><span><span>=</span><span>\"</span>AppTheme.Base<span>\"</span></span> <span>parent</span><span><span>=</span><span>\"</span>Theme.AppCompat<span>\"</span></span><span>></span></span>\n  <span><span><span>&lt;</span>item</span> <span>name</span><span><span>=</span><span>\"</span>windowActionBar<span>\"</span></span><span>></span></span>false<span><span><span>&lt;/</span>item</span><span>></span></span>\n  <span><span><span>&lt;</span>item</span> <span>name</span><span><span>=</span><span>\"</span>android:windowNoTitle<span>\"</span></span><span>></span></span>true<span><span><span>&lt;/</span>item</span><span>></span></span>\n  <span>&lt;!-- Actionbar color --></span>\n  <span><span><span>&lt;</span>item</span> <span>name</span><span><span>=</span><span>\"</span>colorPrimary<span>\"</span></span><span>></span></span>@color/accent_material_dark<span><span><span>&lt;/</span>item</span><span>></span></span>\n  <span>&lt;!--Status bar color--></span>\n  <span><span><span>&lt;</span>item</span> <span>name</span><span><span>=</span><span>\"</span>colorPrimaryDark<span>\"</span></span><span>></span></span>@color/accent_material_light<span><span><span>&lt;/</span>item</span><span>></span></span>\n  <span>&lt;!--Window color--></span>\n  <span><span><span>&lt;</span>item</span> <span>name</span><span><span>=</span><span>\"</span>android:windowBackground<span>\"</span></span><span>></span></span>@color/dim_foreground_material_dark<span><span><span>&lt;/</span>item</span><span>></span></span>\n<span><span><span>&lt;/</span>style</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>可以设定的属性有：</p>\n<ul>\n<li><code>App bar</code> :  即原来 <code>ActionBar</code> 的底色，通过添加 <code>colorPrimary</code> 属性即可。</li>\n<li><code>navigationBarColor</code> : 此为导航栏底色，仅在 <strong>API 21 以上</strong> 才有效, 必须设置在 <code>res/values-v21/style.xml</code> 中</li>\n<li><code>windowBackground</code> : 主视窗底色。</li>\n</ul>\n<p><img src=\"https://www.jcodecraeer.com/uploads/20141118/14162849281137.png\" alt=\"Style\" /></p>\n<h3 id=\"_1-4-设置控件\"> 1.4 设置控件</h3>\n<p>一般来说 ，<code>Toolbar</code> 有以下控件</p>\n<p><img src=\"https://www.jcodecraeer.com/uploads/20141118/1416285884351.png\" alt=\"Component\" /></p>\n<p>有关的代码如下，文件为 <code>Activity</code> 的对应 <code>.java</code> 文件 <code>MainAcitivity.java</code></p>\n<div><pre><code><span>Toolbar</span> toolbar <span>=</span> <span>(</span><span>Toolbar</span><span>)</span> <span>findViewById</span><span>(</span><span>R</span><span>.</span>id<span>.</span>toolbar<span>)</span><span>;</span>\n\n<span>// App Logo</span>\ntoolbar<span>.</span><span>setLogo</span><span>(</span><span>R</span><span>.</span>drawable<span>.</span>ic_launcher<span>)</span><span>;</span>\n<span>// Title</span>\ntoolbar<span>.</span><span>setTitle</span><span>(</span><span>\"My Title\"</span><span>)</span><span>;</span>\n<span>// Sub Title</span>\ntoolbar<span>.</span><span>setSubtitle</span><span>(</span><span>\"Sub title\"</span><span>)</span><span>;</span>\n\n<span>setSupportActionBar</span><span>(</span>toolbar<span>)</span><span>;</span>\n\n<span>// Navigation Icon 要设定在 setSupoortActionBar 之后才有作用</span>\n<span>// 否則會出現 back button</span>\ntoolbar<span>.</span><span>setNavigationIcon</span><span>(</span><span>R</span><span>.</span>drawable<span>.</span>ab_android<span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>菜单部分：</p>\n<ol>\n<li>\n<p>先在相应的<code>menu</code> 文件设置<code>MenuItem</code> <code>res/menu/menu_main.xml</code></p>\n<div><pre><code><span><span><span>&lt;</span>menu</span> <span><span>xmlns:</span>android</span><span><span>=</span><span>\"</span>http://schemas.android.com/apk/res/android<span>\"</span></span>\n      <span><span>xmlns:</span>app</span><span><span>=</span><span>\"</span>http://schemas.android.com/apk/res-auto<span>\"</span></span>\n      <span><span>xmlns:</span>tools</span><span><span>=</span><span>\"</span>http://schemas.android.com/tools<span>\"</span></span>\n      <span><span>tools:</span>context</span><span><span>=</span><span>\"</span>.MainActivity<span>\"</span></span><span>></span></span>\n\n  <span><span><span>&lt;</span>item</span> <span><span>android:</span>id</span><span><span>=</span><span>\"</span>@+id/action_edit<span>\"</span></span>\n        <span><span>android:</span>title</span><span><span>=</span><span>\"</span>@string/action_edit<span>\"</span></span>\n        <span><span>android:</span>orderInCategory</span><span><span>=</span><span>\"</span>80<span>\"</span></span>\n        <span><span>android:</span>icon</span><span><span>=</span><span>\"</span>@drawable/ab_edit<span>\"</span></span>\n        <span><span>app:</span>showAsAction</span><span><span>=</span><span>\"</span>ifRoom<span>\"</span></span> <span>/></span></span>\n\n  <span><span><span>&lt;</span>item</span> <span><span>android:</span>id</span><span><span>=</span><span>\"</span>@+id/action_share<span>\"</span></span>\n        <span><span>android:</span>title</span><span><span>=</span><span>\"</span>@string/action_edit<span>\"</span></span>\n        <span><span>android:</span>orderInCategory</span><span><span>=</span><span>\"</span>90<span>\"</span></span>\n        <span><span>android:</span>icon</span><span><span>=</span><span>\"</span>@drawable/ab_share<span>\"</span></span>\n        <span><span>app:</span>showAsAction</span><span><span>=</span><span>\"</span>ifRoom<span>\"</span></span> <span>/></span></span>\n\n  <span><span><span>&lt;</span>item</span> <span><span>android:</span>id</span><span><span>=</span><span>\"</span>@+id/action_settings<span>\"</span></span>\n        <span><span>android:</span>title</span><span><span>=</span><span>\"</span>@string/action_settings<span>\"</span></span>\n        <span><span>android:</span>orderInCategory</span><span><span>=</span><span>\"</span>100<span>\"</span></span>\n        <span><span>app:</span>showAsAction</span><span><span>=</span><span>\"</span>never<span>\"</span></span><span>/></span></span>\n<span><span><span>&lt;/</span>menu</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div></li>\n<li>\n<p>在 <code>java</code> 文件中设定 <code>OnMenuItemClickListener</code></p>\n<div><pre><code><span>private</span> <span>Toolbar<span>.</span>OnMenuItemClickListener</span> onMenuItemClick <span>=</span> <span>new</span> <span>Toolbar<span>.</span>OnMenuItemClickListener</span><span>(</span><span>)</span> <span>{</span>\n\t<span>@Override</span>\n\t<span>public</span> <span>boolean</span> <span>onMenuItemClick</span><span>(</span><span>MenuItem</span> menuItem<span>)</span> <span>{</span>\n\t\t<span>String</span> msg <span>=</span> <span>\"\"</span><span>;</span>\n\t\t<span>switch</span> <span>(</span>menuItem<span>.</span><span>getItemId</span><span>(</span><span>)</span><span>)</span> <span>{</span>\n\t\t\t<span>case</span> <span>R</span><span>.</span>id<span>.</span>action_edit<span>:</span>\n\t\t\t\tmsg <span>+=</span> <span>\"Click edit\"</span><span>;</span>\n\t\t\t\t<span>break</span><span>;</span>\n\t\t\t<span>case</span> <span>R</span><span>.</span>id<span>.</span>action_share<span>:</span>\n\t\t\t\tmsg <span>+=</span> <span>\"Click share\"</span><span>;</span>\n\t\t\t\t<span>break</span><span>;</span>\n\t\t\t<span>case</span> <span>R</span><span>.</span>id<span>.</span>action_settings<span>:</span>\n\t\t\t\tmsg <span>+=</span> <span>\"Click settings\"</span><span>;</span>\n\t\t\t\t<span>break</span><span>;</span>\n\t\t<span>}</span>\n\n\t\t<span>if</span><span>(</span><span>!</span>msg<span>.</span><span>equals</span><span>(</span><span>\"\"</span><span>)</span><span>)</span> <span>{</span>\n\t\t\t<span>Toast</span><span>.</span><span>makeText</span><span>(</span><span>MainActivity</span><span>.</span><span>this</span><span>,</span> msg<span>,</span> <span>Toast</span><span>.</span>LENGTH_SHORT<span>)</span><span>.</span><span>show</span><span>(</span><span>)</span><span>;</span>\n\t\t<span>}</span>\n\t\t<span>return</span> <span>true</span><span>;</span>\n\t<span>}</span>\n<span>}</span><span>;</span>\n\n<span>// 将 Listener 传给设置方法</span>\n<span>// 其实也可以使用匿名类构造</span>\ntoolbar<span>.</span><span>setOnMenuItemClickListener</span><span>(</span>onMenuItemClick<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div><blockquote>\n<p>需要注意的是，<code>setOnMenuItemClickListener()</code> 需要在 <code>setActionBar()</code> 或 <code>setSupportActionBar()</code> 之后才能生效</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"_2-动态加载\"> 2. 动态加载</h2>\n<p>这里所指的是 在使用 <code>Fragment</code> 时，由于不同 <code>Fragment</code> 可能需要不同的 <code>ActionBar</code> 标题或者其他组件，由此产生的动态加载问题。</p>\n<h3 id=\"_2-1-动态更改标题\"> 2.1 动态更改标题</h3>\n<p>当 <code>Title</code> 需要根据 <code>Fragment</code> 的内容进行动态加载，<strong>不要直接使用 Toolbar 的</strong> <code>setTitle()</code>，而应该使用 <code>getActionBar()</code> 来进行标题更改。</p>\n<blockquote>\n<p>由于 Android Studio 会自动产生 Warning，认为 <code>getActionBar()</code> 有可能返回一个空值，可以使用 <code>assert</code> 来进行断言，说明其不会返回 <code>null</code></p>\n</blockquote>\n<div><pre><code><span>// 此处断言用于取消 Warnning，</span>\n<span>// 但必须保证已经 setActionBar(toolbar);</span>\n<span>assert</span> <span>getActionBar</span><span>(</span><span>)</span> <span>!=</span> <span>null</span><span>;</span>\n<span>getActionBar</span><span>(</span><span>)</span><span>.</span><span>setTitle</span><span>(</span><span>\"需要的标题\"</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id=\"_2-2-动态加载-menuitem\"> 2.2 动态加载 MenuItem</h3>\n<p>需要动态加载 <code>MenuItem</code> 时，应该在各个 <code>Fragment</code> 重载 <code>onCreateOptionsMenu()</code> 方法。</p>\n<div><pre><code><span>@Override</span>\n<span>public</span> <span>void</span> <span>onCreateOptionsMenu</span><span>(</span><span>Menu</span> menu<span>,</span> <span>MenuInflater</span> inflater<span>)</span> <span>{</span>\n        inflater<span>.</span><span>inflate</span><span>(</span><span>R</span><span>.</span>menu<span>.</span>pictrue_list<span>,</span> menu<span>)</span><span>;</span>\n        <span>super</span><span>.</span><span>onCreateOptionsMenu</span><span>(</span>menu<span>,</span>inflater<span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>同时，需要在 <code>Fragment</code> 的 <code>onCreate()</code> 方法中添加 <code>setHasOptionMenu(true)</code>，指明 <code>Fragment</code> 应显示菜单并对菜单进行响应。</p>\n<div><pre><code><span>@Override</span>\n<span>public</span> <span>void</span> <span>onCreate</span><span>(</span><span>Bundle</span> savedInstanceState<span>)</span> <span>{</span>\n    <span>// TODO Auto-generated method stub</span>\n    <span>super</span><span>.</span><span>onCreate</span><span>(</span>savedInstanceState<span>)</span><span>;</span>\n    <span>setHasOptionsMenu</span><span>(</span><span>true</span><span>)</span><span>;</span>    <span>// 必须添加，否则无法显示 menu</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>需要注意的是， <strong><code>Fragment</code> 会自动继承 <code>Activity</code> 已经 inflate 的 <code>MenuItem</code></strong>，所以如果 <code>Fragment</code> 需要一个全新的 <code>MenuItem</code> 那就最好<strong>重新 inflate 新的 xml</strong>。</p>\n<blockquote>\n<p>否则，MenuItem 将会重复出现，而且其点击事件也会同时在 <code>Activity</code> 和 <code>Fragment</code> 中得到响应</p>\n</blockquote>\n",
      "image": "https://www.jcodecraeer.com/uploads/20141118/14162849281137.png",
      "date_published": "2016-11-07T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Android"
      ]
    },
    {
      "title": "Android Volley 库的基本使用",
      "url": "https://wafer.li/blog-corners/old-inventory/Android/Volley/Android%20Volley%20%E5%BA%93%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/",
      "id": "https://wafer.li/blog-corners/old-inventory/Android/Volley/Android%20Volley%20%E5%BA%93%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/",
      "summary": "<h2 id=\"_1-volley-介绍与基本使用场景\"> 1. Volley 介绍与基本使用场景</h2>\n<p>Volley 是 Google 在 2013 年 I/O 大会上发布的一个 Android 的网络框架库，用于简化 Android 构建网络连接的步骤，同时提供 <strong>缓存</strong>、<strong>网络优先级</strong>等功能。</p>\n<p>Volley 适用于高频，小流量的网络访问，例如传输 Json 信息，前后端的小流量交互等。</p>\n<p>对于上传和下载文件的需求，Volley 不适用。\n这主要是由于 Volley 对请求队列采用的是<strong>在内存中的缓存</strong>，决定了 Volley 不适应大文件（二进制流）的传输。</p>\n",
      "content_html": "<h2 id=\"_1-volley-介绍与基本使用场景\"> 1. Volley 介绍与基本使用场景</h2>\n<p>Volley 是 Google 在 2013 年 I/O 大会上发布的一个 Android 的网络框架库，用于简化 Android 构建网络连接的步骤，同时提供 <strong>缓存</strong>、<strong>网络优先级</strong>等功能。</p>\n<p>Volley 适用于高频，小流量的网络访问，例如传输 Json 信息，前后端的小流量交互等。</p>\n<p>对于上传和下载文件的需求，Volley 不适用。\n这主要是由于 Volley 对请求队列采用的是<strong>在内存中的缓存</strong>，决定了 Volley 不适应大文件（二进制流）的传输。</p>\n\n<h2 id=\"_2-volley-的基本使用\"> 2. Volley 的基本使用</h2>\n<h3 id=\"_2-1-添加编译依赖\"> 2.1 添加编译依赖</h3>\n<p>Volley 在不久前加入了 <code>jCenter</code>，直接使用 <code>gradle</code> 的 <code>compile</code> 语句即可。</p>\n<div><pre><code>compile &#39;com.android.volley:volley:1.0.0&#39;\n</code></pre>\n<div><span>1</span><br></div></div><blockquote>\n<p>如果不使用 compile 语句，则需要从 Git repository 中克隆，添加编译 module</p>\n</blockquote>\n<div><pre><code>git clone https://android.googlesource.com/platform/frameworks/volley\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_2-2-添加网络访问权限\"> 2.2 添加网络访问权限</h3>\n<p>为了使用 Volley 这一<strong>网络</strong>库，需要在 <code>Manifest</code> 中添加网络访问权限 <code>android.permission.INTERNET</code></p>\n<h3 id=\"_2-3-发起网络请求\"> 2.3 发起网络请求</h3>\n<p>Volley 是通过<strong>优先队列</strong>来管理多个网络请求的，所以使用 Volley 即构建请求队列和相应的网络请求对象即可。</p>\n<h4 id=\"_2-3-1-例子\"> 2.3.1 例子</h4>\n<p>Volley 提供了默认的静态方法用于构建一个请求队列的实例。\n所以构建一个请求对象，设置好监听，并将其加入请求队列即可。</p>\n<div><pre><code>final TextView mTextView = (TextView) findViewById(R.id.text);\n...\n\n// Instantiate the RequestQueue.\nRequestQueue queue = Volley.newRequestQueue(this);\nString url =&quot;http://www.google.com&quot;;\n\n// Request a string response from the provided URL.\nStringRequest stringRequest = new StringRequest(Request.Method.GET,\nurl,\nnew Response.Listener&lt;String&gt;() {\n    @Override\n    public void onResponse(String response) {\n        // Display the first 500 characters of the response string.\n        mTextView.setText(&quot;Response is: &quot;+ response.substring(0,500));\n    }\n}, new Response.ErrorListener() {\n    @Override\n    public void onErrorResponse(VolleyError error) {\n        mTextView.setText(&quot;That didn&#39;t work!&quot;);\n    }\n});\n\n// Add the request to the RequestQueue.\nqueue.add(stringRequest);\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><p><code>StringRequest</code> 的最后两个参数是 <code>Response.Listener&lt;T&gt;</code> 和 <code>Response.ErrorListener</code>。</p>\n<p>通过使用匿名的监听类来分别获得<strong>正常的服务器响应</strong>和<strong>网络错误时的响应</strong></p>\n<h4 id=\"_2-3-2-基本原理\"> 2.3.2 基本原理</h4>\n<p>当请求被加入到队列后，Volley 会自动运行<strong>缓存处理线程</strong>和一个<strong>网络通信线程池</strong>。</p>\n<p><strong>缓存处理进程</strong>将请求出列，并判断缓存是否命中，如果缓存命中，就直接返回主线程进行结果处理。</p>\n<p>如果缓存没有命中，则将请求加入内置的<strong>网络通信队列</strong>，网络通信线程池中的第一个可用线程会对请求进行处理，建立 HTTP 连接，解析返回结果并将其写入缓存，随后将结果返回到主线程。</p>\n<p>下图是具体的工作流程图解</p>\n<p><img src=\"https://i2.piimg.com/3b76b51675570a97.png\" alt=\"Volley Request\" /></p>\n<h3 id=\"_2-4-取消请求\"> 2.4 取消请求</h3>\n<p>如果要取消一个网络请求，只需要调用 <code>Request</code> 的 <code>cancel()</code> 方法即可。</p>\n<p>一经取消，Volley 会<strong>保证</strong>不会调用返回结果的处理器，这也就是说你可以在 <code>Activity</code> 的 <code>onStop()</code> 方法中取消所有正在处理的网络请求。</p>\n<p>同时，还可以给请求打上 TAG，使用 <code>RequestQueue</code> 中的 <code>cancelAll()</code> 方法来取消对应的被打上 TAG 的请求。</p>\n<p>TAG 的类型不限，甚至可以是 <code>Activty</code>，可以通过在 <code>onStop()</code> 中调用 <code>cancelAll(this)</code> 来取消所有跟这个 <code>Activty</code> 有关的 <code>Request</code></p>\n<p>下面是一个使用 <code>String</code> 作为 TAG 的应用例子：</p>\n<div><pre><code>public static final String TAG = &quot;MyTag&quot;;\nStringRequest stringRequest; // Assume this exists.\nRequestQueue mRequestQueue;  // Assume this exists.\n\n// Set the tag on the request.\nstringRequest.setTag(TAG);\n\n// Add the request to the RequestQueue.\nmRequestQueue.add(stringRequest);\n\n@Override\nprotected void onStop () {\n    super.onStop();\n    if (mRequestQueue != null) {\n        mRequestQueue.cancelAll(TAG);\n    }\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h2 id=\"_3-构建队列单例\"> 3. 构建队列单例</h2>\n<p>对于 APP 来说，使用多个网络队列是浪费性能的，最好是整个 APP 使用一个队列。</p>\n<p>所以，我们使用单例模式来进行 Volley <code>RequestQueue</code> 的操作。</p>\n<h3 id=\"_3-1-自定义队列\"> 3.1 自定义队列</h3>\n<p><code>RequestQueue</code> 除了使用 Volley 的静态方法构建以外，还可以自己构建 <code>RequestQueue</code>。\n这时，就可以对队列的缓存大小进行设定。</p>\n<ol>\n<li>\n<p>初始化 <code>Cache</code> 实例</p>\n<div><pre><code>// The first is the Context method\n// The second is the SIZE of the queue, described by BYTES\nCache cache = new DiskBasedCache(getCacheDir(), 1024 * 1024);\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>\n<li>\n<p>初始化 <code>Network</code> 实例</p>\n<div><pre><code>// Using the HttpUrlConnection\nNetwork network = new NetWork(new HurlStack());\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div></li>\n<li>\n<p>使用以上两个实例来构建请求队列</p>\n<div><pre><code>mRequestQueue = new RequestQueue(cache, network);\n</code></pre>\n<div><span>1</span><br></div></div></li>\n<li>\n<p>启动队列</p>\n<div><pre><code>mRequestQueue.start();\n</code></pre>\n<div><span>1</span><br></div></div></li>\n</ol>\n<h3 id=\"_3-2-构建单例模型\"> 3.2 构建单例模型</h3>\n<p>为了节省系统资源，我们构建一个单例模型，整个 App 只使用这一个请求队列。</p>\n<div><pre><code>public class NetworkSingleton {\n    private static NetworkSingleton mInstance;\n    private static mContext;\n\n    private RequestQueue mRequestQueue;\n\n    // Use private constructor\n    private NetworkSingleton(Context context) {\n        mContext = context;\n        mRequestQueue = getRequestQueue();\n    }\n\n    public static synchronized NetworkSingleton getInstance(\n                                                Context context) {\n        if (mInstance == null) {\n            mInstance = new NetworkSingleton(context);\n        }\n        return mInstance;\n    }\n\n    public RequestQueue getRequestQueue() {\n        if (mRequestQueue == null) {\n\n            // The request queue needs the Application context\n            // if someone pass a Activity context\n            // using the getApplicationContext() could prevent\n            // the wrong paramaters\n            mRequestQueue = Volley.newRequestQueue(\n                            mContext.getApplicationContext());\n        }\n        return mRequestQueue;\n    }\n\n    public &lt;T&gt; void addToRequestQueue(Request&lt;T&gt; request) {\n        getRequestQueue().add(request);\n    }\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br></div></div><p>使用类似 Java Bean 的单例模型，我们在整个应用程序的生命周期中就只需要维护一个队列实例。\n同时，还可以利用单例模型来进行请求的<strong>添加和删除</strong></p>\n",
      "image": "https://i2.piimg.com/3b76b51675570a97.png",
      "date_published": "2016-10-14T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Android"
      ]
    },
    {
      "title": "Android Volley 构建自定义请求",
      "url": "https://wafer.li/blog-corners/old-inventory/Android/Volley/Android%20Volley%20%E6%9E%84%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E8%AF%B7%E6%B1%82/",
      "id": "https://wafer.li/blog-corners/old-inventory/Android/Volley/Android%20Volley%20%E6%9E%84%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E8%AF%B7%E6%B1%82/",
      "summary": "<h2 id=\"_1-介绍\"> 1. 介绍</h2>\n<p>Volley 提供了基本的 <code>StringRequest</code>，<code>JsonObjectRequest</code> 和 <code>JsonArrayRequest</code> 来满足字符串请求和 JSON 请求。</p>\n<p>但是有时候这可能还不能满足我们对网络通信的需求。\n比如说使用 <code>Gson</code> 库来自动的对响应的 JSON 进行解析等。</p>\n<p>此时就需要构建自定义的 Volley 请求。</p>\n",
      "content_html": "<h2 id=\"_1-介绍\"> 1. 介绍</h2>\n<p>Volley 提供了基本的 <code>StringRequest</code>，<code>JsonObjectRequest</code> 和 <code>JsonArrayRequest</code> 来满足字符串请求和 JSON 请求。</p>\n<p>但是有时候这可能还不能满足我们对网络通信的需求。\n比如说使用 <code>Gson</code> 库来自动的对响应的 JSON 进行解析等。</p>\n<p>此时就需要构建自定义的 Volley 请求。</p>\n\n<h2 id=\"_2-基本步骤\"> 2. 基本步骤</h2>\n<h3 id=\"_2-1-继承-request-t-类\"> 2.1 继承 <code>Request&lt;T&gt;</code> 类</h3>\n<p>自定义请求首先是通过继承基本的 <code>Request&lt;T&gt;</code> 类来实现的。</p>\n<div><pre><code>public class GsonRequst&lt;T&gt; extends Requst&lt;T&gt; {\n    // class body\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"_2-2-实现构造器\"> 2.2 实现构造器</h3>\n<p>然后，我们要实现构造器满足基本的 Request 的构造方法。</p>\n<div><pre><code>public GsonRequest(String url, Class&lt;T&gt; clazz,\n                    Response.Listener&lt;T&gt; listener,\n                    Response.ErrorListener errorListener) {\n\n    // Fulfill the super constructor\n    super(Method.GET, url, errorListener);\n\n    this.clazz = clazz;\n    this.listener = listenr;\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>当然，这里作为一个 <code>GsonRequest</code>，仅仅要求满足父类的构造参数是不够的，我们还要指定 Gson 转换的 class 类型，以及必要的 Response Listener</p>\n<h3 id=\"_2-3-重载必要方法\"> 2.3 重载必要方法</h3>\n<p>为了实现 <code>GsonRequest</code> 我们要重载必要的方法\n<code>parseNetworkResponse()</code> 和 <code>deliverNetworkResponse()</code></p>\n<ol>\n<li>\n<p>重载 <code>parseNetworkResponse(Response response)</code></p>\n<p>顾名思义，这个方法是用来解析网络的回复的，对于我们的 <code>GsonRequest</code>，我们首先要将网络的回复（<strong>二进制流</strong>）转换成 JSON，然后由 Gson 解析成相应的类。</p>\n<div><pre><code>@Override\nprotected Response&lt;T&gt; parseNetworkResponse(\n        NetworkResponse response) {\n    try {\n        String json = new String(response.data,\n        HttpHeaderParser.parseCharset(response.headers));\n        return Response.success(gson.fromJson(json, clazz),\n                HttpHeaderParser.parseCacheHeaders(response));\n    }\n    // handle errors\n    ...\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div></li>\n<li>\n<p>重载 <code>deliverNetworkResponse(T response)</code></p>\n<p>这个方法是将 <code>parseNetworkResponse()</code> 的<strong>解析结果</strong>发送给我们的 Response listener 的。\n所以，代码较为简单，直接把解析出来的 <code>response</code> 传给 <code>listener</code> 的回调方法即可。</p>\n<div><pre><code>@Override\nprotected void deliverResponse(T response) {\n    listener.onResponse(response);\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div></li>\n</ol>\n<h3 id=\"_2-4-完整示例\"> 2.4 完整示例</h3>\n<p>完整的可用代码如下：</p>\n<div><pre><code>public class GsonRequest&lt;T&gt; extends Request&lt;T&gt; {\n    private final Gson gson = new Gson();\n    private final Class&lt;T&gt; clazz;\n    private final Map&lt;String, String&gt; headers;\n    private final Listener&lt;T&gt; listener;\n\n    /**\n     * Make a GET request and return a parsed object from JSON.\n     *\n     * @param url URL of the request to make\n     * @param clazz Relevant class object, for Gson&#39;s reflection\n     * @param headers Map of request headers\n     */\n    public GsonRequest(String url, Class&lt;T&gt; clazz, Map&lt;String, String&gt; headers,\n            Listener&lt;T&gt; listener, ErrorListener errorListener) {\n        super(Method.GET, url, errorListener);\n        this.clazz = clazz;\n        this.headers = headers;\n        this.listener = listener;\n    }\n\n    @Override\n    public Map&lt;String, String&gt; getHeaders() throws AuthFailureError {\n        return headers != null ? headers : super.getHeaders();\n    }\n\n    @Override\n    protected void deliverResponse(T response) {\n        listener.onResponse(response);\n    }\n\n    @Override\n    protected Response&lt;T&gt; parseNetworkResponse(NetworkResponse response) {\n        try {\n            String json = new String(\n                    response.data,\n                    HttpHeaderParser.parseCharset(response.headers));\n            return Response.success(\n                    gson.fromJson(json, clazz),\n                    HttpHeaderParser.parseCacheHeaders(response));\n        } catch (UnsupportedEncodingException e) {\n            return Response.error(new ParseError(e));\n        } catch (JsonSyntaxException e) {\n            return Response.error(new ParseError(e));\n        }\n    }\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br></div></div><h2 id=\"_3-关于-post-方法\"> 3. 关于 POST 方法</h2>\n<p>以上的例子是基于 <code>GET</code> 方法来介绍的，如果使用 POST 方法则略有不同。</p>\n<p>仍然以 <code>GsonRequest</code> 举例子：</p>\n<ol>\n<li>首先，我们需要接受一个新的参数用来承接 POST 的实例对象</li>\n<li>使用 Gson 将对象序列化成 JSON 字符串</li>\n<li>将 JSON 字符串转换成 Params 或者直接 POST JSON 字符串</li>\n</ol>\n<p>此时，我们需要重载几个新方法。</p>\n<h3 id=\"_3-1-重载-getparams-或-getbody-方法\"> 3.1 重载 <code>getParams()</code> 或 <code>getBody()</code> 方法</h3>\n<p><code>getParams()</code> 方法实质上会在 <code>getBody()</code> 方法中<strong>被调用</strong>，\n如果你只需要 POST 简单的 Params 形式(<code>key=val&amp;another_key=another_val</code>)，那么重载 <code>getParams()</code> 方法即可。</p>\n<p>但如果普通的 Params 形式无法满足需要，那么就需要重载 <code>getBody()</code> 方法，其返回的内容会成为 HTTP POST 报文中的 Body。</p>\n<p><strong>注意：两个方法只能选择重载其中一个</strong></p>\n<h4 id=\"_3-1-1-重载-getparams-方法\"> 3.1.1 重载 <code>getParams()</code> 方法</h4>\n<p>一般的 POST 使用，我们重载此方法即可，该方法返回类型是 <code>Map&lt;Sting, String&gt;</code>。</p>\n<p>在 <code>GsonRequest</code> 中，我们只需要使用 <code>Gson</code> 将需要 POST 的对象序列化成 JSON，随后将 JSON 反序列化成 Map&lt;String, String&gt; 即可。\n即 <code>Object -&gt; JSON -&gt; Map&lt;String, String&gt;</code></p>\n<div><pre><code>@Override Map&lt;String, String&gt; getParmas() {\n    String json = gson.toJson(mPostObject);\n\n    // Use TypeToken to avoid the unchecked cast\n    // and the floating number converted from primitive integer\n    return gson.fromJson(\n        json,\n        new TypeToken&lt;Map&lt;String, String&gt;&gt;(){}.getType());\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h4 id=\"_3-1-2-重载-getbody-方法\"> 3.1.2 重载 <code>getBody()</code> 方法</h4>\n<p>如果基本的 <code>getParams()</code> 方法不能满足需要，那么我们可以直接重载 <code>getBody()</code> 方法来实现对 HTTP body 的高度定制。</p>\n<p>在 <code>GsonRequest</code> 中，假如碰到有时需要 POST 带 <code>List</code> 或者数组类型的对象，由于 <code>List</code> 不能被 cast 成 <code>Map&lt;String, String&gt;</code> 的类型，那么就不能使用 <code>getParams()</code> 方法。\n应该要使用 <code>getBody()</code> 方法。</p>\n<p>注意 <code>getBody()</code> 返回的是 <code>byte[]</code> 类型，我们需要使用 <code>String</code> 的 <code>getBytes()</code> 方法来将 JSON 转换成二进制流。</p>\n<div><pre><code>@Override\npublic byte[] getBody() throws AuthFailureError {\n\n    if (mPostObject != null) {\n        String postJson = gson.toJson(mPostObject);\n\n        try {\n            return postJson.getBytes(PROTOCOL_CHARSET);\n        } catch (UnsupportedEncodingException e) {\n            VolleyLog.wtf(\n                    &quot;Unsupported Encoding while trying to get the byte of %s using %s&quot;,\n                    postJson, PROTOCOL_CHARSET);\n        }\n    }\n\n    return null;\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h3 id=\"_3-2-重载-getbodycontenttype-方法\"> 3.2 重载 <code>getBodyContentType()</code> 方法</h3>\n<p>为了我们的 POST body 能被成功解析，我们还需要重载 <code>getBodyContentType()</code> 方法来指定我们 POST 的<strong>数据的类型</strong></p>\n<div><pre><code>@Override\npublic String getBodyContentType() {\n    return PROTOCOL_CONTENT_TYPE;\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div>",
      "date_published": "2016-10-14T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Android"
      ]
    },
    {
      "title": "动态加载 Fragment",
      "url": "https://wafer.li/blog-corners/old-inventory/Android/%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%20Fragment/",
      "id": "https://wafer.li/blog-corners/old-inventory/Android/%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%20Fragment/",
      "summary": "<h2 id=\"_1-步骤\"> 1. 步骤</h2>\n<h3 id=\"_1-1-获取-fragmentmanager\"> 1.1 获取 <code>FragmentManager</code></h3>\n<ul>\n<li>当位于 <code>Activity</code> 时，调用 <code>getFragmentManager()</code> 方法即可获取到 <code>FragmentManager</code> 实例</li>\n<li>当位于 <code>Fragment</code> 时，调用 <code>getActivity().getFragmentManager()</code> 获取 <code>FragmentManager</code> 实例</li>\n<li>如果在 <code>Fragment</code> 内层，即 <code>Fragment</code> 的 <code>container</code> 也是 <code>Fragment</code> 时，调用 <code>getChildFragmentManager()</code> 来获取 <code>FragmentManager</code> 实例</li>\n</ul>\n<blockquote>\n<p>注意： <code>getChildFragmentManager()</code> 仅用于两层 <code>FragmentManager</code> 的时候。如果仅仅只是一层 <code>Fragment</code>，那么应该将 <code>Fragment</code> 的切换操作回调到 <code>Activity</code> 进行</p>\n</blockquote>\n",
      "content_html": "<h2 id=\"_1-步骤\"> 1. 步骤</h2>\n<h3 id=\"_1-1-获取-fragmentmanager\"> 1.1 获取 <code>FragmentManager</code></h3>\n<ul>\n<li>当位于 <code>Activity</code> 时，调用 <code>getFragmentManager()</code> 方法即可获取到 <code>FragmentManager</code> 实例</li>\n<li>当位于 <code>Fragment</code> 时，调用 <code>getActivity().getFragmentManager()</code> 获取 <code>FragmentManager</code> 实例</li>\n<li>如果在 <code>Fragment</code> 内层，即 <code>Fragment</code> 的 <code>container</code> 也是 <code>Fragment</code> 时，调用 <code>getChildFragmentManager()</code> 来获取 <code>FragmentManager</code> 实例</li>\n</ul>\n<blockquote>\n<p>注意： <code>getChildFragmentManager()</code> 仅用于两层 <code>FragmentManager</code> 的时候。如果仅仅只是一层 <code>Fragment</code>，那么应该将 <code>Fragment</code> 的切换操作回调到 <code>Activity</code> 进行</p>\n</blockquote>\n\n<div><pre><code><span>// when in the activity</span>\n<span>FragmentManager</span> fragmentManager <span>=</span> <span>getFragmentManager</span><span>(</span><span>)</span><span>;</span>\n\n<span>// when in the fragment</span>\n<span>FragmentManager</span> fragmentManager <span>=</span> <span>getActivity</span><span>(</span><span>)</span><span>.</span><span>getFragmentManager</span><span>(</span><span>)</span><span>;</span>\n\n<span>// When in the nested fragment</span>\n<span>FragmentManager</span> fragmentManager <span>=</span> <span>getChildFragmentManager</span><span>(</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h3 id=\"_1-2-调用-begintransaction-启动一个事务\"> 1.2 调用 <code>beginTransaction()</code> 启动一个事务</h3>\n<p>这个方法是 <code>FragmentManager</code> 的方法</p>\n<div><pre><code><span>FragmentTransaction</span> transcation <span>=</span> fragmentManager<span>.</span><span>beginTransaction</span><span>(</span><span>)</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h3 id=\"_1-3-将-fragment-加入到容器里面\"> 1.3 将 <code>Fragment</code> 加入到容器里面</h3>\n<p>我们有两种添加 <code>Fragment</code> 的方法， <code>add()</code> 和 <code>replace()</code>\n注意添加的时候带上 <code>tag</code> 参数，以方便后面的弹出和返回。</p>\n<ol>\n<li>\n<p>使用 <code>replace()</code> 方法</p>\n<p>一般的，我们使用 <code>replace()</code> 方法直接替换布局来将 <code>Fragment</code> 添加到 容器里面</p>\n<div><pre><code>transaction<span>.</span><span>replace</span><span>(</span><span>R</span><span>.</span>id<span>.</span>container<span>,</span> fragment<span>,</span> tag<span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div><blockquote>\n<p><code>replace()</code> 方法需要指定一个用于替换 <code>container</code> 的 <code>Fragment</code> 实例，同时还可以给其打上一个 <code>tag</code>（<code>String</code> 类型的）来方便以后寻找。\n注意，<code>R.id.container</code>是 <code>Activity</code> 布局中的一个 <code>layout</code> 一般不将根布局替换，而是将其内部的一个子布局替换掉。\n例如下面的 xml，一般不替换根目录，而是上面的 <code>&lt;RelativeLayout&gt;</code></p>\n</blockquote>\n</li>\n</ol>\n<div><pre><code>    <span><span><span>&lt;</span>LinearLayout</span> <span><span>xmlns:</span>android</span><span><span>=</span><span>\"</span>http://schemas.android.com/apk/res/android<span>\"</span></span>\n        <span><span>android:</span>layout_width</span><span><span>=</span><span>\"</span>match_parent<span>\"</span></span>\n        <span><span>android:</span>layout_height</span><span><span>=</span><span>\"</span>match_parent<span>\"</span></span>\n        <span><span>android:</span>fitsSystemWindows</span><span><span>=</span><span>\"</span>true<span>\"</span></span>\n        <span><span>android:</span>orientation</span><span><span>=</span><span>\"</span>vertical<span>\"</span></span><span>></span></span>\n\n        <span><span><span>&lt;</span>include</span> <span>layout</span><span><span>=</span><span>\"</span>@layout/include_toolbar<span>\"</span></span> <span>/></span></span>\n\n        <span><span><span>&lt;</span>RelativeLayout</span>\n            <span><span>android:</span>id</span><span><span>=</span><span>\"</span>@+id/container<span>\"</span></span>\n            <span><span>android:</span>layout_width</span><span><span>=</span><span>\"</span>match_parent<span>\"</span></span>\n            <span><span>android:</span>layout_height</span><span><span>=</span><span>\"</span>wrap_content<span>\"</span></span><span>/></span></span>\n\n\n    <span><span><span>&lt;/</span>LinearLayout</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><ol start=\"2\">\n<li>\n<p><code>add()</code> 方法</p>\n<p>另外还有另一种添加 <code>Fragment</code> 的方法 <code>add()</code>，与 <code>replace()</code> 的调用方式相同，将 <code>replace()</code> 替换成 <code>add()</code> 即可\n一般来说，<code>add()</code> 方法的效果和 <code>replace()</code> 方法相同，但在一些情况下有所区别。</p>\n</li>\n</ol>\n<h3 id=\"_1-4-使用-commit-方法来提交事务\"> 1.4 使用 <code>commit()</code> 方法来提交事务</h3>\n<div><pre><code><span>// 用这条语句来提交事务使得事务生效</span>\ntransaction<span>.</span><span>commit</span><span>(</span><span>)</span><span>;</span>\n\n<span>// 当然也可以连着写。</span>\nfragmentManager<span>.</span><span>beginTransaction</span><span>(</span><span>)</span>\n               <span>.</span><span>replace</span><span>(</span><span>R</span><span>.</span>id<span>.</span>containe<span>,</span> fragment<span>)</span>\n               <span>.</span><span>commit</span><span>(</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><blockquote>\n<p>另外，还有一个 <code>commitAllowingStateLoss()</code> 方法，关于这个方法和 <code>commit()</code> 方法的区别和注意事项，在下面有所介绍</p>\n</blockquote>\n<h2 id=\"_2-补充部分\"> 2. 补充部分</h2>\n<h3 id=\"_2-1-添加-fragment-到返回栈\"> 2.1 添加 Fragment 到返回栈</h3>\n<p>当有需要通过按返回键返回到上一个 Fragment 的时候，可以使用 <code>addToBackStack(null)</code> 方法将当前的 Fragment 添加到返回栈中，此时通过按返回键即可回到上一个 Fragment。\n<code>addToBackStack()</code> 方法还可以接受一个 <code>tag</code> 作为参数，添加具有特定 tag 的 Fragment 进入返回栈。</p>\n<blockquote>\n<p><code>Fragment</code> 的状态是最后离开这个 <code>Fragment</code> 的状态，也就是说它会保留最后的 <code>Fragment</code> 状态。</p>\n</blockquote>\n<h3 id=\"_2-2-add-和-replace-的区别\"> 2.2 <code>add()</code> 和 <code>replace()</code> 的区别</h3>\n<ul>\n<li>\n<p><code>replace()</code> 方法会<strong>删除当前的 Fragment</strong> 然后加入一个<strong>新的 Fragment</strong></p>\n<ul>\n<li>当前仅会存在一个 <code>Fragment</code> 在 <code>container</code> 中</li>\n<li>此方法会<strong>重新实例化 Fragment</strong></li>\n</ul>\n</li>\n<li>\n<p><code>add()</code> 方法只是添加了一个实例到 container 中，而不会删除当前的 Fragment 实例</p>\n<ul>\n<li>当前有可能会存在多个 <code>Fragment</code> 在 <code>container</code> 中</li>\n<li>此方法不会重新实例化 <code>Fragment</code>，<strong>当且仅当它没有被系统回收的时候</strong></li>\n</ul>\n</li>\n<li>\n<p>如何选用这两个方法</p>\n<ul>\n<li>一般来说，它们的效果都是一样的，但是为了避免 <code>Layout</code> 的冗余，我们一般使用 <code>replace()</code></li>\n<li>但是，当你需要在 <code>Fragment</code> 的生命周期中启动一个<strong>异步任务</strong>或者加载一些<strong>大量的资源文件</strong>的时候，<code>replace()</code> 的重新实例化特性会使得<strong>资源被大量的消耗</strong>，所以在这种情况下，使用 <code>add()</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"_2-3-提交事务的注意事项\"> 2.3 提交事务的注意事项</h3>\n<ol>\n<li>\n<p><code>IllegalStateException</code> 异常</p>\n<blockquote>\n<p>这个异常通常会在 <code>Activity</code> 的状态保存之后，尝试去提交（即调用 <code>commit()</code> 方法）一个 <code>FragmentTransaction</code> 的时候发生，称为活动状态丢失（Activity State Loss）。\n这是由于系统会在活动在被挂起或销毁之前会将其当前状态保留为一个快照（例如用户按下 <code>Home</code> 键），但是这个快照并没有将 <code>FragmentTransaction</code> 作为活动的一部分保留，而是<strong>将其丢失</strong>了，由于<strong>活动当前被销毁或挂起</strong>，所以无法提交一个 <code>FragmentTransaction</code></p>\n</blockquote>\n<div><pre><code>// 堆栈跟踪和异常代码\njava.lang.IllegalStateException:Can not perform this action after onSaveInstanceState\n    at android.support.v4.app.FragmentManagerImpl.checkStateLoss(FragmentManager.java:1341)\n    at android.support.v4.app.FragmentManagerImpl.enqueueAction(FragmentManager.java:1352)\n    at android.support.v4.app.BackStackRecord.commitInternal(BackStackRecord.java:595)\n    at android.support.v4.app.BackStackRecord.commit(BackStackRecord.java:574)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div></li>\n<li>\n<p>异常抛出的时间点</p>\n<blockquote>\n<p>异常抛出的时间点通常和 <code>commit()</code> 的被调用时间点是一致的，总结为下表</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>注：Honeycomb 即 3.0(API 11)</th>\n<th>Honeycomb 之前的版本</th>\n<th>Honeycomb 及更新的版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>commit()</code> 在 <code>onPause()</code> 前被调用</td>\n<td>OK</td>\n<td>OK</td>\n</tr>\n<tr>\n<td><code>commit()</code> 在 <code>onPause()</code> 和 <code>onStop()</code> 执行中间被调用</td>\n<td>STATE LOSS(<strong>此时并没有异常</strong>)</td>\n<td>OK</td>\n</tr>\n<tr>\n<td><code>commit()</code> 在 <code>onStop()</code> 之后被调用</td>\n<td>EXCEPTION</td>\n<td>EXCEPTION</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>如何避免异常</p>\n<ol>\n<li>\n<p>谨慎的在除 <code>onCreate()</code> 的其他生命周期函数中提交 <code>Transaction</code></p>\n<blockquote>\n<p>你必须保证 <code>Acitivity</code> 被<strong>完全恢复之后</strong>才能提交 <code>Transaction</code>。\n例如，你不应该在 <code>FragmentActivity</code> 的 <code>onResume()</code> 方法中提交 <code>Transactions</code>，有时候这个方法可能在 <code>Activity</code> 被恢复前调用，你应该在 <code>onPostResume()</code> 方法中提交，以保证 <code>Acitivity</code> 完全恢复</p>\n</blockquote>\n</li>\n<li>\n<p>避免在异步回调函数中提交 <code>Transaction</code></p>\n<blockquote>\n<p>例如，应该避免在 <code>AsyncTask</code> 的 <code>onPostExecute()</code> 方法和 <code>LoaderManager.LoaderCallbacks</code> 的 <code>onLoadFinished()</code> 方法中提交 <code>Transaction</code>。由于它们都没有考虑到 <code>Activity</code> 的实际状态，有可能在 <code>Activity</code> 已经被结束之后仍然被调用。</p>\n</blockquote>\n</li>\n<li>\n<p>使用 <code>commitAllowingStateLoss()</code> 方法</p>\n<blockquote>\n<p>此方法和 <code>commit()</code> 的唯一区别在于，当状态丢失出现的时候，其不会抛出一个异常。\n<strong>通常不应使用这个方法，除非状态丢失无可避免，否则就不应使用此方法</strong></p>\n</blockquote>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"_3-fragment-管理\"> 3. Fragment 管理</h2>\n<h3 id=\"_3-1-返回到指定的-fragment\"> 3.1 返回到指定的 Fragment</h3>\n<p>当我们开启了太多的 <code>Fragment</code>，想回到指定的某个 <code>Fragment</code> (比如说最开头的那一个) 时，使用 <code>popBackStack(String tag, int flags)</code> 通过指定一个 <code>Fragment</code> 的 <code>tag</code> 来返回到指定的那个 Fragment；</p>\n<blockquote>\n<p>第二个 flags 参数用来指定是否要将指定的 Fragment 也 pop 出去，此参数只能有两个值 <code>POP_BACK_STACK_INCLUSIVE</code> 或者 <code>0</code>，如果指定了 <code>POP_BACK_STACK_INCLUSIVE</code> 这个参数，那么就会将指定的 Fragment 也 pop 出去。</p>\n</blockquote>\n<p>注意事项：</p>\n<ol>\n<li>\n<p>一般采用 <code>tag</code> 参数来定位一个 <code>Fragment</code></p>\n<blockquote>\n<p>当使用 <code>add()</code> 方法添加 <code>Fragment</code> 时，因为一个 <code>ViewGroup</code> 容器可以依附 <code>add()</code> 多个Fragment，它们的 <code>id</code> 自然是相同的。</p>\n</blockquote>\n</li>\n<li>\n<p><code>popBackStack(null, FragmentManager.POP_BACK_STACK_INCLUSIVE)</code> 的真正作用。</p>\n<blockquote>\n<p>这个方法的官方文档似乎有一些错误（或者缺漏）\n由于第二个参数的存在，方法会在返回栈中寻找是否存在一个 <code>tag</code> 为 <code>null</code> 的 <code>Fragment</code>，显然，这是找不到的。\n<strong>所以，这个方法实际上会清空返回栈</strong></p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"_3-2-在-fragment-之间切换\"> 3.2 在 Fragment 之间切换</h3>\n<h4 id=\"_3-2-1-使用-add-show-hide-方法\"> 3.2.1 使用 <code>add() show() hide()</code> 方法</h4>\n<blockquote>\n<p><code>FragmentPagerAdapter</code> 采用这种模式，需要注意以下几种情况</p>\n</blockquote>\n<ol>\n<li>\n<p>只是显示和隐藏 <code>Fragment</code>，并不进入 <code>Fragment</code> 生命周期</p>\n</li>\n<li>\n<p>当隐藏的时候，<code>Fragment</code> 仍然被激活，<strong>依旧会对点击事件作出反应</strong>。</p>\n<blockquote>\n<p>仍然会响应点击事件的原因在于，由于使用的是 add() 方法，所以当前 <code>container</code> 会有<strong>多个 Fragment 实例</strong>，然后 <code>show()</code> 和 <code>hide()</code> <strong>仅仅是将视图隐藏</strong>了，<code>Fragment</code> 实例依旧处于激活状态，所以会导致多个 Fragment 都会对点击事件做出响应。我们称为<strong>点击事件的泄露</strong></p>\n</blockquote>\n<blockquote>\n<p>此时，需要一些技巧防止点击事件的泄露</p>\n</blockquote>\n<ol>\n<li>\n<p>使用 <code>xml</code> 截获点击事件</p>\n<blockquote>\n<p>将 <strong>内层 Fragment</strong> 的<strong>根布局</strong>设置为 <code>clickable=&quot;true&quot;</code> 即可</p>\n</blockquote>\n<div><pre><code>&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    android:layout_width=&quot;fill_parent&quot;\n    android:layout_height=&quot;fill_parent&quot;\n    android:clickable=&quot;true&quot; /&gt;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div></li>\n<li>\n<p>使用 <code>java</code> 截获点击事件</p>\n<blockquote>\n<p>为<strong>根布局</strong>设置 <code>OnTouchListener</code> 并重载一个空方法，返回 <code>true</code></p>\n</blockquote>\n<div><pre><code>@Override\npublic View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstance){\n    View root;\n\n    /*here is an implementation*/\n\n    root.setOnTouchListener(new View.OnTouchListener() {\n        public boolean onTouch(View v, MotionEvent event) {\n            return true;\n        }\n    });\n    return root;\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div></li>\n</ol>\n</li>\n<li>\n<p>解决 <code>Fragment already added</code> 错误</p>\n<blockquote>\n<p>在复杂的 <code>Fragment</code> 管理中，经常会遇到 <code>Fragment already added</code> 错误，所以每次在 <code>add Fragment</code> 之前，首先要判断 <code>fragment.isAdded()</code> 如果已经存在了那就不用再 <code>add()</code> 了</p>\n</blockquote>\n</li>\n<li>\n<p>解决由于屏幕旋转或其他原因引起的 <code>Activity</code> <strong>重构建</strong>导致 <code>Fragment</code> <strong>重复</strong>问题</p>\n<blockquote>\n<p>Android 系统中，Activity 可能在<strong>任何时刻</strong>被<strong>不被通知地销毁和重建</strong>，由此则会引起 Fragment 的重叠问题。\n可以通过检查是否存在 Activity 的快照 <code>savedInstanceState</code> 来决定是否需要重新构建一个 Fragment 实例。\n如果存在 <code>savedInstanceState</code>，则不需要重新构建，只重新显示最后的当前 Fragment 即可</p>\n</blockquote>\n</li>\n</ol>\n<p>这里是 <code>add()</code> <code>show()</code> <code>hide()</code> 模式的代码：</p>\n<div><pre><code><span>/**\n* This way aims at resolve the following problem\n* 1. The reinstantiaiton of Fragment\n* 2. The Layout redundancy of multiple Fragment\n*/</span>\n\n<span>//Check the Fragment isAdded. Aim to #1</span>\n<span>public</span> <span>void</span> <span>switchContent</span><span>(</span><span>Fragment</span> from<span>,</span> <span>Fragment</span> <span>to</span><span>)</span> <span>{</span>\n\n    <span>// The mContent is the current fragment</span>\n    <span>if</span> <span>(</span>mContent <span>!=</span> <span>to</span><span>)</span> <span>{</span>\n        mContent <span>=</span> <span>to</span><span>;</span>\n        <span>FragmentTransaction</span> transaction <span>=</span> mFragmentMan<span>.</span><span>beginTransaction</span><span>(</span><span>)</span><span>.</span><span>setCustomAnimations</span><span>(</span>\n                <span><span>android<span>.</span></span>R</span><span>.</span>anim<span>.</span>fade_in<span>,</span> <span>R</span><span>.</span>anim<span>.</span>slide_out<span>)</span><span>;</span>\n        <span>if</span> <span>(</span><span>!</span><span>to</span><span>.</span><span>isAdded</span><span>(</span><span>)</span><span>)</span> <span>{</span>    <span>// Judge if is added</span>\n\n            <span>// if not added, hide the current Fragment and add the next to Activity</span>\n            transaction<span>.</span><span>hide</span><span>(</span>from<span>)</span><span>.</span><span>add</span><span>(</span><span>R</span><span>.</span>id<span>.</span>content_frame<span>,</span> <span>to</span><span>)</span><span>.</span><span>commit</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span> <span>else</span> <span>{</span>\n            <span>//if added, just show the next.</span>\n            transaction<span>.</span><span>hide</span><span>(</span>from<span>)</span><span>.</span><span>show</span><span>(</span><span>to</span><span>)</span><span>.</span><span>commit</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n\n\n\n<span>//Check the saveInstance to avoid the activity reinstance. Aim to #2</span>\n<span>@Override</span>\n<span>protected</span> <span>void</span> onCreate <span>(</span><span>Bundle</span> savedInstanceState<span>)</span> <span>{</span>\n    <span>if</span> <span>(</span>savedInstanceState <span>==</span> <span>null</span><span>)</span> <span>{</span>\n        <span>getFragmentManager</span><span>(</span><span>)</span><span>.</span><span>beginTransaction</span><span>(</span><span>)</span><span>.</span><span>add</span><span>(</span><span><span>android<span>.</span></span>R</span><span>.</span>id<span>.</span>content<span>,</span>\n            <span>new</span> <span>UIFragment</span><span>(</span><span>)</span><span>,</span><span>\"Tag\"</span><span>)</span><span>.</span><span>commit</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span> <span>else</span> <span>{</span>\n        <span>//if the instance does be recover,</span>\n        <span>//use `findFragmentByTag()` to find the reference of the Fragment</span>\n        <span>UIFragment</span> fragment1 <span>=</span> <span>getFragmentManager</span><span>(</span><span>)</span><span>.</span><span>findFragmentById</span><span>(</span><span>R</span><span>.</span>id<span>.</span>fragment1<span>)</span><span>;</span>\n        <span>UIFragment</span> fragment2 <span>=</span> <span>getFragmentManager</span><span>(</span><span>)</span><span>.</span><span>findFragmentByTag</span><span>(</span><span>\"tag\"</span><span>)</span><span>;</span>\n        <span>UIFragment</span> fragment3 <span>=</span> <span>.</span><span>.</span><span>.</span>\n        <span>.</span><span>.</span><span>.</span>\n        <span>//show one of them</span>\n        <span>getFragmentManager</span><span>(</span><span>)</span><span>.</span><span>beginTransaction</span><span>(</span><span>)</span>\n        <span>.</span><span>show</span><span>(</span>fragment1<span>)</span>\n        <span>.</span><span>hide</span><span>(</span>fragment2<span>)</span>\n        <span>.</span><span>hide</span><span>(</span>fragment3<span>)</span>\n        <span>.</span><span>hide</span><span>(</span><span>.</span><span>.</span><span>.</span><span>)</span>\n        <span>.</span><span>commit</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br></div></div><h4 id=\"_3-2-2-使用-replace-方法\"> 3.2.2 使用 <code>replace()</code> 方法</h4>\n<blockquote>\n<p><code>FragmentStatePageAdapter</code> 采用这种模式</p>\n</blockquote>\n<ul>\n<li>\n<p>当前<strong>只会存在一个 fragment 实例</strong>，简单的使用 <code>replace()</code> 和 <code>popBackStack()</code> 的重载方法即可在 <code>Fragment</code> 之间进行切换</p>\n</li>\n<li>\n<p>但是由于此方法在切换时<strong>每次都会重新构建 Fragment 实例</strong>，如果需要从网络加载资源的话，会造成很多的网络流量损失和性能浪费。</p>\n</li>\n</ul>\n<h4 id=\"_3-2-3-比较和使用场景\"> 3.2.3 比较和使用场景</h4>\n<ul>\n<li>\n<p>如果管理 <code>Fragment</code> 的开销比网络流量的开销要大，使用 <code>replace()</code> 方法较好。</p>\n<blockquote>\n<p>例如每次仅仅加载 几个k 或 几十b 的数据，就没有必要为了这点微不足道的流量节省从而进行复杂的 <code>Fragment</code> 管理，一是加大开发难度，二是容易出现错误。</p>\n</blockquote>\n</li>\n<li>\n<p>如果在 Fragment 中需要加载大量的网络资源，或者进行十分耗时的资源加载工作（比如3D绘图），那么就应使用 <code>add()</code> <code>show()</code> <code>hide()</code> 方法</p>\n</li>\n</ul>\n",
      "date_published": "2016-10-14T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Android"
      ]
    },
    {
      "title": "Java Coding Standards",
      "url": "https://wafer.li/blog-corners/old-inventory/CodeConvention/Java%20Coding%20Standards/",
      "id": "https://wafer.li/blog-corners/old-inventory/CodeConvention/Java%20Coding%20Standards/",
      "summary": "<h2 id=\"_1-naming\"> 1. Naming</h2>\n<h3 id=\"_1-1-common\"> 1.1 Common</h3>\n<ol>\n<li>Do not allow <code>a, an, the</code> appear in the name</li>\n</ol>\n<blockquote>\n<p><code>theCode</code>, <code>anException</code>, <code>getTheResult()</code>, are all <strong>NOT</strong> correct.</p>\n</blockquote>\n<ol start=\"2\">\n<li>Name should be divide into words</li>\n</ol>\n<blockquote>\n<p><code>reSetStatus</code> are <strong>not</strong> correct, it should be <code>resetStatus</code></p>\n</blockquote>\n",
      "content_html": "<h2 id=\"_1-naming\"> 1. Naming</h2>\n<h3 id=\"_1-1-common\"> 1.1 Common</h3>\n<ol>\n<li>Do not allow <code>a, an, the</code> appear in the name</li>\n</ol>\n<blockquote>\n<p><code>theCode</code>, <code>anException</code>, <code>getTheResult()</code>, are all <strong>NOT</strong> correct.</p>\n</blockquote>\n<ol start=\"2\">\n<li>Name should be divide into words</li>\n</ol>\n<blockquote>\n<p><code>reSetStatus</code> are <strong>not</strong> correct, it should be <code>resetStatus</code></p>\n</blockquote>\n\n<ol start=\"3\">\n<li>Not allow single character prefix of variable name</li>\n</ol>\n<blockquote>\n<p>The <code>aName</code>, <code>kFlag</code>, <code>cBook</code> are all <strong>NOT</strong> correct</p>\n<p>The name should be as meanningful as possible</p>\n</blockquote>\n<h3 id=\"_1-2-special-for-identifiers\"> 1.2 Special for identifiers</h3>\n<h4 id=\"_1-2-1-class\"> 1.2.1 Class</h4>\n<p>ClassName use the <strong>UpperCamelCase</strong></p>\n<h4 id=\"_1-2-2-variable\"> 1.2.2 Variable</h4>\n<ol>\n<li>variableName use the <strong>lowCamelCase</strong></li>\n<li>Single character name should <strong>only</strong> appears in the <strong>Iterator</strong><div><pre><code><span>// They are okay</span>\n<span>for</span><span>(</span><span>int</span> i <span>:</span> <span>int</span><span>[</span><span>]</span><span>)</span>\n<span>for</span><span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span>i<span>&lt;</span><span>50</span><span>;</span>i<span>++</span><span>)</span> <span>{</span><span>}</span>\n\n<span>// They are bad</span>\n<span>int</span> k<span>;</span>\n<span>int</span> i<span>;</span>\n<span>for</span> <span>(</span><span>int</span> j <span>=</span> <span>0</span><span>;</span> j <span>&lt;</span> <span>50</span><span>;</span> j<span>++</span><span>)</span> <span>{</span>\n    <span>int</span> i<span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div></li>\n</ol>\n<blockquote>\n<p>But avoid using the single character name as possible</p>\n</blockquote>\n<ol start=\"3\">\n<li>Not allow underscores</li>\n</ol>\n<div><pre><code><span>// That's not allow</span>\n<span>int</span> red_color<span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h4 id=\"_1-2-3-method\"> 1.2.3 Method</h4>\n<ol>\n<li>\n<p>methodName() use the <strong>lowCamelCase</strong></p>\n</li>\n<li>\n<p>Do <strong>NOT</strong> allow single chracter</p>\n<div><pre><code><span>// That's not allow</span>\n<span>public</span> <span>void</span> <span>a</span><span>(</span><span>)</span> <span>{</span><span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div></li>\n<li>\n<p>Do <strong>NOT</strong> allow underscores</p>\n<div><pre><code><span>// They are not allow</span>\n<span>public</span> <span>void</span> <span>ini_Data</span><span>(</span><span>)</span> <span>{</span><span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div></li>\n</ol>\n<h4 id=\"_1-2-4-paramater\"> 1.2.4 Paramater</h4>\n<ol>\n<li>Do <strong>NOT</strong> allow 1 character paramater</li>\n</ol>\n<div><pre><code><span>// That's not allow</span>\n<span>public</span> <span>void</span> <span>resetPosition</span><span>(</span><span>int</span> a<span>)</span> <span>{</span><span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h4 id=\"_1-2-5-constant\"> 1.2.5 Constant</h4>\n<p>Constant name use <code>CONSTANT_NAME</code> style. All UPPERCASE character and sperated by underscores.\nEvery constant is in <strong>static</strong> <strong>final</strong> field, but not all static final field is constant</p>\n<div><pre><code><span>// Constants</span>\n<span>static</span> <span>final</span> <span>int</span> NUMBER <span>=</span> <span>5</span><span>;</span>\n<span>static</span> <span>final</span> <span>ImmutableList</span><span><span>&lt;</span><span>String</span><span>></span></span> NAMES <span>=</span> <span>ImmutableList</span><span>.</span><span>of</span><span>(</span><span>\"Ed\"</span><span>,</span> <span>\"Ann\"</span><span>)</span><span>;</span>\n<span>static</span> <span>final</span> <span>Joiner</span> COMMA_JOINER <span>=</span> <span>Joiner</span><span>.</span><span>on</span><span>(</span><span>','</span><span>)</span><span>;</span>  <span>// because Joiner is immutable</span>\n<span>static</span> <span>final</span> <span>SomeMutableType</span><span>[</span><span>]</span> EMPTY_ARRAY <span>=</span> <span>{</span><span>}</span><span>;</span>\n<span>enum</span> <span>SomeEnum</span> <span>{</span> ENUM_CONSTANT <span>}</span>\n\n<span>// Not constants</span>\n<span>static</span> <span>String</span> nonFinal <span>=</span> <span>\"non-final\"</span><span>;</span>\n<span>final</span> <span>String</span> nonStatic <span>=</span> <span>\"non-static\"</span><span>;</span>\n<span>static</span> <span>final</span> <span>Set</span><span><span>&lt;</span><span>String</span><span>></span></span> mutableCollection <span>=</span> <span>new</span> <span>HashSet</span><span><span>&lt;</span><span>String</span><span>></span></span><span>(</span><span>)</span><span>;</span>\n<span>static</span> <span>final</span> <span>ImmutableSet</span><span><span>&lt;</span><span>SomeMutableType</span><span>></span></span> mutableElements <span>=</span> <span>ImmutableSet</span><span>.</span><span>of</span><span>(</span>mutable<span>)</span><span>;</span>\n<span>static</span> <span>final</span> <span>Logger</span> logger <span>=</span> <span>Logger</span><span>.</span><span>getLogger</span><span>(</span><span>MyClass</span><span>.</span><span>getName</span><span>(</span><span>)</span><span>)</span><span>;</span>\n<span>static</span> <span>final</span> <span>String</span><span>[</span><span>]</span> nonEmptyArray <span>=</span> <span>{</span><span>\"these\"</span><span>,</span> <span>\"can\"</span><span>,</span> <span>\"change\"</span><span>}</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h4 id=\"_1-2-6-camel-case-defined\"> 1.2.6 Camel case: defined</h4>\n<p>With the defined name, should still obey the camelCase</p>\n<table>\n<thead>\n<tr>\n<th>Prose form</th>\n<th>Correct</th>\n<th>Incorrect</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&quot;XML HTTP request&quot;</td>\n<td>XmlHttpRequest</td>\n<td>XMLHTTPRequest</td>\n</tr>\n<tr>\n<td>&quot;new customer ID&quot;</td>\n<td>newCustomerId</td>\n<td>newCustomerID</td>\n</tr>\n<tr>\n<td>&quot;inner stopwatch&quot;</td>\n<td>innerStopwatch</td>\n<td>innerStopWatch</td>\n</tr>\n<tr>\n<td>&quot;supports IPv6 on iOS?&quot;</td>\n<td>supportsIpv6OnIos</td>\n<td>supportsIPv6OnIOS</td>\n</tr>\n<tr>\n<td>&quot;YouTube importer&quot;</td>\n<td>YouTubeImporter</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"_2-formatting\"> 2. Formatting</h2>\n<h3 id=\"_2-1-braces\"> 2.1 Braces</h3>\n<h4 id=\"_2-1-1-braces-is-used-as-much-as-possible\"> 2.1.1 Braces is used as much as possible</h4>\n<p>Braces are used with <code>if</code>, <code>else</code>, <code>for</code>, <code>do</code> and <code>while</code> statements, even when the body is empty or contains only a single statement.</p>\n<h4 id=\"_2-1-2-non-empty-braces-use-the-k-r-style\"> 2.1.2 Non-Empty braces:use the K &amp; R style</h4>\n<blockquote>\n<p><code>{</code> should after a space and appear at the end of line\n<code>(</code> of control statement should have a space before it\n<code>(</code> of method should have no space before it</p>\n</blockquote>\n<div><pre><code><span>return</span> <span>new</span> <span>MyClass</span><span>(</span><span>)</span> <span>{</span>\n  <span>@Override</span> <span>public</span> <span>void</span> <span>method</span><span>(</span><span>)</span> <span>{</span>\n    <span>if</span> <span>(</span><span>condition</span><span>(</span><span>)</span><span>)</span> <span>{</span>\n      <span>try</span> <span>{</span>\n        <span>something</span><span>(</span><span>)</span><span>;</span>\n      <span>}</span> <span>catch</span> <span>(</span><span>ProblemException</span> e<span>)</span> <span>{</span>\n        <span>recover</span><span>(</span><span>)</span><span>;</span>\n      <span>}</span>\n    <span>}</span>\n  <span>}</span>\n<span>}</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h3 id=\"_2-2-blank\"> 2.2 Blank</h3>\n<p>Blank should appear:</p>\n<ol>\n<li>Between methods<div><pre><code><span>public</span> <span>void</span> <span>doSomeThing</span><span>(</span><span>)</span> <span>{</span><span>}</span>\n\n<span>public</span> <span>void</span> <span>doOtherThing</span><span>(</span><span>)</span> <span>{</span><span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>\n<li>Between Set of attrs<div><pre><code><span>// That's attrs set of context and container</span>\n<span>protected</span> <span>View</span> mRootView<span>;</span>\n<span>protected</span> <span>SetPersonalizedInfoActivity</span> mContext<span>;</span>\n\n<span>// That's attrs set of widget</span>\n<span>private</span> <span>WheelView</span> firstTypeLpv<span>;</span>\n<span>private</span> <span>WheelView</span> secondTypeLpv<span>;</span>\n<span>private</span> <span>TextView</span> nextQuestionTxt<span>;</span>\n\n<span>// That's attrs set of data</span>\n<span>private</span> <span>UserBean</span> userBean <span>=</span> <span>UserBean</span><span>.</span><span>getInstance</span><span>(</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div></li>\n</ol>\n",
      "date_published": "2016-11-18T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "CleanCode"
      ]
    },
    {
      "title": "VisualNav 编码规范",
      "url": "https://wafer.li/blog-corners/old-inventory/CodeConvention/VisualNav%20%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/",
      "id": "https://wafer.li/blog-corners/old-inventory/CodeConvention/VisualNav%20%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/",
      "summary": "<h2 id=\"_1-通用规范\"> 1. 通用规范</h2>\n<p>VisualNav 项目的代码文件主要包含 Java、XML 以及 Gradle 三种。对于所有的代码文件，都需要遵守以下几条规范：</p>\n<ol>\n<li>\n<p>所有代码文件都必须使用 <strong>UTF-8</strong> 进行编码；</p>\n</li>\n<li>\n<p>使用空格而不是制表符进行缩进，每个缩进的单位为 4 字符（使用 Android Studio 默认配置即可，不要修改缩进配置）；</p>\n</li>\n<li>\n<p>每行仅书写一条语句，多条语句不能写在同一行中；</p>\n</li>\n</ol>\n",
      "content_html": "<h2 id=\"_1-通用规范\"> 1. 通用规范</h2>\n<p>VisualNav 项目的代码文件主要包含 Java、XML 以及 Gradle 三种。对于所有的代码文件，都需要遵守以下几条规范：</p>\n<ol>\n<li>\n<p>所有代码文件都必须使用 <strong>UTF-8</strong> 进行编码；</p>\n</li>\n<li>\n<p>使用空格而不是制表符进行缩进，每个缩进的单位为 4 字符（使用 Android Studio 默认配置即可，不要修改缩进配置）；</p>\n</li>\n<li>\n<p>每行仅书写一条语句，多条语句不能写在同一行中；</p>\n</li>\n</ol>\n\n<ol start=\"4\">\n<li>\n<p>限制代码行的长度，每行不应该超过 100 字符。如果一条语句的长度超过 100 字符，需要适当地进行断行，具体断行的方法会在不同文件类型的规范中进行规定；</p>\n</li>\n<li>\n<p>注释详细。推荐使用英文注释，也可以使用中文进行注释。对注释的具体要求会在不同文件类型的规范中进行规定；</p>\n</li>\n<li>\n<p>每个代码文件的末尾必须有且只有一个空行。</p>\n</li>\n</ol>\n<h2 id=\"_2-java-编码规范\"> 2. Java 编码规范</h2>\n<h3 id=\"_2-1-文件组织\"> 2.1 文件组织</h3>\n<p>每个 Java 源文件都必须包含一个唯一的公共类或者接口，这个公共类或者接口与所在文件同名，并且必须是文件中的第一个类或者接口。与公共类相关的私有类和接口可以在公共类的定义之后进行定义。</p>\n<h3 id=\"_2-2-注释\"> 2.2 注释</h3>\n<p>必须使用 <strong>Javadoc</strong> 标准注释。具体注释要求如下：</p>\n<h4 id=\"_2-2-1-类-接口注释\"> 2.2.1 类/接口注释</h4>\n<p>对于每个类和接口，都应该在类和接口定义之前给出一条注释，介绍这个类的主要功能。注释可以是名词性质的短语，也可以是以第三人称的动词开头的句子</p>\n<p>例如：</p>\n<div><pre><code><span>/**\n * A request for fetching user info.\n */</span>\n<span>public</span> <span>class</span> <span>UserInfoRequest</span> <span>extends</span> <span>Request</span> <span>{</span>\n    <span>.</span><span>.</span><span>.</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h4 id=\"_2-2-2-方法注释\"> 2.2.2 方法注释</h4>\n<p>对于类中<strong>自建</strong>的方法，必须在方法定义之前给出一条注释，描述方法的用途、参数、返回值以及可能抛出的异常。注释是以第三人称的动词开头的句子。</p>\n<p>例如：</p>\n<div><pre><code><span>/**\n * Parses a {@link org.json.JSONObject} into a User object.\n *\n * @param userObject {@link org.json.JSONObject} to be parsed\n * @return a User object\n * @throws JSONException if JSON is invalid\n */</span>\n<span>public</span> <span>User</span> <span>parseJson</span><span>(</span><span>JSONObject</span> userObject<span>)</span> <span>throws</span> <span>JSONException</span> <span>{</span>\n    <span>.</span><span>.</span><span>.</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>一般情况下，类中属性的 get 和 set 方法不需要 Javadoc 注释。如果 get 和 set 方法会带来特殊的效果，或者对应的属性不容易理解，就需要提供注释。例如：</p>\n<div><pre><code><span>/**\n * Sets the last name of user.\n * Name of user will also be update: 2016-11-18\n */</span>\n<span>public</span> <span>void</span> <span>setLastName</span><span>(</span><span>String</span> lastName<span>)</span> <span>{</span>\n    <span>this</span><span>.</span>mLastName <span>=</span> lastName<span>;</span>\n    <span>this</span><span>.</span>mName <span>=</span> <span>this</span><span>.</span>mFirstName <span>+</span> <span>\" \"</span> <span>+</span> <span>this</span><span>.</span>mLastName<span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h4 id=\"_2-2-3-一般注释\"> 2.2.3 一般注释</h4>\n<p>主要包括代码块注释和行尾注释。</p>\n<ol>\n<li>\n<p>代码块注释</p>\n<p>编写方法的时候，需要为每个代码块加上一条注释，描述这个代码块的功能。简单的代码块（如变量声明）无需注释。注释是以第三人称的动词开头的句子。如果注释只有一行，使用单行注释（<code>//</code>），否则使用块注释（<code>/* ... */</code>）。</p>\n</li>\n<li>\n<p>语句注释</p>\n<p>一些关键的、不易理解的语句需要加上注释进行解释。</p>\n<ul>\n<li>\n<p>如果注释内容很短，使用单行注释（<code>//</code>）在行尾添加注释，并与语句之间留有一定的间隔使之可读。此时对注释的书写格式没有具体要求。</p>\n</li>\n<li>\n<p>如果注释内容较长或者语句较长，使用单行注释（<code>//</code>）在语句之前添加独立的一行注释。注释的书写格式和代码块注释相同。</p>\n</li>\n</ul>\n</li>\n</ol>\n<p>例如：</p>\n<div><pre><code><span>// Prepares parameters for the request.</span>\n<span>JSONParams</span> params <span>=</span> <span>new</span> <span>JSONParams</span><span>(</span><span>)</span><span>;</span>\nparams<span>.</span><span>addParam</span><span>(</span><span>\"name\"</span><span>,</span> mName<span>)</span><span>;</span>\n\n<span>// Fills up the request.</span>\nmRequest <span>=</span> <span>new</span> <span>JsonObjectRequest</span><span>(</span>mUrl<span>,</span> <span>null</span><span>,</span>\n        <span>new</span> <span>Response<span>.</span>Listener</span><span><span>&lt;</span><span>JSONObject</span><span>></span></span><span>(</span><span>)</span> <span>{</span>\n            <span>.</span><span>.</span><span>.</span>\n        <span>}</span><span>,</span>\n        <span>new</span> <span>Response<span>.</span>ErrorListener</span><span>(</span><span>)</span> <span>{</span>\n            <span>.</span><span>.</span><span>.</span>\n        <span>}</span>\n<span>)</span><span>;</span>\nmRequest<span>.</span><span>setShouldCache</span><span>(</span><span>false</span><span>)</span><span>;</span> <span>// disable caching</span>\n\n<span>// Executes the request.</span>\n<span>super</span><span>.</span><span>execure</span><span>(</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h4 id=\"_2-2-4-关于调试用注释\"> 2.2.4 关于调试用注释</h4>\n<p>master 分支或合并到 master 分支的代码不允许出现调试用的注释\n所谓调试用的注释即为，为了<strong>调试目的</strong>而使某些代码<strong>暂时失效</strong>的注释\n例如：</p>\n<div><pre><code><span>public</span> <span>void</span> <span>doSomeThing</span><span>(</span><span>)</span> <span>{</span>\n    <span>do1</span><span>(</span><span>)</span><span>;</span>\n    <span>do2</span><span>(</span><span>)</span><span>;</span>\n<span>//    do3();    // 此即为调试用注释，master 分支上的代码不允许出现这种注释</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>有关 Git 的规范，请看下面的 Git 规范 部分</p>\n<h3 id=\"_2-3-缩进与排版\"> 2.3 缩进与排版</h3>\n<p>除了第 1 节中提出的一些通用规范，还应该遵守以下缩进和排版的规范。</p>\n<h4 id=\"_2-3-1-换行\"> 2.3.1 换行</h4>\n<p>对于长度过长的语句，必须按以下规则断行：</p>\n<ol>\n<li>\n<p>可以在逗号后断行；</p>\n</li>\n<li>\n<p>可以在运算符前面断行；</p>\n</li>\n<li>\n<p>新的一行开头应该与上一行同一级别的表达式开头对齐；</p>\n</li>\n<li>\n<p>如果满足以上规则导致代码较为混乱，新的一行开头可以改为缩进8个字符。</p>\n</li>\n</ol>\n<p>以下是一些对长语句断行的例子：</p>\n<ol>\n<li>\n<p>长度过长的方法定义和调用，可以在参数处进行断行，并保持参数对齐。</p>\n<div><pre><code><span>public</span> <span>UserInfoRequest</span><span>(</span><span>Context</span> context<span>,</span> <span>String</span> name<span>,</span>\n                       <span>RequestSuccessListener</span><span><span>&lt;</span><span>User</span><span>></span></span> successListener<span>,</span>\n                       <span>RequestErrorListener</span> errorListener<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>\n<li>\n<p>在运算符处断开较长的表达式。</p>\n<div><pre><code>num1 <span>=</span> num2 <span>*</span> <span>(</span>num3 <span>+</span> num4 <span>-</span> num5<span>)</span> <span>/</span> num6\n        <span>+</span> <span>(</span>num7 <span>-</span> num8<span>)</span> <span>*</span> num9 <span>/</span> num10<span>;</span>\n<span>if</span> <span>(</span><span>(</span>condition1 <span>||</span> condition2<span>)</span>\n        <span>&amp;&amp;</span>  <span>(</span>condition3 <span>||</span> condition4<span>)</span>\n        <span>&amp;&amp;</span> <span>!</span><span>(</span>condition5 <span>||</span> condition6<span>)</span><span>)</span> <span>{</span>\n    <span>.</span><span>.</span><span>.</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div></li>\n</ol>\n<p>大括号的使用规则：在任何情况下，左大括号（<code>{</code>）都要与语句在同一行，右大括号（<code>}</code>）独占一行。</p>\n<div><pre><code><span>// 正确                    错误</span>\n<span>if</span> <span>(</span>a <span>==</span> <span>1</span><span>)</span> <span>{</span>             <span>if</span> <span>(</span>a <span>==</span> <span>1</span><span>)</span>\n    <span>.</span><span>.</span><span>.</span>                   <span>{</span>\n<span>}</span>                             <span>.</span><span>.</span><span>.</span>\n                          <span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>编写方法时，按功能、步骤对代码进行分块，以一个空行分开不同的代码块。每个代码块都需要给出解释其作用的注释，具体格式参考 2.2.3 节。</p>\n<h4 id=\"_2-3-2-空格与括号\"> 2.3.2 空格与括号</h4>\n<p>需要在适当的位置插入空格或使用括号，使代码更可读。</p>\n<ol>\n<li>\n<p>除一元运算符和 <code>.</code> 之外，运算符与运算数之间需要以空格分隔。</p>\n<div><pre><code><span>// 正确                    错误</span>\na <span>=</span> <span>0</span>                     a<span>=</span><span>0</span>\na <span>+</span> b                     a<span>+</span>b\na <span>&lt;</span> b                     a<span>&lt;</span>b\na <span>&amp;&amp;</span> b                    a<span>&amp;&amp;</span>b\n<span>!</span>a                        <span>!</span> a\na<span>++</span>                       a <span>++</span>\nuser<span>.</span><span>getName</span><span>(</span><span>)</span>            user <span>.</span> <span>getName</span><span>(</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p><code>for</code> 循环头的写法为：</p>\n<div><pre><code><span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> n<span>;</span> i<span>++</span><span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>括号与操作数之间不需要空格，例如：</p>\n<div><pre><code><span>// 正确                    错误</span>\n<span>if</span> <span>(</span>a <span>==</span> <span>1</span><span>)</span>               <span>if</span> <span>(</span> a <span>=</span> <span>1</span> <span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>左大括号（<code>{</code>）之前需要一个空格，例如：</p>\n<div><pre><code><span>// 正确                    错误</span>\n<span>if</span> <span>(</span>a <span>==</span> <span>1</span><span>)</span> <span>{</span>             <span>if</span> <span>(</span>a <span>==</span> <span>1</span><span>)</span><span>{</span>\n    <span>.</span><span>.</span><span>.</span>\n<span>}</span>                         <span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div></li>\n<li>\n<p>关键字与括号之间要添加 1 个空格，方法名、类名和括号之间不需要空格。</p>\n<div><pre><code><span>// 正确                    错误</span>\n<span>if</span> <span>(</span>a <span>==</span> <span>1</span><span>)</span>               <span>if</span><span>(</span>a <span>==</span> <span>1</span><span>)</span>\n<span>while</span> <span>(</span>b <span>==</span> <span>true</span><span>)</span>         <span>while</span><span>(</span>b <span>==</span> <span>true</span><span>)</span>\n<span>User</span> user <span>=</span> <span>new</span> <span>User</span><span>(</span><span>)</span><span>;</span>   <span>User</span> user <span>=</span> <span>new</span> <span>User</span> <span>(</span><span>)</span><span>;</span>\nuser<span>.</span><span>setName</span><span>(</span><span>\"Name\"</span><span>)</span><span>;</span>     user<span>.</span>setName <span>(</span><span>\"Name\"</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div></li>\n<li>\n<p>注释符号（<code>//</code>、<code>/*</code> 和 <code>*/</code>）与注释内容之间需要加一个空格。</p>\n<div><pre><code><span>// 注释符号与注释之间有一个空格</span>\n<span>/* 就像这样 */</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div></li>\n<li>\n<p>强制类型转换后需要有一个空格。</p>\n<div><pre><code>mTextView <span>=</span> <span>(</span><span>TextView</span><span>)</span> <span>findViewById</span><span>(</span><span>R</span><span>.</span>id<span>.</span>text<span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div></li>\n<li>\n<p>必要时需要为一些表达式加上括号（即使并没有出现运算符优先级的问题），以增强代码的可读性。例如：</p>\n<div><pre><code><span>if</span> <span>(</span><span>(</span>a <span>&amp;&amp;</span> b<span>)</span> <span>||</span> <span>(</span>c <span>&amp;&amp;</span> d<span>)</span> <span>||</span> e<span>)</span> <span>{</span>\n    <span>.</span><span>.</span><span>.</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>\n</ol>\n<h4 id=\"_2-3-3-空行\"> 2.3.3 空行</h4>\n<p>在适当的位置插入空行使得代码更具有可读性：</p>\n<ol>\n<li>\n<p>在<strong>两个方法之间</strong>要空两行</p>\n<div><pre><code><span>public</span> <span>void</span> <span>doSomeThing</span><span>(</span><span>)</span> <span>{</span>\n    <span>// There</span>\n    <span>// are</span>\n    <span>// a</span>\n    <span>// lot</span>\n    <span>// of</span>\n    <span>// stuffs</span>\n\n    <span>/*\n    * I cannot\n    * simply\n    * count\n    */</span>\n<span>}</span>\n\n\n<span>public</span> <span>void</span> <span>doOtherThing</span><span>(</span><span>)</span> <span>{</span>\n    <span>// There</span>\n    <span>// are</span>\n    <span>// a</span>\n    <span>// lot</span>\n    <span>// of</span>\n    <span>// stuffs</span>\n\n    <span>/*\n    * I cannot\n    * simply\n    * count\n    */</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div></li>\n<li>\n<p>在类的<strong>不同的属性集合之间</strong>要有空行</p>\n<div><pre><code><span>// 上下文和视图 container</span>\n<span>protected</span> <span>View</span> mRootView<span>;</span>\n<span>protected</span> <span>SetPersonalizedInfoActivity</span> mContext<span>;</span>\n\n<span>// 各视图组件</span>\n<span>private</span> <span>WheelView</span> firstTypeLpv<span>;</span>\n<span>private</span> <span>WheelView</span> secondTypeLpv<span>;</span>\n<span>private</span> <span>TextView</span> nextQuestionTxt<span>;</span>\n\n<span>// 数据域</span>\n<span>private</span> <span>UserBean</span> userBean <span>=</span> <span>UserBean</span><span>.</span><span>getInstance</span><span>(</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div></li>\n<li>\n<p>类的成员变量和方法之间要有空行</p>\n<div><pre><code><span>// 上下文和视图 container</span>\n<span>protected</span> <span>View</span> mRootView<span>;</span>\n<span>protected</span> <span>SetPersonalizedInfoActivity</span> mContext<span>;</span>\n\n<span>// 各视图组件</span>\n<span>private</span> <span>WheelView</span> firstTypeLpv<span>;</span>\n<span>private</span> <span>WheelView</span> secondTypeLpv<span>;</span>\n<span>private</span> <span>TextView</span> nextQuestionTxt<span>;</span>\n\n<span>// 数据域</span>\n<span>private</span> <span>UserBean</span> userBean <span>=</span> <span>UserBean</span><span>.</span><span>getInstance</span><span>(</span><span>)</span><span>;</span>\n\n<span>//方法</span>\n<span>public</span> <span>void</span> <span>doSomeThing</span><span>(</span><span>)</span> <span>{</span><span>}</span>\n\n\n<span>public</span> <span>void</span> <span>doOtherThing</span><span>(</span><span>)</span> <span>{</span><span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div></li>\n<li>\n<p>如果有内部类或内部接口，内部类与上下文要空<strong>两行</strong></p>\n<blockquote>\n<p>若内部类或接口在所有代码的尾部，则不需要与下文有空行</p>\n</blockquote>\n<div><pre><code><span>public</span> <span>class</span> <span>OuterClass</span> <span>{</span>\n    <span>public</span> <span>void</span> <span>doSomeThing</span><span>(</span><span>)</span> <span>{</span><span>}</span>\n\n\n    <span>public</span> <span>void</span> <span>doOtherThing</span><span>(</span><span>)</span> <span>{</span><span>}</span>\n\n\n    <span>class</span> <span>InnerClass</span> <span>{</span>\n        <span>// 这里是内部类的一些东西</span>\n    <span>}</span>\n\n\n    <span>public</span> <span>void</span> <span>methodBehindInnerClass</span><span>(</span><span>)</span> <span>{</span><span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div></li>\n<li>\n<p>方法内部<strong>不同功能</strong>的代码块要空行</p>\n<div><pre><code><span>public</span> <span>void</span> <span>onPrevFragment</span><span>(</span><span>)</span> <span>{</span>\n\n    <span>// Pop back stack</span>\n    fragmentManager<span>.</span><span>popBackStack</span><span>(</span><span>)</span><span>;</span>\n\n    <span>int</span> index<span>;</span>\n\n    <span>// Find index</span>\n    <span>for</span> <span>(</span>index <span>=</span> <span>0</span><span>;</span> index <span>&lt;</span> fragmentTitles<span>.</span>length<span>;</span> index<span>++</span><span>)</span> <span>{</span>\n        <span>if</span> <span>(</span>currentFragmentTag<span>.</span><span>equals</span><span>(</span>fragmentTitles<span>[</span>index<span>]</span><span>)</span><span>)</span> <span>{</span>\n            <span>break</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n\n    <span>// Set currentFragmentTag</span>\n    <span>if</span> <span>(</span>index <span>></span> <span>0</span><span>)</span> <span>{</span>\n        currentFragmentTag <span>=</span> fragmentTitles<span>[</span>index <span>-</span> <span>1</span><span>]</span><span>;</span>\n    <span>}</span>\n\n    <span>// Set title</span>\n    <span>assert</span> <span>getSupportActionBar</span><span>(</span><span>)</span> <span>!=</span> <span>null</span><span>;</span>\n    <span>getSupportActionBar</span><span>(</span><span>)</span><span>.</span><span>setTitle</span><span>(</span>currentFragmentTag<span>)</span><span>;</span>\n\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div></li>\n</ol>\n<h3 id=\"_2-4-命名规范\"> 2.4 命名规范</h3>\n<h4 id=\"_2-4-1-通用规范\"> 2.4.1 通用规范</h4>\n<ol>\n<li>\n<p>将缩写词作为普通单词处理。\n例如在类名中：</p>\n<div><pre><code><span>class</span> <span>XmlParser</span> <span>{</span><span>.</span><span>.</span><span>.</span><span>}</span> <span>// 而不是 XMLParser</span>\n</code></pre>\n<div><span>1</span><br></div></div></li>\n<li>\n<p>不允许出现 <code>a, an, the</code> 等冠词</p>\n<div><pre><code><span>void</span> <span>getTheResult</span><span>(</span><span>)</span>   <span>// 错误</span>\n\n<span>void</span> <span>getResult</span><span>(</span><span>)</span>    <span>// 正确</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>\n<li>\n<p>除<strong>常量外</strong>，其余命名不允许出现下划线字符(<code>_</code>)</p>\n</li>\n</ol>\n<h4 id=\"_2-4-2-包名\"> 2.4.2 包名</h4>\n<p>包名必须为全小写字母。如果出现多个单词构成的包名，不进行分隔。例如：</p>\n<div><pre><code>com<span>.</span>example<span>.</span>packagename\n</code></pre>\n<div><span>1</span><br></div></div><h4 id=\"_2-4-3-类名\"> 2.4.3 类名</h4>\n<p>类名必须是名词或名词短语，每个单词首字母均大写。例如：</p>\n<div><pre><code><span>class</span> <span>ImageDownloader</span> <span>{</span><span>.</span><span>.</span><span>.</span><span>}</span>\n</code></pre>\n<div><span>1</span><br></div></div><h4 id=\"_2-4-4-接口名\"> 2.4.4 接口名</h4>\n<p>与类名规则相同。不需要加 <code>I</code> 前缀。</p>\n<div><pre><code><span>// 而不是IOnButtonClickListener</span>\n<span>interface</span> <span>OnButtonClickListener</span> <span>{</span><span>.</span><span>.</span><span>.</span><span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h4 id=\"_2-4-5-方法名\"> 2.4.5 方法名</h4>\n<p>方法名是一个动词或动词短语，第一个单词的首字母小写，其余单词首字母均大写。例如：</p>\n<div><pre><code><span>public</span> <span>int</span> <span>getId</span><span>(</span><span>)</span>\n<span>private</span> <span>void</span> <span>start</span><span>(</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h4 id=\"_2-4-6-变量与常量名\"> 2.4.6 变量与常量名</h4>\n<p>常量名所有字母均大写，单词之间以下划线（<code>_</code>）分隔。例如：</p>\n<div><pre><code><span>public</span> <span>static</span> <span>final</span> <span>String</span> DATABASE_NAME <span>=</span> <span>\"...\"</span><span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>类中的成员变量需要加前缀 <code>m</code>，每个单词首字母大写。例如：</p>\n<div><pre><code><span>private</span> <span>String</span> mLastName<span>;</span>\n<span>public</span> <span>int</span> mAge<span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>~<s>类的<strong>静态</strong>成员变量需要添加前缀 <code>s</code>，其余每个单词首字母大写。例如：</s>~</p>\n<div><pre><code><span>// 抛弃的旧规范</span>\n<span>private</span> <span>static</span> <span>int</span> sCountOfInstances<span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>局部变量第一个单词首字母小写，其余每个单词首字母大写。例如：</p>\n<div><pre><code><span>public</span> <span>void</span> <span>method</span><span>(</span><span>)</span> <span>{</span>\n    <span>int</span> tempVariable<span>;</span>\n    <span>.</span><span>.</span><span>.</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id=\"_2-5-其他规范\"> 2.5 其他规范</h3>\n<h4 id=\"_2-5-1-异常处理\"> 2.5.1 异常处理</h4>\n<ol>\n<li>\n<p>异常处理的首要原则是<strong>不能忽略异常</strong>。例如以下代码是不可取的：</p>\n<div><pre><code><span>try</span> <span>{</span>\n    <span>JSONTokener</span> jsonTokener <span>=</span> <span>new</span> <span>JSONTokener</span><span>(</span>jsonString<span>)</span><span>;</span>\n<span>}</span> <span>catch</span> <span>(</span><span>JSONException</span> ex<span>)</span> <span>{</span> <span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>捕获到异常，必须对异常进行处理。</p>\n</li>\n<li>\n<p>不能捕获顶级异常（<code>Exception</code>）。</p>\n<p>必须根据异常的种类分别进行捕获和处理，不能直接捕获 <code>Exception</code>。以下代码是不可取的：</p>\n<div><pre><code><span>try</span> <span>{</span>\n    <span>.</span><span>.</span><span>.</span>  <span>// 这里会抛出多种异常</span>\n<span>}</span> <span>catch</span> <span>(</span><span>Exception</span> ex<span>)</span> <span>{</span>\n    <span>.</span><span>.</span><span>.</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>正确的做法是：</p>\n<div><pre><code><span>try</span> <span>{</span>\n    <span>.</span><span>.</span><span>.</span>\n<span>}</span> <span>catch</span> <span>(</span><span>OneKindOfException</span> ex1<span>)</span> <span>{</span>\n    <span>// 处理 ex1</span>\n<span>}</span> <span>catch</span> <span>(</span><span>AnotherKindOfException</span> ex2<span>)</span> <span>{</span>\n    <span>// 处理 ex2</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div></li>\n</ol>\n<h4 id=\"_2-5-2-import-规范\"> 2.5.2 import 规范</h4>\n<p>不要手动输入 <code>import</code> 语句或手动调整 <code>import</code> 之间的顺序，而应通过 Android Studio 提供的自动 import 功能来管理。</p>\n<p>例如，如果需要导入 <code>java.util</code> 包的 <code>ArrayList</code> 类，只需要输入 <code>ArrayList</code>，根据 Android Studio 自动弹出的提示选择正确的类，即可自动添加一条 <code>import java.util.ArrayList;</code> 语句。</p>\n<p>如果出现了导入之后没有使用的情况，应该对废弃的 <code>import</code> 语句进行清理。</p>\n<h4 id=\"_2-5-3-java-annotation-的使用规范\"> 2.5.3 Java Annotation 的使用规范</h4>\n<p>Annotation 必须出现在其他任何修饰符之前，每个 Annotation 独占一行。例如：</p>\n<div><pre><code><span>@Override</span>\n<span>protected</span> <span>void</span> <span>onCreated</span><span>(</span><span>Bundle</span> savedInstanceState<span>)</span> <span>{</span>\n    <span>.</span><span>.</span><span>.</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>只要类中的一个方法覆盖了所在类或者父类中的方法，必须为这个方法加上 <code>@Override</code>。</p>\n<h4 id=\"_2-5-4-使用-todo-注释\"> 2.5.4 使用 TODO 注释</h4>\n<p>TODO 注释用于标记和管理待办事项。在当前无法完成某项工作时，必须将待办的工作用 TODO 注释写在相应的位置。TODO 注释的用法是：只要在注释中出现独立的（作为一个独立单词的）<code>TODO</code>，即可生成 TODO 注释。</p>\n<p>一般的做法是在注释开头标记 <code>TODO</code>。例如：</p>\n<div><pre><code><span>// TODO: add a click listener for button</span>\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"_3-xml-编码规范\"> 3. XML 编码规范</h2>\n<p>XML 文件的编码规范以 Android Studio 默认格式为准，主要包括以下几条要求：</p>\n<ol>\n<li>\n<p>命名空间（<code>xmlns</code>）全部写在 XML 文件根元素的开始处，并按字母顺序排序；</p>\n</li>\n<li>\n<p>元素的 <code>id</code> 属性必须位于其他所有属性之上，布局和尺寸属性位于 <code>id</code> 属性下方、其他属性之上；</p>\n</li>\n<li>\n<p>不同元素之间必须以一个空行分隔；</p>\n</li>\n<li>\n<p>元素的开始标签中，属性不能和元素出现在同一行，并且向右缩进4个字符；</p>\n</li>\n<li>\n<p>所有字符串不允许硬编码，必须统一写入 <code>strings.xml</code> 资源文件并通过 <code>@string</code> 标记引用；</p>\n</li>\n<li>\n<p>不含有内容的元素必须使用闭合标签（<code>&lt;name /&gt;</code>），不能使用标签对（<code>&lt;name&gt;&lt;/name&gt;</code>）；</p>\n</li>\n<li>\n<p>编辑完成 XML 文件后，请使用 Android Studio 的 Code 菜单中的 <strong>Reformat Code</strong> 功能对格式进行自动调整。</p>\n</li>\n</ol>\n<h2 id=\"_4-git-规范\"> 4. Git 规范</h2>\n<p>这里主要遵循的是 Git Flow 的简化版，主要包括以下几点要求：</p>\n<h3 id=\"_4-1-提交\"> 4.1 提交</h3>\n<ol>\n<li>\n<p>请保证以下操作在 commit 之前完成</p>\n<blockquote>\n<p>进行代码分析，解决可以解决的 Warning。\n优化 import 语句\nReformat 代码</p>\n</blockquote>\n</li>\n<li>\n<p>关于 Commit Message</p>\n</li>\n</ol>\n<ul>\n<li>\n<p>以动词开头的祈使句，首字母大写</p>\n<div><pre><code><span>git</span> commit -m <span>\"Add GSON module\"</span>\n</code></pre>\n<div><span>1</span><br></div></div></li>\n<li>\n<p>信息过多，应进行折行，而不能在一行内写完</p>\n<blockquote>\n<p>此时应使用 <code>git commit</code> 在弹出的编辑器中填写多行信息</p>\n</blockquote>\n<div><pre><code><span>git</span> commit\n\n<span>\"\"</span>\"\nFix the moudule:\n<span>1</span>. Remove the unnessary method\n<span>2</span>. Replace the ListView with RecyclerView\n<span>\"\"</span>\"\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div></li>\n<li>\n<p>Commit Message 内容应要尽量意义丰富。</p>\n<blockquote>\n<p>尽量说明操作内容和所涉及到的部分</p>\n</blockquote>\n<div><pre><code><span>\"Fix bug\"</span> // 错误\n<span>\"Fix not render bug of the register page\"</span>   // 正确\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div></li>\n<li>\n<p>建议采用 &quot;Fix issue&quot; 形式来让 Message 更加简洁</p>\n<blockquote>\n<p>相应的，在对应的 issue 就要对问题进行详细的描述</p>\n</blockquote>\n<div><pre><code>// 都是正确的\n<span>\"Fix #1\"</span>\n<span>\"Fix the bug of #2\"</span>\n<span>\"Fix the render bug of #3\"</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div></li>\n</ul>\n<h3 id=\"_4-2-拉取\"> 4.2 拉取</h3>\n<ol>\n<li>\n<p>养成良好习惯，编码前先同步 master 分支</p>\n<blockquote>\n<p>如果有重构相应事项，先进行处理后再编码</p>\n</blockquote>\n</li>\n<li>\n<p>采用 <code>git pull --rebase</code> 代替简单的 <code>git pull</code></p>\n<blockquote>\n<p>rebase 可以生成相对简洁的版本线图</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"_4-3-分支\"> 4.3 分支</h3>\n<ul>\n<li>不设立 develop 分支</li>\n<li>master 分支应是<strong>随时可以运行</strong>的，不允许出现不可运行的错误（编译错误，打开即 Crash 等）</li>\n<li>各分支的内容应基于<strong>最新的</strong> master 分支程序<strong>架构</strong>进行编写，可以随时无冲突的 merge 到 master</li>\n</ul>\n<h3 id=\"_4-4-合并\"> 4.4 合并</h3>\n<ol>\n<li>向 master 分支的合并</li>\n</ol>\n<ul>\n<li>\n<p>原则</p>\n<blockquote>\n<p>必须通过 Pull Requet 进行\n合并到 master 分支的代码不允许出现调试用的注释\n<strong>所有分支应保证彻底运行无误后，才能 merge 到 master</strong></p>\n</blockquote>\n</li>\n<li>\n<p>Feature 分支向 master 分支的合并</p>\n<blockquote>\n<p>原则上，管理员应在 <strong>18 小时</strong>之内回应<strong>项目组成员</strong>的 PullRequest，若管理员超时未进行回应或合并操纵，开发者可经测试后<strong>自行合并</strong>。\n但仍然需要提出 Pull Request 并阐述分支的 Changelog, 以便代码审查。</p>\n</blockquote>\n</li>\n<li>\n<p>HotFix 分支向 master 分支的合并</p>\n<blockquote>\n<p>HotFix 分支的合并可以<strong>不经管理员批准或等待流程</strong>快速合并到 master 上。\n但仍需要提出 Pull Request，保留 Changelog （紧急的可以合并后再写）</p>\n</blockquote>\n</li>\n</ul>\n<ol start=\"2\">\n<li>其他分支的相互合并</li>\n</ol>\n<ul>\n<li>\n<p><strong>不允许</strong>使用 Pull Request 进行</p>\n<blockquote>\n<p>其他分支的相互合并由负责成员之间相互协商解决</p>\n</blockquote>\n</li>\n<li>\n<p>其他要求放宽</p>\n<blockquote>\n<p>可以存在不能运行的 bug，但是必须在 merge 到 master 分支之前解决。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"_4-5-冲突\"> 4.5 冲突</h3>\n<ol>\n<li>\n<p>冲突<strong>必须立即解决</strong>，不允许忽视冲突 force push</p>\n</li>\n<li>\n<p>由其他分支相互合并引起的冲突，由相应开发者进行协商处理</p>\n</li>\n<li>\n<p>关于向 master 合并的冲突，请查看部分</p>\n<blockquote>\n<p>由于所有分支必须基于最新 master 程序架构编写，会出现此种冲突的场景仅存在于重构和 HotFix</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"_4-6-重构\"> 4.6 重构</h3>\n<ol>\n<li>\n<p>重构前</p>\n<blockquote>\n<p>需要重构时,重构发起人 <strong>必须发起 Issue 阐述重构 TODO 事项和最终的 Changelog</strong></p>\n</blockquote>\n</li>\n<li>\n<p>重构中</p>\n<blockquote>\n<p>重构<strong>不允许</strong>直接在 master 分支进行修改，应<strong>新建分支</strong>进行重构 commit</p>\n</blockquote>\n</li>\n<li>\n<p>重构完成后</p>\n<blockquote>\n<p>重构完成后，向 master <strong>提交 Pull Request</strong>，视为 Feature 分支向 master 分支合并进行处理流程。\n分支一旦被合并，合并操作者（<strong>管理员或相应重构开发者</strong>）应立即在各类有效平台通知各分支开发者。\n各分支开发者应在接收到通知后<strong>立即</strong> merge master 分支，以保证基于最新 master 分支进行编写。</p>\n</blockquote>\n</li>\n<li>\n<p>关于冲突</p>\n<blockquote>\n<p>重构 Issue 应说明相应文件和目录结构变化情况\n当各分支 merge master 出现冲突时，按照相应 Issue 的修改进行 resolve conflict.</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"_4-7-热修补-hotfix\"> 4.7 热修补 （HotFix）</h3>\n<ol>\n<li>\n<p>热修补即是<strong>紧急的重构</strong></p>\n</li>\n<li>\n<p>热修补发起人必须尽快通知管理员和项目组其他成员</p>\n<blockquote>\n<p>应使用可能的包括但不限于以下的通知方式:\n<strong>项目 Issue</strong>，QQ，微信，Telegram，邮件，电话，各协作平台等。\n热修补可以不提出 Issue，但应在对应的 Pull Request 中说明对应的修改内容。</p>\n</blockquote>\n</li>\n<li>\n<p>热修补仍然需要在新分支进行操作，但合并时无需经等待或批准流程。</p>\n<blockquote>\n<p>但仍然需要提出 Pull Request，之后可自行合并。\n注意，必须要在 Pull Request 中说明热修补的修改事项。（可以在合并后添加评论）</p>\n</blockquote>\n</li>\n<li>\n<p>其余事项均遵守重构相关规范</p>\n</li>\n</ol>\n",
      "date_published": "2016-11-18T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "CleanCode"
      ]
    },
    {
      "title": "Randomized Queue Implemetation Idea",
      "url": "https://wafer.li/blog-corners/old-inventory/Coursera/Algorithm/Randomized%20Queue%20Implemetation%20Idea/",
      "id": "https://wafer.li/blog-corners/old-inventory/Coursera/Algorithm/Randomized%20Queue%20Implemetation%20Idea/",
      "summary": "<h2 id=\"how-to-check-full-empty\"> How to check full &amp; empty?</h2>\n<ul>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-0\"><label for=\"task-item-0\"> Maintain a item size</label></li>\n<li><input type=\"checkbox\"  disabled=\"disabled\" id=\"task-item-1\"><label for=\"task-item-1\"> Calculate from pointer</label></li>\n</ul>\n",
      "content_html": "<h2 id=\"how-to-check-full-empty\"> How to check full &amp; empty?</h2>\n<ul>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-0\"><label for=\"task-item-0\"> Maintain a item size</label></li>\n<li><input type=\"checkbox\"  disabled=\"disabled\" id=\"task-item-1\"><label for=\"task-item-1\"> Calculate from pointer</label></li>\n</ul>\n\n<h2 id=\"how-to-resize\"> How to resize?</h2>\n<ol>\n<li>Create a new array</li>\n<li>Iterate the item in the origin array</li>\n<li>Assign the new array to the old one</li>\n</ol>\n<h2 id=\"how-to-iterate\"> How to iterate?</h2>\n<ol>\n<li>Initialization: begin at head</li>\n<li>Next: <code>iterator = (iterator + 1) % array.length</code></li>\n<li>HasNext: <code>iterator != last + 1</code></li>\n</ol>\n<h2 id=\"how-to-add\"> How to add?</h2>\n<ol>\n<li>Check if is full, if so, double its size</li>\n<li><code>last = (last + 1) % array.length</code></li>\n<li>Place the item into the new last index position</li>\n</ol>\n<h2 id=\"how-to-remove\"> How to remove?</h2>\n<ol>\n<li>Generate a random integer within the range [0, Size)</li>\n<li>Turn it to the index <code>randomInt + head</code></li>\n<li>Swap the item of that index with the head</li>\n<li>Dequeue</li>\n</ol>\n",
      "date_published": "2016-10-14T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Coursera"
      ]
    },
    {
      "title": "Coursera 作业之函数集合",
      "url": "https://wafer.li/blog-corners/old-inventory/Coursera/Scala/Coursera%20%E4%BD%9C%E4%B8%9A%E4%B9%8B%E5%87%BD%E6%95%B0%E9%9B%86%E5%90%88/",
      "id": "https://wafer.li/blog-corners/old-inventory/Coursera/Scala/Coursera%20%E4%BD%9C%E4%B8%9A%E4%B9%8B%E5%87%BD%E6%95%B0%E9%9B%86%E5%90%88/",
      "summary": "<blockquote>\n<p>本文源码：\nhttps://github.com/wafer-li/scala-coursera/tree/master/funsets</p>\n</blockquote>\n<h2 id=\"_1-背景知识\"> 1. 背景知识</h2>\n<p>该作业是实现一个函数集合的相关内容。</p>\n<p>何为函数集合？</p>\n<p>一般来说，编程语言中的集合(Collection)都是有限集合；</p>\n<p>但是，在数学上，还有很多的集合是无限集合，比如说 <strong>负数集</strong>；</p>\n<p>我们有没有一种办法去表示这个集合呢？</p>\n",
      "content_html": "<blockquote>\n<p>本文源码：\nhttps://github.com/wafer-li/scala-coursera/tree/master/funsets</p>\n</blockquote>\n<h2 id=\"_1-背景知识\"> 1. 背景知识</h2>\n<p>该作业是实现一个函数集合的相关内容。</p>\n<p>何为函数集合？</p>\n<p>一般来说，编程语言中的集合(Collection)都是有限集合；</p>\n<p>但是，在数学上，还有很多的集合是无限集合，比如说 <strong>负数集</strong>；</p>\n<p>我们有没有一种办法去表示这个集合呢？</p>\n\n<p>当然有的，对于上面的负数集来说，我们如何知道一个数字是不是负数集中的元素呢？</p>\n<p>将它与 0 进行比较，如果 x &lt; 0，那么它就是负数集的元素。</p>\n<p>此时，<code>(x) =&gt; x == 0</code> 就成为了负数集的判断标准，我们将其作为负数集的 <strong>特征函数</strong>，通过特征函数来指代特定的集合。</p>\n<p>于是，我们得到了函数集合的定义：<code>type Set = (Int) =&gt; Boolean</code></p>\n<p>和它的一个基本方法 <code>contains()</code>：</p>\n<div><pre><code><span>def</span> contains<span>(</span>set<span>:</span> Set<span>,</span> x <span>:</span> <span>Int</span><span>)</span> <span>=</span> set<span>(</span>x<span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"_2-基本方法\"> 2. 基本方法</h2>\n<p>接下来，题目要求我们实现一些集合的基本方法。</p>\n<h3 id=\"_2-1-singletonset\"> 2.1 <code>singletonSet()</code></h3>\n<p>如何返回一个只有一个元素的函数集合呢？</p>\n<p>对于我们的特征函数来说，也就是只有给定的元素才能满足这个特征函数，这样的集合就是只存在给定元素的集合。</p>\n<p>所以，定义如下：</p>\n<div><pre><code><span>def</span> singletonSet<span>(</span>elem<span>:</span> <span>Int</span><span>)</span><span>:</span> Set <span>=</span> <span>(</span>x<span>)</span> <span>=></span> x <span>==</span> elem\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_2-2-交、并、补\"> 2.2 交、并、补</h3>\n<p>这几个基本的数学集合操作并不难，只需要抓住我们特征函数就是 <code>contains()</code> 这一点就行了。</p>\n<h3 id=\"_2-3-filter\"> 2.3 <code>filter()</code></h3>\n<p>这个方法算是在 JVM 函数式语言中经常出现的集合方法；</p>\n<p>作用就是返回满足条件的集合内的元素；</p>\n<p>其中，一个很有趣的地方在于，<code>filter(s, p)</code> 的两个参数，虽然其表面上的类型不一样；</p>\n<p>但是实际上他们的类型是一样的，也就是说，<code>s</code> 和 <code>p</code> 都是集合！</p>\n<p>所以，我们只需要返回 <code>s</code> 和 <code>p</code> 的交集就行了</p>\n<div><pre><code><span>def</span> filter<span>(</span>s<span>:</span> Set<span>,</span> p<span>:</span> <span>Int</span> <span>=></span> <span>Boolean</span><span>)</span> <span>=</span> intersect<span>(</span>s<span>,</span> p<span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"_3-forall\"> 3. <code>forAll()</code></h2>\n<p>然后，有趣的地方来了，题目要求我们实现一个 <code>forAll()</code> 方法，用来检测是否 <strong>所有的</strong> 元素都满足给定的条件。</p>\n<p>当然，我们不能遍历全部的无限集元素；</p>\n<p>所以，我们就采取一个区间的办法，如果在这个区间内的所有的元素都满足条件，那么我们有信心认为所有的元素都满足了条件。</p>\n<p>在这里，同样要注意， <code>s</code> 和 <code>p</code> 的类型实际上是一样的！</p>\n<div><pre><code><span>def</span> forall<span>(</span>s<span>:</span> Set<span>,</span> p<span>:</span> <span>Int</span> <span>=></span> <span>Boolean</span><span>)</span><span>:</span> <span>Boolean</span> <span>=</span> <span>{</span>\n  <span>def</span> iter<span>(</span>a<span>:</span> <span>Int</span><span>)</span><span>:</span> <span>Boolean</span> <span>=</span> <span>{</span>\n    <span>if</span> <span>(</span>a <span>></span> bound<span>)</span> <span>true</span>\n    <span>else</span> <span>if</span> <span>(</span>diff<span>(</span>s<span>,</span> p<span>)</span><span>(</span>a<span>)</span><span>)</span> <span>false</span>\n    <span>else</span> iter<span>(</span>a <span>+</span> <span>1</span><span>)</span>\n  <span>}</span>\n\n  iter<span>(</span><span>-</span>bound<span>)</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h2 id=\"_4-exists\"> 4. <code>exists()</code></h2>\n<p>本题第二难的地方来了，题目要求实现一个 <code>exists()</code> 函数，用于检测 <strong>是否存在</strong> 一个元素满足给定的条件。</p>\n<p>按说这个还不是很难，但是，题目要求使用 <code>forAll()</code> 进行实现。</p>\n<p>按照我的早就丢给高中老师的逻辑关系知识，『所有』和 『存在』好像并无什么联系。</p>\n<p>不过，在论坛上有人提醒了我，可以使用 <strong>间接法</strong>；</p>\n<p>也就是说，我们可以考虑一下 <strong>不存在</strong> 的情况；</p>\n<p>也就是说，对于 <strong>所有的</strong> 元素，都 <strong>不满足</strong> 给定的条件；</p>\n<p>到此，我们就可以利用上之前实现的 <code>forAll()</code> 了。</p>\n<div><pre><code><span>def</span> exists<span>(</span>s<span>:</span> Set<span>,</span> p<span>:</span> <span>Int</span> <span>=></span> <span>Boolean</span><span>)</span> <span>=</span>\n    <span>!</span>forAll<span>(</span>s<span>,</span> <span>(</span>elem<span>)</span> <span>=></span> <span>!</span>p<span>(</span>elem<span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>但是，这显得太长了，能不能缩短到只有一行代码呢？</p>\n<p>之前提到，<code>s</code> 和 <code>p</code> 的类型实际上是一样的，也就是说，我们可以重用上面的方法来对 <code>s</code> 和 <code>p</code> 进行处理。</p>\n<p>那么，<code>s</code> 和 <code>p</code> 在不存在的情况下，是什么样的关系呢？</p>\n<p>我们可以从上面的结论出发继续思考：</p>\n<p>对于所有的元素，都不满足给定条件 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.36687em;vertical-align:0em;\"></span><span>⇒</span></span></span></span> 对于 <code>s</code> 的所有元素，都位于「在 <code>s</code> 且不在 <code>p</code> 中」这个集合内</p>\n<p>所以，我们得到了一个简便的写法：</p>\n<div><pre><code><span>def</span> exists<span>(</span>s<span>:</span> Set<span>,</span> p<span>:</span> <span>Int</span> <span>=></span> <span>Boolean</span><span>)</span> <span>=</span> <span>!</span>forAll<span>(</span>s<span>,</span> diff<span>(</span>s<span>,</span> p<span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"_5-map\"> 5. <code>map()</code></h2>\n<p>本题最难的部分来了，<code>map()</code> 函数，用于对集合中的元素进行变换操作，返回一个变换过后的新集合。</p>\n<p>鉴于我们的集合是一个 <strong>函数</strong>，那么 <code>map()</code> 方法也就是返回一个 <strong>新函数</strong>，用来检测参数是否满足新变换过后的条件。</p>\n<p>因为 <code>map()</code> 函数是针对原有集合进行变换，所以，我们应该基于原有集合生成上面的新函数。</p>\n<p>也就是说，对于原有集合来说，是否存在一个元素，它变换过后的数值和传入的参数相等：</p>\n<div><pre><code><span>def</span> map<span>(</span>s<span>:</span> Set<span>,</span> f<span>:</span> <span>Int</span> <span>=></span> <span>Int</span><span>)</span> <span>=</span>\n    x <span>=></span> exists<span>(</span>s<span>,</span> elem <span>=></span> x<span>==</span>f<span>(</span>elem<span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div>",
      "date_published": "2021-07-15T11:52:03.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Coursera"
      ]
    },
    {
      "title": "Consistent Hash",
      "url": "https://wafer.li/blog-corners/old-inventory/DHT/Consistent%20Hash/",
      "id": "https://wafer.li/blog-corners/old-inventory/DHT/Consistent%20Hash/",
      "summary": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>大多数 DHT 使用稳定散列方法(consistent hash)来将关键值对应到节点。</p>\n<p>在使用稳定散列算法后，哈希表槽位数（大小）的改变平均只需要对 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.07153em;\">K</span><span>/</span><span>n</span></span></span></span> 个关键字重新映射，其中 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.07153em;\">K</span></span></span></span> 是关键字的数量， <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span>n</span></span></span></span> 是槽位数量。而不需要对整个哈希表进行重新映射。</p>\n<p>下面就来介绍几种主流的 DHT 稳定散列协议算法。</p>\n",
      "content_html": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>大多数 DHT 使用稳定散列方法(consistent hash)来将关键值对应到节点。</p>\n<p>在使用稳定散列算法后，哈希表槽位数（大小）的改变平均只需要对 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.07153em;\">K</span><span>/</span><span>n</span></span></span></span> 个关键字重新映射，其中 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.07153em;\">K</span></span></span></span> 是关键字的数量， <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span>n</span></span></span></span> 是槽位数量。而不需要对整个哈希表进行重新映射。</p>\n<p>下面就来介绍几种主流的 DHT 稳定散列协议算法。</p>\n\n<h2 id=\"_2-chord-算法\"> 2. Chord 算法</h2>\n<p>Chord 在 2001 年由 MIT 提出，它不关心资源是如何存储的，只关心资源的快速取得。</p>\n<h3 id=\"_2-1-散列计算方法\"> 2.1 散列计算方法</h3>\n<p>Chord 使用 SHA-1 作为散列计算函数，保证了散列值的非重复性。SHA-1 会产生一个 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span><span>2</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>160</span></span></span></span></span></span></span></span></span></span></span></span> 的整数空间，每项为一个 160 bit 的大整数，它们首尾相连，形成 Chord 环。</p>\n<p><img src=\"https://hi.csdn.net/attachment/201012/7/411087_12917375694L1p.jpg\" alt=\"\" /></p>\n<h3 id=\"_2-2-查找算法\"> 2.2 查找算法</h3>\n<p>显然任何查找只需要绕 Chord 环一圈即可完成，此时时间复杂度为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.02778em;\">O</span><span>(</span><span style=\"margin-right:0.10903em;\">N</span><span>)</span></span></span></span>，这对于一个上百万节点，而且节点随时处于动态变化中的 P2P 网络是不可承受的，所以 Chord 提出如下的非线性查找算法：</p>\n<ol>\n<li>每个节点维护一个 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span>m</span></span></span></span> 个其他节点信息的查询表，（<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span>m</span></span></span></span> 为位数，Chord 中为 160，表格中的节点的 ID 间距为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.824664em;vertical-align:0em;\"></span><span><span>2</span><span><span><span><span style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span></span></span></span></span></span></span></span>，这样实际形成了一个二分查找所需要的查找关系表</li>\n<li>查询时，查询节点将请求发送到与键值最接近的节点上，收到请求的节点如果存储了信息，则返回；否则，按照查询表将请求转发到与键值最接近的节点上；直到找到相应节点为止。</li>\n</ol>\n<p>由于节点的查询表采用的是二分查找式的分布方式，不难看出，查询过程实际上就是二分查找的过程。</p>\n<p>经过优化，Chord 查询所需的跳数由 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.02778em;\">O</span><span>(</span><span style=\"margin-right:0.10903em;\">N</span><span>)</span></span></span></span> 下降为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.02778em;\">O</span><span>(</span><span style=\"margin-right:0.01968em;\">l</span><span>o</span><span style=\"margin-right:0.03588em;\">g</span><span style=\"margin-right:0.10903em;\">N</span><span>)</span></span></span></span></p>\n<h3 id=\"_2-3-优点\"> 2.3 优点</h3>\n<ol>\n<li>\n<p>负载均衡</p>\n<blockquote>\n<p>所有的节点都以同样的几率负担系统负荷，从而可以避免某些节点负载过大。</p>\n</blockquote>\n</li>\n<li>\n<p>分布性</p>\n<blockquote>\n<p>所有的节点平等的完成同样的工作，所以 Chord 具有比较高的健壮性，能抵御 DoS 攻击</p>\n</blockquote>\n</li>\n<li>\n<p>可扩展性</p>\n<blockquote>\n<p>Chord 的系统开销按照 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.02778em;\">O</span><span>(</span><span style=\"margin-right:0.01968em;\">l</span><span>o</span><span style=\"margin-right:0.03588em;\">g</span><span style=\"margin-right:0.10903em;\">N</span><span>)</span></span></span></span> 增加，增加比例不大，因此它可以用于较大规模的系统</p>\n</blockquote>\n</li>\n<li>\n<p>可用性</p>\n<blockquote>\n<p>Chord 可以根据网络的变化更新查询表，及时恢复查找关系，使得查询可以可靠进行</p>\n</blockquote>\n</li>\n<li>\n<p>灵活性</p>\n<blockquote>\n<p>Chord 并未限制查询的内容结构，因此应用层可以灵活的将内容映射到键值空间，而不用受到协议的限制。</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"_3-can-算法\"> 3. CAN 算法</h2>\n<p>CAN 是 2001 年由加州大学伯克利分校提出的。与 Chord 一样，也是 DHT 的一种实现形式。</p>\n<h3 id=\"_3-1-哈希算法\"> 3.1 哈希算法</h3>\n<p>在 CAN 中，每个节点自身的 ID 经过哈希后，能得到一个 d 维向量，所以整个 P2P 系统将被映射到一个 d 维的笛卡尔空间去。而 Chord 使用的 SHA-1 算法生成的结果是一维的。</p>\n<blockquote>\n<p>其中 d 为一个系统决定的常量</p>\n</blockquote>\n<h3 id=\"_3-2-查找算法\"> 3.2 查找算法</h3>\n<p>CAN 的节点通过维护一个相邻节点表来进行非线性搜索。\n与 Chord 不同的是，CAN 不要求查询表的邻居节点保持 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.824664em;vertical-align:0em;\"></span><span><span>2</span><span><span><span><span style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span></span></span></span></span></span></span></span> 的关系，而采用笛卡尔空间的相邻定义：</p>\n<blockquote>\n<p>在 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span>d</span></span></span></span> 维笛卡尔空间中，2个节点的 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span>d</span></span></span></span> 维坐标中有 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span>d</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1</span></span></span></span> 维是相等的，剩余的一维是相邻的节点称之为相邻节点。</p>\n</blockquote>\n<p>在查询的过程中，查询节点首先计算出被查询内容的键值 (d 维向量)，然后在节点列表中查找与之最近的相邻节点，向其发送查询请求；如果被查询节点包含资源，则返回；否则，被查询节点就根据查询表转发到相应最近节点，直到查询完毕为止。</p>\n<p>如果相邻节点表中没有可用的下一跳节点，则开始进行扩展环搜索（从最近的n个节点开始，层层转发直到找到目标或超出了跳数的上限为止），直到找到可用节点。</p>\n<p>经过CAN的优化后，查询需要的跳数由 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.02778em;\">O</span><span>(</span><span style=\"margin-right:0.10903em;\">N</span><span>)</span></span></span></span> 减少到均值为<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>(</span><span>d</span><span>/4</span><span>)</span><span>(</span><span>n</span><span>1/</span><span>d</span><span>)</span></span></span></span> 的随机制，考虑到 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span>d</span></span></span></span> 为常数，这一值可以表示为<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.02778em;\">O</span><span>(</span><span>n</span><span>1/</span><span>d</span><span>)</span></span></span></span>。</p>\n<h3 id=\"_3-3-比较\"> 3.3 比较</h3>\n<p>CAN 和 Chord 的主要区别在于查找算法不同。</p>\n<p>相比之下，在节点数量非常大时，CAN 的平均查询跳数要比 Chord 增加得更快。</p>\n<p>而且 CAN 查询过程中需要的运算量也要高于 Chord 。但 CAN 使用的 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span>d</span></span></span></span> 为预先设置的常量，因此并不假设系统节点数量。</p>\n<p>但是在节点总数动态变化范围很大的系统中，CAN 的相邻节点表结构保持稳定，这在 P2P 这一时常在变化的网络系统中有很大优点。</p>\n<h2 id=\"_4-pastry\"> 4. Pastry</h2>\n<p>Pastry 于 2001 年位于英国剑桥的微软研究院和莱斯(Rice)大学提出。</p>\n<h3 id=\"_4-1-哈希算法\"> 4.1 哈希算法</h3>\n<p>在 Pastry 中，每个节点拥有一个 128 bit 的标识，为了保证 ID 的一致性，一般采用节点的 IP 地址进行哈希计算。</p>\n<p>Pastry 并没有规定应该使用何种哈希算法，而只规定了哈希键值为一维。（实际上则是使用了 128 bit 的整数空间）</p>\n<h3 id=\"_4-2-查找算法\"> 4.2 查找算法</h3>\n<p>在 Pastry 中，每个节点拥有一个路由表 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.00773em;\">R</span></span></span></span>，一个邻居节点表 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">M</span></span></span></span>，和一个叶子节点表 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>L</span></span></span></span>，它们一起构成了节点的状态表。</p>\n<p>路由表 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.00773em;\">R</span></span></span></span> 共有 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.01968em;\">l</span><span>o</span><span style=\"margin-right:0.03588em;\">g</span><span style=\"margin-right:0.10903em;\">BN</span></span></span></span> 行，其中，<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span>2</span><span>b</span></span></span></span> 为系统参数，<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> 为节点的总数。每行包括 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1</span></span></span></span> 个项，每个项记录了一个邻居节点的信息。</p>\n<p>叶子节点表存放的是在空间中与当前节点最近的 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>∣</span><span>L</span><span>∣</span></span></span></span> 个节点的信息；\n其中，一半节点的标识大于当前节点，另一半小于当前节点。\n一般取 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>∣</span><span>L</span><span>∣</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span>2</span><span>b</span></span></span></span> 或者 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span>4</span><span>b</span></span></span></span>。</p>\n<p>邻居节点存放着在 <strong>真实网络</strong> 中与当前节点最近的 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>∣</span><span style=\"margin-right:0.10903em;\">M</span><span>∣</span></span></span></span> 个相邻节点的信息。距离在这里的定义指的是由多种因素综合得到的转发开销。</p>\n<p>Pastry 并未提供距离节点的获取方法，而是由应用层来进行相邻节点的配置。</p>\n<p><img src=\"https://i2.read01.com/image.php?url=0DtV0ja4Qk\" alt=\"enter image description here\" /></p>\n<p>具体的查找过程如下：</p>\n<ol>\n<li>首先，节点获取到被查询对象的 ID 后，检查 ID 是否在叶子节点的范围内</li>\n<li>如果不在，则从路由表中按照最长前缀优先原则查找一个转发节点</li>\n<li>如果不存在这样的节点，则从所有邻居节点集合（包括路由表中的子叶子表和邻居节点表）选择最近的节点进行消息转发，直到查询完毕为止。</li>\n</ol>\n<p>从过程中看，如果路由表不为空，则每步查找至少能夠增加一個前綴匹配数位，所以在路由表始终有效时，步数最多为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.01968em;\">l</span><span>o</span><span style=\"margin-right:0.03588em;\">g</span><span style=\"margin-right:0.10903em;\">BN</span></span></span></span></p>\n<h3 id=\"_4-3-比较\"> 4.3 比较</h3>\n<p>Pastry的查找利用了成熟的最大掩码匹配算法，因此实现时可以利用很多现成的软件算法和硬件框架，可以获得很好的效率。</p>\n<p>与 Chord 和 CAN 相比，Pastry 引入了叶子节点和邻居节点集合的概念。</p>\n<p>在应用层能够及时准确地获得这两个集合的节点信息时，可以大大加快查找查找的速度，同时降低因查找引起的网络传输开销；</p>\n<p>不过在动态变化的 P2P 网络中如何理想地做到这一点有很大的难度。</p>\n",
      "image": "https://hi.csdn.net/attachment/201012/7/411087_12917375694L1p.jpg",
      "date_published": "2016-11-07T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "DHT"
      ]
    },
    {
      "title": "本部宿舍各物品尺寸",
      "url": "https://wafer.li/blog-corners/old-inventory/Decoration/%E6%9C%AC%E9%83%A8%E5%AE%BF%E8%88%8D%E5%90%84%E7%89%A9%E5%93%81%E5%B0%BA%E5%AF%B8/",
      "id": "https://wafer.li/blog-corners/old-inventory/Decoration/%E6%9C%AC%E9%83%A8%E5%AE%BF%E8%88%8D%E5%90%84%E7%89%A9%E5%93%81%E5%B0%BA%E5%AF%B8/",
      "summary": "<h2 id=\"说明\"> 说明</h2>\n<p>学九楼</p>\n<p>未经特别说明单位均为厘米\n立体物品顺序为 <strong>长 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span>×</span></span></span></span> 宽 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span>×</span></span></span></span> 高，</strong>\n容器物品为 <strong>高 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span>×</span></span></span></span> 宽 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span>×</span></span></span></span> 厚度</strong></p>\n",
      "content_html": "<h2 id=\"说明\"> 说明</h2>\n<p>学九楼</p>\n<p>未经特别说明单位均为厘米\n立体物品顺序为 <strong>长 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span>×</span></span></span></span> 宽 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span>×</span></span></span></span> 高，</strong>\n容器物品为 <strong>高 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span>×</span></span></span></span> 宽 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span>×</span></span></span></span> 厚度</strong></p>\n\n<h2 id=\"床\"> 床</h2>\n<p>193 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span>×</span></span></span></span> 92.3 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span>×</span></span></span></span> 112（下铺）/ 141（上铺）</p>\n<h2 id=\"衣柜\"> 衣柜</h2>\n<p>外：177.2 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span>×</span></span></span></span> 47.5 （中线为止） <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span>×</span></span></span></span> 54.7\n内：144.4  <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span>×</span></span></span></span> 44.2 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span>×</span></span></span></span> 52</p>\n<h2 id=\"桌子\"> 桌子</h2>\n<p>70.5 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span>×</span></span></span></span> 63 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span>×</span></span></span></span> 77</p>\n<p>书架 18，电脑空间 47.1</p>\n<h2 id=\"床头架\"> 床头架</h2>\n<p>整长 82，可用 79\n上架高 31，下架高 23.5</p>\n<h2 id=\"鞋柜\"> 鞋柜</h2>\n<p>外： 29.2 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span>×</span></span></span></span> 48 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span>×</span></span></span></span> 55\n内： 29 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span>×</span></span></span></span> 46.7 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span>×</span></span></span></span> 53.5</p>\n<h2 id=\"储物柜\"> 储物柜</h2>\n<p>外： 192 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span>×</span></span></span></span> 58 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span>×</span></span></span></span> 65\n内： 31（单个） <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span>×</span></span></span></span> 54.5 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span>×</span></span></span></span> 63</p>\n<h2 id=\"架床梯子\"> 架床梯子</h2>\n<p>161（高） <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span>×</span></span></span></span> 26（整宽）</p>\n",
      "date_published": "2016-10-14T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Decoration"
      ]
    },
    {
      "title": "SSH clone GitHub Gist",
      "url": "https://wafer.li/blog-corners/old-inventory/GitHub/SSH%20clone%20GitHub%20Gist/",
      "id": "https://wafer.li/blog-corners/old-inventory/GitHub/SSH%20clone%20GitHub%20Gist/",
      "content_html": "<p>tags:\n- GitHub\n- 旧文仓库</p>\n<hr>\n<p>GitHub 会默认拒绝其 <strong>默认给出的</strong> Gist SSH 链接。</p>\n<p>使用如下格式的链接来进行 Gist SSH clone。</p>\n<div><pre><code><span>git</span> clone git@github.com:gist_id.git\n</code></pre>\n<div><span>1</span><br></div></div>",
      "date_published": "2016-10-14T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "GitHub"
      ]
    },
    {
      "title": "Head 标签内容",
      "url": "https://wafer.li/blog-corners/old-inventory/HTML/Head%20%E6%A0%87%E7%AD%BE%E5%86%85%E5%AE%B9/",
      "id": "https://wafer.li/blog-corners/old-inventory/HTML/Head%20%E6%A0%87%E7%AD%BE%E5%86%85%E5%AE%B9/",
      "summary": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p><code>&lt;head&gt;</code> 标签中保存的是网页的 <strong>元数据</strong> 内容，不会在页面上展示；</p>\n<p>下面简单介绍几个 <code>&lt;head&gt;</code> 标签中比较重要的子标签。</p>\n",
      "content_html": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p><code>&lt;head&gt;</code> 标签中保存的是网页的 <strong>元数据</strong> 内容，不会在页面上展示；</p>\n<p>下面简单介绍几个 <code>&lt;head&gt;</code> 标签中比较重要的子标签。</p>\n\n<h2 id=\"_2-title-标签\"> 2. <code>&lt;title&gt;</code> 标签</h2>\n<p>这个标签保存着网页的标题内容，一般是网页的名字；会显示在浏览器的标题栏，在收藏网页的时候作为默认名字进行存储。</p>\n<p><code>&lt;title&gt;</code> 标签还可以用于 SEO，提升搜索排名</p>\n<h2 id=\"_3-meta-标签\"> 3. <code>&lt;meta&gt;</code> 标签</h2>\n<p>这是 <code>&lt;head&gt;</code> 中比较重要的一个子标签内容，包含了网站的元数据，其中主要包括：</p>\n<ol>\n<li>\n<p>charset 编码，可以用 <code>&lt;meta&gt;</code> 的 <code>charset</code> 属性来指定</p>\n<div><pre><code><span><span><span>&lt;</span>meta</span> <span>charset</span><span><span>=</span><span>\"</span>utf-8<span>\"</span></span><span>></span></span>\n</code></pre>\n<div><span>1</span><br></div></div><p>通过这种方法，可以硬指定网站使用的编码，如果浏览器强制使用的编码不正确，则可能无法正确渲染网页。</p>\n</li>\n<li>\n<p>元数据信息，通过 <code>name</code> 和 <code>description</code> 属性来描述</p>\n<p><code>name</code> 描述的是元数据的名字，<code>description</code> 属性才是真正的元数据内容。</p>\n<p>可以使用元数据内容为网站进行 SEO，或者提供网站维护者的信息。</p>\n</li>\n<li>\n<p>特殊的元数据</p>\n<p>可以通过一些特别的元数据描述来对特定的网站链接进行富文本优化。</p>\n<p>如可以使用 <code>og</code> 前缀，让网站在 Facebook 的链接进行富文本化，显示网站 logo 和内容。</p>\n</li>\n</ol>\n<h2 id=\"_4-link-标签\"> 4. <code>&lt;link&gt;</code> 标签</h2>\n<p><code>&lt;link&gt;</code> 标签主要有以下的作用：</p>\n<ol>\n<li>\n<p>用于表示网站 logo</p>\n<p>可以使用 <code>rel</code> 属性指定为 <code>icon</code>，然后使用 <code>herf</code> 链接到图片</p>\n</li>\n<li>\n<p>用于链接外部 CSS</p>\n<p>属于最常用功能，通过 <code>rel=&quot;stylesheet&quot;</code> 和 <code>herf</code> 来指定需要链接的外部 CSS 表</p>\n</li>\n</ol>\n<h2 id=\"_5-script-标签\"> 5. <code>&lt;script&gt;</code> 标签</h2>\n<p>用于指定页面使用的 JS 内容</p>\n<p>可以直接包含 js 文本，也可以通过 <code>src</code> 属性来指定外部 <code>.js</code> 文件</p>\n<h2 id=\"_6-指定语言\"> 6. 指定语言</h2>\n<p>这虽然不是 <code>&lt;head&gt;</code> 标签的内容，但是语言作为网页元数据的一种，有必要在这里说明。</p>\n<p>可以通过给任何的标签添加 <code>lang</code> 属性来设置语言，如果要给整个页面指定语言，则在 <code>&lt;html&gt;</code> 标签中添加 <code>lang</code> 属性即可。</p>\n<div><pre><code><span><span><span>&lt;</span>html</span> <span>lang</span><span><span>=</span><span>\"</span>zh_CN<span>\"</span></span><span>></span></span>\n</code></pre>\n<div><span>1</span><br></div></div>",
      "date_published": "2017-02-04T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "HTML"
      ]
    },
    {
      "title": "我心中的全面小康社会",
      "url": "https://wafer.li/blog-corners/old-inventory/Homework/%E6%88%91%E5%BF%83%E4%B8%AD%E7%9A%84%E5%85%A8%E9%9D%A2%E5%B0%8F%E5%BA%B7%E7%A4%BE%E4%BC%9A/",
      "id": "https://wafer.li/blog-corners/old-inventory/Homework/%E6%88%91%E5%BF%83%E4%B8%AD%E7%9A%84%E5%85%A8%E9%9D%A2%E5%B0%8F%E5%BA%B7%E7%A4%BE%E4%BC%9A/",
      "summary": "<p>“小康”，一个由儒家经典著作中引申而出的词语，经过中国改革开放的总设计师——邓小平的重新演绎——“我们的目标，第一步是到2000年建立一个小康社会，这是指在温饱的基础上，生活质量进一步提高，达到丰衣足食。”，成为了中国人在新世纪的奋斗目标。而习近平总书记提出的“确保到2020年实现全面建成小康社会的奋斗”更加充实了中国人民实现全面小康社会的信念和信心。2020 年，中国即将实现全面的小康社会，下面就来谈谈我自己对“全面小康社会”的理解。</p>\n",
      "content_html": "<p>“小康”，一个由儒家经典著作中引申而出的词语，经过中国改革开放的总设计师——邓小平的重新演绎——“我们的目标，第一步是到2000年建立一个小康社会，这是指在温饱的基础上，生活质量进一步提高，达到丰衣足食。”，成为了中国人在新世纪的奋斗目标。而习近平总书记提出的“确保到2020年实现全面建成小康社会的奋斗”更加充实了中国人民实现全面小康社会的信念和信心。2020 年，中国即将实现全面的小康社会，下面就来谈谈我自己对“全面小康社会”的理解。</p>\n\n<p>首先，在经济方面，居民收入进一步提高，我国的人均 GDP 达到 10000 - 12000 美元 左右，正式进入中等收入国家。经济转型成功，新经济和第三产业发展迅猛，对中国经济的贡献比例飞速增长，达到或超过三分之二。城乡居民收入翻番，居民消费能力显著增长，国内经济由投资拉动为主变为国内消费和国内需求拉动为主。沿海的劳动密集型产业逐步升级或向中西部和东南亚迁移，经济重心逐步转为依托当地或周边大学发展高新科技产业，以高新科技指导的新型制造业基本成型。</p>\n<p>其次，在文化方面，文化产品（小说，游戏，电影，电视剧等）的分级制度初现雏形，文化题材限制有所放宽，由此带来文化产业方面发展的大爆发，一时众多文化艺术形式、产品和相关产业纷纷涌现，中国的文化企业和相关事业单位迎来了前所未有的发展机遇。知识产权保护体系初步完善，公民的知识产权保护意识提升，从而进一步促进了文化产业的发展。</p>\n<p>在法制方面，中国特色社会主义法律体系进一步完善，各行各业全面实现有法可依。法律相关工作者的从业门槛提升，考核标准提高，公民的法律意识水平提高，全面实现有法必依，执法必严，违法必究。</p>\n<p>交通和城建方面，在 2020 年基本实现了中国中东部省份县级城市和城镇通高铁或动车组列车，原有铁路线路进行新一轮提速，基本消除了 100 KM/H 以下速度的客运列车。十八大后实施的大规模棚户区改造完成，城镇居民都住进了居民小区。</p>\n<p>农业方面，由于城镇化程度提高，农村耕地流转出现集中化趋势，乡村企业规模迅速扩大，初步实现了农业机械化和集中化、规模化生产，中国的农业出现新一轮大发展趋势，粮食产量增速加快，农业科技得到进一步积累和发展。</p>\n<p>在医疗领域，由于互联网的飞速发展以及其与医学的紧密结合，名医指导手术和远端会诊得到普及，同时，中国社区医院体系和医生自由流转体系全面建立</p>\n",
      "date_published": "2016-11-18T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Homework"
      ]
    },
    {
      "title": "Intellij Tips and Tricks",
      "url": "https://wafer.li/blog-corners/old-inventory/IntelliJ/Intellij%20Tips%20and%20Tricks/",
      "id": "https://wafer.li/blog-corners/old-inventory/IntelliJ/Intellij%20Tips%20and%20Tricks/",
      "summary": "<h2 id=\"_1-跳转\"> 1. 跳转</h2>\n<p><strong>原则： 尽量不使用鼠标、不使用标签页</strong></p>\n<ol>\n<li>\n<p><code>command + O</code> 跳转到特定的类</p>\n</li>\n<li>\n<p><code>shift + command + O</code> 跳转到文件</p>\n<blockquote>\n<p>使用 <code>: + 行号</code> 可以快速跳转到特定文件的特定行</p>\n</blockquote>\n</li>\n<li>\n<p><code>alt + command + o</code> 变量、方法跳转</p>\n<blockquote>\n<p>使用 <code>&lt;class&gt;.&lt;symbol&gt;</code> 可以跳转到特定类的方法或者变量</p>\n</blockquote>\n</li>\n</ol>\n",
      "content_html": "<h2 id=\"_1-跳转\"> 1. 跳转</h2>\n<p><strong>原则： 尽量不使用鼠标、不使用标签页</strong></p>\n<ol>\n<li>\n<p><code>command + O</code> 跳转到特定的类</p>\n</li>\n<li>\n<p><code>shift + command + O</code> 跳转到文件</p>\n<blockquote>\n<p>使用 <code>: + 行号</code> 可以快速跳转到特定文件的特定行</p>\n</blockquote>\n</li>\n<li>\n<p><code>alt + command + o</code> 变量、方法跳转</p>\n<blockquote>\n<p>使用 <code>&lt;class&gt;.&lt;symbol&gt;</code> 可以跳转到特定类的方法或者变量</p>\n</blockquote>\n</li>\n</ol>\n\n<ol start=\"4\">\n<li>\n<p><code>double shift</code> Search Everywhere</p>\n<blockquote>\n<p>上述方法的综合体</p>\n</blockquote>\n</li>\n<li>\n<p><code>command + E</code> Recent Files</p>\n</li>\n<li>\n<p><code>shift + command + E</code> Recent Changed Files</p>\n</li>\n<li>\n<p><code>command + [</code> 和 <code>command + ]</code> 在之前打开的文件前后跳转</p>\n</li>\n<li>\n<p>在 Project Window 使用 <strong>Auto Scroll from Souce</strong>，使用 <code>command + ↓</code> 来跳转到源文件</p>\n</li>\n<li>\n<p>在方法名、变量名和类名使用 <code>command + B</code> 可以跳转到声明部分</p>\n</li>\n<li>\n<p>在方法名、变量名和类名使用 <code>command + U</code> 可以跳转到继承链的上一级，即超类</p>\n</li>\n<li>\n<p>在声明部分使用 <code>alt + command + B</code> 可以查看所有的 <strong>实现</strong> 并进行跳转</p>\n</li>\n<li>\n<p>在变量声明部分使用 <code>ctrl + H</code> 可以显示整个变量、类的继承结构</p>\n</li>\n<li>\n<p>在方法名使用 <code>shift + command + H</code> 可以显示方法的继承结构</p>\n</li>\n<li>\n<p>在文件中使用 <code>command + F12</code> 可以显示一个当前类所有成员的 Popup 窗口</p>\n<blockquote>\n<p>也可以使用 <code>command + 7</code> 来打开结构窗口来查看</p>\n</blockquote>\n</li>\n<li>\n<p>使用 <code>command + ↑</code> 来打开 Navigation Bar， <strong>不要把它长期显示在屏幕上</strong></p>\n</li>\n<li>\n<p>使用 <code>F2</code> 和 <code>shift + F2</code> 来在错误之间跳转</p>\n<blockquote>\n<p>在右上角的感叹号图标右键点击，可以设置 <strong>只在 Error 之间跳转</strong></p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"_2-新建\"> 2. 新建</h2>\n<ol>\n<li>\n<p>在 Project Window 使用 <code>command + N</code> 来新建文件或者 package 或者目录</p>\n</li>\n<li>\n<p>使用 <code>abc/def/ghi/mnop</code> 这种文件夹名来建立文件夹结构，而不要一个一个建立</p>\n</li>\n<li>\n<p>同上，在新建文件时，也可以使用 <code>abc/def/test.txt</code> 这种文件名来构建一个在文件夹内部的文件</p>\n</li>\n<li>\n<p>同，使用 <code>abc.def.ghi.Hehe</code> 这种 <strong>类名</strong> 可以建立一个 <strong>在包内的类</strong></p>\n</li>\n<li>\n<p>焦点在编辑器时使用 <code>ctrl + alt + N</code> 来进行上述新建操作</p>\n</li>\n<li>\n<p>使用 <code>command + shift + N</code> 新建一个临时文件(Scratral File)</p>\n<blockquote>\n<p>临时文件可以是任何文件，也可以成功的编译运行。\n实际上就是用来给开发者进行一些小测试用的</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"_3-重构\"> 3. 重构</h2>\n<ol>\n<li>\n<p>使用 <code>alt + ↑</code> 来选择一行代码</p>\n<blockquote>\n<p>持续点击会继续选择更大的作用域：\n方法 -&gt; 内部类 -&gt; 外部类 -&gt; 文件</p>\n</blockquote>\n</li>\n<li>\n<p>使用 <code>alt + ↓</code> 来缩小选择的作用域范围</p>\n</li>\n<li>\n<p>使用 <code>alt + shift + ↑/↓</code> 来 <strong>移动选择的代码</strong></p>\n</li>\n<li>\n<p>使用 <code>shift + command + V</code> 来打开剪切板历史记录</p>\n<blockquote>\n<p>不包括 IdeaVim 的剪贴板历史记录</p>\n</blockquote>\n</li>\n<li>\n<p>使用 <code>alt + shift + 左键点击</code> 来设置一个 Multicursor</p>\n<blockquote>\n<p><strong>不要使用这个功能来进行代码重构</strong>\n可以使用多重指针来进行复制粘贴操作</p>\n</blockquote>\n</li>\n<li>\n<p>使用 <code>shift + F6</code> 来进行变量重命名</p>\n</li>\n<li>\n<p>使用 <code>alt + command + L</code> 进行当前文件的代码格式化</p>\n</li>\n<li>\n<p>使用 Code Cleanup 来进行整个工程级别的代码格式化</p>\n</li>\n<li>\n<p>选择一段代码然后使用 <code>alt + Enter</code> 可以对当前片段的代码格式进行调整。</p>\n</li>\n<li>\n<p>使用 <code>ctrl + T</code> 可以调出 Refactor This 菜单，有很多重构功能可以使用</p>\n</li>\n</ol>\n<h2 id=\"_4-language-injection\"> 4. Language  Injection</h2>\n<p>在 <strong>字符串</strong> 使用 <code>alt + Enter</code> 选择 <code>inject language</code> 可以让 IDEA 认定当前字符串的语言成分，从而进行相应语言的提示和工作。</p>\n<ol>\n<li>\n<p>选择 <code>json</code> 可以在 JSON 编辑框中编辑纯 JSON 内容，IDEA 会自动生成相应的 Java 字符串</p>\n</li>\n<li>\n<p>选择 SQL 可以进行 SQL 补全，同时选择链接的数据库进行执行。</p>\n<blockquote>\n<p>同时，如果在 SQL 字符串中使用重构功能，IDEA 不仅会重构代码内容，同时还会对 <strong>数据库</strong> 内容进行修改</p>\n</blockquote>\n</li>\n<li>\n<p>选择 <strong>正则表达式</strong> 可以在对应的 Hover 框内对正则表达式进行检验</p>\n</li>\n</ol>\n<h2 id=\"_5-补全\"> 5. 补全</h2>\n<ol>\n<li>\n<p>使用 <code>ctrl + shift + Space</code> 进行 <strong>智能补全</strong></p>\n</li>\n<li>\n<p>使用 <code>command + P</code> 来获取 <strong>所调用方法的参数信息</strong></p>\n</li>\n<li>\n<p>使用 <code>ctrl + alt + Space</code> 可以补全方法名和类名</p>\n</li>\n<li>\n<p>使用 <code>alt + /</code> 来进行变量补全和 <strong>变量命名补全</strong></p>\n</li>\n<li>\n<p>使用 <code>shift + command + Enter</code> 可以补全当前语句块</p>\n<blockquote>\n<p>不仅仅是分号补全，还可以是大括号补全</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"_6-模板\"> 6. 模板</h2>\n<ol>\n<li>\n<p>使用 <code>command + J</code> 来插入已经定义好的 Live Template</p>\n<blockquote>\n<p>可以打出 Live Template 然后使用 Tab 进行补全\n不过使用 <code>command + J</code> 可以给予提示</p>\n<p>常用的：<code>psvm -&gt; public static void main(String[] args)</code></p>\n</blockquote>\n</li>\n<li>\n<p>在选择了一段代码的情况下，使用 <code>alt + command + T</code> 可以将代码用特定的结构包起来</p>\n<blockquote>\n<p>比如说 <code>if-else</code> 、<code>try-catch</code> 等等</p>\n</blockquote>\n</li>\n<li>\n<p>使用调用可以在列表中选取 Postfix Completion，具体效果和上面相同</p>\n</li>\n<li>\n<p>模板不仅仅支持 Java，还支持例如 HTML，CSS， Javascript 等多种语言</p>\n</li>\n</ol>\n<h2 id=\"_7-代码分析\"> 7. 代码分析</h2>\n<ol>\n<li>\n<p>使用 Code Inspection By Name 可以分析特定的错误和缺陷</p>\n</li>\n<li>\n<p>使用 Structural Search/Replace 可以进行特定的代码结构的查找和替换，同时，可以将其加入 Inspection，进行错误提示</p>\n</li>\n<li>\n<p>使用 Analyze Data Flow 可以分析特定变量的流动，有助于读懂他人代码</p>\n</li>\n</ol>\n<h2 id=\"_8-版本控制\"> 8. 版本控制</h2>\n<ol>\n<li>\n<p>选择两个 commit 然后使用 <code>ctrl + D</code> 来进行 Diff</p>\n</li>\n<li>\n<p>使用 Annotate 可以查看一个文件中的各行的修改</p>\n</li>\n<li>\n<p>使用 <code>command + K</code> 进行 commit 操作</p>\n</li>\n<li>\n<p>使用 <code>shift + command + K</code> 进行 push 操作</p>\n</li>\n<li>\n<p>使用 <code>alt + command + Z</code> 进行 revert 操作</p>\n</li>\n<li>\n<p>使用 <code>ctrl + V</code> 调出 有关版本控制的 Popup 窗口</p>\n</li>\n</ol>\n<h2 id=\"_9-调试\"> 9. 调试</h2>\n<ol>\n<li>\n<p>右键点击断点区域，可以设置断电的 condition</p>\n<blockquote>\n<p>还有个 More 可以点击</p>\n</blockquote>\n</li>\n<li>\n<p>在调用栈区域，可以选择 Drop Frame 将选择的 Frame 进行出栈操作</p>\n<blockquote>\n<p>如果不小心 Step Into 太深的话可以使用这个</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"_10-其他\"> 10. 其他</h2>\n<ol>\n<li>\n<p>使用 <strong>ctrl + `</strong> 来进行代码样式、快捷键等的快速切换</p>\n</li>\n<li>\n<p>可以在设置中定义一个常用的 Quick List</p>\n</li>\n<li>\n<p>使用 <code>alt + F12</code> 可以调出 IDEA 内置终端</p>\n</li>\n<li>\n<p>Help 菜单中的 Productive Guild 记录了使用的 IDEA 功能，包括功能的解释和使用频率</p>\n</li>\n<li>\n<p>Registry 内有一个选项可以减少输入延迟(editor latency)</p>\n</li>\n</ol>\n",
      "date_published": "2016-12-13T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "IntelliJ"
      ]
    },
    {
      "title": "OS X Using ShimakazeGo + Poi to play kancolle",
      "url": "https://wafer.li/blog-corners/old-inventory/Kancolle/OS%20X%20Using%20ShimakazeGo%20+%20Poi%20to%20play%20kancolle/",
      "id": "https://wafer.li/blog-corners/old-inventory/Kancolle/OS%20X%20Using%20ShimakazeGo%20+%20Poi%20to%20play%20kancolle/",
      "summary": "<h2 id=\"_1-intro\"> 1. Intro</h2>\n<p>This is the instruction of how to bulid a kancolle playing enviroment in Mac OS X.</p>\n<p>My current OS X version is 10.11</p>\n<p>Necessary tools: Automator</p>\n",
      "content_html": "<h2 id=\"_1-intro\"> 1. Intro</h2>\n<p>This is the instruction of how to bulid a kancolle playing enviroment in Mac OS X.</p>\n<p>My current OS X version is 10.11</p>\n<p>Necessary tools: Automator</p>\n\n<h2 id=\"_2-install-shimakazego\"> 2. Install ShimakazeGo</h2>\n<p>ShimakazeGo is a proxy for playing Kancolle. Because DMM has banned the IP addresses of foreigners, you need to use a proxy to connect to the game site.</p>\n<p>Here is the <a href=\"http://unlockacgweb.galstars.net/\" target=\"_blank\" rel=\"noopener noreferrer\">ShimakazeGo official site</a>. There is a instruction how to install it on Mac OS X</p>\n<h2 id=\"_3-pack-shimakazego-as-a-os-x-app\"> 3. Pack ShimakazeGo as a OS X APP</h2>\n<p><strong>This section is pretty important</strong>.</p>\n<p>The ShimakazeGo developer offer a shell scipt to start the program.</p>\n<p>Therefore, it's very easy to convert it to a application by using <strong>Automator</strong>, a convient and easy-to-use app buliding tool on Mac OS X.</p>\n<p>Open Automator, choose the <strong>Application</strong> and serch for <strong>Run Apple Script</strong> at the search bar.</p>\n<p>And then paste this script inside the input frame.</p>\n<div><pre><code>on run\n\tdo shell script &quot;/path/to/the/ShimakazeGo/run_mac &gt; /dev/null 2&gt;&amp;1 &amp;&quot;\n\tquit\nend run\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>Save the App, copy to your <code>/Application</code> and close the Automator, using a text editor, such as vim to open the <strong>run_mac</strong> script and <strong>delete the last two line</strong></p>\n<p>The script will appear like this</p>\n<div><pre><code>#!/bin/bash\n\nexport LANG=&quot;zh-CN.UTF-8&quot;\nexport LC_ALL=&quot;zh-CN.UTF-8&quot;\n\ndefaults write mono NSAppSleepDisabled -bool YES\n\nMONO_LIB=/Library/Frameworks/Mono.framework/Versions/Current/bin/mono\n\ndir=$(dirname ${BASH_SOURCE:-$0})\n$MONO_LIB $dir/ShimakazeGo.exe &gt; /dev/null &amp;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>And done. Start the app and you will see the ShimakazeGo window.</p>\n<h2 id=\"_4-supplement-change-app-icon\"> 4. Supplement: Change App Icon</h2>\n<p>The app that we generate will come with a default Automator icon like a robot.\nSome people may dislike it and want to changge to another icon.\nIt is very easy, <strong>just follow these instructions</strong>:</p>\n<ol>\n<li>Open the App info window(<code>cmd + i</code>)</li>\n<li>Open the icon img you want to replace with.</li>\n<li>Select the whole img(<code>cmd + a</code>) and copy(<code>cmd + c</code>)</li>\n<li>Click the icon inside the App info window, and paste(<code>cmd + v</code>)</li>\n<li>Done!</li>\n</ol>\n<h2 id=\"_5-install-poi\"> 5. Install Poi</h2>\n<p>Poi is a Scalable KanColle browser and tool.\nDue to using the web techology, it is <strong>totally cross-platform</strong></p>\n<p>Here is the <a href=\"https://github.com/poooi/poi\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub repo</a></p>\n",
      "date_published": "2016-10-14T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Kancolle"
      ]
    },
    {
      "title": "My Linux Experiences",
      "url": "https://wafer.li/blog-corners/old-inventory/Linux/My%20Linux%20Experiences/",
      "id": "https://wafer.li/blog-corners/old-inventory/Linux/My%20Linux%20Experiences/",
      "summary": "<h2 id=\"linux-mint-installation-notes\"> Linux Mint Installation Notes</h2>\n<h3 id=\"_1-using-the-usb-boot\"> 1. Using the USB boot</h3>\n<blockquote>\n<p>Do not use the hard disk boot option, it will cause a lot of problems.\nAs I am known, if you do that, the battery will be some weird problems.</p>\n</blockquote>\n",
      "content_html": "<h2 id=\"linux-mint-installation-notes\"> Linux Mint Installation Notes</h2>\n<h3 id=\"_1-using-the-usb-boot\"> 1. Using the USB boot</h3>\n<blockquote>\n<p>Do not use the hard disk boot option, it will cause a lot of problems.\nAs I am known, if you do that, the battery will be some weird problems.</p>\n</blockquote>\n\n<h3 id=\"_2-partition\"> 2. Partition</h3>\n<blockquote>\n<p>You could do the patition base on your needs, or follow the advice in the Internet.\nNormally, I just use <code>/</code>, <code>/boot</code>, <code>/home</code> and <code>/swap</code> parts.</p>\n</blockquote>\n<blockquote>\n<p>Maybe the <code>/usr</code> needs to mount into another space, for what the software is almost install by\nthe package manager.(such as <code>apt-get</code>)</p>\n</blockquote>\n<h3 id=\"_3-dual-boot\"> 3. Dual Boot</h3>\n<blockquote>\n<p>This is extremely important,\n(for me ,because I still can not leave the big game which is only can be run in Windows)\nIf you want to have the bennifits from each of these OS</p>\n</blockquote>\n<h4 id=\"_3-1-single-hard-disk\"> 3.1 Single Hard Disk</h4>\n<blockquote>\n<p>That's nothing to say about, if only have <strong>one</strong> hard disk,\nyou must be care of the order of the installation,\nbecause the first installed boot loader will be covered by the secound.</p>\n</blockquote>\n<h4 id=\"_3-2-dual-or-multiple-hard-disks\"> 3.2 Dual or Multiple Hard Disks</h4>\n<blockquote>\n<p><strong>you need to be awared of the boot loader's position,\nbecause if you install them into the same disk, the latter will cover the former</strong></p>\n</blockquote>\n<blockquote>\n<p>I recomend to use the <strong>Win to load the Linux</strong>, because the linux is actually a bit annoying,\nyou need to <strong>reinstall the system for many times at the very first time</strong>. If you use the grup to\nboot the Win, when you need to <strong>reinstall</strong> the linux, it will be difficult to do it.</p>\n</blockquote>\n<div>\n<p>Improtant:</p>\n<p>Use the USB driver to install the Linux, do not just use the hard driver to install.</p>\n<p>Keep the USB driver, it will be more convient to REINSTALL the system</p>\n</div>\n<ul>\n<li>\n<p>The install position of the boot loader</p>\n<blockquote>\n<p>The position must contain the name of the hard disk.\nThat is, you need to install it into <code>/dev/sda</code> or the <code>/dev/sdb</code>\nnot the hard driver which has number with it.</p>\n</blockquote>\n<ul>\n<li>\n<p>If you want to let the <strong>Win to boot the linux</strong>, just place the boot loader into\nwhere the Windows C driver is not in it.</p>\n<blockquote>\n<p>I have two hard disks, and my Windows C driver place in the SSD, if I want to\nuse win to load the linux, I just place it into the HDD</p>\n</blockquote>\n</li>\n<li>\n<p>If you want to do the oppsite, just let the Linux to boot the Windows, you need to install\nthe boot loader into the same disk which the Windows c driver has been installed.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Supplement for Linux boot Windows\n<div style=\"color:orange;font-weight:bold;font-size:25px\">\n<div style=\"text-align:center;\">\nDO NOT FORMAT THE LINUX PARTITION IN WINDOWS!!!\n</div>\nif so, the two systems will not be able to start neither.\n</div></p>\n</li>\n</ul>\n<h3 id=\"_4-proxy\"> 4. Proxy</h3>\n<blockquote>\n<p>Normally, I only use the socks proxy, but also the http proxy,\nso, what I am using is the <code>Shadowsocks + Privoxy</code> to build up the\n<code>socks</code> proxy and the <code>http</code> proxy</p>\n</blockquote>\n<ol>\n<li>\n<p>Down <code>Shadowsocks-qt5</code> or install it by ppa</p>\n</li>\n<li>\n<p>Using the <code>apt-get</code> to install <code>Privoxy</code></p>\n<blockquote>\n<p>Edit the <code>/etc/privoxy/config</code> for the configuration.</p>\n</blockquote>\n<blockquote>\n<p>To enable the socks config, just edit the</p>\n</blockquote>\n<div><pre><code> forward-socks5     /       host:port .\n</code></pre>\n<div><span>1</span><br></div></div><p>Usually, it will be</p>\n<div><pre><code> forward-socks5     /       127.0.0.1:1080 .\n</code></pre>\n<div><span>1</span><br></div></div><p><strong>Do remenber the <code>&lt;space&gt;</code> of the <code>port</code> and the <code>.</code> is necessary</strong></p>\n<p><strong>Use the <code>IP</code> instead of the <code>localhost</code></strong></p>\n<p><strong>Defaultly, the HTTP listen port is <code>8118</code></strong></p>\n</li>\n<li>\n<p>Using the following command to start an <code>service</code> of the privoxy</p>\n</li>\n</ol>\n<div><pre><code> sudo service privoxy restart\n</code></pre>\n<div><span>1</span><br></div></div><p><strong>Remember it's <code>restart</code> not the <code>start</code>,sometime, the <code>start</code> won't work.</strong></p>\n<p><strong>And the socks proxy is <code>127.0.0.1:1080</code>, the http proxy is <code>127.0.0.1:8118</code></strong></p>\n<h3 id=\"_5-enviroment-variables\"> 5. Enviroment Variables</h3>\n<blockquote>\n<p>Normally, the enviroment variables could be define and edit in the\n<code>~/.*shrc</code>, now I am using <code>Zsh</code>,so the file is <code>.zshrc</code>,\nnormally, it will be <code>.bashrc</code></p>\n</blockquote>\n<blockquote>\n<p>Different from Ubuntu, when you need to run a program from the desktop enviroment,\nsuch as <code>IntillJ IDEA</code>, you need to edit the <code>~/.profile</code> to define the enviroment variables,\nsuch as <code>JAVA_HOME</code></p>\n</blockquote>\n<h3 id=\"_6-about-the-unable-to-run-mate-settings-deamon\"> 6. About the <code>unable to run &quot;mate-settings deamon&quot;</code></h3>\n<blockquote>\n<p>It might be cause by the <strong>incorrect NVIDIA driver</strong>,\nuse the default is just fine.</p>\n</blockquote>\n<blockquote>\n<p>Do not change the NV driver from the driver manager.</p>\n</blockquote>\n<h3 id=\"_7-about-my-battery-problems\"> 7. About my battery problems</h3>\n<blockquote>\n<p>It might due to some weird problems,\nif the battery cannot be reconized, try to install\n<code>acpi</code>, it might be some help.</p>\n</blockquote>\n<p><span style=\"font-size:10px\">Actually, I not quite sure.</span></p>\n<h3 id=\"_8-zsh\"> 8. Zsh</h3>\n<blockquote>\n<p>Following the instruction of <a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\" rel=\"noopener noreferrer\">robbyrussell/oh-my-zsh</a>\nto install the <code>zsh</code> is ok, and don't forget to install <code>oh-my-zsh</code> to customze the zsh</p>\n</blockquote>\n<blockquote>\n<p>To enable the <a href=\"https://github.com/agnoster/agnoster-zsh-theme\" target=\"_blank\" rel=\"noopener noreferrer\">agnoster</a> bulit-in theme of the\noh-my-zsh, need to install the <a href=\"https://github.com/powerline/fonts\" target=\"_blank\" rel=\"noopener noreferrer\">Powerline-patched font</a>, just\nuse the <code>install.sh</code> is okay.\nAnd after that, change the terminal font to which has the powerline suffix.</p>\n</blockquote>\n<h3 id=\"_9-vim\"> 9. Vim</h3>\n<blockquote>\n<p>The vim is almost the biggest problem for me.\nAfter hours of hours test, I found a config that is suit with me.</p>\n</blockquote>\n<blockquote>\n<p>What I use it the <a href=\"https://github.com/spf13/spf13-vim\" target=\"_blank\" rel=\"noopener noreferrer\">spf13/spf13-vim</a> + <a href=\"https://github.com/suan/vim-instant-markdown\" target=\"_blank\" rel=\"noopener noreferrer\">suan/vim-instant-markdown</a>\nfor supporting my vim usage and do the notes.</p>\n</blockquote>\n<blockquote>\n<p>Just follow the instruction in each repo, that is okay.</p>\n</blockquote>\n<p><strong>Supplements</strong>:</p>\n<ul>\n<li>\n<p>Change the theme of the status line in spf13-vim</p>\n<blockquote>\n<p>The status line is using the ariline, the instruction is place at\nhttps://github.com/bling/vim-airline/wiki/FAQ,\nclick the Screenshot, it will list its themes and the theme name.</p>\n</blockquote>\n<blockquote>\n<p>What I like is the <code>badwolf</code>.</p>\n</blockquote>\n</li>\n<li>\n<p>Add <strong>MathJax</strong> support for the <code>vim-instant-markdown</code></p>\n</li>\n</ul>\n<p>See this <a href=\"https://github.com/suan/vim-instant-markdown/issues/67\" target=\"_blank\" rel=\"noopener noreferrer\">issue</a></p>\n<p><strong>Known Issue:</strong></p>\n<ul>\n<li>The <code>vim-instant-markdown</code> will remain the chrome tab when the vim is leave.</li>\n</ul>\n",
      "date_published": "2016-10-14T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "Ubuntu 14.04 LTS Installation Checklist",
      "url": "https://wafer.li/blog-corners/old-inventory/Linux/Ubuntu%2014.04%20LTS%20Installation%20Checklist/",
      "id": "https://wafer.li/blog-corners/old-inventory/Linux/Ubuntu%2014.04%20LTS%20Installation%20Checklist/",
      "summary": "<h2 id=\"_1-intro\"> 1. Intro</h2>\n<p>This is the installation checklist of the lastest Ubuntu LTS version: Ubuntu 14.04 LTS</p>\n<p>The reason of choosing Ubuntu is that the Ubuntu has the least problems with my hardware.\nActually, it's only the Wireless Issue exist.</p>\n",
      "content_html": "<h2 id=\"_1-intro\"> 1. Intro</h2>\n<p>This is the installation checklist of the lastest Ubuntu LTS version: Ubuntu 14.04 LTS</p>\n<p>The reason of choosing Ubuntu is that the Ubuntu has the least problems with my hardware.\nActually, it's only the Wireless Issue exist.</p>\n\n<h2 id=\"_2-before-install\"> 2. Before Install</h2>\n<ol>\n<li>\n<p>Backup all the <strong>proxy</strong> settings and the other software settings which cannot be synchronized.</p>\n</li>\n<li>\n<p>Design the harddrive parttition</p>\n<blockquote>\n<p>The <code>/boot</code>, <code>/</code>, <code>/swap</code> and the <code>/home</code></p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"_3-system-configuration\"> 3. System Configuration</h2>\n<ol>\n<li>\n<p>Change software source to mainland China</p>\n<blockquote>\n<p>In my home, the aliyun's software source seems better.\nIn my school, the bjtu's software source seems better.</p>\n</blockquote>\n</li>\n<li>\n<p>Upgrade software</p>\n<blockquote>\n<p>The Ubuntu Software Center will automatically upgrade the softwares.\nOr, you can use\n<code>sudo apt-get update: 2016-10-14 sudo apt-get upgrade</code>\nto upgrade the softwares.</p>\n</blockquote>\n</li>\n<li>\n<p>Install fcitx input method frame</p>\n<blockquote>\n<p>Due to the account of my baidu is Chinese.\nSo I need to install the fcitx first to get the shadowsocks server info\nCheck this <a href=\"https://blogs.fsfe.org/stefan.a/2014/09/23/set-up-fcitx-chinese-and-japanese-language-input-ubuntu-14-04/\" target=\"_blank\" rel=\"noopener noreferrer\">post</a> for details</p>\n</blockquote>\n<blockquote>\n<p>Telegram seems not support <code>super + space</code> as  the switch shortcut.\nRemenber use a secondary switch shortcut as <code>ctrl + super + space</code></p>\n</blockquote>\n</li>\n<li>\n<p>Fix the Wireless Issue of <strong>RTL8723BE</strong></p>\n<blockquote>\n<p>Need to install <strong>vim</strong> at first</p>\n</blockquote>\n<blockquote>\n<p>This is the model of my Wireless Network Adapter.\nIt has a issue of network connection in Ubuntu.</p>\n</blockquote>\n<blockquote>\n<p>The way how to fix is open the\n<code>/etc/modprobe.d/rtl8723be.conf</code>\nif it doesn't exsit, create it.\nAnd add such line in it:\n<code>options rtl8723be fwlps=N ips=N</code>\nAnd then reboot, it will fix this problem</p>\n</blockquote>\n<blockquote>\n<p>Check this <a href=\"http://www.dedoimedo.com/computers/ubuntu-trusty-realtek.html\" target=\"_blank\" rel=\"noopener noreferrer\">post</a> for details.</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"_4-the-necessary-softwares\"> 4. The necessary softwares</h2>\n<ol>\n<li>\n<p>Install shadowsocks</p>\n<blockquote>\n<p>The GUI client of linux is the shadowsocks-qt5</p>\n</blockquote>\n</li>\n<li>\n<p>Install Google Chrome</p>\n<blockquote>\n<p>I don't know somehow the original firefox bulit in the system cannot play song of the neteasy cloud music.\nSo, install the Chrome is necessary.</p>\n</blockquote>\n</li>\n<li>\n<p>Install LastPass</p>\n<blockquote>\n<p>I store most of my passwords in the LastPass, including the Google account.</p>\n</blockquote>\n</li>\n<li>\n<p>Install <strong>git</strong> and the <strong>bulid-essntial</strong> package</p>\n<blockquote>\n<p>For the development needs</p>\n</blockquote>\n</li>\n<li>\n<p>Install <strong>zsh</strong> and <strong>oh-my-zsh</strong></p>\n<blockquote>\n<p>The best shell I have ever seen</p>\n</blockquote>\n</li>\n<li>\n<p>Install <strong>spf13-vim</strong></p>\n<blockquote>\n<p>The spf13 vim has problem of neocomplete plugin, but it's still the best _vimrc.\nMaybe the k-vim will be better.</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"_5-entertainment\"> 5. Entertainment</h2>\n<p>The entertainment is almost the Kancolle game.</p>\n<ol>\n<li>\n<p>Install the <strong>ShimakazeGo</strong></p>\n<blockquote>\n<p>Prerequisites:\n<strong>mono</strong>, <strong>openssl</strong>, <strong>libssl-dev</strong>, <strong>libssl0.9.8</strong>, <strong>p7zip-full</strong>\nThe openssl is built in the system.\nThe p7zip-full is the command line version of 7z</p>\n</blockquote>\n</li>\n<li>\n<p>Install the <strong>poi</strong></p>\n<blockquote>\n<p>Prerequisites:\n<strong>electron</strong>, <strong>nodejs</strong>, <strong>npm</strong>\nThe npm is the bulit-in module of nodejs</p>\n</blockquote>\n<blockquote>\n<p>Install nodejs:\nDownload the archive and add it to the PATH in <code>~/.zshrc</code></p>\n</blockquote>\n<blockquote>\n<p>Notes for npm:\nThe origin registry is extremely slow.\nRecommand to change it to the <code>http://registry.cnpm.org</code></p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"_6-java-jetbrains-ides\"> 6. Java &amp; Jetbrains' IDEs</h2>\n<ol>\n<li>\n<p>Using the <strong>oracle's Java</strong> is recommended.</p>\n<blockquote>\n<p>use\n`sudo update: 2016-10-14\nThis step should fix the Android SDK Manager not responding in Android Studio</p>\n</blockquote>\n</li>\n<li>\n<p>Enviroment Variable:</p>\n<ul>\n<li>For command line program, define it at <code>~/.zshrc</code></li>\n<li>For desktop entry: Define at <code>/etc/enviroment</code></li>\n</ul>\n</li>\n<li>\n<p>Java Enviroment Settings Procedure: (in <code>/etc/enviroment</code>)</p>\n<ol>\n<li>Set <code>JAVA_HOME</code> (not include the <code>bin/</code>)</li>\n<li>Set <code>CLASSPATH</code> (normally the <code>lib/</code> folder in <code>$JAVA_HOME</code>)</li>\n<li>Add <code>$JAVA_HOME</code> to <code>$PATH</code></li>\n</ol>\n</li>\n<li>\n<p>Android Studio</p>\n<blockquote>\n<p>Prerequisites:\nSee this <a href=\"http://stackoverflow.com/a/29242123\" target=\"_blank\" rel=\"noopener noreferrer\">answer</a> in StackOverflow.</p>\n</blockquote>\n<blockquote>\n<p>Android SDK Manager:\n<s>It seems a issue that I cannot lanuch the standalone SDK Manager in Android Studio.\nIt wired, by far I have no idea how to solve it.</s>\n<s>But the bulit-in manager works fine, so it's not so important at this moment.</s></p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"_7-desktop-entry\"> 7. Desktop Entry</h2>\n<p>The desktop entry of per user store in\n<code>~/.local/share/applications</code></p>\n<p>The format of desktop entry is :</p>\n<div><pre><code>[Desktop Entry]\nName= # The name of the app, use camercal case\nIcon= # The icon\nExec= # The execute path, must be absolute path\nType=Application\nTerminal=false\nCategories= # The categories\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id=\"_8-fonts\"> 8. Fonts</h2>\n<p>By far, the font settings seems acceptable.</p>\n<p>As follow:</p>\n<table>\n<th colspan=\"2\" style=\"text-align:center\">My Unity Fonts Settings</th>\n<tr>\n<td>Default Font</td>\n<td>Droid Sans Regular</td>\n</tr>\n<tr>\n<td>Document font</td>\n<td>Droid Sans Regular</td>\n</tr>\n<tr>\n<td>Monospace font</td>\n<td>Meslo LG S for Powerline Regular</td>\n</tr>\n<tr>\n<td>Windows font</td>\n<td>Ubuntu mono</td>\n</tr>\n<tr>\n<td>Terminal font</td>\n<td>Meslo LG S for Powerline Regular</td>\n</tr>\n</table>\n<table>\n<th colspan=\"2\" style=\"text-align:center\">My Chrome Fonts Settings</th>\n<tr>\n<td>Standard font</td>\n<td>WenQuanYi Micro Hei 15px</td>\n</tr>\n<tr>\n<td>Serif font</td>\n<td>Droid Serif</td>\n</tr>\n<tr>\n<td>Sans-serif font</td>\n<td>DejaVu Sans</td>\n</tr>\n<tr>\n<td>Fixed width font</td>\n<td>Meslo LG S for Powerline</td>\n</tr>\n</table>\n<p>Special: Jetbrains' IDEs using <strong>Robono Mono for powerline</strong></p>\n",
      "date_published": "2016-10-14T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "OSX Mono Halal Installation",
      "url": "https://wafer.li/blog-corners/old-inventory/Mono/OSX%20Mono%20Halal%20Installation/",
      "id": "https://wafer.li/blog-corners/old-inventory/Mono/OSX%20Mono%20Halal%20Installation/",
      "summary": "<p>在开发时，总想保证自己的开发平台得到及时的更新；</p>\n<p>但是使用官方安装包的安装不方便进行快速更新，而且安装下来一大堆版本堆积也不够清真。</p>\n<p>所以，在这里使用 Homebrew Cask 可以让 mono-mdk 得到及时，清真的安装和更新。</p>\n",
      "content_html": "<p>在开发时，总想保证自己的开发平台得到及时的更新；</p>\n<p>但是使用官方安装包的安装不方便进行快速更新，而且安装下来一大堆版本堆积也不够清真。</p>\n<p>所以，在这里使用 Homebrew Cask 可以让 mono-mdk 得到及时，清真的安装和更新。</p>\n\n<div><pre><code>brew cask <span>install</span> mono-mdk\n</code></pre>\n<div><span>1</span><br></div></div><blockquote>\n<p>Homebrew 也有 mono 包，但是不知道为什么那个包一般的软件认不出来</p>\n</blockquote>\n<p>有一点需要注意的地方就是，Visual Studio For Mac Preview 使用的是比较新的 mono，此时我们需要 tap <code>caskroom/versions</code> 仓库来获取 mono-mdk 的 preview 版本。</p>\n<div><pre><code>brew tap caskroom/versions\nbrew cask <span>install</span> mono-mdk-preview\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div>",
      "date_published": "2016-12-17T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Mono"
      ]
    },
    {
      "title": "PHP",
      "url": "https://wafer.li/blog-corners/old-inventory/PHP/PHP/",
      "id": "https://wafer.li/blog-corners/old-inventory/PHP/PHP/",
      "summary": "<h2 id=\"_1-basic\"> 1. Basic</h2>\n<ol>\n<li>\n<p>Begins with <code>&lt;?php</code> and ends with <code>?&gt;</code></p>\n<div><pre><code><span><span>&lt;?php</span>\n<span>echo</span> <span>strlen</span><span>(</span><span>\"Hello, World!\"</span><span>)</span><span>;</span>\n<span>?></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>\n<li>\n<p>Comments</p>\n<blockquote>\n<p><code>//</code> and <code>#</code> for a single line.\n<code>/* */</code> for block.</p>\n</blockquote>\n<div><pre><code><span><span>&lt;?php</span>\n<span>// Single line Comment.</span>\n<span># Also single line.</span>\n<span>/*\nAnd comment block,\nCross\nmultiple\nlines.\n*/</span>\n<span>?></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div></li>\n<li>\n<p>Case Sensitivity</p>\n</li>\n</ol>\n<ul>\n<li>\n<p>All the <code>function()</code> <code>class</code> and the <code>key word</code> is <strong>NOt cAse SenSiTivE</strong></p>\n<div><pre><code><span><span>&lt;?php</span>\n<span>// They all do the same things.</span>\n<span>ECHO</span> <span>\"Hello World!&lt;br>\"</span><span>;</span>\n<span>echo</span> <span>\"Hello World!&lt;br>\"</span><span>;</span>\n<span>EcHo</span> <span>\"Hello World!&lt;br>\"</span><span>;</span>\n<span>?></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div></li>\n<li>\n<p>But the <code>$variable</code> is <strong>CASE SENSITIVE</strong></p>\n<div><pre><code><span><span>&lt;?php</span>\n<span>// Only the FIRST statement can do the right output.</span>\n<span>$color</span><span>=</span><span>\"red\"</span><span>;</span>\n<span>echo</span> <span>\"My car is \"</span> <span>.</span> <span>$color</span> <span>.</span> <span>\"&lt;br>\"</span><span>;</span>\n<span>echo</span> <span>\"My house is \"</span> <span>.</span> <span>$COLOR</span> <span>.</span> <span>\"&lt;br>\"</span><span>;</span>\n<span>echo</span> <span>\"My boat is \"</span> <span>.</span> <span>$coLOR</span> <span>.</span> <span>\"&lt;br>\"</span><span>;</span>\n<span>?></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div></li>\n</ul>\n",
      "content_html": "<h2 id=\"_1-basic\"> 1. Basic</h2>\n<ol>\n<li>\n<p>Begins with <code>&lt;?php</code> and ends with <code>?&gt;</code></p>\n<div><pre><code><span><span>&lt;?php</span>\n<span>echo</span> <span>strlen</span><span>(</span><span>\"Hello, World!\"</span><span>)</span><span>;</span>\n<span>?></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>\n<li>\n<p>Comments</p>\n<blockquote>\n<p><code>//</code> and <code>#</code> for a single line.\n<code>/* */</code> for block.</p>\n</blockquote>\n<div><pre><code><span><span>&lt;?php</span>\n<span>// Single line Comment.</span>\n<span># Also single line.</span>\n<span>/*\nAnd comment block,\nCross\nmultiple\nlines.\n*/</span>\n<span>?></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div></li>\n<li>\n<p>Case Sensitivity</p>\n</li>\n</ol>\n<ul>\n<li>\n<p>All the <code>function()</code> <code>class</code> and the <code>key word</code> is <strong>NOt cAse SenSiTivE</strong></p>\n<div><pre><code><span><span>&lt;?php</span>\n<span>// They all do the same things.</span>\n<span>ECHO</span> <span>\"Hello World!&lt;br>\"</span><span>;</span>\n<span>echo</span> <span>\"Hello World!&lt;br>\"</span><span>;</span>\n<span>EcHo</span> <span>\"Hello World!&lt;br>\"</span><span>;</span>\n<span>?></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div></li>\n<li>\n<p>But the <code>$variable</code> is <strong>CASE SENSITIVE</strong></p>\n<div><pre><code><span><span>&lt;?php</span>\n<span>// Only the FIRST statement can do the right output.</span>\n<span>$color</span><span>=</span><span>\"red\"</span><span>;</span>\n<span>echo</span> <span>\"My car is \"</span> <span>.</span> <span>$color</span> <span>.</span> <span>\"&lt;br>\"</span><span>;</span>\n<span>echo</span> <span>\"My house is \"</span> <span>.</span> <span>$COLOR</span> <span>.</span> <span>\"&lt;br>\"</span><span>;</span>\n<span>echo</span> <span>\"My boat is \"</span> <span>.</span> <span>$coLOR</span> <span>.</span> <span>\"&lt;br>\"</span><span>;</span>\n<span>?></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div></li>\n</ul>\n\n<h2 id=\"_2-variable\"> 2. Variable</h2>\n<ol>\n<li>\n<p>The <code>$variable</code> begins with the <code>$</code> char.</p>\n<div><pre><code><span><span>&lt;?php</span>\n<span>// They are all variables</span>\n<span>$x</span> <span>=</span> <span>5</span><span>;</span>\n<span>$txt</span> <span>=</span> <span>\"Hello, World!\"</span><span>;</span>\n<span>$y</span> <span>=</span> <span>10.5</span><span>;</span>\n<span>?></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div></li>\n<li>\n<p>Weak Type</p>\n</li>\n</ol>\n<blockquote>\n<p>PHP is an weak type language, you do not have to announce the type when you create the variable\nAs the above, <code>$x</code> is an <strong>int</strong>, <code>$txt</code> is an <strong>string</strong> and <code>$y</code> is an <strong>float</strong></p>\n</blockquote>\n<ol start=\"3\">\n<li>Scope</li>\n</ol>\n<ul>\n<li>Local\n- The variable can only be konwn inside the function or the current statement</li>\n<li>Global\n- The variable can be konwn at any where</li>\n<li>Static\n- The variable whose value can be maintain</li>\n</ul>\n<ol start=\"4\">\n<li></li>\n</ol>\n",
      "date_published": "2016-11-26T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "PHP"
      ]
    },
    {
      "title": "插线板重构计划",
      "url": "https://wafer.li/blog-corners/old-inventory/Plan/%E6%8F%92%E7%BA%BF%E6%9D%BF%E9%87%8D%E6%9E%84%E8%AE%A1%E5%88%92/",
      "id": "https://wafer.li/blog-corners/old-inventory/Plan/%E6%8F%92%E7%BA%BF%E6%9D%BF%E9%87%8D%E6%9E%84%E8%AE%A1%E5%88%92/",
      "summary": "<h2 id=\"_1-设备清单\"> 1. 设备清单</h2>\n<h3 id=\"_1-1-目前拥有的设备\"> 1.1 目前拥有的设备</h3>\n<ul>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-0\"><label for=\"task-item-0\"> Mac</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-1\"><label for=\"task-item-1\"> 笔记本</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-2\"><label for=\"task-item-2\"> 3ds</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-3\"><label for=\"task-item-3\"> kindle</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-4\"><label for=\"task-item-4\"> hub</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-5\"><label for=\"task-item-5\"> 路由器</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-6\"><label for=\"task-item-6\"> 交换机</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-7\"><label for=\"task-item-7\"> 显示器</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-8\"><label for=\"task-item-8\"> 手机</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-9\"><label for=\"task-item-9\"> 平板</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-10\"><label for=\"task-item-10\"> 灯</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-11\"><label for=\"task-item-11\"> 移动电源</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-12\"><label for=\"task-item-12\"> 散热器</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-13\"><label for=\"task-item-13\"> 剃须刀</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-14\"><label for=\"task-item-14\"> 耳机</label></li>\n</ul>\n",
      "content_html": "<h2 id=\"_1-设备清单\"> 1. 设备清单</h2>\n<h3 id=\"_1-1-目前拥有的设备\"> 1.1 目前拥有的设备</h3>\n<ul>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-0\"><label for=\"task-item-0\"> Mac</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-1\"><label for=\"task-item-1\"> 笔记本</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-2\"><label for=\"task-item-2\"> 3ds</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-3\"><label for=\"task-item-3\"> kindle</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-4\"><label for=\"task-item-4\"> hub</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-5\"><label for=\"task-item-5\"> 路由器</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-6\"><label for=\"task-item-6\"> 交换机</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-7\"><label for=\"task-item-7\"> 显示器</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-8\"><label for=\"task-item-8\"> 手机</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-9\"><label for=\"task-item-9\"> 平板</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-10\"><label for=\"task-item-10\"> 灯</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-11\"><label for=\"task-item-11\"> 移动电源</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-12\"><label for=\"task-item-12\"> 散热器</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-13\"><label for=\"task-item-13\"> 剃须刀</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-14\"><label for=\"task-item-14\"> 耳机</label></li>\n</ul>\n\n<h3 id=\"_1-2-将要购置的设备\"> 1.2 将要购置的设备</h3>\n<ul>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-15\"><label for=\"task-item-15\"> ps4</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-16\"><label for=\"task-item-16\"> 硬盘</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-17\"><label for=\"task-item-17\"> 风扇</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-18\"><label for=\"task-item-18\"> 显示器</label></li>\n</ul>\n<p>显示器只会有一个得到供电。</p>\n<h3 id=\"_1-3-可以使用-usb-的设备\"> 1.3 可以使用 USB 的设备</h3>\n<ul>\n<li>3ds</li>\n<li>kindle</li>\n<li>hub</li>\n<li>平板</li>\n<li>移动电源</li>\n<li>风扇</li>\n<li>散热器</li>\n</ul>\n<h2 id=\"_2-供电接口计划\"> 2. 供电接口计划</h2>\n<p><strong>原则：尽量使用 USB 口进行供电，避免占用插线口</strong></p>\n<h3 id=\"_2-1-可提供的供电接口\"> 2.1 可提供的供电接口</h3>\n<p>目前计划购入 <a href=\"http://item.jd.com/1268648.html#product-detail\" target=\"_blank\" rel=\"noopener noreferrer\">QIC 8 口 + 5 USB</a> 插座，共有 8 个插口 + 5 个 USB 口，其中 2A 口为 2 个。</p>\n<p>墙上固有插座： 2 三孔 + 2 二孔。</p>\n<p>另外 Hub 也可提供 4 个 USB 充电接口。</p>\n<p><strong>共 8 + 2 + 2（两孔） = 12 个电插口</strong> + <strong>9 个 USB 口</strong></p>\n<h3 id=\"_2-2-计划接入-usb-口的设备\"> 2.2 计划接入 USB 口的设备</h3>\n<p>若 Hub 接入 USB 口，则有 4 + 4 = 8 个 USB 充电接口，其中 2A 口为 2 个。</p>\n<ul>\n<li>3ds</li>\n<li>kindle</li>\n<li>hub</li>\n<li>移动电源(2A)</li>\n<li>平板(2A)</li>\n<li>风扇</li>\n<li>散热器</li>\n</ul>\n<p>目前占用两个 2A 口，4 个普通口，共 6 个接口。</p>\n<p>若风扇不用 USB 口，则用 5 个接口。</p>\n<p><strong>通过</strong></p>\n<h3 id=\"_2-3-计划接入插口的设备\"> 2.3 计划接入插口的设备</h3>\n<ul>\n<li>\n<p>Mac</p>\n</li>\n<li>\n<p>显示器</p>\n</li>\n<li>\n<p>笔记本</p>\n</li>\n<li>\n<p>路由器</p>\n</li>\n<li>\n<p>交换机</p>\n</li>\n<li>\n<p>灯</p>\n</li>\n<li>\n<p>剃须刀</p>\n</li>\n<li>\n<p>耳机</p>\n</li>\n<li>\n<p>手机</p>\n</li>\n<li>\n<p>PS4</p>\n</li>\n<li>\n<p>硬盘</p>\n</li>\n</ul>\n<p>共需要 11 个供电插口，若风扇使用电插口，则需要 12 个。</p>\n<p><em>紧张</em></p>\n<p>解决办法：</p>\n<ul>\n<li><input type=\"checkbox\"  disabled=\"disabled\" id=\"task-item-19\"><label for=\"task-item-19\"> 1. 寻找更大的插座</label></li>\n<li><input type=\"checkbox\"  disabled=\"disabled\" id=\"task-item-20\"><label for=\"task-item-20\"> 2. 与目前插座串联，增加可用量</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-21\"><label for=\"task-item-21\"> 3. 购置多个插座（18 + 5）</label></li>\n</ul>\n",
      "date_published": "2016-10-14T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Plan"
      ]
    },
    {
      "title": "地库 API",
      "url": "https://wafer.li/blog-corners/old-inventory/Projects/BigInovation/%E5%9C%B0%E5%BA%93%20API/",
      "id": "https://wafer.li/blog-corners/old-inventory/Projects/BigInovation/%E5%9C%B0%E5%BA%93%20API/",
      "summary": "<h2 id=\"global-rules\"> Global rules</h2>\n<h3 id=\"request\"> Request</h3>\n<ol>\n<li>Requests are MOSTLY without body, just <code>METHOD /example</code></li>\n<li>Some request may need sending a JSON. The JSON MUST be put in HTTP body</li>\n</ol>\n",
      "content_html": "<h2 id=\"global-rules\"> Global rules</h2>\n<h3 id=\"request\"> Request</h3>\n<ol>\n<li>Requests are MOSTLY without body, just <code>METHOD /example</code></li>\n<li>Some request may need sending a JSON. The JSON MUST be put in HTTP body</li>\n</ol>\n\n<h3 id=\"response\"> Response</h3>\n<ol>\n<li>\n<p>All responses MUST be transported using JSON <code>object</code> as body</p>\n</li>\n<li>\n<p>All responses MUST contain status as below</p>\n<blockquote>\n<p><code>&quot;success&quot;</code> MUST exists, type: <code>bool</code></p>\n<p>if <code>&quot;success&quot; == false</code>, you CAN get error message via <code>&quot;error_msg&quot;: &quot;str&quot; and &quot;error_id&quot;: int</code></p>\n</blockquote>\n</li>\n<li>\n<p>The response content MUST be stored in the <code>result</code> element of <code>object</code> type</p>\n</li>\n</ol>\n<p>Example:</p>\n<div><pre><code>{\n    &quot;success&quot;: true,\n    &quot;result&quot; : {\n        ....\n    }\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><div><pre><code>{\n    &quot;success&quot;: false,\n    &quot;error_msg&quot;: &quot;error description&quot;,\n    &quot;errro_id&quot;: 23333\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id=\"map-apis\"> Map APIs</h2>\n<h3 id=\"create-a-new-map-id\"> Create a new map ID</h3>\n<p>Request:</p>\n<p><code>POST /map</code></p>\n<p>Response:</p>\n<div><pre><code><span>{</span>\n   <span>\"id\"</span><span>:</span> <span>1212</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"update-2016-10-14\"> Update: 2016-10-14</h3>\n<p>Request:</p>\n<p><code>PATCH /map/&lt;id&gt;</code></p>\n<div><pre><code><span>{</span>\n\t<span>\"desc\"</span><span>:</span> <span>\"str of description\"</span><span>,</span>\n\t<span>\"lon\"</span><span>:</span> <span>2.333333</span><span>,</span>\n\t<span>\"lat\"</span><span>:</span> <span>-23.33333</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>Response: (empty JSON object)</p>\n<div><pre><code><span>{</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h3 id=\"upload-map-geojson\"> Upload map GeoJSON</h3>\n<p>Request:</p>\n<p><code>PUT /map/&lt;id&gt;/geojson</code></p>\n<div><pre><code>&lt;GeoJSON content&gt;\n</code></pre>\n<div><span>1</span><br></div></div><p>Response: (empty JSON object)</p>\n<h3 id=\"get-map-geojson\"> Get map GeoJSON</h3>\n<p>Request:</p>\n<p><code>GET /map/&lt;id&gt;/geojson</code></p>\n<p>Response:</p>\n<div><pre><code>&lt;GeoJSON content&gt;\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"get-nearest-map-id\"> Get nearest map ID</h3>\n<p>Request:</p>\n<p><code>GET /map/near/&lt;lat&gt;/&lt;lon&gt;</code></p>\n<p>Response:</p>\n<div><pre><code><span>{</span>\n\t<span>\"id\"</span><span>:</span> <span>233</span><span>,</span>\n\t<span>\"distance\"</span><span>:</span> <span>1212.2</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><blockquote>\n<p>distance is the distance of your position and map by meters</p>\n</blockquote>\n<h3 id=\"delete-map\"> Delete map</h3>\n<p>Request:</p>\n<p><code>DELETE /map/&lt;id&gt;</code></p>\n<p>Response: (empty JSON object)</p>\n",
      "date_published": "2016-10-14T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "工程"
      ]
    },
    {
      "title": "大创项目",
      "url": "https://wafer.li/blog-corners/old-inventory/Projects/BigInovation/%E5%A4%A7%E5%88%9B%E9%A1%B9%E7%9B%AE/",
      "id": "https://wafer.li/blog-corners/old-inventory/Projects/BigInovation/%E5%A4%A7%E5%88%9B%E9%A1%B9%E7%9B%AE/",
      "summary": "<p>这是一个大创项目的备忘录</p>\n<hr>\n<h2 id=\"_1-主题\"> 1. 主题</h2>\n<p>暂定<strong>地下车库导航</strong></p>\n<blockquote>\n<p>利用室内定位技术，结合地下车库地图给予用户路线导航，车辆定位，车位定位等功能。</p>\n</blockquote>\n<blockquote>\n<p>具体论文资料等由老师（的博士生）提供。</p>\n</blockquote>\n",
      "content_html": "<p>这是一个大创项目的备忘录</p>\n<hr>\n<h2 id=\"_1-主题\"> 1. 主题</h2>\n<p>暂定<strong>地下车库导航</strong></p>\n<blockquote>\n<p>利用室内定位技术，结合地下车库地图给予用户路线导航，车辆定位，车位定位等功能。</p>\n</blockquote>\n<blockquote>\n<p>具体论文资料等由老师（的博士生）提供。</p>\n</blockquote>\n\n<h2 id=\"_2-成员-暂定\"> 2. 成员（暂定）</h2>\n<ol>\n<li>李东霖</li>\n<li>唐葛夫</li>\n<li>刘聪</li>\n<li>邢瑞斌</li>\n</ol>\n<h2 id=\"_3-大致行程\"> 3. 大致行程</h2>\n<ol>\n<li>4 月底 - 5 月初，立项，项目文档</li>\n<li>9 月份第一次检查</li>\n</ol>\n",
      "date_published": "2016-11-18T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "工程"
      ]
    },
    {
      "title": "大创项目——地下停车场导航",
      "url": "https://wafer.li/blog-corners/old-inventory/Projects/BigInovation/%E5%A4%A7%E5%88%9B%E9%A1%B9%E7%9B%AE%E2%80%94%E2%80%94%E5%9C%B0%E4%B8%8B%E5%81%9C%E8%BD%A6%E5%9C%BA%E5%AF%BC%E8%88%AA/",
      "id": "https://wafer.li/blog-corners/old-inventory/Projects/BigInovation/%E5%A4%A7%E5%88%9B%E9%A1%B9%E7%9B%AE%E2%80%94%E2%80%94%E5%9C%B0%E4%B8%8B%E5%81%9C%E8%BD%A6%E5%9C%BA%E5%AF%BC%E8%88%AA/",
      "summary": "<h2 id=\"_1-平面图构建\"> 1. 平面图构建</h2>\n<ol>\n<li>\n<p>人群识别技术</p>\n</li>\n<li>\n<p>照片分析技术</p>\n<blockquote>\n<p>SMF 和消失点检测</p>\n</blockquote>\n</li>\n<li>\n<p>图片平滑处理</p>\n</li>\n</ol>\n",
      "content_html": "<h2 id=\"_1-平面图构建\"> 1. 平面图构建</h2>\n<ol>\n<li>\n<p>人群识别技术</p>\n</li>\n<li>\n<p>照片分析技术</p>\n<blockquote>\n<p>SMF 和消失点检测</p>\n</blockquote>\n</li>\n<li>\n<p>图片平滑处理</p>\n</li>\n</ol>\n\n<h2 id=\"_2-室内定位\"> 2. 室内定位</h2>\n<ol>\n<li>三角定位</li>\n<li>Benchmark Image 是否有来源？</li>\n</ol>\n<h2 id=\"_3-载具追踪与导航\"> 3. 载具追踪与导航</h2>\n<ol>\n<li>手机姿态检测</li>\n<li>机器学习方面（蒙特卡洛框架）</li>\n<li>3D 模型 -&gt; 1D 模型</li>\n</ol>\n<h2 id=\"_4-项目架构\"> 4. 项目架构</h2>\n<h3 id=\"_4-1-模块关系\"> 4.1 模块关系</h3>\n<div><pre><code>@startuml\nEnviroment --&gt; SmartPhone: Enviroment Infomation\n\nSmartPhone --&gt; APP: Display the navigation info\n\nSmartPhone --&gt; UndergroundSystem: Enviroment Infomation\n@enduml\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div>",
      "date_published": "2016-10-14T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "工程"
      ]
    },
    {
      "title": "室内定位部分",
      "url": "https://wafer.li/blog-corners/old-inventory/Projects/BigInovation/%E5%AE%A4%E5%86%85%E5%AE%9A%E4%BD%8D%E9%83%A8%E5%88%86/",
      "id": "https://wafer.li/blog-corners/old-inventory/Projects/BigInovation/%E5%AE%A4%E5%86%85%E5%AE%9A%E4%BD%8D%E9%83%A8%E5%88%86/",
      "summary": "<h2 id=\"_1-目的\"> 1. 目的</h2>\n<p>随着我国汽车拥有量的上升，地库的数量、车位也在不断地增多。虽然这仍然不能满足人们的需求，但是立体化，大型化，复杂化的发展趋势，使得地库的环境越来越复杂和多样化，成为了限制地库应用效率提高的主要瓶颈。现代大型地库的停车位数超过400个。以上海浦东96广场为例，地下车库建筑面积超过20000㎡。一份网络上针对车迷（都市固定居民）的调查显示，约40% 的人无法准确在地库中找到自己的车辆。而这个比例在普通人群中将会更高。而随着寻车难和泊车难的不断出现和我国的城市化进程不断发展，更为复杂的地下停车系统将会越来越多的出现于城市之中。</p>\n<p>所以我们需要让人们在最短的时间内寻找到自己的车辆。同时，快速而准确地地下（室内）车辆定位技术也是地库车辆导航的技术支撑点，如果不能准确定位当前车辆的所在位置，地库的导航规划就无法开展，在停车场的逆向寻车更是无从谈起。</p>\n",
      "content_html": "<h2 id=\"_1-目的\"> 1. 目的</h2>\n<p>随着我国汽车拥有量的上升，地库的数量、车位也在不断地增多。虽然这仍然不能满足人们的需求，但是立体化，大型化，复杂化的发展趋势，使得地库的环境越来越复杂和多样化，成为了限制地库应用效率提高的主要瓶颈。现代大型地库的停车位数超过400个。以上海浦东96广场为例，地下车库建筑面积超过20000㎡。一份网络上针对车迷（都市固定居民）的调查显示，约40% 的人无法准确在地库中找到自己的车辆。而这个比例在普通人群中将会更高。而随着寻车难和泊车难的不断出现和我国的城市化进程不断发展，更为复杂的地下停车系统将会越来越多的出现于城市之中。</p>\n<p>所以我们需要让人们在最短的时间内寻找到自己的车辆。同时，快速而准确地地下（室内）车辆定位技术也是地库车辆导航的技术支撑点，如果不能准确定位当前车辆的所在位置，地库的导航规划就无法开展，在停车场的逆向寻车更是无从谈起。</p>\n\n<h2 id=\"_2-国内外现状\"> 2. 国内外现状</h2>\n<p>目前的室内定位技术由于室内缺乏 GPS 信号的引导，主要分为两类：</p>\n<h3 id=\"一-无线技术\"> （一）无线技术</h3>\n<p>无线技术包括许多不同种类的技术类型，但其主要的原理都为<strong>利用现有的广播通信设备</strong>来进行室内定位。</p>\n<ol>\n<li>\n<p>基于 WiFi 的定位系统</p>\n<blockquote>\n<p>基于 WiFi 的定位系统主要是通过测量用户设备到几个不同的接入点的信号强度，通过信号的衰减程度，并结合设备的广播模式来进行定位<sup></sup>。\n同时也有通过测量信号强度，生成一个相关数据（称为 WiFi 指纹），当位置移动时，比对数据，找出相似度最高的数据解析后进行定位<sup></sup></p>\n<p>但是，由于 WiFi 信号的衰减模型不确定，特别是在大型，立体化等复杂的地下车库和停车场中，由于存在行驶的汽车，使得信号的衰减呈现出动态随机的，使得定位的精度和可靠性较差。</p>\n</blockquote>\n</li>\n<li>\n<p>基于蓝牙、手机信号等大部分无线信号的定位系统</p>\n<blockquote>\n<p>基于蓝牙和其他无线信号（如 GSM/CDMA 等手机电信信号），由于信号穿透力不强，或地库系统过于复杂导致的信号覆盖率差，设备部署难等问题，其普遍的定位精度和可靠性都不是很高<sup></sup></p>\n</blockquote>\n</li>\n<li>\n<p>基于被动式射频识别的定位系统</p>\n<blockquote>\n<p>被动式的射频识别系统通过在室内设置一些被动式射频识别设备，在接收到足够强的信号后，通过向读取器发送数据来向车辆反馈当前位置。</p>\n<p>被动式射频设别较为便宜，但由于射频信号的特点，需要较为狭窄的通道才能达到良好的定位效果，这在一些较为广阔的地下停车场适用性不强。</p>\n<p>同时，由于地下车库的立体化发展，当车辆在向下运动的过程中，射频定位就起不到相应的效果。</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"二-非广播技术\"> （二）非广播技术</h3>\n<p>非广播技术是指<strong>不依靠现有的广播通信设备</strong>来进行室内定位的技术。</p>\n<ol>\n<li>\n<p>磁场定位技术</p>\n<blockquote>\n<p>磁场定位技术是利用手机等移动设备的磁场感应器来获取磁场数据（包括建筑本身的磁场数据和地磁数据），从而进行室内定位的技术。由于其摆脱了对广播信号的依赖，较为适用于一些没有或者广播信号较为衰弱的场所。</p>\n<p>但是，在 2012 年的室内定位和室内导航（IPIN）的国际峰会上，Binghao Li， Thomas Gallagher， Andrew G Dempster，Chris Rizos 共同发表的一篇文章<sup></sup>指出，室内的磁场会受到<strong>移动的金属物体</strong>的干扰。在大型地下停车场中，存在着较多的行驶的汽车和移动的升降梯，此时，仅仅依靠磁场定位的效果不良好。</p>\n</blockquote>\n</li>\n<li>\n<p>惯性定位技术</p>\n<blockquote>\n<p>惯性定位技术即使用移动设备的加速度感应器，获取物体的加速度信息，并通过速度和位置推算，从而进行室内定位的技术。</p>\n<p>这种技术只能在物体<strong>移动时</strong>才能起到效果，在车辆停止时，由于缺乏加速度信息，因而无法进行位置推算。</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"_3-问题求解\"> 3. 问题求解</h2>\n<p>基于我国目前城市中地下车库不断大型化，立体化，复杂化，同时，我国的电信建设仍有不足，地下深层停车场的手机信号差等特点。地下车库的车辆定位应摒弃蓝牙和手机信号等定位技术的使用。</p>\n<p>基于上述特征，和目前现有技术的优缺点，我们决定通过智能手机中丰富的传感器资料，采用多种技术来进行地下车辆定位和相互验证。</p>\n<p>当车辆在地库某一层时，通过获取气压和磁场数据，并结合贝叶斯算法从而确定车辆所在的地库层数，通过射频识别技术来获取大概位置，并通过结合磁场技术和加速度检测等惯性技术来对位置进行校正。</p>\n<p>当车辆在行驶时，通过使用手机的加速度等传感器，在经过手机的姿态检测处理，消除手机姿态误差后，使用位置推算、路标和减速带碰撞处理等技术，并结合线性蒙特卡洛生成树算法来对车辆进行<strong>实时追踪演算</strong>，对原有定位数据进行校正。</p>\n<p>当车辆进行转弯、上下层等运动时，通过采集手机的陀螺仪和气压变化和磁场变化数据判断车辆当前所进行的动作和位置。</p>\n<hr>\n<section>\n<ol>\n<li id=\"footnote1\"><p><a href=\"http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5425237\">&quot;Indoor Localization Using Improved RSS-Based Lateration Methods&quot; </a> Yang, Jie; Chen, Yingying (2009-11-01) </p>\n</li>\n<li id=\"footnote2\"><p>P. Bahl and V. N. Padmanabhan, “RADAR: an in-building RF-based user location and tracking system,” in Proceedings of 19th Annual Joint Conference of the IEEE Computer and Communications Societies (INFOCOM ’00), vol. 2, pp. 775–784, Tel Aviv.Israel, March 2000. </p>\n</li>\n<li id=\"footnote3\"><p><a href=\"https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=2&cad=rja&uact=8&ved=0ahUKEwjz1cKOu8jMAhUE9WMKHQqEBhsQFggsMAE&url=https%3A%2F%2Fpdfs.semanticscholar.org%2Fd22f%2Fc46a607dbc16dfc9a32084fdd8b2558da17c.pdf&usg=AFQjCNGAiVKXivsEpRtph6le_4VK9i_ezQ&sig2=JqdD-kON1Meru-8ivjplBg\">Survey of Wireless Based Indoor Localization Technologies</a> Junjie Liu (2014-05-05) </p>\n</li>\n<li id=\"footnote4\"><p><a href=\"http://ieeexplore.ieee.org/xpl/login.jsp?tp=&arnumber=6418880&url=http%3A%2F%2Fieeexplore.ieee.org%2Fxpls%2Fabs_all.jsp%3Farnumber%3D6418880\">How feasible is the use of magnetic field alone for indoor positioning?</a> Binghao Li， Thomas Gallagher， Andrew G Dempster，Chris Rizos (13-15 Nov. 2012) </p>\n</li>\n</ol>\n</section>\n",
      "date_published": "2016-10-14T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "工程"
      ]
    },
    {
      "title": "工作总结报告",
      "url": "https://wafer.li/blog-corners/old-inventory/Projects/BigInovation/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93%E6%8A%A5%E5%91%8A/",
      "id": "https://wafer.li/blog-corners/old-inventory/Projects/BigInovation/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93%E6%8A%A5%E5%91%8A/",
      "content_html": "<p>负责了地图 UI 界面的构建和与整个应用的集成，以及应用的网络模块、和后端交互的逻辑，还有整个项目工程的代码管理。</p>\n<p>地图的 UI 界面使用了 GitHub 上的一个耦合度较低的表示层地图视图库，将其进行一定程度的优化后，应用到本项目中，之所以选择它是因为目前的优秀地图显示层均与对应的地图框架<strong>高度耦合</strong>，不方便二次开发和 Bug 修复。</p>\n<p>应用网络模块采用了目前 Android 上最为优秀的 Retrofit 2 作为网络加载库，通过完全 <strong>RESTful</strong> 的网络调用和后端服务器进行交互，与后端的 Django 框架完美契合。</p>\n<p>整个项目的工程代码使用了全球最大的代码托管网站 GitHub ，以<strong>私有仓库</strong>的方式将代码托管在其服务器上。</p>\n<p>采用 Git 作为代码版本管理工具，并采用 GitHub 上最流行的 Pull Request 工作流，保证了成员即使采用远程工作模式，也可以无障碍的与组员沟通；同时，将主分支设置为保护分支，要求代码<strong>经过审查后</strong>方可合并，确保了代码的可用性，正确性和可维护性。</p>\n",
      "date_published": "2016-10-20T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "工程"
      ]
    },
    {
      "title": "网络模块使用方法",
      "url": "https://wafer.li/blog-corners/old-inventory/Projects/BigInovation/%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/",
      "id": "https://wafer.li/blog-corners/old-inventory/Projects/BigInovation/%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/",
      "summary": "<h2 id=\"调用步骤\"> 调用步骤</h2>\n<h3 id=\"_1-获取-apiservices\"> 1. 获取 ApiServices</h3>\n<p>通过 <code>ApiManager.getServices()</code> 获取 Apiservice 实例。</p>\n<div><pre><code><span>ApiServices</span> services <span>=</span> <span>ApiManager</span><span>.</span><span>getServices</span><span>(</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div>",
      "content_html": "<h2 id=\"调用步骤\"> 调用步骤</h2>\n<h3 id=\"_1-获取-apiservices\"> 1. 获取 ApiServices</h3>\n<p>通过 <code>ApiManager.getServices()</code> 获取 Apiservice 实例。</p>\n<div><pre><code><span>ApiServices</span> services <span>=</span> <span>ApiManager</span><span>.</span><span>getServices</span><span>(</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div>\n<h3 id=\"_2-通过-apiservices-获取对应-api-的-call-对象\"> 2. 通过 ApiServices 获取对应 API 的 Call 对象</h3>\n<p>第一步中获取到的 <code>ApiServices</code> 是 <code>ApiServices</code> 接口的实例化对象。\n通过调用其接口所定义的方法，获取对应网络 API 的 <code>Call</code> 对象</p>\n<div><pre><code><span>Call</span><span><span>&lt;</span><span>Response</span><span>></span></span> call <span>=</span> services<span>.</span><span>uploadMapGeoJsonCall</span><span>(</span>id<span>,</span> geoJsonObject<span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>对应的网络 API 及其说明请查看相应的后端文档。</p>\n<h3 id=\"_3-通过-call-对象的方法来执行任务。\"> 3. 通过 Call 对象的方法来执行任务。</h3>\n<p>获取到 <code>Call</code> 对象并不意味着开始执行任务，\n需要调用 <code>Call</code> 对象的对应方法来开启这一个网络请求任务。</p>\n<p>执行 <code>Call</code> 任务的方法有两个</p>\n<ol>\n<li>\n<p>异步方法 <strong>推荐！！</strong></p>\n<div><pre><code>call<span>.</span><span>enqueue</span><span>(</span><span>new</span> <span>CallBack</span><span>(</span><span>)</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div></li>\n<li>\n<p>同步方法</p>\n<div><pre><code>call<span>.</span><span>execute</span><span>(</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div></li>\n</ol>\n<p>最好通过异步方法来开启任务。</p>\n<h3 id=\"_4-在-callback-中对结果进行响应。\"> 4. 在 CallBack 中对结果进行响应。</h3>\n<h4 id=\"_4-1-onresponse-方法\"> 4.1 <code>onResponse()</code> 方法</h4>\n<p><code>onResponse()</code> 方法用来处理连通网络后的返回结果，包括 200 结果和其他 5xx，4xx 结果。</p>\n<p>本项目对任何可 handle 的结果均返回 200 ，\n<strong>请务必通过 body 中的 <code>isSuccess()</code>, <code>getErrorMsg()</code> 来获取真正的网络响应状态。</strong></p>\n<h4 id=\"_4-2-onfailure-方法\"> 4.2. <code>onFailure()</code> 方法</h4>\n<p>这个方法会回调任何的网络无法连通，body 解析错误的返回结果。</p>\n",
      "date_published": "2016-10-14T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "工程"
      ]
    },
    {
      "title": "Network API",
      "url": "https://wafer.li/blog-corners/old-inventory/Projects/MdzzProject/Network%20API/",
      "id": "https://wafer.li/blog-corners/old-inventory/Projects/MdzzProject/Network%20API/",
      "summary": "<h2 id=\"_1-说明\"> 1. 说明</h2>\n<p><strong>必须先看说明！！</strong></p>\n<ol>\n<li>\n<p>所有的网络请求 API 均位于 <code>NetworkUtils</code> 类中，以静态方法形式呈现。</p>\n</li>\n<li>\n<p>API 方法包括<strong>三个参数</strong>——发起请求的必要信息，一个结果回调监听器和一个错误回调监听器，并返回一个 <code>Request</code> 对象用于<strong>取消请求</strong></p>\n<blockquote>\n<p>如下，<code>registerInfo</code> 是存储注册信息的对象，<code>listener</code> 是结果监听器， <code>errorListener</code> 是错误监听器。</p>\n</blockquote>\n<div><pre><code><span>public</span> <span>static</span> <span>Request</span> <span>register</span><span>(</span><span>RegisterInfo</span> registerInfo<span>,</span>\n                               <span>Response<span>.</span>Listener</span> listener<span>,</span>\n                    <span>Response<span>.</span>ErrorListener</span> errorListener<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><blockquote>\n<p>取消请求调用 <code>Request</code> 类的 <code>cancel()</code> 方法即可。</p>\n</blockquote>\n</li>\n<li>\n<p>API 方法中的两个监听器需要<strong>调用者自行实现</strong>对结果和错误的处理</p>\n<p>如下是一个匿名类的监听器实现：</p>\n<div><pre><code><span>register</span><span>(</span>registerInfo<span>,</span>\n    <span>// 这个是结果监听器</span>\n    <span>new</span> <span>Response<span>.</span>Listener</span><span><span>&lt;</span><span>BaseResponse</span><span>></span></span><span>(</span><span>)</span> <span>{</span>\n        <span>@Override</span>\n        <span>public</span> <span>void</span> <span>onResponse</span><span>(</span><span>BaseResponse</span> response<span>)</span> <span>{</span>\n            <span>// Do with response</span>\n        <span>}</span>\n    <span>}</span><span>,</span>\n    <span>// 这个是错误监听器</span>\n    <span>new</span> <span>Response<span>.</span>ErrorListener</span><span>(</span><span>)</span> <span>{</span>\n        <span>@Override</span>\n        <span>public</span> <span>void</span> <span>onError</span><span>(</span><span>VolleyError</span> error<span>)</span> <span>{</span>\n            <span>// Handle error</span>\n        <span>}</span>\n    <span>}</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div></li>\n<li>\n<p>回调结果(<strong>Response</strong>)采用继承模型，所有网络结果均是或继承于<code>BaseResponse</code>，由其派生以增加相应字段。</p>\n<p>即<strong>所有的回调结果都至少包含 <code>BaseResponse</code> 的字段</strong></p>\n<blockquote>\n<p><code>BaseResponse</code> 包括两个字段，<code>status</code> 和 <code>message</code>。</p>\n</blockquote>\n<blockquote>\n<ul>\n<li>BaseResponse\n<ul>\n<li><code>status</code>(<strong>boolean</strong>): 用于表示请求的成功状态</li>\n<li><code>message</code>(<strong>String</strong>): 用于描述结果信息，一般来说将其直接呈现给用户即可</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>其余具有特殊相应字段的结果均继承自 <code>BaseResponse</code>，通过派生增加新字段。</p>\n<blockquote>\n<p>如登陆的回调结果需要包含 token，则通过建立新的 <code>LoginResponse</code> 继承 <code>BaseResponse</code> ，在 <code>LoginResponse</code> 中增加 <code>token</code> 字段。</p>\n</blockquote>\n<blockquote>\n<p>回调结果类均存储在 <code>models.response</code> 包中。\n关于各个 API 回调结果的说明，请参照<strong>服务器端文档</strong></p>\n</blockquote>\n</li>\n<li>\n<p>请通过使用 <code>VolleyErrorHelper</code> 类来获取网络错误信息的形式来处理网络错误，<strong>不要自己处理</strong>。</p>\n<blockquote>\n<p><code>VolleyErrorHelper</code> 类位于 <code>utils</code> 包中。\n其中也包含了一个展示默认 Snackbar 的 <code>display()</code> 方法</p>\n</blockquote>\n</li>\n</ol>\n",
      "content_html": "<h2 id=\"_1-说明\"> 1. 说明</h2>\n<p><strong>必须先看说明！！</strong></p>\n<ol>\n<li>\n<p>所有的网络请求 API 均位于 <code>NetworkUtils</code> 类中，以静态方法形式呈现。</p>\n</li>\n<li>\n<p>API 方法包括<strong>三个参数</strong>——发起请求的必要信息，一个结果回调监听器和一个错误回调监听器，并返回一个 <code>Request</code> 对象用于<strong>取消请求</strong></p>\n<blockquote>\n<p>如下，<code>registerInfo</code> 是存储注册信息的对象，<code>listener</code> 是结果监听器， <code>errorListener</code> 是错误监听器。</p>\n</blockquote>\n<div><pre><code><span>public</span> <span>static</span> <span>Request</span> <span>register</span><span>(</span><span>RegisterInfo</span> registerInfo<span>,</span>\n                               <span>Response<span>.</span>Listener</span> listener<span>,</span>\n                    <span>Response<span>.</span>ErrorListener</span> errorListener<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><blockquote>\n<p>取消请求调用 <code>Request</code> 类的 <code>cancel()</code> 方法即可。</p>\n</blockquote>\n</li>\n<li>\n<p>API 方法中的两个监听器需要<strong>调用者自行实现</strong>对结果和错误的处理</p>\n<p>如下是一个匿名类的监听器实现：</p>\n<div><pre><code><span>register</span><span>(</span>registerInfo<span>,</span>\n    <span>// 这个是结果监听器</span>\n    <span>new</span> <span>Response<span>.</span>Listener</span><span><span>&lt;</span><span>BaseResponse</span><span>></span></span><span>(</span><span>)</span> <span>{</span>\n        <span>@Override</span>\n        <span>public</span> <span>void</span> <span>onResponse</span><span>(</span><span>BaseResponse</span> response<span>)</span> <span>{</span>\n            <span>// Do with response</span>\n        <span>}</span>\n    <span>}</span><span>,</span>\n    <span>// 这个是错误监听器</span>\n    <span>new</span> <span>Response<span>.</span>ErrorListener</span><span>(</span><span>)</span> <span>{</span>\n        <span>@Override</span>\n        <span>public</span> <span>void</span> <span>onError</span><span>(</span><span>VolleyError</span> error<span>)</span> <span>{</span>\n            <span>// Handle error</span>\n        <span>}</span>\n    <span>}</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div></li>\n<li>\n<p>回调结果(<strong>Response</strong>)采用继承模型，所有网络结果均是或继承于<code>BaseResponse</code>，由其派生以增加相应字段。</p>\n<p>即<strong>所有的回调结果都至少包含 <code>BaseResponse</code> 的字段</strong></p>\n<blockquote>\n<p><code>BaseResponse</code> 包括两个字段，<code>status</code> 和 <code>message</code>。</p>\n</blockquote>\n<blockquote>\n<ul>\n<li>BaseResponse\n<ul>\n<li><code>status</code>(<strong>boolean</strong>): 用于表示请求的成功状态</li>\n<li><code>message</code>(<strong>String</strong>): 用于描述结果信息，一般来说将其直接呈现给用户即可</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>其余具有特殊相应字段的结果均继承自 <code>BaseResponse</code>，通过派生增加新字段。</p>\n<blockquote>\n<p>如登陆的回调结果需要包含 token，则通过建立新的 <code>LoginResponse</code> 继承 <code>BaseResponse</code> ，在 <code>LoginResponse</code> 中增加 <code>token</code> 字段。</p>\n</blockquote>\n<blockquote>\n<p>回调结果类均存储在 <code>models.response</code> 包中。\n关于各个 API 回调结果的说明，请参照<strong>服务器端文档</strong></p>\n</blockquote>\n</li>\n<li>\n<p>请通过使用 <code>VolleyErrorHelper</code> 类来获取网络错误信息的形式来处理网络错误，<strong>不要自己处理</strong>。</p>\n<blockquote>\n<p><code>VolleyErrorHelper</code> 类位于 <code>utils</code> 包中。\n其中也包含了一个展示默认 Snackbar 的 <code>display()</code> 方法</p>\n</blockquote>\n</li>\n</ol>\n\n<h2 id=\"_2-api-列表\"> 2. API 列表</h2>\n<p>这里只列出<strong>发起请求的必要参数</strong>，剩下的两个监听器不予列出。\n返回的 <code>Request</code> 对象同上，不予列出。</p>\n<h3 id=\"_2-1-注册\"> 2.1 注册</h3>\n<div><pre><code><span>register</span><span>(</span><span>RegisterInfo</span> registerInfo<span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li><code>registerInfo</code>：保存用户注册信息的容器类对象，仅包括用户在注册界面填写的信息。</li>\n</ul>\n<h3 id=\"_2-2-获取验证码\"> 2.2 获取验证码</h3>\n<div><pre><code><span>getAuthCode</span><span>(</span><span>String</span> phoneNumber<span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li><code>phoneNumber</code>：用于获取验证码的用户手机号，要求 11 位，以 <code>1</code> 开头。</li>\n</ul>\n",
      "date_published": "2016-11-26T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "工程"
      ]
    },
    {
      "title": "Storage API",
      "url": "https://wafer.li/blog-corners/old-inventory/Projects/MdzzProject/Storage%20API/",
      "id": "https://wafer.li/blog-corners/old-inventory/Projects/MdzzProject/Storage%20API/",
      "summary": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<ol>\n<li>所有的储存信息和操作均通过<strong>实体</strong>实现。</li>\n<li>所有实体均存放在 <code>models</code> 包中。</li>\n<li>SharedPreferences 存放在 <code>models/shared_preferences</code> 包中</li>\n<li>数据库相关的实体存放在 <code>models/db</code> 包中。</li>\n<li><strong>取消 Intant Run 再运行，否则程序将会报错！！！</strong></li>\n</ol>\n",
      "content_html": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<ol>\n<li>所有的储存信息和操作均通过<strong>实体</strong>实现。</li>\n<li>所有实体均存放在 <code>models</code> 包中。</li>\n<li>SharedPreferences 存放在 <code>models/shared_preferences</code> 包中</li>\n<li>数据库相关的实体存放在 <code>models/db</code> 包中。</li>\n<li><strong>取消 Intant Run 再运行，否则程序将会报错！！！</strong></li>\n</ol>\n\n<h2 id=\"_2-sharedpreferences-部分\"> 2. SharedPreferences 部分</h2>\n<p>此部分的数据需要先获取实体 instance 之后再进行操作。</p>\n<p>通过实体的 getter 和 setter 对数据进行获取和更改，更改后数据会自动进行持久化保存。</p>\n<h3 id=\"_2-1-储存的数据\"> 2.1 储存的数据</h3>\n<ol>\n<li>用户的个人信息，包括注册信息和是否单身，<strong>是否第一次登陆</strong>等，实体为 <code>UserInfo</code></li>\n<li>系统的信息，目前只包括<strong>是否第一次启动</strong>，实体为 <code>AppInfo</code></li>\n</ol>\n<h2 id=\"_3-数据库部分\"> 3. 数据库部分</h2>\n<p>数据库使用 Sugar ORM，需要注意的是，此库需要取消 Instant Run 才能正常使用。</p>\n<p>通过相应的 find 方法来获取相应的实体，对实体进行数据操作之后，使用 save() 方法对其进行更新。</p>\n<p>此库已经极其简单，具体的使用说明请参照</p>\n<p>https://github.com/satyan/sugar#examples\nhttp://satyan.github.io/sugar/</p>\n",
      "date_published": "2016-11-26T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "工程"
      ]
    },
    {
      "title": "高等数学 下",
      "url": "https://wafer.li/blog-corners/old-inventory/Reviews/AdvancedMathmatics/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B/",
      "id": "https://wafer.li/blog-corners/old-inventory/Reviews/AdvancedMathmatics/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B/",
      "summary": "<h2 id=\"_1-级数\"> 1. 级数</h2>\n<h3 id=\"_1-1-收敛半径和收敛域的计算\"> 1.1 收敛半径和收敛域的计算</h3>\n<h4 id=\"_1-1-1-收敛半径的计算\"> 1.1.1 收敛半径的计算</h4>\n<p>对于级数 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.104002em;vertical-align:-0.29971000000000003em;\"></span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span><span><span><span style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>n</span><span>=</span><span>0</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>∞</span></span></span></span><span>​</span></span><span><span style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span>a</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span>x</span><span><span><span><span style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span></span></span></span></span></span></span></span>，如果</p>\n",
      "content_html": "<h2 id=\"_1-级数\"> 1. 级数</h2>\n<h3 id=\"_1-1-收敛半径和收敛域的计算\"> 1.1 收敛半径和收敛域的计算</h3>\n<h4 id=\"_1-1-1-收敛半径的计算\"> 1.1.1 收敛半径的计算</h4>\n<p>对于级数 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.104002em;vertical-align:-0.29971000000000003em;\"></span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span><span><span><span style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>n</span><span>=</span><span>0</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>∞</span></span></span></span><span>​</span></span><span><span style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span>a</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span>x</span><span><span><span><span style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span></span></span></span></span></span></span></span>，如果</p>\n\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.94356em;vertical-align:-0.8360000000000001em;\"></span><span><span><span><span style=\"height:0.69444em;\"><span style=\"top:-2.4em;margin-left:0em;\"><span style=\"height:3em;\"></span><span><span><span>n</span><span>→</span><span>∞</span></span></span></span><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span>lim</span></span></span></span><span>​</span></span><span><span style=\"height:0.7em;\"><span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span>∣</span><span><span></span><span><span><span><span style=\"height:1.1075599999999999em;\"><span style=\"top:-2.3139999999999996em;\"><span style=\"height:3em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>n</span><span>+</span><span>1</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.208331em;\"><span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:0.8360000000000001em;\"><span></span></span></span></span></span><span></span></span><span>∣</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span>ρ</span></span></span></span></span></p>\n<ol>\n<li>当 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.7335400000000001em;vertical-align:-0.19444em;\"></span><span>ρ</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>&gt;</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0</span></span></span></span> 时，收敛半径 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.00773em;\">R</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.326216em;vertical-align:-0.481108em;\"></span><span><span></span><span><span><span><span style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span style=\"height:3em;\"></span><span><span><span>ρ</span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span style=\"height:3em;\"></span><span><span><span>1</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.481108em;\"><span></span></span></span></span></span><span></span></span></span></span></span></li>\n<li>当 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span>ρ</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0</span></span></span></span> 时，收敛半径 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.00773em;\">R</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span>+</span><span>∞</span></span></span></span></li>\n<li>当 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span>ρ</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span>+</span><span>∞</span></span></span></span> 时，收敛半径 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.00773em;\">R</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0</span></span></span></span></li>\n</ol>\n<blockquote>\n<p>注意，<strong>收敛半径只与只带有 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span>n</span></span></span></span> 的式子有关，即 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span><span>a</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></strong>，与 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span>x</span></span></span></span> 无关。</p>\n</blockquote>\n<h4 id=\"_1-1-2-收敛域的计算\"> 1.1.2 收敛域的计算</h4>\n",
      "date_published": "2016-10-14T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "复习"
      ]
    },
    {
      "title": "Automata Theory and Formal Language",
      "url": "https://wafer.li/blog-corners/old-inventory/Reviews/Automata/Automata%20Theory%20and%20Formal%20Language/",
      "id": "https://wafer.li/blog-corners/old-inventory/Reviews/Automata/Automata%20Theory%20and%20Formal%20Language/",
      "summary": "<h2 id=\"_1-automata\"> 1. Automata</h2>\n<h3 id=\"_1-5-the-central-concept-of-automata-theory\"> 1.5 The Central Concept of Automata Theory</h3>\n<h4 id=\"_1-5-1-alphabet\"> 1.5.1 Alphabet</h4>\n<blockquote>\n<ul>\n<li>Alphabet is the <strong>finite</strong>, <strong>non-empty</strong> <strong>Set</strong> of the symbol</li>\n</ul>\n</blockquote>\n<ul>\n<li>Using the <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span></span></span></span> symbol stand for the Alphabet</li>\n</ul>\n",
      "content_html": "<h2 id=\"_1-automata\"> 1. Automata</h2>\n<h3 id=\"_1-5-the-central-concept-of-automata-theory\"> 1.5 The Central Concept of Automata Theory</h3>\n<h4 id=\"_1-5-1-alphabet\"> 1.5.1 Alphabet</h4>\n<blockquote>\n<ul>\n<li>Alphabet is the <strong>finite</strong>, <strong>non-empty</strong> <strong>Set</strong> of the symbol</li>\n</ul>\n</blockquote>\n<ul>\n<li>Using the <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span></span></span></span> symbol stand for the Alphabet</li>\n</ul>\n\n<h2 id=\"_1-5-2-string\"> 1.5.2 String</h2>\n<blockquote>\n<p>String, sometime called <strong>word</strong> is a <strong>finite</strong> sequence of symbols, which choose from the Alphabet.</p>\n</blockquote>\n<ul>\n<li>Empty String</li>\n</ul>\n<blockquote>\n<p>If the string has no symbol, it is empty String, use the <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span>ϵ</span></span></span></span> stand for it.</p>\n</blockquote>\n<ul>\n<li>String's lenth</li>\n</ul>\n<blockquote>\n<p>The number of symbol in the the string called the <strong>lenth</strong> of the string, use the <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>∣</span><span style=\"margin-right:0.02691em;\">w</span><span>∣</span></span></span></span> stand for the lenth of string <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span style=\"margin-right:0.02691em;\">w</span></span></span></span></p>\n</blockquote>\n<ul>\n<li>The power of Alphabet</li>\n</ul>\n<blockquote>\n<p>Use the exponent of the Alphabet like <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.239018em;vertical-align:-0.25001em;\"></span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span><span><span><span style=\"height:0.9890079999999999em;\"><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span> stand for the Set of string, which lenth is <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span style=\"margin-right:0.03148em;\">k</span></span></span></span>, in <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span></span></span></span>\nNotice that <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.204018em;vertical-align:-0.25001em;\"></span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span><span><span><span style=\"height:0.954008em;\"><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>0</span></span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>{</span><span>ϵ</span><span>}</span></span></span></span></p>\n</blockquote>\n<blockquote>\n<p>The set of <strong>all</strong> strings in an Alphabet, use <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.078606em;vertical-align:-0.25001em;\"></span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span><span><span><span style=\"height:0.828596em;\"><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>∗</span></span></span></span></span></span></span></span></span></span></span>\nIf remove the <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span>ϵ</span></span></span></span> in the normal Alphabet, the rest is called <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.161241em;vertical-align:-0.25001em;\"></span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span><span><span><span style=\"height:0.911231em;\"><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>+</span></span></span></span></span></span></span></span></span></span></span>\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.161241em;vertical-align:-0.25001em;\"></span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span><span><span><span style=\"height:0.911231em;\"><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>+</span></span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.204018em;vertical-align:-0.25001em;\"></span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span><span><span><span style=\"height:0.954008em;\"><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>0</span></span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"position:relative;top:-0.0000050000000000050004em;\">⋃</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span><span><span><span style=\"height:0.954008em;\"><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"position:relative;top:-0.0000050000000000050004em;\">⋃</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span><span><span><span style=\"height:0.954008em;\"><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"position:relative;top:-0.0000050000000000050004em;\">⋃</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>…</span></span></span></span></p>\n</blockquote>\n<blockquote>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.078606em;vertical-align:-0.25001em;\"></span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span><span><span><span style=\"height:0.828596em;\"><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>∗</span></span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.161241em;vertical-align:-0.25001em;\"></span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span><span><span><span style=\"height:0.911231em;\"><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>+</span></span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"position:relative;top:-0.0000050000000000050004em;\">⋃</span><span>{</span><span>ϵ</span><span>}</span></span></span></span></p>\n</blockquote>\n<h2 id=\"_1-5-3-language\"> 1.5.3 Language</h2>\n",
      "date_published": "2016-10-14T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "复习"
      ]
    },
    {
      "title": "自动机考试",
      "url": "https://wafer.li/blog-corners/old-inventory/Reviews/Automata/%E8%87%AA%E5%8A%A8%E6%9C%BA%E8%80%83%E8%AF%95/",
      "id": "https://wafer.li/blog-corners/old-inventory/Reviews/Automata/%E8%87%AA%E5%8A%A8%E6%9C%BA%E8%80%83%E8%AF%95/",
      "summary": "<h2 id=\"填空选择问答\"> 填空选择问答</h2>\n<h3 id=\"_1-绪论\"> 1. 绪论</h3>\n<h4 id=\"_1-1-语言和形式语言\"> 1.1 语言和形式语言</h4>\n<ol>\n<li>语言是<strong>字集齐组合规则的统一体</strong></li>\n</ol>\n<h4 id=\"_1-2-字母表\"> 1.2 字母表</h4>\n<ol>\n<li>\n<p>字母表是一个<strong>非空有穷</strong>集合，具有<strong>非空性</strong>、<strong>有穷性</strong></p>\n</li>\n<li>\n<p>字符具有<strong>整体性</strong>和<strong>可辨认性</strong></p>\n</li>\n<li>\n<p>正闭包：<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.161241em;vertical-align:-0.25001em;\"></span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span><span><span><span style=\"height:0.911231em;\"><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>+</span></span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.204018em;vertical-align:-0.25001em;\"></span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>∪</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span><span><span><span style=\"height:0.954008em;\"><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span>∪</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span><span><span><span style=\"height:0.954008em;\"><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>3</span></span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span>∪</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span><span><span><span style=\"height:0.954008em;\"><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>4</span></span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span>∪</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>⋯</span></span></span></span></p>\n</li>\n<li>\n<p>克林闭包：正闭包 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.204018em;vertical-align:-0.25001em;\"></span><span>∪</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span><span><span><span style=\"height:0.954008em;\"><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>0</span></span></span></span></span></span></span></span></span></span></span></p>\n<blockquote>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.078606em;vertical-align:-0.25001em;\"></span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span><span><span><span style=\"height:0.828596em;\"><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>∗</span></span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.204018em;vertical-align:-0.25001em;\"></span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span><span><span><span style=\"height:0.954008em;\"><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>0</span></span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span>∪</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span><span><span><span style=\"height:0.911231em;\"><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>+</span></span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.204018em;vertical-align:-0.25001em;\"></span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span><span><span><span style=\"height:0.954008em;\"><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>0</span></span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span>∪</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>∪</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span><span><span><span style=\"height:0.954008em;\"><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span>∪</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span><span><span><span style=\"height:0.954008em;\"><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>3</span></span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span>∪</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span><span><span><span style=\"height:0.954008em;\"><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>4</span></span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span>∪</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>⋯</span></span></span></span></p>\n</blockquote>\n</li>\n</ol>\n",
      "content_html": "<h2 id=\"填空选择问答\"> 填空选择问答</h2>\n<h3 id=\"_1-绪论\"> 1. 绪论</h3>\n<h4 id=\"_1-1-语言和形式语言\"> 1.1 语言和形式语言</h4>\n<ol>\n<li>语言是<strong>字集齐组合规则的统一体</strong></li>\n</ol>\n<h4 id=\"_1-2-字母表\"> 1.2 字母表</h4>\n<ol>\n<li>\n<p>字母表是一个<strong>非空有穷</strong>集合，具有<strong>非空性</strong>、<strong>有穷性</strong></p>\n</li>\n<li>\n<p>字符具有<strong>整体性</strong>和<strong>可辨认性</strong></p>\n</li>\n<li>\n<p>正闭包：<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.161241em;vertical-align:-0.25001em;\"></span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span><span><span><span style=\"height:0.911231em;\"><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>+</span></span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.204018em;vertical-align:-0.25001em;\"></span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>∪</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span><span><span><span style=\"height:0.954008em;\"><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span>∪</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span><span><span><span style=\"height:0.954008em;\"><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>3</span></span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span>∪</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span><span><span><span style=\"height:0.954008em;\"><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>4</span></span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span>∪</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>⋯</span></span></span></span></p>\n</li>\n<li>\n<p>克林闭包：正闭包 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.204018em;vertical-align:-0.25001em;\"></span><span>∪</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span><span><span><span style=\"height:0.954008em;\"><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>0</span></span></span></span></span></span></span></span></span></span></span></p>\n<blockquote>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.078606em;vertical-align:-0.25001em;\"></span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span><span><span><span style=\"height:0.828596em;\"><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>∗</span></span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.204018em;vertical-align:-0.25001em;\"></span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span><span><span><span style=\"height:0.954008em;\"><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>0</span></span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span>∪</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span><span><span><span style=\"height:0.911231em;\"><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>+</span></span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.204018em;vertical-align:-0.25001em;\"></span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span><span><span><span style=\"height:0.954008em;\"><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>0</span></span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span>∪</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>∪</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span><span><span><span style=\"height:0.954008em;\"><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span>∪</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span><span><span><span style=\"height:0.954008em;\"><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>3</span></span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span>∪</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span><span><span><span style=\"height:0.954008em;\"><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>4</span></span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span>∪</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>⋯</span></span></span></span></p>\n</blockquote>\n</li>\n</ol>\n\n<h4 id=\"_1-3-句子\"> 1.3 句子</h4>\n<ol start=\"5\">\n<li>字符的总个数成为句子的长度，记为<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>∣</span><span>x</span><span>∣</span></span></span></span></li>\n<li>前缀、后缀，公共前缀、公共后缀与集合中的<strong>子集</strong>相同</li>\n<li>两个句子含有同一个串，这个串称为<strong>公共子串</strong>，如果这个串是<strong>最长的</strong>，那么称为<strong>最大公共子串</strong></li>\n</ol>\n<h3 id=\"_2-文法\"> 2. 文法</h3>\n<h4 id=\"_2-1-形式定义\"> 2.1 形式定义</h4>\n<p>文法 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>G</span></span></span></span> 是一个四元组：</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>G</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>(</span><span style=\"margin-right:0.22222em;\">V</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.13889em;\">T</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.05764em;\">S</span><span>)</span></span></span></span></span></p>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.22222em;\">V</span></span></span></span>——变量（variable），<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span>∀</span><span>A</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∈</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.22222em;\">V</span></span></span></span>，<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span></span></span></span> 叫做<strong>语法变量</strong>或者<strong>非终极符号</strong>或者<strong>语法范畴</strong>\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.13889em;\">T</span></span></span></span>——终极符号（terminal）是非空有穷集合。<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span>∀</span><span>a</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∈</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.13889em;\">T</span></span></span></span> <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span>a</span></span></span></span> 称为终极符号，是组成一个串或者句子的元单位\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.13889em;\">P</span></span></span></span>——产生式（production），形式为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span style=\"margin-right:0.0037em;\">α</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>→</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.05278em;\">β</span></span></span></span>\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05764em;\">S</span></span></span></span>——<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span style=\"margin-right:0.05764em;\">S</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∈</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.22222em;\">V</span></span></span></span>，文法 G 的开始符号，表示语言被定义的地方</p>\n<h4 id=\"_2-2-句型\"> 2.2 句型</h4>\n<p>如果可以从开始符号推导出一个串，那么这个串称为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>G</span></span></span></span> 产生的一个<strong>句型</strong></p>\n<h4 id=\"_2-3-乔姆斯基体系\"> 2.3 乔姆斯基体系</h4>\n<ol>\n<li>\n<p>没有任何限制的文法称为 <strong>0 型文法</strong>，语言叫做 <strong>0 型语言</strong></p>\n</li>\n<li>\n<p>对于 <strong>0 型文法</strong>，经过产生式后<strong>句子长度不减少</strong>，叫做<strong>上下文有关文法</strong>，语言叫做<strong>上下文有关语言</strong>，也被称为 <strong>1 型文法</strong>，语言叫做 <strong>1 型语言</strong></p>\n<blockquote>\n<p>对于 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span>∀</span><span style=\"margin-right:0.0037em;\">α</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>→</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.05278em;\">β</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∈</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.13889em;\">P</span></span></span></span>，均有 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>∣</span><span style=\"margin-right:0.05278em;\">β</span><span>∣</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≥</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>∣</span><span style=\"margin-right:0.0037em;\">α</span><span>∣</span></span></span></span></p>\n</blockquote>\n</li>\n<li>\n<p>对于 <strong>1 型文法</strong>，如果<strong>左部都是变量</strong>，那么叫做<strong>上下文有关文法</strong>，<strong>语言叫做上下文有关语言</strong>，也被称为 <strong>2 型文法</strong>，语言叫做 <strong>2 型语言</strong></p>\n<blockquote>\n<p>对于 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span>∀</span><span style=\"margin-right:0.0037em;\">α</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>→</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.05278em;\">β</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∈</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.13889em;\">P</span></span></span></span>，均有 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>∣</span><span style=\"margin-right:0.05278em;\">β</span><span>∣</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≥</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>∣</span><span style=\"margin-right:0.0037em;\">α</span><span>∣</span></span></span></span>，并且有 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span style=\"margin-right:0.0037em;\">α</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∈</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.22222em;\">V</span></span></span></span></p>\n</blockquote>\n</li>\n<li>\n<p>对于 <strong>2 型文法</strong>，如果产生式只产生<strong>终极符号</strong>和<strong>终极符号后接变量</strong>，那么叫做<strong>正则文法</strong>，语言叫做<strong>正则语言</strong>，也叫做 <strong>3 型文法</strong></p>\n<blockquote>\n<p>对于<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span>∀</span><span style=\"margin-right:0.0037em;\">α</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>→</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.05278em;\">β</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∈</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.13889em;\">P</span></span></span></span>, <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span style=\"margin-right:0.0037em;\">α</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>→</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.05278em;\">β</span></span></span></span>均具有形式：\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>→</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span style=\"margin-right:0.02691em;\">w</span></span></span></span>\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>→</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05017em;\">wB</span></span></span></span></p>\n</blockquote>\n<blockquote>\n<p>注：正则文法又叫<strong>右线性文法</strong>；\n如果变量在左边就叫<strong>左线性文法</strong>；\n两个串中间夹一个变量就是<strong>线性文法</strong></p>\n</blockquote>\n</li>\n</ol>\n<blockquote>\n<p>可以看到，文法的乔姆斯基体系是<strong>逐步收紧限制的</strong></p>\n</blockquote>\n<h4 id=\"_2-4-推导、归约和文法构造\"> 2.4 推导、归约和文法构造</h4>\n<p>这些都比较简单，慢慢推就行了。\n构造看结构想想就行了。</p>\n<h3 id=\"_3-有穷状态自动机\"> 3. 有穷状态自动机</h3>\n<h4 id=\"_3-1-物理模型\"> 3.1 物理模型</h4>\n<p>有穷状态自动机由以下结构构成：</p>\n<ol>\n<li>右端无穷<strong>输入带</strong></li>\n<li>有穷状态<strong>控制器</strong></li>\n<li>读头</li>\n</ol>\n<h4 id=\"_3-2-形式定义\"> 3.2 形式定义</h4>\n<p>有穷状态自动机是一个五元组</p>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">M</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span>(</span><span>Q</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.03785em;\">δ</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span style=\"margin-right:0.03588em;\">q</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>0</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.13889em;\">F</span><span>)</span></span></span></span></p>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span>Q</span></span></span></span>——<strong>状态</strong>的非空有穷集合，<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span>∀</span><span style=\"margin-right:0.03588em;\">q</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∈</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span>Q</span></span></span></span>, <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.03588em;\">q</span></span></span></span> 称为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">M</span></span></span></span> 的一个<strong>状态</strong>\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span></span></span></span>——输入字母表\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span style=\"margin-right:0.03785em;\">δ</span></span></span></span>——状态转移函数，读入字符后经过转移函数处理进行状态转移\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span><span style=\"margin-right:0.03588em;\">q</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>0</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>——开始状态\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.13889em;\">F</span></span></span></span>——终止状态，又称接受状态</p>\n<h4 id=\"_3-3-dfa\"> 3.3 DFA</h4>\n<p>对于状态集合中的任何一个状态，状态转移函数均有一个<strong>确定的值</strong></p>\n<h4 id=\"_3-4-nfa\"> 3.4 NFA</h4>\n<ol>\n<li>\n<p>形式定义</p>\n<blockquote>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span style=\"margin-right:0.03785em;\">δ</span></span></span></span>——状态转移函数，对于<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>∀</span><span>(</span><span style=\"margin-right:0.03588em;\">q</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>a</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∈</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span>Q</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.03785em;\">δ</span><span>(</span><span style=\"margin-right:0.03588em;\">q</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>a</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>{</span><span><span>p</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span>p</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>⋯</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.16666666666666666em;\"></span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span>p</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>m</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>}</span></span></span></span>\n其余与 DFA 相同</p>\n</blockquote>\n</li>\n<li>\n<p>与 DFA 的区别</p>\n<ol>\n<li>并不是所有在状态集合中的状态对应某个输入都有状态转移函数结果与之对应</li>\n<li>并不是对于所有的状态转移结果都只对应一个状态</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"_3-5\"> 3.5 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span>ϵ</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.13889em;\">NF</span><span>A</span></span></span></span></h4>\n<ol>\n<li>\n<p>形式定义</p>\n<blockquote>\n<p>对<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span>∀</span><span style=\"margin-right:0.03588em;\">q</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∈</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>Q</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.03785em;\">δ</span><span>(</span><span style=\"margin-right:0.03588em;\">q</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>ϵ</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>{</span><span><span>p</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span>p</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>⋯</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.16666666666666666em;\"></span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span>p</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>m</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>}</span></span></span></span>，表示 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">M</span></span></span></span> 在状态 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.03588em;\">q</span></span></span></span> 不读入任何字符的情况下也能<strong>选择进行状态转移</strong></p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"_3-6-补充\"> 3.6 补充</h4>\n<ol>\n<li>FA 接受的语言是<strong>正则语言</strong></li>\n</ol>\n<h3 id=\"_4-正则表达式\"> 4. 正则表达式</h3>\n<h4 id=\"_4-1-形式定义\"> 4.1 形式定义</h4>\n<ol>\n<li>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.66334em;vertical-align:-0.08167em;\"></span><span>∅</span></span></span></span> 是 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span></span></span></span> 上的正则表达式，表示语言<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.66334em;vertical-align:-0.08167em;\"></span><span>∅</span></span></span></span></p>\n</li>\n<li>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span>ϵ</span></span></span></span> 是 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span></span></span></span> 上的正则表达式，表示语言 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>{</span><span>ϵ</span><span>}</span></span></span></span></p>\n</li>\n<li>\n<p>对于<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span>∀</span><span>a</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∈</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>a</span></span></span></span> 是 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span></span></span></span> 上的正则表达式，它表示语言 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>{</span><span>a</span><span>}</span></span></span></span></p>\n</li>\n<li>\n<p>如果 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span style=\"margin-right:0.02778em;\">r</span></span></span></span> 和 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span>s</span></span></span></span> 分别是 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span></span></span></span> 上的表达语言 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.00773em;\">R</span></span></span></span> 和 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05764em;\">S</span></span></span></span> 的正则表达式，那么</p>\n<blockquote>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>(</span><span style=\"margin-right:0.02778em;\">r</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>s</span><span>)</span></span></span></span> 表达的语言是 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.00773em;\">R</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05764em;\">S</span></span></span></span>；\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>(</span><span>rs</span><span>)</span></span></span></span> 表达的语言是 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05764em;\">RS</span></span></span></span>；\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>(</span><span><span style=\"margin-right:0.02778em;\">r</span><span><span><span><span style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>∗</span></span></span></span></span></span></span></span><span>)</span></span></span></span> 表达的语言是 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.688696em;vertical-align:0em;\"></span><span><span style=\"margin-right:0.00773em;\">R</span><span><span><span><span style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>∗</span></span></span></span></span></span></span></span></span></span></span></p>\n</blockquote>\n</li>\n<li>\n<p>只有满足以上四条，才是正则表达式</p>\n</li>\n</ol>\n<h3 id=\"_5-正则语言的性质\"> 5. 正则语言的性质</h3>\n<h4 id=\"_5-1-封闭性\"> 5.1 封闭性</h4>\n<p>RL 在<strong>交、并、补，乘积、闭包</strong>运算都是封闭的</p>\n<h4 id=\"_5-2-myhill-nerode-定理\"> 5.2 Myhill-Nerode 定理</h4>\n<p>如下三个命题<strong>等价</strong>：</p>\n<ol>\n<li><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span>L</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>⊆</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.078606em;vertical-align:-0.25001em;\"></span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span><span><span><span style=\"height:0.828596em;\"><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>∗</span></span></span></span></span></span></span></span></span></span></span> 是 RL</li>\n<li>L 是 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.078606em;vertical-align:-0.25001em;\"></span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span><span><span><span style=\"height:0.828596em;\"><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>∗</span></span></span></span></span></span></span></span></span></span></span> 上的某个具有有穷指数的又不变等价关系 R 的某些等价类的并</li>\n<li><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span style=\"margin-right:0.00773em;\">R</span><span><span><span><span style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>L</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 具有无穷指数</li>\n</ol>\n<h3 id=\"_6-上下文无关语言\"> 6. 上下文无关语言</h3>\n<h4 id=\"_6-1-二义性\"> 6.1 二义性</h4>\n<p>对于 CFG <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>G</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>(</span><span style=\"margin-right:0.22222em;\">V</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.13889em;\">T</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.05764em;\">S</span><span>)</span></span></span></span>，如果存在 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span style=\"margin-right:0.02691em;\">w</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∈</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>L</span><span>(</span><span>G</span><span>)</span></span></span></span>，<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span style=\"margin-right:0.02691em;\">w</span></span></span></span> 至少有两颗不同的派生树，则称 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>G</span></span></span></span> 为<strong>二义性的</strong>，否则则为非二义性的</p>\n<p>如果语言 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>L</span></span></span></span> <strong>不存在非</strong>二义性文法，则称 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>L</span></span></span></span> 为<strong>固有二义性的</strong>，或者<strong>先天二义性的</strong></p>\n<h4 id=\"_6-2-乔姆斯基范式-cnf\"> 6.2 乔姆斯基范式（CNF）</h4>\n<p>形式定义：</p>\n<p>如果 CFG <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>G</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>(</span><span style=\"margin-right:0.22222em;\">V</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.13889em;\">T</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.05764em;\">S</span><span>)</span></span></span></span>中的所有产生式都具有形式：</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:3.0000000000000004em;vertical-align:-1.2500000000000002em;\"></span><span><span><span><span><span><span style=\"height:1.7500000000000002em;\"><span style=\"top:-3.91em;\"><span style=\"height:3em;\"></span><span><span>A</span></span></span><span style=\"top:-2.41em;\"><span style=\"height:3em;\"></span><span><span>A</span></span></span></span><span>​</span></span><span><span style=\"height:1.2500000000000002em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:1.7500000000000002em;\"><span style=\"top:-3.91em;\"><span style=\"height:3em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>→</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.07153em;\">BC</span></span></span><span style=\"top:-2.41em;\"><span style=\"height:3em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>→</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>a</span></span></span></span><span>​</span></span><span><span style=\"height:1.2500000000000002em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>则称为乔姆斯基文法或者乔姆斯基范式</p>\n<h4 id=\"_6-3-格雷巴赫范式\"> 6.3 格雷巴赫范式</h4>\n<p>形式定义：</p>\n<p>如果 CFG <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>G</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>(</span><span style=\"margin-right:0.22222em;\">V</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.13889em;\">T</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.05764em;\">S</span><span>)</span></span></span></span> 具有形式</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>→</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span>a</span><span style=\"margin-right:0.0037em;\">α</span></span></span></span></span></p>\n<p>则称 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>G</span></span></span></span> 为<strong>格雷巴赫范式文法</strong>，简称<strong>格雷巴赫范式</strong></p>\n<h3 id=\"_7-下推自动机\"> 7. 下推自动机</h3>\n<h4 id=\"_7-1-物理模型\"> 7.1 物理模型</h4>\n<p>下推自动机有三个基本结构：</p>\n<ol>\n<li>存放输入符号串的<strong>输入带</strong></li>\n<li>存放<strong>文法符号</strong>的<strong>栈</strong></li>\n<li><strong>有穷状态控制器</strong></li>\n</ol>\n<h4 id=\"_7-2-形式定义\"> 7.2 形式定义</h4>\n<p>下推自动机是一个七元组：</p>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">M</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span>(</span><span>Q</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>Γ</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.03785em;\">δ</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span style=\"margin-right:0.03588em;\">q</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>0</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span style=\"margin-right:0.07153em;\">Z</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>0</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.13889em;\">F</span><span>)</span></span></span></span></p>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span>Q</span></span></span></span>——状态集合\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span></span></span></span>——输入字母表\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>Γ</span></span></span></span>——栈符号表\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span style=\"margin-right:0.03785em;\">δ</span></span></span></span>——状态转移函数\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span><span style=\"margin-right:0.03588em;\">q</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>0</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>——开始状态\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span style=\"margin-right:0.07153em;\">Z</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>0</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>——开始<strong>符号</strong>\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.13889em;\">F</span></span></span></span>——终止状态</p>\n<h3 id=\"_8-上下文无关语言性质\"> 8. 上下文无关语言性质</h3>\n<h4 id=\"_8-1-封闭性\"> 8.1 封闭性</h4>\n<ol>\n<li>\n<p>交运算、补运算<strong>不封闭</strong></p>\n</li>\n<li>\n<p>并、乘积、闭包运算<strong>封闭</strong></p>\n</li>\n</ol>\n<h3 id=\"_9-图灵机\"> 9. 图灵机</h3>\n<h4 id=\"_9-1-物理模型\"> 9.1 物理模型</h4>\n<p>基本模型包括：</p>\n<ol>\n<li>有穷状态控制器（FSC）</li>\n<li>含有无穷多个带方格的<strong>输入带</strong></li>\n<li>读头</li>\n</ol>\n<h4 id=\"_9-2-形式定义\"> 9.2 形式定义</h4>\n<p>图灵机是一个七元组：\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">M</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span>(</span><span>Q</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>Γ</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.03785em;\">δ</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span style=\"margin-right:0.03588em;\">q</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>0</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.13889em;\">F</span><span>)</span></span></span></span></p>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span>Q</span></span></span></span>——状态集合\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span></span></span></span>——字母表\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>Γ</span></span></span></span>——带符号表，如果<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span>∀</span><span style=\"margin-right:0.07847em;\">X</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∈</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>Γ</span></span></span></span>, <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.07847em;\">X</span></span></span></span> 为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">M</span></span></span></span> 上的一个带符号，表示在 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">M</span></span></span></span> 的运行过程中， <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.07847em;\">X</span></span></span></span> 可以在某一时刻出现在输入带上\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span style=\"margin-right:0.03785em;\">δ</span></span></span></span>——转移函数\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span><span style=\"margin-right:0.03588em;\">q</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>0</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>——开始状态\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05017em;\">B</span></span></span></span>——空白符\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.13889em;\">F</span></span></span></span>——终止状态</p>\n<h4 id=\"_9-3-即时描述\"> 9.3 即时描述</h4>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">TM</span><span> </span><span style=\"margin-right:0.10903em;\">M</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span>(</span><span>Q</span><span>,</span><span> </span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span>,</span><span> </span><span style=\"margin-right:0.16666666666666666em;\"></span><span>Γ</span><span>,</span><span> </span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.03785em;\">δ</span><span>,</span><span> </span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span style=\"margin-right:0.03588em;\">q</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>0</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>,</span><span> </span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span>,</span><span> </span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.13889em;\">F</span><span>)</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span>a</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span>a</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∈</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8831359999999999em;vertical-align:-0.19444em;\"></span><span><span>Γ</span><span><span><span><span style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>∗</span></span></span></span></span></span></span></span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.03588em;\">q</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∈</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span>Q</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span>a</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span>a</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></p>\n<p>称为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">M</span></span></span></span> 的<strong>即时描述</strong></p>\n<h3 id=\"_10-上下文有关语言\"> 10. 上下文有关语言</h3>\n<h4 id=\"_10-1-线性有界自动机的形式定义\"> 10.1 线性有界自动机的形式定义</h4>\n<p>线性有界自动机是一种<strong>非确定的图灵机</strong>，满足如下两个条件：</p>\n<ol>\n<li>输入字母表(<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span></span></span></span>) 中包含两个人特殊的符号 (<strong>打不出来，C 画一条斜线</strong>) 和 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.80556em;vertical-align:-0.05556em;\"></span><span>$</span></span></span></span>， 其中，（<strong>C 画一条斜线</strong>）作为输入符号串的左端标识，<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.80556em;vertical-align:-0.05556em;\"></span><span>$</span></span></span></span>，作为输入符号串的右端标识</li>\n<li>LBA 的读头只能在上面两个符号之间移动，而且 LBA 不能在上面两个断点符号上面打印另外一个符号</li>\n</ol>\n<p>LBA 可以被看做一个八元组，其接受的语言为：</p>\n<p><img src=\"https://ww2.sinaimg.cn/large/8c1fca6bjw1f0b1nys23oj20em01paa3.jpg\" alt=\"Hehe\" /></p>\n<p><strong>线性有界自动机和上下文有关文法等价</strong></p>\n<h2 id=\"大题\"> 大题</h2>\n<h3 id=\"大题考点\"> 大题考点</h3>\n<ul>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-0\"> <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span>ϵ</span></span></span></span><label for=\"task-item-0\"> $\\epsilon$-NFA 转 NFA</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-1\"><label for=\"task-item-1\"> NFA 转 DFA</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-2\"><label for=\"task-item-2\"> 正则语言转 FA</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-3\"><label for=\"task-item-3\"> DFA 转正则语言</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-4\"><label for=\"task-item-4\"> 泵引理证明一个语言不是 RL</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-5\"><label for=\"task-item-5\"> DFA 极小化</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-6\"><label for=\"task-item-6\"> 上下文无关语言的文法化简</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-7\"><label for=\"task-item-7\"> 泵引理证明一个语言不是上下文无关语言</label></li>\n</ul>\n<h3 id=\"_1-nfa-转-nfa\"> 1. <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span>ϵ</span></span></span></span>-NFA 转 NFA</h3>\n<p>步骤：</p>\n<ol>\n<li>先找空闭包（<strong>包括它本身</strong>），得到一个集合</li>\n<li>寻找这个集合的对于某个特定输入的转移，得到另一个集合</li>\n<li>对于 2 的集合寻找其空闭包（<strong>包括它本身</strong>），得到第三个集合</li>\n</ol>\n<p>第三个集合即为某个状态对于上面的<strong>特定输入</strong>的状态转移</p>\n<p>找出所有非空输入的状态为止</p>\n<h3 id=\"_2-nfa-转-dfa\"> 2. NFA 转 DFA</h3>\n<p>步骤：</p>\n<ol>\n<li>\n<p>由 NFA 的初始状态出发，找出初始状态对应输入的集合</p>\n</li>\n<li>\n<p>由对应的输入集合出发，继续根据输入写出对应的转移</p>\n</li>\n<li>\n<p>重复 2 直到找完所有集合为止</p>\n</li>\n<li>\n<p>含有终止状态的集合均为终止状态</p>\n</li>\n<li>\n<p>勾出可达状态。</p>\n<blockquote>\n<p>可达状态即为从初始状态能到达的所有状态集合</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"_3-正则语言转-fa\"> 3. 正则语言转 FA</h3>\n<h4 id=\"_3-1-dfa-转正则文法\"> 3.1 DFA 转正则文法</h4>\n<ol>\n<li>\n<p>由 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span><span style=\"margin-right:0.03588em;\">q</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>s</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 开始状态开始</p>\n</li>\n<li>\n<p>根据输入和相应的转移状态写文法</p>\n<blockquote>\n<p>每一个转移对应文法为：输入，状态（没有逗号）</p>\n</blockquote>\n</li>\n<li>\n<p>如果转移到终止状态，则写终止符号</p>\n<blockquote>\n<p>终止符号为转移到终止状态的输入</p>\n</blockquote>\n</li>\n<li>\n<p>如果终止状态有闭包，则除了终止符号外，还要加上相应的 【输入，状态】</p>\n</li>\n<li>\n<p>终止状态有转移则写终止状态，没有则不用写</p>\n</li>\n<li>\n<p>如果有不可达状态，写出之后要删去</p>\n<blockquote>\n<p>不可达状态即只能写出自身闭包的文法</p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"_3-2-正则文法转-fa\"> 3.2 正则文法转 FA</h4>\n<p>根据相应文法写出状态转移函数即可</p>\n<ol>\n<li>\n<p>引入一个终止状态 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.07153em;\">Z</span></span></span></span></p>\n</li>\n<li>\n<p>根据文法写出状态转移函数</p>\n<blockquote>\n<p>形式如下：\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.03785em;\">δ</span><span>(</span></span></span></span>变量，输入<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>)</span></span></span></span> <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.36687em;vertical-align:0em;\"></span><span>=</span></span></span></span> <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>{</span></span></span></span>转移后状态<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>}</span></span></span></span>\n例如：\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05764em;\">E</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>→</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>0</span><span>A</span></span></span></span>\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.03785em;\">δ</span><span>(</span><span style=\"margin-right:0.05764em;\">E</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>0</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>{</span><span>A</span><span>}</span></span></span></span></p>\n</blockquote>\n</li>\n<li>\n<p>如果遇到终止符号，则在右方集合中写上终止状态<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.07153em;\">Z</span></span></span></span></p>\n<blockquote>\n<p>例如：\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>→</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>1∣1</span><span style=\"margin-right:0.07153em;\">C</span></span></span></span>\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.03785em;\">δ</span><span>(</span><span>A</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>1</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>{</span><span style=\"margin-right:0.07153em;\">Z</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.07153em;\">C</span><span>}</span></span></span></span></p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"_3-3-正则表达式转-fa\"> 3.3 正则表达式转 FA</h4>\n<p>分析结构，有以下几种状况</p>\n<ol>\n<li>遇到加号就分叉</li>\n<li>乘号在后面加一段相应字符的转移</li>\n<li>克林闭包意味着循环和<strong>可跳过</strong></li>\n<li>正闭包意味着循环和至少需要经过一次（即不可跳过）</li>\n<li>最后合并到终止状态</li>\n</ol>\n<h4 id=\"_3-4-dfa-转正则表达式\"> 3.4 DFA 转正则表达式</h4>\n<p>根据 DFA 的图转换成正则表达式</p>\n<ol>\n<li>\n<p>预处理</p>\n<ol>\n<li>\n<p>用状态 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.07847em;\">X</span></span></span></span> 和 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.22222em;\">Y</span></span></span></span> 将图“括起来”</p>\n<blockquote>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.07847em;\">X</span></span></span></span> 用空转移指向初始状态，所有的终止状态用空转移指向 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.22222em;\">Y</span></span></span></span></p>\n</blockquote>\n</li>\n<li>\n<p>去掉所有的不可达状态</p>\n</li>\n</ol>\n</li>\n<li>\n<p>并弧</p>\n<blockquote>\n<p>将两个状态的平行弧（方向一致），或者有逗号的，将其输入用<strong>加号</strong>连起来</p>\n</blockquote>\n</li>\n<li>\n<p>去掉点</p>\n<blockquote>\n<p>对于到达 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.22222em;\">Y</span></span></span></span> 的路径，将输入拼起来即可\n关于消去这个点之后，将其他经过这个点到达的路径的输入拼起来\n如果有闭包，则在对应的输入上使用克林闭包\n如果除了 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.07847em;\">X</span></span></span></span> <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.22222em;\">Y</span></span></span></span> 只有一种状态，而且没有经过这种状态从 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.07847em;\">X</span></span></span></span> 到达 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.22222em;\">Y</span></span></span></span> 的路径，则将这个点和对应的路径<strong>直接删去即可</strong></p>\n</blockquote>\n</li>\n<li>\n<p>不断重复 2 和 3</p>\n</li>\n<li>\n<p>最后只剩下 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.07847em;\">X</span></span></span></span> 和 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.22222em;\">Y</span></span></span></span>，则输入则为正则表达式</p>\n</li>\n</ol>\n<h3 id=\"_4-泵引理证明一个语言不是-rl\"> 4. 泵引理证明一个语言不是 RL</h3>\n<p>利用泵引理反证法证明一个语言不是 RL</p>\n<ol>\n<li>\n<p>利用正整数 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> 构造一个特殊的 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span style=\"margin-right:0.04398em;\">z</span></span></span></span></p>\n<blockquote>\n<p>一般将语言中的未知数替换成 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> 即可，有时也需动点脑筋</p>\n</blockquote>\n</li>\n<li>\n<p>利用 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>∣</span><span style=\"margin-right:0.03588em;\">v</span><span>∣</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≥</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1</span></span></span></span> 和 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>∣</span><span style=\"margin-right:0.03588em;\">uv</span><span>∣</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≤</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> 说明 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span style=\"margin-right:0.03588em;\">v</span></span></span></span> 必定为某个式子。</p>\n<blockquote>\n<p>式子为符号的幂，下同</p>\n</blockquote>\n</li>\n<li>\n<p>由 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span style=\"margin-right:0.04398em;\">z</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span style=\"margin-right:0.03588em;\">uv</span><span style=\"margin-right:0.02691em;\">w</span></span></span></span> 得出 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span>u</span></span></span></span> <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span style=\"margin-right:0.03588em;\">v</span></span></span></span> <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span style=\"margin-right:0.02691em;\">w</span></span></span></span> 的对应的式子</p>\n</li>\n<li>\n<p>由 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.824664em;vertical-align:0em;\"></span><span>u</span><span><span style=\"margin-right:0.03588em;\">v</span><span><span><span><span style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span></span></span></span></span><span style=\"margin-right:0.02691em;\">w</span></span></span></span> 得出化简后的相应式子</p>\n<blockquote>\n<p>注意不要消掉 2 中的设定的参数</p>\n</blockquote>\n</li>\n<li>\n<p>选择一个恰当的 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.65952em;vertical-align:0em;\"></span><span>i</span></span></span></span> 说明 4 中的关系和 1 中的关系矛盾</p>\n</li>\n<li>\n<p>证明完成</p>\n</li>\n</ol>\n<h3 id=\"_5-dfa-的极小化\"> 5. DFA 的极小化</h3>\n<p>对于一个 DFA 的图进行简化</p>\n<ol>\n<li>\n<p>去掉不可达状态</p>\n</li>\n<li>\n<p>在可区分状态表标记所有<strong>终止状态</strong>的行和列</p>\n<blockquote>\n<p><strong>对于交界的格子，不进行标记</strong></p>\n</blockquote>\n</li>\n<li>\n<p>对于空的格子，根据相应转移函数算出对应结合</p>\n<blockquote>\n<p>相应转移函数：状态集合对应输入所得到的状态集合的函数\n对于<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>[</span><span><span style=\"margin-right:0.03588em;\">q</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>0</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span style=\"margin-right:0.03588em;\">q</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>4</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>]</span></span></span></span>，进行 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.03785em;\">δ</span><span>(</span><span><span style=\"margin-right:0.03588em;\">q</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>0</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>,</span></span></span></span>输入<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>)</span></span></span></span> <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.03785em;\">δ</span><span>(</span><span><span style=\"margin-right:0.03588em;\">q</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>4</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>,</span></span></span></span> 输入<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>)</span></span></span></span> 来进行\n所得出的新的两个状态则为相应的转移后状态集合</p>\n</blockquote>\n<blockquote>\n<p>建议先算出所有的转移函数结果</p>\n</blockquote>\n</li>\n<li>\n<p>如果算出来的集合未被标记，增加到关联表中</p>\n<blockquote>\n<p>关联表：算出的新集合 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.36687em;vertical-align:0em;\"></span><span>→</span></span></span></span> 原集合\n如果新的“原集合”算出一个<strong>已经算出过的“新集合”</strong>，继续接到后面去\n注意，以某个集合为<strong>起点</strong>的关联表才是它的关联表。</p>\n</blockquote>\n</li>\n<li>\n<p>如果算出来的集合已经被标记了，那么就把它标记，并根据标记的集合的关联表进行递归标记</p>\n<blockquote>\n<p><strong>如果根据某个输入得出该组集合已经被标记，就没有必要去看另一组输入的结果了。</strong></p>\n</blockquote>\n</li>\n<li>\n<p>如果算出的集合跟原集合相等，不进行任何操作</p>\n</li>\n<li>\n<p>如果转移函数得到相等结果，不进行任何操作</p>\n</li>\n<li>\n<p>此时算法结束，根据可区分状态表中没有标记的组，列出来，说明它们恒等</p>\n<blockquote>\n<p>如果没有未标记的组，说明当前图已经是最简了</p>\n</blockquote>\n</li>\n<li>\n<p>根据 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.46375em;vertical-align:0em;\"></span><span>≡</span></span></span></span> 的传递性进行状态分组</p>\n<blockquote>\n<p>恒等的分成一组</p>\n</blockquote>\n</li>\n<li>\n<p>如果还有落单的状态，另分组</p>\n</li>\n<li>\n<p>分组完毕，根据原图根据分组的状态来画出简化图</p>\n</li>\n</ol>\n<h3 id=\"_6-上下文无关文法的化简\"> 6. 上下文无关文法的化简</h3>\n<p>步骤：</p>\n<ol>\n<li>清除无用符号</li>\n<li>清除 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span>ϵ</span></span></span></span> 产生式</li>\n<li>清除单一产生式</li>\n<li>清除无用符号（如果有的话）</li>\n</ol>\n<h4 id=\"_6-1-去无用符号\"> 6.1 去无用符号</h4>\n<ol>\n<li>\n<p>先清除非产生的</p>\n<blockquote>\n<p>非产生的：从这个符号开始，进行推导不能得出<strong>只有终结符号</strong>的，被称为非产生的</p>\n</blockquote>\n<blockquote>\n<p>注意含有非产生符号的式子要一并清除</p>\n</blockquote>\n</li>\n<li>\n<p>再清除不可达的</p>\n<blockquote>\n<p>不可达的，即由 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05764em;\">S</span></span></span></span> 不能达到的</p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"_6-2-清除-产生式\"> 6.2 清除 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span>ϵ</span></span></span></span> 产生式</h4>\n<p>注意，如果清除之后出现无用符号，那么就应该为它加上某个它自身能推导出来的终结符\n并考虑到它的可能为空的特性，在上级符号中加入不含这个符号的产生式</p>\n<h4 id=\"_6-3-清除单一产生式\"> 6.3 清除单一产生式</h4>\n<p>形如 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>→</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05017em;\">B</span></span></span></span> 即为单一产生式，可以将 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05017em;\">B</span></span></span></span> 的内容合并到 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span></span></span></span> 中。\n不断重复，直到没有单一产生式为止</p>\n<h3 id=\"_7-用泵引理证明一个语言不是上下文无关语言\"> 7. 用泵引理证明一个语言不是上下文无关语言</h3>\n<p>这里的泵引理是 CFL 的泵引理</p>\n",
      "image": "https://ww2.sinaimg.cn/large/8c1fca6bjw1f0b1nys23oj20em01paa3.jpg",
      "date_published": "2016-10-14T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "复习"
      ]
    },
    {
      "title": "Computer Organization and Architecture",
      "url": "https://wafer.li/blog-corners/old-inventory/Reviews/COA/Computer%20Organization%20and%20Architecture/",
      "id": "https://wafer.li/blog-corners/old-inventory/Reviews/COA/Computer%20Organization%20and%20Architecture/",
      "summary": "<h2 id=\"introduction\"> Introduction</h2>\n<h3 id=\"_1-basic-concepts\"> 1.Basic Concepts</h3>\n<ul>\n<li>Architecture: such as <strong>Instruction set</strong>, <strong>I/O mechanisms</strong> (Visiable to programmer)</li>\n<li>Organization: such as the <strong>Control singals</strong>, <strong>interfaces</strong>, <strong>memory technology</strong> (NOT visiable to the programmer)</li>\n</ul>\n",
      "content_html": "<h2 id=\"introduction\"> Introduction</h2>\n<h3 id=\"_1-basic-concepts\"> 1.Basic Concepts</h3>\n<ul>\n<li>Architecture: such as <strong>Instruction set</strong>, <strong>I/O mechanisms</strong> (Visiable to programmer)</li>\n<li>Organization: such as the <strong>Control singals</strong>, <strong>interfaces</strong>, <strong>memory technology</strong> (NOT visiable to the programmer)</li>\n</ul>\n\n<ul>\n<li>Family of computer models(系列机): All with the same architecture but with differences in organization. Such as <strong>Intel 286</strong> and <strong>Intel 386</strong></li>\n<li>Organization is the high-level aspect of computer design, Hardware is the specific mechine.</li>\n<li>The computer system include:\n<ul>\n<li>Hardware</li>\n<li>Software</li>\n<li>Peripheral device\n<ul>\n<li>Keyboard and mouse and so on.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>The computer consist of:\n<ul>\n<li>CPU(or processor)</li>\n<li>Input &amp; Output</li>\n<li>Main Memory</li>\n<li>System Bus</li>\n</ul>\n</li>\n<li>The <strong>CPU</strong> consist of:\n<ul>\n<li>Control Unit(CU)</li>\n<li>Arithmetic and Logic Unit(ALU)</li>\n<li>Registers</li>\n<li>Internal Bus</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"computer-performance-design-and-assessment\"> Computer Performance design and assessment</h2>\n<h3 id=\"_1-designing-for-performance\"> 1. Designing for performance</h3>\n<blockquote>\n<ul>\n<li>Three things affect the performance:\n- Microprocessor speed\n- Performance balance\n- Improvements in chip organization and architecture</li>\n</ul>\n</blockquote>\n<h4 id=\"_1-1-the-microprocessor-speed\"> 1.1 The Microprocessor Speed</h4>\n<p>By adding these things to improve the performance:</p>\n<ul>\n<li>Branch prediction</li>\n<li>Data flow analysis</li>\n<li>Speculative execution</li>\n</ul>\n<h4 id=\"_1-2-the-balance-balance-is-the-key\"> 1.2 The balance (Balance is the key)</h4>\n<blockquote>\n<p>With the microprocessor speed increasing rapily refer to the Mooore's Law, the Memory accessing sppeding is on the contrary, cannot catch the speed of the microporcessor increase.</p>\n</blockquote>\n<p>Solutions for memory access:</p>\n<ul>\n<li>\n<p>Make DRAM &quot;wider&quot; rather than &quot;deeper&quot;\nIncrease number of bits retrieved at one time</p>\n</li>\n<li>\n<p>Change DRAM interface (by using cache)</p>\n</li>\n<li>\n<p>Reduce frequency of memory access</p>\n<ul>\n<li>more complex cache and cache on chip</li>\n</ul>\n</li>\n<li>\n<p>Increase interconnection bandwith</p>\n<ul>\n<li>High speed buese</li>\n<li>Hierarchy of buses</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>The I/O devices are much more slow than the memory access</p>\n</blockquote>\n<p>Solutions for I/O devices:</p>\n<ul>\n<li>Caching</li>\n<li>Buffering</li>\n<li>Higher-speed interconnection buses</li>\n<li>More elaborate bus structures</li>\n<li>Multiple-processor configurations</li>\n</ul>\n<h4 id=\"_1-3-imporve-the-chip-o-a\"> 1.3 Imporve the chip O&amp;A</h4>\n<ul>\n<li>Increase hardware speed of processor\n<ul>\n<li>Power</li>\n<li>RC delay</li>\n<li>Memory latency</li>\n</ul>\n</li>\n<li>Increase size and speed of caches\n<ul>\n<li>Multiple levels of caches</li>\n<li>Increase the chip density</li>\n</ul>\n</li>\n<li>Change processor organization and architecture\n<ul>\n<li>Enable parallel execution of instructions</li>\n<li>Pipeline works like assembly line</li>\n<li>Superscalar allows <strong>multiple pipelines within single processor</strong>\n<ul>\n<li>Instructions that do not depend on the other can be executed in parallel</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>Supplement: Using the <strong>multiple cores</strong> can be more efficiency</p>\n</blockquote>\n<h3 id=\"_2-performance-assessment\"> 2. Performance Assessment</h3>\n<h4 id=\"_2-1-clock-speed\"> 2.1 Clock Speed</h4>\n<p><strong>The clock speed is not every thing</strong></p>\n<h4 id=\"_2-2-instruction-execution-rate\"> 2.2 Instruction Execution Rate</h4>\n<blockquote>\n<p>There are three index of the rate, CPI, MIPS and MFLOPS</p>\n</blockquote>\n<ul>\n<li>CPI: The time cycle with one instruction needed (Cycle Per Instruction)</li>\n<li>MIPS: The number(million) of the instructions within in one second being executed.</li>\n<li>MFLOPS: Like the MIPS, it is the floating point calculate instruction.</li>\n</ul>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.13889em;\">CP</span><span style=\"margin-right:0.07847em;\">I</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:2.3300020000000004em;vertical-align:-0.8360000000000001em;\"></span><span><span><span></span><span><span><span><span style=\"height:1.494002em;\"><span style=\"top:-2.3139999999999996em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.07847em;\">I</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>c</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.6897100000000003em;\"><span style=\"height:3em;\"></span><span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span><span><span><span style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>i</span><span>=</span><span>1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span>(</span><span style=\"margin-right:0.13889em;\">CP</span><span><span style=\"margin-right:0.07847em;\">I</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span style=\"margin-right:0.07847em;\">I</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span></span></span></span><span>​</span></span><span><span style=\"height:0.8360000000000001em;\"><span></span></span></span></span></span><span></span></span></span></span></span></span></span></p>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span style=\"margin-right:0.07847em;\">I</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>c</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is the number of the instruction</p>\n<p>The processing time <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.13889em;\">T</span></span></span></span> is:</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.13889em;\">T</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span style=\"margin-right:0.07847em;\">I</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>c</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span style=\"margin-right:0.13889em;\">CP</span><span style=\"margin-right:0.07847em;\">I</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.05556em;\">γ</span></span></span></span></span></p>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.05556em;\">γ</span></span></span></span> is the constant cycle, which means <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>1/</span><span style=\"margin-right:0.10764em;\">f</span></span></span></span></p>\n<p>So, the MIPS is:</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:4.87043em;vertical-align:-2.185215em;\"></span><span><span><span><span><span style=\"height:2.685215em;\"><span style=\"top:-4.696325em;\"><span style=\"height:3.3714399999999998em;\"></span><span><span style=\"margin-right:0.10903em;\">M</span><span style=\"margin-right:0.07847em;\">I</span><span style=\"margin-right:0.05764em;\">PS</span></span></span><span style=\"top:-2.255555em;\"><span style=\"height:3.3714399999999998em;\"></span><span></span></span></span><span>​</span></span><span><span style=\"height:2.185215em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:2.685215em;\"><span style=\"top:-4.696325em;\"><span style=\"height:3.3714399999999998em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span><span></span><span><span><span><span style=\"height:1.36033em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.13889em;\">T</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>1</span><span><span>0</span><span><span><span><span style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>6</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.07847em;\">I</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>c</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span></span></span></span></span></span><span style=\"top:-2.255555em;\"><span style=\"height:3.3714399999999998em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span><span></span><span><span><span><span style=\"height:1.3714399999999998em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.13889em;\">CP</span><span style=\"margin-right:0.07847em;\">I</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>1</span><span><span>0</span><span><span><span><span style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>6</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.10764em;\">f</span></span></span></span><span>​</span></span><span><span style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:2.185215em;\"><span></span></span></span></span></span></span></span><span><span><span><span style=\"height:2.685215em;\"><span style=\"top:-4.696325em;\"><span style=\"height:3.3714399999999998em;\"></span><span></span></span><span style=\"top:-2.255555em;\"><span style=\"height:3.3714399999999998em;\"></span><span></span></span></span><span>​</span></span><span><span style=\"height:2.185215em;\"><span></span></span></span></span></span></span></span></span></p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.13889em;\">MF</span><span>L</span><span style=\"margin-right:0.05764em;\">OPS</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:2.14077em;vertical-align:-0.7693300000000001em;\"></span><span><span><span></span><span><span><span><span style=\"height:1.3714399999999998em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.05764em;\">E</span><span>x</span><span>ec</span><span>u</span><span>t</span><span>i</span><span>o</span><span>n</span><span> </span><span>t</span><span>im</span><span>e</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>1</span><span><span>0</span><span><span><span><span style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>6</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.10903em;\">N</span><span>u</span><span>mb</span><span style=\"margin-right:0.02778em;\">er</span><span> </span><span>o</span><span style=\"margin-right:0.10764em;\">f</span><span> </span><span>e</span><span>x</span><span>ec</span><span>u</span><span>t</span><span>e</span><span> </span><span style=\"margin-right:0.10764em;\">f</span><span style=\"margin-right:0.01968em;\">l</span><span>o</span><span>a</span><span>t</span><span>in</span><span style=\"margin-right:0.03588em;\">g</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>p</span><span>o</span><span>in</span><span>t</span><span> </span><span>o</span><span>p</span><span style=\"margin-right:0.02778em;\">er</span><span>a</span><span>t</span><span>i</span><span>o</span><span>n</span><span>s</span><span> </span><span>in</span><span> </span><span>a</span><span> </span><span>p</span><span>ro</span><span style=\"margin-right:0.03588em;\">g</span><span style=\"margin-right:0.02778em;\">r</span><span>am</span></span></span></span><span>​</span></span><span><span style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span></span></span></span></span></span></span></span></p>\n<h4 id=\"_2-3-amdahl-s-law\"> 2.3 Amdahl's Law</h4>\n<blockquote>\n<p>The speed up rate between the single core machine and the multiple cores machine.</p>\n</blockquote>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:8.234751999999999em;vertical-align:-3.8673759999999984em;\"></span><span><span><span><span><span style=\"height:4.367376em;\"><span style=\"top:-6.422936em;\"><span style=\"height:3.427em;\"></span><span><span>Sp</span><span>ee</span><span>d</span><span>u</span><span>p</span></span></span><span style=\"top:-3.8154960000000013em;\"><span style=\"height:3.427em;\"></span><span></span></span><span style=\"top:-1.0268400000000015em;\"><span style=\"height:3.427em;\"></span><span></span></span></span><span>​</span></span><span><span style=\"height:3.8673759999999984em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:4.367376em;\"><span style=\"top:-6.422936em;\"><span style=\"height:3.427em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span><span></span><span><span><span><span style=\"height:1.3714399999999998em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>t</span><span>im</span><span>e</span><span> </span><span>t</span><span>o</span><span> </span><span>e</span><span>x</span><span>ec</span><span>u</span><span>t</span><span>e</span><span> </span><span>p</span><span>ro</span><span style=\"margin-right:0.03588em;\">g</span><span style=\"margin-right:0.02778em;\">r</span><span>am</span><span> </span><span>o</span><span>n</span><span style=\"margin-right:0.10903em;\">N</span><span> </span><span>p</span><span>a</span><span style=\"margin-right:0.02778em;\">r</span><span>a</span><span style=\"margin-right:0.01968em;\">ll</span><span>e</span><span style=\"margin-right:0.01968em;\">l</span><span> </span><span>p</span><span>rocessors</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>t</span><span>im</span><span>e</span><span> </span><span>t</span><span>o</span><span> </span><span>e</span><span>x</span><span>ec</span><span>u</span><span>t</span><span>e</span><span> </span><span>p</span><span>ro</span><span style=\"margin-right:0.03588em;\">g</span><span style=\"margin-right:0.02778em;\">r</span><span>am</span><span> </span><span>o</span><span>n</span><span> </span><span>a</span><span> </span><span>s</span><span>in</span><span style=\"margin-right:0.03588em;\">g</span><span style=\"margin-right:0.01968em;\">l</span><span>e</span><span> </span><span>p</span><span style=\"margin-right:0.02778em;\">rocessor</span></span></span></span><span>​</span></span><span><span style=\"height:0.8804400000000001em;\"><span></span></span></span></span></span><span></span></span></span></span></span><span style=\"top:-3.8154960000000013em;\"><span style=\"height:3.427em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span><span></span><span><span><span><span style=\"height:1.427em;\"><span style=\"top:-2.177784em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.13889em;\">T</span><span><span>(</span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.10764em;\">f</span><span>)</span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span><span></span><span><span><span><span style=\"height:0.9322159999999999em;\"><span style=\"top:-2.6550000000000002em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.10903em;\">N</span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.446108em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.13889em;\">T</span><span style=\"margin-right:0.10764em;\">f</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.345em;\"><span></span></span></span></span></span><span></span></span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.13889em;\">T</span><span><span>(</span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.10764em;\">f</span><span>)</span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.13889em;\">T</span><span style=\"margin-right:0.10764em;\">f</span></span></span></span><span>​</span></span><span><span style=\"height:1.1672159999999998em;\"><span></span></span></span></span></span><span></span></span></span></span></span><span style=\"top:-1.0268400000000015em;\"><span style=\"height:3.427em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.177784em;\"><span style=\"height:3em;\"></span><span><span>(</span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.10764em;\">f</span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span><span></span><span><span><span><span style=\"height:0.9322159999999999em;\"><span style=\"top:-2.6550000000000002em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.10903em;\">N</span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.446108em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.10764em;\">f</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.345em;\"><span></span></span></span></span></span><span></span></span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:1.1672159999999998em;\"><span></span></span></span></span></span><span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:3.8673759999999984em;\"><span></span></span></span></span></span></span></span><span><span><span><span style=\"height:4.367376em;\"><span style=\"top:-6.422936em;\"><span style=\"height:3.427em;\"></span><span></span></span><span style=\"top:-3.8154960000000013em;\"><span style=\"height:3.427em;\"></span><span></span></span><span style=\"top:-1.0268400000000015em;\"><span style=\"height:3.427em;\"></span><span></span></span></span><span>​</span></span><span><span style=\"height:3.8673759999999984em;\"><span></span></span></span></span></span></span></span></span></p>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.10764em;\">f</span></span></span></span> refer to the code infinitely parallelizable with <strong>no scheduling overhead</strong>.</p>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>(</span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.10764em;\">f</span><span>)</span><span>o</span><span style=\"margin-right:0.10764em;\">f</span><span>co</span><span>d</span><span>e</span><span>inh</span><span>ere</span><span>n</span><span style=\"margin-right:0.01968em;\">tl</span><span style=\"margin-right:0.02778em;\">yser</span><span>ia</span><span style=\"margin-right:0.01968em;\">l</span></span></span></span></p>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.13889em;\">T</span></span></span></span> is the total execution time for program on single processor</p>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> is number of processors that fully exploite parallel portions of code</p>\n<p>Conclusion:</p>\n<ul>\n<li><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.10764em;\">f</span></span></span></span> small, parallel processor has little effect</li>\n<li><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">N</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∼</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span>∞</span></span></span></span>, the speedup bound by <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>1/</span><span>(</span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.10764em;\">f</span><span>)</span></span></span></span></li>\n</ul>\n<h4 id=\"_2-4-supplement\"> 2.4 Supplement</h4>\n<p>Some important terminology:</p>\n<ul>\n<li>Bit is the binary digit rather 0 or 1.</li>\n<li>A byte is defined as 8 bits</li>\n<li>A <strong>word</strong> is a set of bits constituting the samllest unit of addressable memory</li>\n<li>A kilobyte (KB) is <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span><span>2</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>10</span></span></span></span></span></span></span></span></span></span></span></span> bytes.</li>\n<li>A megabyte (MB) is <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span><span>2</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>20</span></span></span></span></span></span></span></span></span></span></span></span> bytes.</li>\n<li>A gigabyte (GB) is <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span><span>2</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>30</span></span></span></span></span></span></span></span></span></span></span></span> bytes.</li>\n</ul>\n<h2 id=\"computer-system\"> Computer System</h2>\n<h3 id=\"_1-computer-components\"> 1. Computer Components</h3>\n<ul>\n<li>CPU\n<ul>\n<li>PC: programming counter, store the next instruction's address.</li>\n<li>IR: instruction register, store the instruction</li>\n<li>MAR: the memory address register, exchange data with the main memory</li>\n<li>I/O AR: input and output address register</li>\n<li>I/O BR: input and output buffer register</li>\n</ul>\n</li>\n<li>Mian Memory</li>\n</ul>\n",
      "date_published": "2016-10-14T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "复习"
      ]
    },
    {
      "title": "计组复习",
      "url": "https://wafer.li/blog-corners/old-inventory/Reviews/COA/%E8%AE%A1%E7%BB%84%E5%A4%8D%E4%B9%A0/",
      "id": "https://wafer.li/blog-corners/old-inventory/Reviews/COA/%E8%AE%A1%E7%BB%84%E5%A4%8D%E4%B9%A0/",
      "summary": "<h2 id=\"大题考点\"> 大题考点</h2>\n<ul>\n<li><input type=\"checkbox\"  disabled=\"disabled\" id=\"task-item-0\"><label for=\"task-item-0\"> CPI MIPS Speedup</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-1\"><label for=\"task-item-1\"> Cache & Memory Organization</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-2\"><label for=\"task-item-2\"> Hard disk</label></li>\n<li><input type=\"checkbox\"  disabled=\"disabled\" id=\"task-item-3\"><label for=\"task-item-3\"> 浮点数运算</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-4\"><label for=\"task-item-4\"> 寻址，指令设计</label></li>\n<li><input type=\"checkbox\"  disabled=\"disabled\" id=\"task-item-5\"><label for=\"task-item-5\"> 流水，时序图，加速比，优化</label></li>\n<li><input type=\"checkbox\"  disabled=\"disabled\" id=\"task-item-6\"><label for=\"task-item-6\"> 超标量，超流水，冲突，指令发射</label></li>\n<li><input type=\"checkbox\"  disabled=\"disabled\" id=\"task-item-7\"><label for=\"task-item-7\"> 微操作，微指令，微指令设计</label></li>\n</ul>\n",
      "content_html": "<h2 id=\"大题考点\"> 大题考点</h2>\n<ul>\n<li><input type=\"checkbox\"  disabled=\"disabled\" id=\"task-item-0\"><label for=\"task-item-0\"> CPI MIPS Speedup</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-1\"><label for=\"task-item-1\"> Cache & Memory Organization</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-2\"><label for=\"task-item-2\"> Hard disk</label></li>\n<li><input type=\"checkbox\"  disabled=\"disabled\" id=\"task-item-3\"><label for=\"task-item-3\"> 浮点数运算</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-4\"><label for=\"task-item-4\"> 寻址，指令设计</label></li>\n<li><input type=\"checkbox\"  disabled=\"disabled\" id=\"task-item-5\"><label for=\"task-item-5\"> 流水，时序图，加速比，优化</label></li>\n<li><input type=\"checkbox\"  disabled=\"disabled\" id=\"task-item-6\"><label for=\"task-item-6\"> 超标量，超流水，冲突，指令发射</label></li>\n<li><input type=\"checkbox\"  disabled=\"disabled\" id=\"task-item-7\"><label for=\"task-item-7\"> 微操作，微指令，微指令设计</label></li>\n</ul>\n\n<h2 id=\"_2-存储组织\"> 2. 存储组织</h2>\n<h3 id=\"_2-1-cache-存储映射\"> 2.1 Cache 存储映射</h3>\n<p>Cache 以</p>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th>Data</th>\n</tr>\n</thead>\n<tbody></tbody>\n</table>\n<p>形式存储数据，数据段很宽，<strong>可以存储主存（Memory）中几行的数据</strong></p>\n<p>下面所讨论的都是不同映射方式下的<strong>地址构成</strong></p>\n<h4 id=\"_2-1-1-直接映射\"> 2.1.1 直接映射</h4>\n<p>直接映射主存地址为</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Tag</th>\n<th style=\"text-align:center\">行号</th>\n<th style=\"text-align:center\">字</th>\n</tr>\n</thead>\n<tbody></tbody>\n</table>\n<blockquote>\n<p>Tag 就是 Cache 的 Tag；\n行号是 Cache 的对应行号；\n字指代了这一行中要取用 Cache 的哪个分段的数据</p>\n</blockquote>\n<p>寻址时，首先查找<strong>对应行号</strong>，检查标记，如果命中，那么则根据字来取数据</p>\n<h4 id=\"_2-1-2-全相连映射\"> 2.1.2 全相连映射</h4>\n<p>全相连主存地址构成为</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Tag</th>\n<th style=\"text-align:center\">字</th>\n</tr>\n</thead>\n<tbody></tbody>\n</table>\n<blockquote>\n<p>由于存储数据和行号无关，使用 Tag 作为唯一的标记，字用于标记数据段</p>\n</blockquote>\n<p>需要并行电路不断比对 Tag 内容，如果命中了，那么根据字来取对应数据段</p>\n<h4 id=\"_2-1-3-组相连映射\"> 2.1.3 组相连映射</h4>\n<p>组相连映射地址构成如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Tag</th>\n<th style=\"text-align:center\">组号</th>\n<th style=\"text-align:center\">字</th>\n</tr>\n</thead>\n<tbody></tbody>\n</table>\n<blockquote>\n<p>Tag 和字同上\n组号是指将 Cache的行分组后的对应组号</p>\n</blockquote>\n<p>结合直接映射和全相连映射，将 Cache 的行分为很多的组，先根据组号查找对应组，然后再在组内比对标记。\n减少了由于直接映射的抖动问题，又避免了全相连映射的不断寻找导致的性能浪费</p>\n<blockquote>\n<p>抖动问题：由于程序需要不断访问<strong>映射到同一行但来自不同块</strong>的字，那么就会导致内存块不断载入载出，造成性能浪费</p>\n</blockquote>\n<p>N 路总相连指的就是一个组内有 N 行</p>\n<h4 id=\"_2-1-4-相关计算问题\"> 2.1.4 相关计算问题</h4>\n<p>由 Cache 和 Memory 的行数和块数等数据来指明地址构成</p>\n<blockquote>\n<p>这里需要注意，地址不只是用来算 Cache 映射，<strong>还要能通过地址在 Memory 中寻找到正确的内存块</strong></p>\n</blockquote>\n<ol>\n<li>地址的寻址长度能<strong>覆盖主存的容量</strong>，确定地址<strong>总长度</strong></li>\n<li>根据 Cache 数据算出 Cache <strong>行数</strong>，<strong>组数</strong>。</li>\n<li>Cache 的一行就是 Memory 的一块，根据这个算出 Memory 有多少块</li>\n</ol>\n<blockquote>\n<p>除了“字”以外的地址位加起来就是这个数</p>\n</blockquote>\n<ol start=\"4\">\n<li>“字”的部分要能覆盖块的<strong>字节容量</strong></li>\n<li>如果出现“字（Word）”的描述，那么字的位数就是<strong>地址的总长</strong></li>\n</ol>\n",
      "date_published": "2016-10-14T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "复习"
      ]
    },
    {
      "title": "计算机网络考试速记",
      "url": "https://wafer.li/blog-corners/old-inventory/Reviews/ComputerNetwork/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%80%83%E8%AF%95%E9%80%9F%E8%AE%B0/",
      "id": "https://wafer.li/blog-corners/old-inventory/Reviews/ComputerNetwork/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%80%83%E8%AF%95%E9%80%9F%E8%AE%B0/",
      "summary": "<h2 id=\"_1-osi-参考模型\"> 1. OSI 参考模型</h2>\n<p>从低到高：</p>\n<ol>\n<li>\n<p>物理层</p>\n<blockquote>\n<p>通信信道的原始 <strong>比特</strong>，机械、电子、时序、物理介质</p>\n</blockquote>\n</li>\n<li>\n<p>数据链路层</p>\n<blockquote>\n<p>数据帧，控制对共享信道的访问（介质访问控制子层）</p>\n</blockquote>\n</li>\n</ol>\n",
      "content_html": "<h2 id=\"_1-osi-参考模型\"> 1. OSI 参考模型</h2>\n<p>从低到高：</p>\n<ol>\n<li>\n<p>物理层</p>\n<blockquote>\n<p>通信信道的原始 <strong>比特</strong>，机械、电子、时序、物理介质</p>\n</blockquote>\n</li>\n<li>\n<p>数据链路层</p>\n<blockquote>\n<p>数据帧，控制对共享信道的访问（介质访问控制子层）</p>\n</blockquote>\n</li>\n</ol>\n\n<ol start=\"3\">\n<li>\n<p>网络层</p>\n<blockquote>\n<p>控制子网的运行，数据包的端到端传输，路由算法，处理拥塞</p>\n</blockquote>\n</li>\n<li>\n<p>传输层</p>\n<blockquote>\n<p>向会话层提供服务，为应用层提供抽象，与网络层一起处理拥塞</p>\n</blockquote>\n</li>\n<li>\n<p>会话层</p>\n<blockquote>\n<p>令牌管理，同步，崩溃恢复</p>\n</blockquote>\n</li>\n<li>\n<p>表示层</p>\n<blockquote>\n<p>传递信息的语法和语义，统一不同计算机的数据格式并提供抽象接口。</p>\n</blockquote>\n</li>\n<li>\n<p>应用层</p>\n<blockquote>\n<p>OSI 最顶层，通常包含用户需要的各种协议，如 HTTP</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"_2-tcp-ip-参考模型\"> 2. TCP/IP 参考模型</h2>\n<ol>\n<li>\n<p>链路层</p>\n<blockquote>\n<p>实际上是一个接口，而不是层</p>\n</blockquote>\n</li>\n<li>\n<p>互联网层</p>\n<blockquote>\n<p>大致对应 OSI 网络层</p>\n</blockquote>\n</li>\n<li>\n<p>传输层</p>\n<blockquote>\n<p>OSI 中的传输层</p>\n</blockquote>\n</li>\n<li>\n<p>应用层</p>\n<blockquote>\n<p>TCP/IP 中没有会话层和表示层，应用层将其整合了。</p>\n</blockquote>\n</li>\n</ol>\n<p>与 OSI 的对比</p>\n<table>\n<thead>\n<tr>\n<th>OSI</th>\n<th>TCP/IP</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>应用层</td>\n<td>应用层</td>\n</tr>\n<tr>\n<td>表示层</td>\n<td> </td>\n</tr>\n<tr>\n<td>会话层</td>\n<td> </td>\n</tr>\n<tr>\n<td>传输层</td>\n<td>传输层</td>\n</tr>\n<tr>\n<td>网络层</td>\n<td>互联网层</td>\n</tr>\n<tr>\n<td>数据链路层</td>\n<td> </td>\n</tr>\n<tr>\n<td>物理层</td>\n<td> </td>\n</tr>\n</tbody>\n</table>\n<p>OSI 先有层级，后有协议；</p>\n<p>TCP/IP 先有协议，后有层级</p>\n<h2 id=\"_3-信息传输介质\"> 3. 信息传输介质</h2>\n<ol>\n<li>\n<p>磁介质</p>\n<blockquote>\n<p>低成本，短途运输速率高，延迟高</p>\n</blockquote>\n</li>\n<li>\n<p>双绞线</p>\n<blockquote>\n<p>即常用的网线。低噪声，低延迟，拥有足够的带宽，是目前应用最为广泛的信息传输介质</p>\n</blockquote>\n</li>\n<li>\n<p>同轴电缆</p>\n<blockquote>\n<p>带宽比双绞线大，抗噪性较好，主要用于 <strong>长距离信息运输</strong></p>\n</blockquote>\n</li>\n<li>\n<p>电力线</p>\n<blockquote>\n<p>布置方便；但电源信号专用，频率不符，目前应用低</p>\n</blockquote>\n</li>\n<li>\n<p>光纤</p>\n<blockquote>\n<p>超高带宽，主要用于长距离通信\n光纤相对于铜线，具有高带宽，低衰减，重量轻，部署难，接口费用高 的特点</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"_4-多路复用\"> 4. 多路复用</h2>\n<ol>\n<li>\n<p>频分复用</p>\n<blockquote>\n<p>将频谱分为几个频段，每个用户 <strong>完全拥有</strong> 其中一个频段进行通信。\nOFDM 已经广泛应用于 802.11、有线电视网络和电力线网络</p>\n</blockquote>\n</li>\n<li>\n<p>时分复用</p>\n<blockquote>\n<p>用户以循环的方式轮流工作，周期性地获得 <strong>整个带宽</strong> 非常短的一个时间\nTDM 广泛用于电话网络和蜂窝网络中</p>\n</blockquote>\n</li>\n<li>\n<p>码分复用</p>\n<blockquote>\n<p>通过码片来提取叠加信号中的信息。\n通过不同的码片序列来提取对应的信息，并将其他的信息都当做噪声\nCDMA 被用于卫星通信和蜂窝网络以及有线电视网络</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"_5-数据链路层\"> 5. 数据链路层</h2>\n<p>数据链路层操作的对象是数据帧，向网络层提供服务，进行差错控制和流量控制。</p>\n<h3 id=\"_5-1-分帧\"> 5.1 分帧</h3>\n<ol>\n<li>\n<p>字节长度</p>\n<blockquote>\n<p>通过计算字节长度来分帧\n不准确，很少使用</p>\n</blockquote>\n</li>\n<li>\n<p>填充字节标志</p>\n<blockquote>\n<p>帧变长\n某些情况会干扰帧分界</p>\n</blockquote>\n</li>\n<li>\n<p>填充比特</p>\n<blockquote>\n<p>确保最小转换密度，有助于物理层保持同步\nUSB 使用该技术</p>\n</blockquote>\n</li>\n<li>\n<p>物理层编码违禁法</p>\n<blockquote>\n<p>通过使用一些物理层的违法编码或者冗余字节来进行分帧\n不需要填充数据</p>\n</blockquote>\n</li>\n</ol>\n<p>802.11 和以太网综合使用了上述方法（不包括字节长度）</p>\n<h3 id=\"_5-2-差错检测和修正\"> 5.2 差错检测和修正</h3>\n<h4 id=\"_5-2-1-纠错码-不可靠信道-wifi\"> 5.2.1 纠错码——不可靠信道(WIFI)</h4>\n<ol>\n<li>\n<p>海明码</p>\n<blockquote>\n<p>纠错存储器\n检测 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span>d</span></span></span></span> 个错误，需要距离为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span>d</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1</span></span></span></span> 的编码方案</p>\n</blockquote>\n</li>\n<li>\n<p>卷积码</p>\n<blockquote>\n<p>GSM 使用</p>\n</blockquote>\n</li>\n<li>\n<p>里德罗门码</p>\n<blockquote>\n<p>纠错能力强，处理突发错误能力强\n应用于光盘，卫星通信</p>\n</blockquote>\n</li>\n<li>\n<p>低密度奇偶校验</p>\n<blockquote>\n<p>纠错性能最佳\n使用于 802.11，数字广播，万兆以太</p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"_5-2-2-检错码-可靠信道-光纤\"> 5.2.2 检错码——可靠信道(光纤)</h4>\n<ol>\n<li>\n<p>奇偶校验</p>\n<blockquote>\n<p>只能检查一处错误</p>\n</blockquote>\n</li>\n<li>\n<p>校验和</p>\n<blockquote>\n<p>16 位字节和，可以检验奇偶校验检查不出的错误</p>\n</blockquote>\n</li>\n<li>\n<p>循环冗余检验</p>\n<blockquote>\n<p>多项式检验\n最可靠，使用最广泛\n使用于局域网和点到点连接</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"_5-3-回退-n-步与选择重传\"> 5.3 回退 N 步与选择重传</h3>\n<ol>\n<li>\n<p>停等协议</p>\n<blockquote>\n<p>直到接收到确认后才发下一帧</p>\n</blockquote>\n</li>\n<li>\n<p>回退 N 步</p>\n<blockquote>\n<p>不需要等到回报才发下一帧；而是直接发 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span style=\"margin-right:0.02691em;\">w</span></span></span></span> 帧；\n如果 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span style=\"margin-right:0.02691em;\">w</span></span></span></span> 个帧都没有回报，则堵塞。</p>\n<p>出错时，直接丢弃，发送方回退，重新发送错误之后的帧。\n错误多时，影响带宽</p>\n</blockquote>\n</li>\n<li>\n<p>选择重传</p>\n<blockquote>\n<p>相比回退 N 步，不是由发送方回退 N 个窗口后重发；\n而是由接收方缓存接下来的帧，直到错误帧重发后，进行合并。</p>\n</blockquote>\n</li>\n<li>\n<p>两者的流量控制</p>\n<blockquote>\n<p>通过滑动窗口来进行流量控制。\n只有接收方的窗口滑动时（回报），发送方的窗口才能滑动\n回报没有拿到，则发送方的窗口阻塞，如果超时，则尝试重发</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"_6-mac-子层\"> 6. MAC 子层</h2>\n<ol>\n<li>\n<p>MAC： Medium Access Control，介质访问控制子层</p>\n</li>\n<li>\n<p>用途： 用于确定多道访问中的下一个使用者</p>\n</li>\n<li>\n<p>使用原因</p>\n<blockquote>\n<p>多个网络使用者交流无序会导致混乱和信道拥塞，为了确定消息发送和传输测序，保证信道畅通。</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"_6-1-信道分配\"> 6.1 信道分配</h3>\n<ol>\n<li>\n<p>静态分配</p>\n<blockquote>\n<p>用户固定一个信道\n无法解决突发流量问题</p>\n</blockquote>\n</li>\n<li>\n<p>动态分配假设</p>\n<blockquote>\n<p>单信道是核心；\n冲突可观察是最基本的的假设</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"_6-2-多路访问协议\"> 6.2 多路访问协议</h3>\n<h4 id=\"_6-2-1-aloha\"> 6.2.1 ALOHA</h4>\n<h5 id=\"_6-2-1-1-纯-aloha\"> 6.2.1.1 纯 ALOHA</h5>\n<ol>\n<li>发送不受限制</li>\n<li>冲突的帧将损坏</li>\n<li>等待随机时间后重发</li>\n<li>最好的信道利用率为 18%</li>\n</ol>\n<h5 id=\"_6-2-1-2-分槽-aloha\"> 6.2.1.2 分槽 ALOHA</h5>\n<ol>\n<li>\n<p>用户只能在下一个时间槽的开始时刻发送帧</p>\n<blockquote>\n<p>即帧的发送必须等待时间槽</p>\n</blockquote>\n</li>\n<li>\n<p>利用率： 37% 空槽，37% 成功， 26% 冲突</p>\n</li>\n</ol>\n<h4 id=\"_6-2-2-载波侦听多路访问\"> 6.2.2 载波侦听多路访问</h4>\n<p>称为 CSMA 协议。</p>\n<p>CSMA： Carrier Sense Protocol</p>\n<h5 id=\"_6-2-2-1-坚持和非坚持\"> 6.2.2.1 坚持和非坚持</h5>\n<ol>\n<li>\n<p>1-坚持</p>\n<blockquote>\n<p>侦听信道，直到信道空闲\n冲突发生，等待随机时间后重发\n冲突的发生概率和信道带宽延迟积有关</p>\n</blockquote>\n</li>\n<li>\n<p>非坚持</p>\n<blockquote>\n<p>侦听信道，如果信道忙，随机等待\n其余与 1-坚持 相同</p>\n</blockquote>\n</li>\n</ol>\n<h5 id=\"_6-2-2-2-带冲突检测的-csma\"> 6.2.2.2 带冲突检测的 CSMA</h5>\n<p>称为 CSMA/CD （CSMA with Collision Detection）</p>\n<p>冲突检测：<strong>传输时</strong> 侦听信道，如果读回的信号不同于其发出的信号特征，则发生了冲突。</p>\n<p>与普通 CSMA 的不同：CSMA/CD 会在检测到冲突后，立即停止帧的发送；而普通的 CSMA 不会</p>\n<h4 id=\"_6-2-3-无冲突协议\"> 6.2.3 无冲突协议</h4>\n<ol>\n<li>\n<p>位图协议</p>\n<blockquote>\n<p>通过在竞争槽中的对应槽插入位来向网络中广播站的发帧意愿\n高序号的站比低序号的站平均等待时间要短</p>\n</blockquote>\n</li>\n<li>\n<p>令牌协议</p>\n<blockquote>\n<p>令牌的拥有者具有发帧权限\n发帧与否，都必须将令牌传到下一站\n不存在高序号站和低序号站的差别</p>\n</blockquote>\n</li>\n<li>\n<p>二进制倒计数</p>\n<blockquote>\n<p>通过逻辑或来得到位时间\n站通过检测位时间和地址对应位的相同与否，来确定是否获取信道</p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"_6-2-4-有限竞争协议\"> 6.2.4 有限竞争协议</h4>\n<p>低负载下，竞争有利于提高延迟；</p>\n<p>高负载下，采用无冲突技术能获取更好的信道效率。</p>\n<p>通过给某些站赋予更高的成功获取信道的概率，或者增减时间槽内的站数量来实现。</p>\n<h4 id=\"_6-2-5-无线局域网冲突问题\"> 6.2.5 无线局域网冲突问题</h4>\n<p>由于无线覆盖范围的差别，站在开始传送时，无法知道接收方是否有无线电活动。</p>\n<ol>\n<li>\n<p>隐藏终端问题</p>\n<blockquote>\n<p>由于竞争者离得太远，无法检测到潜在的竞争者</p>\n</blockquote>\n</li>\n<li>\n<p>暴露终端问题</p>\n<blockquote>\n<p>发送方相距太近，而接收方不在危险范围内，导致信道的浪费</p>\n</blockquote>\n</li>\n</ol>\n<p>解决办法称为 MACA （Multiple Access with Collision Avoidance） 冲突避免多路访问。</p>\n<h4 id=\"_6-2-6-冲突避免多路访问\"> 6.2.6 冲突避免多路访问</h4>\n<p>发送方在发送帧之前，先发送一个 RTS 短帧；</p>\n<p>接收方回报一个 CTS 短帧。</p>\n<p>其他站检测到这两个帧，保持静默。</p>\n<p>RTS： Request To Send</p>\n<p>CTS: Clear To Send</p>\n<h3 id=\"_6-3-以太网\"> 6.3 以太网</h3>\n<h4 id=\"_6-3-1-mac-协议\"> 6.3.1 MAC 协议</h4>\n<p>MAC 地址有 6 字节， 48 位</p>\n<table>\n<tr>\n<td>8 字节</td>\n<td>6</td>\n<td>6</td>\n<td>2</td>\n<td>0-1500</td>\n<td>0-46</td>\n<td>4</td>\n</tr>\n<tr>\n<td>前导码</td>\n<td>目标地址</td>\n<td>原地址</td>\n<td>类型</td>\n<td>数据</td>\n<td>填充</td>\n<td>校验和</td>\n</tr>\n</table>\n<ol>\n<li>\n<p>以太网限制有效帧至少 64 字节长</p>\n<blockquote>\n<p>防止由于帧过短导致传输时间短，从而引起冲突误判为非冲突</p>\n</blockquote>\n</li>\n<li>\n<p>二进制指数后退</p>\n<blockquote>\n<p>冲突后，在对应区间选择等待的时间槽数量 ($0 \\sim 2^i -1 $)，最大为 1023\n冲突少时，确保低延迟；\n冲突多时，确保解决问题的时间间隔</p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"_6-3-2-交换机和集线器的区别\"> 6.3.2 交换机和集线器的区别</h4>\n<p>交换机：</p>\n<ol>\n<li>全双工电缆不存在冲突问题</li>\n<li>通过缓冲来解决输出端口的冲突问题</li>\n</ol>\n<h3 id=\"_6-4-802-11-wifi-mac-协议\"> 6.4 802.11 WiFi MAC 协议</h3>\n<p>无线电存在信号弱，半双工特性，冲突代价大，所以试图去避免冲突。</p>\n<ol>\n<li>\n<p>采用冲突避免 CSMA (CSMA/CA)</p>\n<blockquote>\n<p>在发送前侦听信道，和冲突后指数后退(等待时间槽)\n通过 ACK 来确认推断冲突是否发生</p>\n</blockquote>\n</li>\n<li>\n<p>使用 NAV 来确认信道忙的时间段</p>\n<blockquote>\n<p>NAV 是在站自身管理的；\n在帧中夹带 NAV 信息，但是不单独传输 NAV</p>\n</blockquote>\n</li>\n</ol>\n<p>帧结构：</p>\n<table>\n<tr>\n<td>2 字节</td>\n<td>2</td>\n<td>6</td>\n<td>6</td>\n<td>6</td>\n<td>2</td>\n<td>0-2312</td>\n<td>4</td>\n</tr>\n<tr>\n<td>帧控制</td>\n<td>持续时间</td>\n<td>接收地址</td>\n<td>发送地址</td>\n<td>远端地址</td>\n<td>序号</td>\n<td>数据</td>\n<td>帧检验序列</td>\n</tr>\n</table>\n<p>帧控制结构：</p>\n<table>\n<tr>\n<td>2 比特</td>\n<td>2</td>\n<td>4</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>协议版本</td>\n<td>类型</td>\n<td>子类型</td>\n<td>去往 DS</td>\n<td>来自 DS</td>\n<td>更多段</td>\n<td>重传</td>\n<td>电源管理</td>\n<td>更多数据</td>\n<td>受保护的</td>\n<td>顺序</td>\n</tr>\n</table>\n<p>WiFi 定义了关联服务和重新关联服务。</p>\n<p>关联服务用于连接 AP；</p>\n<p>重新关联服务用于改变首选 AP。</p>\n<p>WiFi 连接前必须验证，使用 WPA2</p>\n<h3 id=\"_6-5-网桥\"> 6.5 网桥</h3>\n<h4 id=\"_6-5-1-网桥转发算法\"> 6.5.1 网桥转发算法</h4>\n<ol>\n<li>\n<p>如果目标地址端口和源端口相同，丢弃该帧</p>\n</li>\n<li>\n<p>如果去往目标地址的端口与源端口不同，转发</p>\n</li>\n<li>\n<p>如果目标端口未知，进行泛洪，转发到除了源端口的所有其他端口</p>\n</li>\n</ol>\n<h4 id=\"_6-5-2-生成树网桥\"> 6.5.2 生成树网桥</h4>\n<p>是为了解决由于网桥间存在 <strong>冗余链路</strong> 导致的 <strong>泛洪循环</strong> 问题。</p>\n<p>通过确定根，通过根生成一个生成树来确保泛洪算法不出现循环。</p>\n<h3 id=\"_6-6-vlan\"> 6.6 VLAN</h3>\n<p>由于安全性，负载均衡，广播风暴问题，需要将 LAN 在内部分成多个 LAN 并进行动态调整，此时就出现了 VLAN。</p>\n<p>通过虚拟的网桥来进行连接和交换， VLAN 通过在帧中加上 VLAN 协议(包括优先级和 VLAN 标识符) 来确定设备位置。</p>\n<p>VLAN 兼容旧设备，在最后的 VLAN 端口处，有 VLAN 的帧会被还原为原来的普通数据帧。</p>\n<h2 id=\"_7-交换设备\"> 7. 交换设备</h2>\n<ol>\n<li>\n<p>网关工作在 <strong>应用层和传输层</strong></p>\n</li>\n<li>\n<p>路由器工作在 <strong>网络层</strong></p>\n</li>\n<li>\n<p>网桥和交换机工作在 <strong>数据链路层</strong></p>\n</li>\n<li>\n<p>中继器，集线器工作在 <strong>物理层</strong></p>\n</li>\n</ol>\n",
      "date_published": "2017-01-08T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "复习"
      ]
    },
    {
      "title": "线性代数",
      "url": "https://wafer.li/blog-corners/old-inventory/Reviews/LinearAlgebra/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/",
      "id": "https://wafer.li/blog-corners/old-inventory/Reviews/LinearAlgebra/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/",
      "summary": "<h2 id=\"_1-行列式\"> 1. 行列式</h2>\n<h3 id=\"_1-1-性质\"> 1.1 性质</h3>\n<h4 id=\"_1-1-1-转置\"> 1.1.1 转置</h4>\n<p>行列式 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.02778em;\">D</span></span></span></span> 与它的转置行列式 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span><span style=\"margin-right:0.02778em;\">D</span><span><span><span><span style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span></span></span> 的值<strong>相等</strong></p>\n<blockquote>\n<p>将行列式的行转成列即可得到其转置行列式</p>\n</blockquote>\n",
      "content_html": "<h2 id=\"_1-行列式\"> 1. 行列式</h2>\n<h3 id=\"_1-1-性质\"> 1.1 性质</h3>\n<h4 id=\"_1-1-1-转置\"> 1.1.1 转置</h4>\n<p>行列式 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.02778em;\">D</span></span></span></span> 与它的转置行列式 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span><span style=\"margin-right:0.02778em;\">D</span><span><span><span><span style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span></span></span> 的值<strong>相等</strong></p>\n<blockquote>\n<p>将行列式的行转成列即可得到其转置行列式</p>\n</blockquote>\n\n<h4 id=\"_1-1-2-交换\"> 1.1.2 交换</h4>\n<p>交换行列式的任意两行（或者两列），行列式的值<strong>改变符号</strong>！</p>\n<h4 id=\"_1-1-3-比例\"> 1.1.3 比例</h4>\n<p>如果行列式的某行或者某列都乘以同一个数 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span style=\"margin-right:0.03148em;\">k</span></span></span></span>，那么其值等同于用数 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span style=\"margin-right:0.03148em;\">k</span></span></span></span> 乘以同一个行列式</p>\n<blockquote>\n<p>其实就是可以把 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span style=\"margin-right:0.03148em;\">k</span></span></span></span> 提到竖线外面！</p>\n</blockquote>\n<h4 id=\"_1-1-4-值为-0\"> 1.1.4 值为 0</h4>\n<ol>\n<li>如果行列式中有两行相同，那么行列式的值为 0</li>\n<li>如果某一行或者某一列的元素<strong>均为 0</strong>，那么行列式的值为 0</li>\n<li>如果某两行的元素成比例，那么行列式的值为 0</li>\n</ol>\n<h4 id=\"_1-1-5-拆分\"> 1.1.5 拆分</h4>\n<p>如果某行元素为一个<strong>和式</strong>或者<strong>差式</strong>，那么就可以把这个行列式拆分成两个行列式的<strong>和</strong>与<strong>差</strong></p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:16.740000000000002em;vertical-align:-8.120000000000001em;\"></span><span><span><span><span><span><span style=\"height:8.620000000000001em;\"><span style=\"top:-10.620000000000001em;\"><span style=\"height:5.91em;\"></span><span><span><span><span><span><span><span style=\"height:3.8620399999999995em;\"><span style=\"top:-4.66604em;\"><span style=\"height:8.0161em;\"></span><span><span>∣</span></span></span><span style=\"top:-5.26404em;\"><span style=\"height:8.0161em;\"></span><span style=\"height:6.0161em;width:0.333em;\"><svg width='0.333em' height='6.0161em' style='width:0.333em' viewBox='0 0 333 6016' preserveAspectRatio='xMinYMin'><path d='M145 0 H188 V6016 H145z M145 0 H188 V6016 H145z'/></svg></span></span><span style=\"top:-11.27214em;\"><span style=\"height:8.0161em;\"></span><span><span>∣</span></span></span></span><span>​</span></span><span><span style=\"height:3.35006em;\"><span></span></span></span></span></span></span><span><span><span><span><span><span style=\"height:3.9100000000000006em;\"><span style=\"top:-6.757500000000001em;\"><span style=\"height:3.6875em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>11</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-4.8975em;\"><span style=\"height:3.6875em;\"></span><span><span><span>⋮</span><span style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span><span style=\"top:-3.6974999999999993em;\"><span style=\"height:3.6875em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>i</span><span>1</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span>b</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>i</span><span>1</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-1.8374999999999992em;\"><span style=\"height:3.6875em;\"></span><span><span><span>⋮</span><span style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span><span style=\"top:-0.6374999999999991em;\"><span style=\"height:3.6875em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>n</span><span>1</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:3.410000000000001em;\"><span></span></span></span></span></span><span style=\"width:0.5em;\"></span><span style=\"width:0.5em;\"></span><span><span><span><span style=\"height:3.9100000000000006em;\"><span style=\"top:-6.757500000000001em;\"><span style=\"height:3.6875em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>12</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-4.8975em;\"><span style=\"height:3.6875em;\"></span><span><span><span>⋮</span><span style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span><span style=\"top:-3.6974999999999993em;\"><span style=\"height:3.6875em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>i</span><span>2</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span>b</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>i</span><span>2</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-1.8374999999999992em;\"><span style=\"height:3.6875em;\"></span><span><span><span>⋮</span><span style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span><span style=\"top:-0.6374999999999991em;\"><span style=\"height:3.6875em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>n</span><span>2</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:3.410000000000001em;\"><span></span></span></span></span></span><span style=\"width:0.5em;\"></span><span style=\"width:0.5em;\"></span><span><span><span><span style=\"height:3.9100000000000006em;\"><span style=\"top:-6.570000000000001em;\"><span style=\"height:3.5em;\"></span><span><span>⋯</span></span></span><span style=\"top:-4.71em;\"><span style=\"height:3.5em;\"></span><span></span></span><span style=\"top:-3.5099999999999993em;\"><span style=\"height:3.5em;\"></span><span><span>⋯</span></span></span><span style=\"top:-1.6499999999999992em;\"><span style=\"height:3.5em;\"></span><span></span></span><span style=\"top:-0.449999999999999em;\"><span style=\"height:3.5em;\"></span><span><span>⋯</span></span></span></span><span>​</span></span><span><span style=\"height:3.410000000000001em;\"><span></span></span></span></span></span><span style=\"width:0.5em;\"></span><span style=\"width:0.5em;\"></span><span><span><span><span style=\"height:3.9100000000000006em;\"><span style=\"top:-6.757500000000001em;\"><span style=\"height:3.6875em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>1</span><span>n</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-4.8975em;\"><span style=\"height:3.6875em;\"></span><span><span><span>⋮</span><span style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span><span style=\"top:-3.6974999999999993em;\"><span style=\"height:3.6875em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>in</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span>b</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>in</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-1.8374999999999992em;\"><span style=\"height:3.6875em;\"></span><span><span><span>⋮</span><span style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span><span style=\"top:-0.6374999999999991em;\"><span style=\"height:3.6875em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>nn</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:3.410000000000001em;\"><span></span></span></span></span></span></span></span><span><span><span><span><span style=\"height:3.8620399999999995em;\"><span style=\"top:-4.66604em;\"><span style=\"height:8.0161em;\"></span><span><span>∣</span></span></span><span style=\"top:-5.26404em;\"><span style=\"height:8.0161em;\"></span><span style=\"height:6.0161em;width:0.333em;\"><svg width='0.333em' height='6.0161em' style='width:0.333em' viewBox='0 0 333 6016' preserveAspectRatio='xMinYMin'><path d='M145 0 H188 V6016 H145z M145 0 H188 V6016 H145z'/></svg></span></span><span style=\"top:-11.27214em;\"><span style=\"height:8.0161em;\"></span><span><span>∣</span></span></span></span><span>​</span></span><span><span style=\"height:3.35006em;\"><span></span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span></span></span><span style=\"top:-6.07em;\"><span style=\"height:5.91em;\"></span><span></span></span><span style=\"top:-1.5em;\"><span style=\"height:5.91em;\"></span><span><span><span><span><span><span><span style=\"height:3.8620399999999995em;\"><span style=\"top:-4.66604em;\"><span style=\"height:8.0161em;\"></span><span><span>∣</span></span></span><span style=\"top:-5.26404em;\"><span style=\"height:8.0161em;\"></span><span style=\"height:6.0161em;width:0.333em;\"><svg width='0.333em' height='6.0161em' style='width:0.333em' viewBox='0 0 333 6016' preserveAspectRatio='xMinYMin'><path d='M145 0 H188 V6016 H145z M145 0 H188 V6016 H145z'/></svg></span></span><span style=\"top:-11.27214em;\"><span style=\"height:8.0161em;\"></span><span><span>∣</span></span></span></span><span>​</span></span><span><span style=\"height:3.35006em;\"><span></span></span></span></span></span></span><span><span><span><span><span><span style=\"height:3.9100000000000006em;\"><span style=\"top:-6.757500000000001em;\"><span style=\"height:3.6875em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>11</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-4.8975em;\"><span style=\"height:3.6875em;\"></span><span><span><span>⋮</span><span style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span><span style=\"top:-3.6974999999999993em;\"><span style=\"height:3.6875em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>i</span><span>1</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-1.8374999999999992em;\"><span style=\"height:3.6875em;\"></span><span><span><span>⋮</span><span style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span><span style=\"top:-0.6374999999999991em;\"><span style=\"height:3.6875em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>n</span><span>1</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:3.410000000000001em;\"><span></span></span></span></span></span><span style=\"width:0.5em;\"></span><span style=\"width:0.5em;\"></span><span><span><span><span style=\"height:3.9100000000000006em;\"><span style=\"top:-6.757500000000001em;\"><span style=\"height:3.6875em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>12</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-4.8975em;\"><span style=\"height:3.6875em;\"></span><span><span><span>⋮</span><span style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span><span style=\"top:-3.6974999999999993em;\"><span style=\"height:3.6875em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>i</span><span>2</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-1.8374999999999992em;\"><span style=\"height:3.6875em;\"></span><span><span><span>⋮</span><span style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span><span style=\"top:-0.6374999999999991em;\"><span style=\"height:3.6875em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>n</span><span>2</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:3.410000000000001em;\"><span></span></span></span></span></span><span style=\"width:0.5em;\"></span><span style=\"width:0.5em;\"></span><span><span><span><span style=\"height:3.9100000000000006em;\"><span style=\"top:-6.570000000000001em;\"><span style=\"height:3.5em;\"></span><span><span>⋯</span></span></span><span style=\"top:-4.71em;\"><span style=\"height:3.5em;\"></span><span></span></span><span style=\"top:-3.5099999999999993em;\"><span style=\"height:3.5em;\"></span><span><span>⋯</span></span></span><span style=\"top:-1.6499999999999992em;\"><span style=\"height:3.5em;\"></span><span></span></span><span style=\"top:-0.449999999999999em;\"><span style=\"height:3.5em;\"></span><span><span>⋯</span></span></span></span><span>​</span></span><span><span style=\"height:3.410000000000001em;\"><span></span></span></span></span></span><span style=\"width:0.5em;\"></span><span style=\"width:0.5em;\"></span><span><span><span><span style=\"height:3.9100000000000006em;\"><span style=\"top:-6.757500000000001em;\"><span style=\"height:3.6875em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>1</span><span>n</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-4.8975em;\"><span style=\"height:3.6875em;\"></span><span><span><span>⋮</span><span style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span><span style=\"top:-3.6974999999999993em;\"><span style=\"height:3.6875em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>in</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-1.8374999999999992em;\"><span style=\"height:3.6875em;\"></span><span><span><span>⋮</span><span style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span><span style=\"top:-0.6374999999999991em;\"><span style=\"height:3.6875em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>nn</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:3.410000000000001em;\"><span></span></span></span></span></span></span></span><span><span><span><span><span style=\"height:3.8620399999999995em;\"><span style=\"top:-4.66604em;\"><span style=\"height:8.0161em;\"></span><span><span>∣</span></span></span><span style=\"top:-5.26404em;\"><span style=\"height:8.0161em;\"></span><span style=\"height:6.0161em;width:0.333em;\"><svg width='0.333em' height='6.0161em' style='width:0.333em' viewBox='0 0 333 6016' preserveAspectRatio='xMinYMin'><path d='M145 0 H188 V6016 H145z M145 0 H188 V6016 H145z'/></svg></span></span><span style=\"top:-11.27214em;\"><span style=\"height:8.0161em;\"></span><span><span>∣</span></span></span></span><span>​</span></span><span><span style=\"height:3.35006em;\"><span></span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span><span><span><span><span style=\"height:3.8620399999999995em;\"><span style=\"top:-4.66604em;\"><span style=\"height:8.0161em;\"></span><span><span>∣</span></span></span><span style=\"top:-5.26404em;\"><span style=\"height:8.0161em;\"></span><span style=\"height:6.0161em;width:0.333em;\"><svg width='0.333em' height='6.0161em' style='width:0.333em' viewBox='0 0 333 6016' preserveAspectRatio='xMinYMin'><path d='M145 0 H188 V6016 H145z M145 0 H188 V6016 H145z'/></svg></span></span><span style=\"top:-11.27214em;\"><span style=\"height:8.0161em;\"></span><span><span>∣</span></span></span></span><span>​</span></span><span><span style=\"height:3.35006em;\"><span></span></span></span></span></span></span><span><span><span><span><span><span style=\"height:3.9100000000000006em;\"><span style=\"top:-6.757500000000001em;\"><span style=\"height:3.6875em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>11</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-4.8975em;\"><span style=\"height:3.6875em;\"></span><span><span><span>⋮</span><span style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span><span style=\"top:-3.6974999999999993em;\"><span style=\"height:3.6875em;\"></span><span><span><span>b</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>i</span><span>1</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-1.8374999999999992em;\"><span style=\"height:3.6875em;\"></span><span><span><span>⋮</span><span style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span><span style=\"top:-0.6374999999999991em;\"><span style=\"height:3.6875em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>n</span><span>1</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:3.410000000000001em;\"><span></span></span></span></span></span><span style=\"width:0.5em;\"></span><span style=\"width:0.5em;\"></span><span><span><span><span style=\"height:3.9100000000000006em;\"><span style=\"top:-6.757500000000001em;\"><span style=\"height:3.6875em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>12</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-4.8975em;\"><span style=\"height:3.6875em;\"></span><span><span><span>⋮</span><span style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span><span style=\"top:-3.6974999999999993em;\"><span style=\"height:3.6875em;\"></span><span><span><span>b</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>i</span><span>2</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-1.8374999999999992em;\"><span style=\"height:3.6875em;\"></span><span><span><span>⋮</span><span style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span><span style=\"top:-0.6374999999999991em;\"><span style=\"height:3.6875em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>n</span><span>2</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:3.410000000000001em;\"><span></span></span></span></span></span><span style=\"width:0.5em;\"></span><span style=\"width:0.5em;\"></span><span><span><span><span style=\"height:3.9100000000000006em;\"><span style=\"top:-6.570000000000001em;\"><span style=\"height:3.5em;\"></span><span><span>⋯</span></span></span><span style=\"top:-4.71em;\"><span style=\"height:3.5em;\"></span><span></span></span><span style=\"top:-3.5099999999999993em;\"><span style=\"height:3.5em;\"></span><span><span>⋯</span></span></span><span style=\"top:-1.6499999999999992em;\"><span style=\"height:3.5em;\"></span><span></span></span><span style=\"top:-0.449999999999999em;\"><span style=\"height:3.5em;\"></span><span><span>⋯</span></span></span></span><span>​</span></span><span><span style=\"height:3.410000000000001em;\"><span></span></span></span></span></span><span style=\"width:0.5em;\"></span><span style=\"width:0.5em;\"></span><span><span><span><span style=\"height:3.9100000000000006em;\"><span style=\"top:-6.757500000000001em;\"><span style=\"height:3.6875em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>1</span><span>n</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-4.8975em;\"><span style=\"height:3.6875em;\"></span><span><span><span>⋮</span><span style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span><span style=\"top:-3.6974999999999993em;\"><span style=\"height:3.6875em;\"></span><span><span><span>b</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>in</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-1.8374999999999992em;\"><span style=\"height:3.6875em;\"></span><span><span><span>⋮</span><span style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span><span style=\"top:-0.6374999999999991em;\"><span style=\"height:3.6875em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>nn</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:3.410000000000001em;\"><span></span></span></span></span></span></span></span><span><span><span><span><span style=\"height:3.8620399999999995em;\"><span style=\"top:-4.66604em;\"><span style=\"height:8.0161em;\"></span><span><span>∣</span></span></span><span style=\"top:-5.26404em;\"><span style=\"height:8.0161em;\"></span><span style=\"height:6.0161em;width:0.333em;\"><svg width='0.333em' height='6.0161em' style='width:0.333em' viewBox='0 0 333 6016' preserveAspectRatio='xMinYMin'><path d='M145 0 H188 V6016 H145z M145 0 H188 V6016 H145z'/></svg></span></span><span style=\"top:-11.27214em;\"><span style=\"height:8.0161em;\"></span><span><span>∣</span></span></span></span><span>​</span></span><span><span style=\"height:3.35006em;\"><span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:8.120000000000001em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<h4 id=\"_1-1-6-变换\"> 1.1.6 变换</h4>\n<p>将行列式的某一行的所有元素都乘以同一个数以后加到另一行的对应元素上去，所得行列式仍然为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.02778em;\">D</span></span></span></span></p>\n<blockquote>\n<p>这里指的是行列式本身都不会变，包括其余子式\n注意，产生改变的是<strong>另一行</strong>，而不是乘上数的那一行</p>\n</blockquote>\n<h4 id=\"_1-1-7-余子式相关\"> 1.1.7 余子式相关</h4>\n<p>划去某个元素的所在行和所在列之后，留下的行列式称为元素的余子式</p>\n<p>例如</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:3.6120399999999995em;vertical-align:-1.5500299999999998em;\"></span><span><span><span><span><span><span style=\"height:2.06201em;\"><span style=\"top:-2.86601em;\"><span style=\"height:4.41604em;\"></span><span><span>∣</span></span></span><span style=\"top:-3.46401em;\"><span style=\"height:4.41604em;\"></span><span style=\"height:2.4160399999999997em;width:0.333em;\"><svg width='0.333em' height='2.4160399999999997em' style='width:0.333em' viewBox='0 0 333 2416' preserveAspectRatio='xMinYMin'><path d='M145 0 H188 V2416 H145z M145 0 H188 V2416 H145z'/></svg></span></span><span style=\"top:-5.87205em;\"><span style=\"height:4.41604em;\"></span><span><span>∣</span></span></span></span><span>​</span></span><span><span style=\"height:1.5500299999999998em;\"><span></span></span></span></span></span></span><span><span><span><span><span><span style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span><span style=\"top:-3.0099999999999993em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span><span style=\"top:-1.8099999999999994em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span><span style=\"width:0.5em;\"></span><span style=\"width:0.5em;\"></span><span><span><span><span style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span style=\"height:3em;\"></span><span><span>x</span></span></span><span style=\"top:-3.0099999999999993em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.03588em;\">y</span></span></span><span style=\"top:-1.8099999999999994em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.04398em;\">z</span></span></span></span><span>​</span></span><span><span style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span><span style=\"width:0.5em;\"></span><span style=\"width:0.5em;\"></span><span><span><span><span style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span style=\"height:3em;\"></span><span><span><span>x</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.0099999999999993em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.03588em;\">y</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-1.8099999999999994em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.04398em;\">z</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span></span></span><span><span><span><span><span style=\"height:2.06201em;\"><span style=\"top:-2.86601em;\"><span style=\"height:4.41604em;\"></span><span><span>∣</span></span></span><span style=\"top:-3.46401em;\"><span style=\"height:4.41604em;\"></span><span style=\"height:2.4160399999999997em;width:0.333em;\"><svg width='0.333em' height='2.4160399999999997em' style='width:0.333em' viewBox='0 0 333 2416' preserveAspectRatio='xMinYMin'><path d='M145 0 H188 V2416 H145z M145 0 H188 V2416 H145z'/></svg></span></span><span style=\"top:-5.87205em;\"><span style=\"height:4.41604em;\"></span><span><span>∣</span></span></span></span><span>​</span></span><span><span style=\"height:1.5500299999999998em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>划除第一个 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1</span></span></span></span> 的所在行和所在列之后:</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:2.41202em;vertical-align:-0.9500199999999999em;\"></span><span><span><span><span><span><span style=\"height:1.462em;\"><span style=\"top:-2.266em;\"><span style=\"height:3.21602em;\"></span><span><span>∣</span></span></span><span style=\"top:-2.864em;\"><span style=\"height:3.21602em;\"></span><span style=\"height:1.2160199999999999em;width:0.333em;\"><svg width='0.333em' height='1.2160199999999999em' style='width:0.333em' viewBox='0 0 333 1216' preserveAspectRatio='xMinYMin'><path d='M145 0 H188 V1216 H145z M145 0 H188 V1216 H145z'/></svg></span></span><span style=\"top:-4.07202em;\"><span style=\"height:3.21602em;\"></span><span><span>∣</span></span></span></span><span>​</span></span><span><span style=\"height:0.9500199999999999em;\"><span></span></span></span></span></span></span><span><span><span><span><span><span style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.03588em;\">y</span></span></span><span style=\"top:-2.4099999999999997em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.04398em;\">z</span></span></span></span><span>​</span></span><span><span style=\"height:0.9500000000000004em;\"><span></span></span></span></span></span><span style=\"width:0.5em;\"></span><span style=\"width:0.5em;\"></span><span><span><span><span style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.03588em;\">y</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-2.4099999999999997em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.04398em;\">z</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:0.9500000000000004em;\"><span></span></span></span></span></span></span></span><span><span><span><span><span style=\"height:1.462em;\"><span style=\"top:-2.266em;\"><span style=\"height:3.21602em;\"></span><span><span>∣</span></span></span><span style=\"top:-2.864em;\"><span style=\"height:3.21602em;\"></span><span style=\"height:1.2160199999999999em;width:0.333em;\"><svg width='0.333em' height='1.2160199999999999em' style='width:0.333em' viewBox='0 0 333 1216' preserveAspectRatio='xMinYMin'><path d='M145 0 H188 V1216 H145z M145 0 H188 V1216 H145z'/></svg></span></span><span style=\"top:-4.07202em;\"><span style=\"height:3.21602em;\"></span><span><span>∣</span></span></span></span><span>​</span></span><span><span style=\"height:0.9500199999999999em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>即为第一个 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1</span></span></span></span> 的余子式，记为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span><span style=\"margin-right:0.10903em;\">M</span><span><span><span><span style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span style=\"margin-right:0.05724em;\">ij</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span>；</p>\n<p>带上正负号后叫做<strong>代数余子式</strong>，记为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span style=\"margin-right:0.05724em;\">ij</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span></p>\n<p>则有</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span style=\"margin-right:0.05724em;\">ij</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.160772em;vertical-align:-0.286108em;\"></span><span>(</span><span>−</span><span>1</span><span><span>)</span><span><span><span><span style=\"height:0.874664em;\"><span style=\"top:-3.1130000000000004em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>i</span><span>+</span><span style=\"margin-right:0.05724em;\">j</span></span></span></span></span></span></span></span></span><span><span style=\"margin-right:0.10903em;\">M</span><span><span><span><span style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span style=\"margin-right:0.05724em;\">ij</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<p><strong>特别要注意题意，给出和要求的到底是余子式还是代数余子式</strong></p>\n<p>定理</p>\n<ol>\n<li>\n<p>行列式等于它的任一行（列）的个元素与其对应的<strong>代数余子式</strong>的<strong>乘积之和</strong></p>\n<blockquote>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span style=\"margin-right:0.02778em;\">D</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span>a</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>i</span><span>1</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span>A</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>i</span><span>1</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span>a</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>i</span><span>2</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span>A</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>i</span><span>2</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span>⋯</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span>a</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>in</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span>A</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>in</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n</blockquote>\n<blockquote>\n<p>据此可以将行列式进行<strong>降阶计算</strong>。</p>\n</blockquote>\n</li>\n<li>\n<p>行列式的某一行的元素与另一行的对应元素的<strong>代数余子式</strong>的乘积之和等于 0</p>\n<blockquote>\n<p>如第一行的<strong>元素</strong>和第三行的元素的<strong>代数余子式</strong>的<strong>乘积之和</strong>为 0</p>\n</blockquote>\n<p>这是一个很重要的等价关系，有关行列式的余子式相关计算都会用到</p>\n</li>\n</ol>\n<h4 id=\"_1-1-8-范德蒙德行列式\"> 1.1.8 范德蒙德行列式</h4>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:7.860000000000001em;vertical-align:-3.6799999999999997em;\"></span><span><span><span><span><span><span style=\"height:4.162044999999999em;\"><span style=\"top:-4.966044999999999em;\"><span style=\"height:8.616109999999999em;\"></span><span><span>∣</span></span></span><span style=\"top:-5.564044999999999em;\"><span style=\"height:8.616109999999999em;\"></span><span style=\"height:6.616109999999999em;width:0.333em;\"><svg width='0.333em' height='6.616109999999999em' style='width:0.333em' viewBox='0 0 333 6616' preserveAspectRatio='xMinYMin'><path d='M145 0 H188 V6616 H145z M145 0 H188 V6616 H145z'/></svg></span></span><span style=\"top:-12.172154999999998em;\"><span style=\"height:8.616109999999999em;\"></span><span><span>∣</span></span></span></span><span>​</span></span><span><span style=\"height:3.6500649999999997em;\"><span></span></span></span></span></span></span><span><span><span><span><span><span style=\"height:4.1800000000000015em;\"><span style=\"top:-7.027500000000001em;\"><span style=\"height:3.6875em;\"></span><span><span>1</span></span></span><span style=\"top:-5.8275000000000015em;\"><span style=\"height:3.6875em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-4.627500000000001em;\"><span style=\"height:3.6875em;\"></span><span><span><span><span><span>a</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.4275000000000007em;\"><span style=\"height:3.6875em;\"></span><span><span><span><span><span>a</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>3</span></span></span></span></span></span></span></span></span></span><span style=\"top:-1.5675000000000006em;\"><span style=\"height:3.6875em;\"></span><span><span><span>⋮</span><span style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span><span style=\"top:-0.3675000000000003em;\"><span style=\"height:3.6875em;\"></span><span><span><span><span><span>a</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>n</span><span>−</span><span>1</span></span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:3.6799999999999997em;\"><span></span></span></span></span></span><span style=\"width:0.5em;\"></span><span style=\"width:0.5em;\"></span><span><span><span><span style=\"height:4.1800000000000015em;\"><span style=\"top:-7.027500000000001em;\"><span style=\"height:3.6875em;\"></span><span><span>1</span></span></span><span style=\"top:-5.8275000000000015em;\"><span style=\"height:3.6875em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-4.627500000000001em;\"><span style=\"height:3.6875em;\"></span><span><span><span><span><span>a</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.4275000000000007em;\"><span style=\"height:3.6875em;\"></span><span><span><span><span><span>a</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>3</span></span></span></span></span></span></span></span></span></span><span style=\"top:-1.5675000000000006em;\"><span style=\"height:3.6875em;\"></span><span><span><span>⋮</span><span style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span><span style=\"top:-0.3675000000000003em;\"><span style=\"height:3.6875em;\"></span><span><span><span><span><span>a</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>n</span><span>−</span><span>1</span></span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:3.6799999999999997em;\"><span></span></span></span></span></span><span style=\"width:0.5em;\"></span><span style=\"width:0.5em;\"></span><span><span><span><span style=\"height:4.1800000000000015em;\"><span style=\"top:-7.027500000000001em;\"><span style=\"height:3.6875em;\"></span><span><span>⋯</span></span></span><span style=\"top:-5.8275000000000015em;\"><span style=\"height:3.6875em;\"></span><span><span>⋯</span></span></span><span style=\"top:-4.627500000000001em;\"><span style=\"height:3.6875em;\"></span><span><span>⋯</span></span></span><span style=\"top:-3.4275000000000007em;\"><span style=\"height:3.6875em;\"></span><span><span>⋯</span></span></span><span style=\"top:-1.5675000000000006em;\"><span style=\"height:3.6875em;\"></span><span><span><span>⋮</span><span style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span><span style=\"top:-0.3675000000000003em;\"><span style=\"height:3.6875em;\"></span><span><span>⋯</span></span></span></span><span>​</span></span><span><span style=\"height:3.6799999999999997em;\"><span></span></span></span></span></span><span style=\"width:0.5em;\"></span><span style=\"width:0.5em;\"></span><span><span><span><span style=\"height:4.1800000000000015em;\"><span style=\"top:-7.027500000000001em;\"><span style=\"height:3.6875em;\"></span><span><span>1</span></span></span><span style=\"top:-5.8275000000000015em;\"><span style=\"height:3.6875em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-4.627500000000001em;\"><span style=\"height:3.6875em;\"></span><span><span><span><span><span>a</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.4275000000000007em;\"><span style=\"height:3.6875em;\"></span><span><span><span><span><span>a</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>3</span></span></span></span></span></span></span></span></span></span><span style=\"top:-1.5675000000000006em;\"><span style=\"height:3.6875em;\"></span><span><span><span>⋮</span><span style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span><span style=\"top:-0.3675000000000003em;\"><span style=\"height:3.6875em;\"></span><span><span><span><span><span>a</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>n</span><span>−</span><span>1</span></span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:3.6799999999999997em;\"><span></span></span></span></span></span></span></span><span><span><span><span><span style=\"height:4.162044999999999em;\"><span style=\"top:-4.966044999999999em;\"><span style=\"height:8.616109999999999em;\"></span><span><span>∣</span></span></span><span style=\"top:-5.564044999999999em;\"><span style=\"height:8.616109999999999em;\"></span><span style=\"height:6.616109999999999em;width:0.333em;\"><svg width='0.333em' height='6.616109999999999em' style='width:0.333em' viewBox='0 0 333 6616' preserveAspectRatio='xMinYMin'><path d='M145 0 H188 V6616 H145z M145 0 H188 V6616 H145z'/></svg></span></span><span style=\"top:-12.172154999999998em;\"><span style=\"height:8.616109999999999em;\"></span><span><span>∣</span></span></span></span><span>​</span></span><span><span style=\"height:3.6500649999999997em;\"><span></span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:2.463782em;vertical-align:-1.413777em;\"></span><span><span><span><span style=\"height:1.050005em;\"><span style=\"top:-1.8723309999999997em;margin-left:0em;\"><span style=\"height:3.05em;\"></span><span><span><span>1</span><span>≤</span><span style=\"margin-right:0.05724em;\">j</span><span>&lt;</span><span>i</span><span>≤</span><span>n</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span style=\"height:3.05em;\"></span><span><span>∏</span></span></span></span><span>​</span></span><span><span style=\"height:1.413777em;\"><span></span></span></span></span></span><span>(</span><span><span>a</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span><span>a</span><span><span><span><span style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.05724em;\">j</span></span></span></span><span>​</span></span><span><span style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span>)</span></span></span></span></span></p>\n<blockquote>\n<p>注意，结果的展开等于</p>\n</blockquote>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>(</span><span><span>a</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span><span>a</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span>(</span><span><span>a</span><span><span><span><span style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>n</span><span>−</span><span>1</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span><span>a</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>⋯</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>(</span><span><span>a</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:2.463782em;vertical-align:-1.413777em;\"></span><span><span>a</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span><span><span style=\"height:1.050005em;\"><span style=\"top:-1.8723309999999997em;margin-left:0em;\"><span style=\"height:3.05em;\"></span><span><span><span>2</span><span>≤</span><span style=\"margin-right:0.05724em;\">j</span><span>&lt;</span><span>i</span><span>≤</span><span>n</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span style=\"height:3.05em;\"></span><span><span>∏</span></span></span></span><span>​</span></span><span><span style=\"height:1.413777em;\"><span></span></span></span></span></span><span>(</span><span><span>a</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span><span>a</span><span><span><span><span style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.05724em;\">j</span></span></span></span><span>​</span></span><span><span style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span>)</span></span></span></span></span></p>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.65952em;vertical-align:0em;\"></span><span>i</span></span></span></span> 和 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.05724em;\">j</span></span></span></span> 并不是同时增长，而是<strong>嵌套式增长</strong></p>\n<p><strong>通常用于求根计算，找准 1 次项的行即可</strong></p>\n<h4 id=\"_1-1-9-克拉默法则\"> 1.1.9 克拉默法则</h4>\n<p>线性方程组的<strong>零解问题</strong>，找克拉默法则</p>\n<p>若 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span>n</span></span></span></span> 个方程 n 个未知量的非齐次线性方程组</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:6.252000000000001em;vertical-align:-2.876em;\"></span><span><span><span><span><span><span style=\"height:3.25002em;\"><span style=\"top:-1.36599em;\"><span style=\"height:3.216em;\"></span><span><span>⎩</span></span></span><span style=\"top:-1.35799em;\"><span style=\"height:3.216em;\"></span><span style=\"height:1.2160000000000002em;width:0.889em;\"><svg width='0.889em' height='1.2160000000000002em' style='width:0.889em' viewBox='0 0 889 1216' preserveAspectRatio='xMinYMin'><path d='M384 0 H504 V1216 H384z M384 0 H504 V1216 H384z'/></svg></span></span><span style=\"top:-3.2160100000000003em;\"><span style=\"height:3.216em;\"></span><span><span>⎨</span></span></span><span style=\"top:-4.35801em;\"><span style=\"height:3.216em;\"></span><span style=\"height:1.2160000000000002em;width:0.889em;\"><svg width='0.889em' height='1.2160000000000002em' style='width:0.889em' viewBox='0 0 889 1216' preserveAspectRatio='xMinYMin'><path d='M384 0 H504 V1216 H384z M384 0 H504 V1216 H384z'/></svg></span></span><span style=\"top:-5.56602em;\"><span style=\"height:3.216em;\"></span><span><span>⎧</span></span></span></span><span>​</span></span><span><span style=\"height:2.75002em;\"><span></span></span></span></span></span></span><span><span><span><span><span><span style=\"height:3.3760000000000003em;\"><span style=\"top:-6.0555em;\"><span style=\"height:3.6875em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>11</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span>x</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>a</span><span><span>12</span></span><span><span>x</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>⋯</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span>a</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>1</span><span>n</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span>x</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span>b</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-4.615500000000001em;\"><span style=\"height:3.6875em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>11</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span>x</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>a</span><span><span>12</span></span><span><span>x</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>⋯</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span>a</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>1</span><span>n</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span>x</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span>b</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-2.6835000000000004em;\"><span style=\"height:3.6875em;\"></span><span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span><span>⋮</span><span style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span><span style=\"top:-1.2435em;\"><span style=\"height:3.6875em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>11</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span>x</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>a</span><span><span>12</span></span><span><span>x</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>⋯</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span>a</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>1</span><span>n</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span>x</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span>b</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:2.876em;\"><span></span></span></span></span></span></span></span><span></span></span></span></span></span></span></p>\n<p>的系数行列式 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.02778em;\">D</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span>d</span><span>e</span><span>t</span><span>(</span><span><span>a</span><span><span><span><span style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span style=\"margin-right:0.05724em;\">ij</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span><span><span><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span><span><span></span></span></span><span></span></span></span></span></span><span>=</span></span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0</span></span></span></span>\n则方程组必有唯一解</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span><span>x</span><span><span><span><span style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.05724em;\">j</span></span></span></span><span>​</span></span><span><span style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:2.04633em;vertical-align:-0.686em;\"></span><span><span></span><span><span><span><span style=\"height:1.36033em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.02778em;\">D</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.02778em;\">D</span><span><span><span><span style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.05724em;\">j</span></span></span></span><span>​</span></span><span><span style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.05724em;\">j</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span>1</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>2</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>⋯</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.16666666666666666em;\"></span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>n</span><span>.</span></span></span></span></span></p>\n<p><strong>若齐次线性方程组有非零解，则其系数行列式 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.02778em;\">D</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0</span></span></span></span></strong></p>\n<h3 id=\"_1-2-计算\"> 1.2 计算</h3>\n<p>通常有两种计算方法，一是<strong>直接用定义地算</strong>（交叉相乘等），二是<strong>经过变换之后降阶计算</strong></p>\n<p>通常是将式子变换成<strong>某一列的开头为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1</span></span></span></span>，其余全为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0</span></span></span></span></strong>，然后按照行列式的展开原则。</p>\n<p>下面讲一些特殊题型的解法。</p>\n<h4 id=\"_1-2-1-1-型\"> 1.2.1 &quot;1 + 型&quot;</h4>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:5.459999999999999em;vertical-align:-2.4799999999999995em;\"></span><span><span><span><span><span><span style=\"height:2.962024999999999em;\"><span style=\"top:-3.766024999999999em;\"><span style=\"height:6.216069999999998em;\"></span><span><span>∣</span></span></span><span style=\"top:-4.364024999999999em;\"><span style=\"height:6.216069999999998em;\"></span><span style=\"height:4.216069999999998em;width:0.333em;\"><svg width='0.333em' height='4.216069999999998em' style='width:0.333em' viewBox='0 0 333 4216' preserveAspectRatio='xMinYMin'><path d='M145 0 H188 V4216 H145z M145 0 H188 V4216 H145z'/></svg></span></span><span style=\"top:-8.572094999999997em;\"><span style=\"height:6.216069999999998em;\"></span><span><span>∣</span></span></span></span><span>​</span></span><span><span style=\"height:2.4500449999999994em;\"><span></span></span></span></span></span></span><span><span><span><span><span><span style=\"height:2.9799999999999995em;\"><span style=\"top:-5.8275em;\"><span style=\"height:3.6875em;\"></span><span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span>a</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-4.6275em;\"><span style=\"height:3.6875em;\"></span><span><span>1</span></span></span><span style=\"top:-2.7674999999999996em;\"><span style=\"height:3.6875em;\"></span><span><span><span>⋮</span><span style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span><span style=\"top:-1.5675000000000006em;\"><span style=\"height:3.6875em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:2.4799999999999995em;\"><span></span></span></span></span></span><span style=\"width:0.5em;\"></span><span style=\"width:0.5em;\"></span><span><span><span><span style=\"height:2.9799999999999995em;\"><span style=\"top:-5.8275em;\"><span style=\"height:3.6875em;\"></span><span><span>1</span></span></span><span style=\"top:-4.6275em;\"><span style=\"height:3.6875em;\"></span><span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span>a</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-2.7674999999999996em;\"><span style=\"height:3.6875em;\"></span><span><span><span>⋮</span><span style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span><span style=\"top:-1.5675000000000006em;\"><span style=\"height:3.6875em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:2.4799999999999995em;\"><span></span></span></span></span></span><span style=\"width:0.5em;\"></span><span style=\"width:0.5em;\"></span><span><span><span><span style=\"height:2.9799999999999995em;\"><span style=\"top:-5.64em;\"><span style=\"height:3.5em;\"></span><span><span>⋯</span></span></span><span style=\"top:-4.44em;\"><span style=\"height:3.5em;\"></span><span><span>⋯</span></span></span><span style=\"top:-2.5799999999999996em;\"><span style=\"height:3.5em;\"></span><span></span></span><span style=\"top:-1.3800000000000006em;\"><span style=\"height:3.5em;\"></span><span><span>⋯</span></span></span></span><span>​</span></span><span><span style=\"height:2.4799999999999995em;\"><span></span></span></span></span></span><span style=\"width:0.5em;\"></span><span style=\"width:0.5em;\"></span><span><span><span><span style=\"height:2.9799999999999995em;\"><span style=\"top:-5.8275em;\"><span style=\"height:3.6875em;\"></span><span><span>1</span></span></span><span style=\"top:-4.6275em;\"><span style=\"height:3.6875em;\"></span><span><span>1</span></span></span><span style=\"top:-2.7674999999999996em;\"><span style=\"height:3.6875em;\"></span><span><span><span>⋮</span><span style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span><span style=\"top:-1.5675000000000006em;\"><span style=\"height:3.6875em;\"></span><span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span>a</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:2.4799999999999995em;\"><span></span></span></span></span></span></span></span><span><span><span><span><span style=\"height:2.962024999999999em;\"><span style=\"top:-3.766024999999999em;\"><span style=\"height:6.216069999999998em;\"></span><span><span>∣</span></span></span><span style=\"top:-4.364024999999999em;\"><span style=\"height:6.216069999999998em;\"></span><span style=\"height:4.216069999999998em;width:0.333em;\"><svg width='0.333em' height='4.216069999999998em' style='width:0.333em' viewBox='0 0 333 4216' preserveAspectRatio='xMinYMin'><path d='M145 0 H188 V4216 H145z M145 0 H188 V4216 H145z'/></svg></span></span><span style=\"top:-8.572094999999997em;\"><span style=\"height:6.216069999999998em;\"></span><span><span>∣</span></span></span></span><span>​</span></span><span><span style=\"height:2.4500449999999994em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>注意到每列元素之和为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1.2902079999999998em;vertical-align:-0.44509999999999994em;\"></span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span><span><span><span style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>i</span><span>=</span><span>1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span></span><span><span><span><span style=\"height:0.845108em;\"><span style=\"top:-2.655em;\"><span style=\"height:3em;\"></span><span><span><span><span>a</span><span><span><span><span style=\"height:0.3280857142857143em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span style=\"height:2.5em;\"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span style=\"height:3em;\"></span><span><span><span>1</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.44509999999999994em;\"><span></span></span></span></span></span><span></span></span></span></span></span>，所以变化并提出公因式，得</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:5.640416em;vertical-align:-2.570208em;\"></span><span><span><span><span><span><span style=\"height:2.962024999999999em;\"><span style=\"top:-3.766024999999999em;\"><span style=\"height:6.216069999999998em;\"></span><span><span>∣</span></span></span><span style=\"top:-4.364024999999999em;\"><span style=\"height:6.216069999999998em;\"></span><span style=\"height:4.216069999999998em;width:0.333em;\"><svg width='0.333em' height='4.216069999999998em' style='width:0.333em' viewBox='0 0 333 4216' preserveAspectRatio='xMinYMin'><path d='M145 0 H188 V4216 H145z M145 0 H188 V4216 H145z'/></svg></span></span><span style=\"top:-8.572094999999997em;\"><span style=\"height:6.216069999999998em;\"></span><span><span>∣</span></span></span></span><span>​</span></span><span><span style=\"height:2.4500449999999994em;\"><span></span></span></span></span></span></span><span><span><span><span><span><span style=\"height:3.070208em;\"><span style=\"top:-5.917708em;\"><span style=\"height:3.6875em;\"></span><span><span>1</span></span></span><span style=\"top:-4.7126em;\"><span style=\"height:3.6875em;\"></span><span><span><span><span></span><span><span><span><span style=\"height:0.845108em;\"><span style=\"top:-2.655em;\"><span style=\"height:3em;\"></span><span><span><span><span>a</span><span><span><span><span style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span style=\"height:2.5em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span style=\"height:3em;\"></span><span><span><span>1</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.44509999999999994em;\"><span></span></span></span></span></span><span></span></span></span></span></span><span style=\"top:-2.7674999999999996em;\"><span style=\"height:3.6875em;\"></span><span><span><span>⋮</span><span style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span><span style=\"top:-1.562392em;\"><span style=\"height:3.6875em;\"></span><span><span><span><span></span><span><span><span><span style=\"height:0.845108em;\"><span style=\"top:-2.655em;\"><span style=\"height:3em;\"></span><span><span><span><span>a</span><span><span><span><span style=\"height:0.16454285714285719em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span style=\"height:2.5em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span style=\"height:3em;\"></span><span><span><span>1</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.44509999999999994em;\"><span></span></span></span></span></span><span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:2.570208em;\"><span></span></span></span></span></span><span style=\"width:0.5em;\"></span><span style=\"width:0.5em;\"></span><span><span><span><span style=\"height:3.070208em;\"><span style=\"top:-5.917708em;\"><span style=\"height:3.6875em;\"></span><span><span>1</span></span></span><span style=\"top:-4.7126em;\"><span style=\"height:3.6875em;\"></span><span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span><span></span><span><span><span><span style=\"height:0.845108em;\"><span style=\"top:-2.655em;\"><span style=\"height:3em;\"></span><span><span><span><span>a</span><span><span><span><span style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span style=\"height:2.5em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span style=\"height:3em;\"></span><span><span><span>1</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.44509999999999994em;\"><span></span></span></span></span></span><span></span></span></span></span></span><span style=\"top:-2.7674999999999996em;\"><span style=\"height:3.6875em;\"></span><span><span><span>⋮</span><span style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span><span style=\"top:-1.562392em;\"><span style=\"height:3.6875em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:2.570208em;\"><span></span></span></span></span></span><span style=\"width:0.5em;\"></span><span style=\"width:0.5em;\"></span><span><span><span><span style=\"height:3.070208em;\"><span style=\"top:-5.730208em;\"><span style=\"height:3.5em;\"></span><span><span>⋯</span></span></span><span style=\"top:-4.5251em;\"><span style=\"height:3.5em;\"></span><span><span>⋯</span></span></span><span style=\"top:-2.5799999999999996em;\"><span style=\"height:3.5em;\"></span><span></span></span><span style=\"top:-1.374892em;\"><span style=\"height:3.5em;\"></span><span><span>⋯</span></span></span></span><span>​</span></span><span><span style=\"height:2.570208em;\"><span></span></span></span></span></span><span style=\"width:0.5em;\"></span><span style=\"width:0.5em;\"></span><span><span><span><span style=\"height:3.070208em;\"><span style=\"top:-5.917708em;\"><span style=\"height:3.6875em;\"></span><span><span>1</span></span></span><span style=\"top:-4.7126em;\"><span style=\"height:3.6875em;\"></span><span><span>1</span></span></span><span style=\"top:-2.7674999999999996em;\"><span style=\"height:3.6875em;\"></span><span><span><span>⋮</span><span style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span><span style=\"top:-1.562392em;\"><span style=\"height:3.6875em;\"></span><span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span><span></span><span><span><span><span style=\"height:0.845108em;\"><span style=\"top:-2.655em;\"><span style=\"height:3em;\"></span><span><span><span><span>a</span><span><span><span><span style=\"height:0.16454285714285719em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span style=\"height:2.5em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span style=\"height:3em;\"></span><span><span><span>1</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.44509999999999994em;\"><span></span></span></span></span></span><span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:2.570208em;\"><span></span></span></span></span></span></span></span><span><span><span><span><span style=\"height:2.962024999999999em;\"><span style=\"top:-3.766024999999999em;\"><span style=\"height:6.216069999999998em;\"></span><span><span>∣</span></span></span><span style=\"top:-4.364024999999999em;\"><span style=\"height:6.216069999999998em;\"></span><span style=\"height:4.216069999999998em;width:0.333em;\"><svg width='0.333em' height='4.216069999999998em' style='width:0.333em' viewBox='0 0 333 4216' preserveAspectRatio='xMinYMin'><path d='M145 0 H188 V4216 H145z M145 0 H188 V4216 H145z'/></svg></span></span><span style=\"top:-8.572094999999997em;\"><span style=\"height:6.216069999999998em;\"></span><span><span>∣</span></span></span></span><span>​</span></span><span><span style=\"height:2.4500449999999994em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>分别乘上 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.2902079999999998em;vertical-align:-0.44509999999999994em;\"></span><span>−</span><span><span><span></span><span><span><span><span style=\"height:0.845108em;\"><span style=\"top:-2.655em;\"><span style=\"height:3em;\"></span><span><span><span><span>a</span><span><span><span><span style=\"height:0.3280857142857143em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span style=\"height:2.5em;\"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span style=\"height:3em;\"></span><span><span><span>1</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.44509999999999994em;\"><span></span></span></span></span></span><span></span></span></span></span></span></span> 后加到第 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.65952em;vertical-align:0em;\"></span><span>i</span></span></span></span> 行得</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span><span>a</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span>a</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span>⋯</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>(</span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:2.929066em;vertical-align:-1.277669em;\"></span><span><span><span><span style=\"height:1.6513970000000002em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span style=\"height:3.05em;\"></span><span><span><span>i</span><span>=</span><span>1</span></span></span></span><span style=\"top:-3.050005em;\"><span style=\"height:3.05em;\"></span><span><span>∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span style=\"height:3.05em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:1.277669em;\"><span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.3139999999999996em;\"><span style=\"height:3em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.8360000000000001em;\"><span></span></span></span></span></span><span></span></span></span><span>)</span></span></span></span></span></p>\n<h4 id=\"_1-2-2-类似范德蒙德类型\"> 1.2.2 类似范德蒙德类型</h4>\n<blockquote>\n<p>构造范德蒙德行列式来解</p>\n</blockquote>\n<p>形如</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:4.812059999999999em;vertical-align:-2.1500399999999997em;\"></span><span><span><span><span><span><span style=\"height:2.662019999999999em;\"><span style=\"top:-3.4660199999999994em;\"><span style=\"height:5.616059999999999em;\"></span><span><span>∣</span></span></span><span style=\"top:-4.064019999999999em;\"><span style=\"height:5.616059999999999em;\"></span><span style=\"height:3.616059999999999em;width:0.333em;\"><svg width='0.333em' height='3.616059999999999em' style='width:0.333em' viewBox='0 0 333 3616' preserveAspectRatio='xMinYMin'><path d='M145 0 H188 V3616 H145z M145 0 H188 V3616 H145z'/></svg></span></span><span style=\"top:-7.6720799999999985em;\"><span style=\"height:5.616059999999999em;\"></span><span><span>∣</span></span></span></span><span>​</span></span><span><span style=\"height:2.1500399999999997em;\"><span></span></span></span></span></span></span><span><span><span><span><span><span style=\"height:2.6500000000000004em;\"><span style=\"top:-4.8100000000000005em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span><span style=\"top:-3.61em;\"><span style=\"height:3em;\"></span><span><span>a</span></span></span><span style=\"top:-2.4099999999999997em;\"><span style=\"height:3em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-1.2099999999999997em;\"><span style=\"height:3em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>4</span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:2.1500000000000004em;\"><span></span></span></span></span></span><span style=\"width:0.5em;\"></span><span style=\"width:0.5em;\"></span><span><span><span><span style=\"height:2.6500000000000004em;\"><span style=\"top:-4.8100000000000005em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span><span style=\"top:-3.61em;\"><span style=\"height:3em;\"></span><span><span>b</span></span></span><span style=\"top:-2.4099999999999997em;\"><span style=\"height:3em;\"></span><span><span><span>b</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-1.2099999999999997em;\"><span style=\"height:3em;\"></span><span><span><span>b</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>4</span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:2.1500000000000004em;\"><span></span></span></span></span></span><span style=\"width:0.5em;\"></span><span style=\"width:0.5em;\"></span><span><span><span><span style=\"height:2.6500000000000004em;\"><span style=\"top:-4.8100000000000005em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span><span style=\"top:-3.61em;\"><span style=\"height:3em;\"></span><span><span>c</span></span></span><span style=\"top:-2.4099999999999997em;\"><span style=\"height:3em;\"></span><span><span><span>c</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-1.2099999999999997em;\"><span style=\"height:3em;\"></span><span><span><span>c</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>4</span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:2.1500000000000004em;\"><span></span></span></span></span></span><span style=\"width:0.5em;\"></span><span style=\"width:0.5em;\"></span><span><span><span><span style=\"height:2.6500000000000004em;\"><span style=\"top:-4.8100000000000005em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span><span style=\"top:-3.61em;\"><span style=\"height:3em;\"></span><span><span>d</span></span></span><span style=\"top:-2.4099999999999997em;\"><span style=\"height:3em;\"></span><span><span><span>d</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-1.2099999999999997em;\"><span style=\"height:3em;\"></span><span><span><span>d</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>4</span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:2.1500000000000004em;\"><span></span></span></span></span></span></span></span><span><span><span><span><span style=\"height:2.662019999999999em;\"><span style=\"top:-3.4660199999999994em;\"><span style=\"height:5.616059999999999em;\"></span><span><span>∣</span></span></span><span style=\"top:-4.064019999999999em;\"><span style=\"height:5.616059999999999em;\"></span><span style=\"height:3.616059999999999em;width:0.333em;\"><svg width='0.333em' height='3.616059999999999em' style='width:0.333em' viewBox='0 0 333 3616' preserveAspectRatio='xMinYMin'><path d='M145 0 H188 V3616 H145z M145 0 H188 V3616 H145z'/></svg></span></span><span style=\"top:-7.6720799999999985em;\"><span style=\"height:5.616059999999999em;\"></span><span><span>∣</span></span></span></span><span>​</span></span><span><span style=\"height:2.1500399999999997em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>构造范德蒙德行列式</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>x</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:6.012079999999999em;vertical-align:-2.75005em;\"></span><span><span><span><span><span><span style=\"height:3.2620299999999993em;\"><span style=\"top:-4.06603em;\"><span style=\"height:6.8160799999999995em;\"></span><span><span>∣</span></span></span><span style=\"top:-4.6640299999999995em;\"><span style=\"height:6.8160799999999995em;\"></span><span style=\"height:4.8160799999999995em;width:0.333em;\"><svg width='0.333em' height='4.8160799999999995em' style='width:0.333em' viewBox='0 0 333 4816' preserveAspectRatio='xMinYMin'><path d='M145 0 H188 V4816 H145z M145 0 H188 V4816 H145z'/></svg></span></span><span style=\"top:-9.472109999999999em;\"><span style=\"height:6.8160799999999995em;\"></span><span><span>∣</span></span></span></span><span>​</span></span><span><span style=\"height:2.75005em;\"><span></span></span></span></span></span></span><span><span><span><span><span><span style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span><span style=\"top:-4.21em;\"><span style=\"height:3em;\"></span><span><span>a</span></span></span><span style=\"top:-3.01em;\"><span style=\"height:3em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-1.8099999999999998em;\"><span style=\"height:3em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>3</span></span></span></span></span></span></span></span></span></span><span style=\"top:-0.6099999999999997em;\"><span style=\"height:3em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>4</span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span style=\"width:0.5em;\"></span><span style=\"width:0.5em;\"></span><span><span><span><span style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span><span style=\"top:-4.21em;\"><span style=\"height:3em;\"></span><span><span>b</span></span></span><span style=\"top:-3.01em;\"><span style=\"height:3em;\"></span><span><span><span>b</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-1.8099999999999998em;\"><span style=\"height:3em;\"></span><span><span><span>b</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>3</span></span></span></span></span></span></span></span></span></span><span style=\"top:-0.6099999999999997em;\"><span style=\"height:3em;\"></span><span><span><span>b</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>4</span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span style=\"width:0.5em;\"></span><span style=\"width:0.5em;\"></span><span><span><span><span style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span><span style=\"top:-4.21em;\"><span style=\"height:3em;\"></span><span><span>c</span></span></span><span style=\"top:-3.01em;\"><span style=\"height:3em;\"></span><span><span><span>c</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-1.8099999999999998em;\"><span style=\"height:3em;\"></span><span><span><span>c</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>3</span></span></span></span></span></span></span></span></span></span><span style=\"top:-0.6099999999999997em;\"><span style=\"height:3em;\"></span><span><span><span>c</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>4</span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span style=\"width:0.5em;\"></span><span style=\"width:0.5em;\"></span><span><span><span><span style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span><span style=\"top:-4.21em;\"><span style=\"height:3em;\"></span><span><span>d</span></span></span><span style=\"top:-3.01em;\"><span style=\"height:3em;\"></span><span><span><span>d</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-1.8099999999999998em;\"><span style=\"height:3em;\"></span><span><span><span>d</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>3</span></span></span></span></span></span></span></span></span></span><span style=\"top:-0.6099999999999997em;\"><span style=\"height:3em;\"></span><span><span><span>d</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>4</span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span style=\"width:0.5em;\"></span><span style=\"width:0.5em;\"></span><span><span><span><span style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span><span style=\"top:-4.21em;\"><span style=\"height:3em;\"></span><span><span>x</span></span></span><span style=\"top:-3.01em;\"><span style=\"height:3em;\"></span><span><span><span>x</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-1.8099999999999998em;\"><span style=\"height:3em;\"></span><span><span><span>x</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>3</span></span></span></span></span></span></span></span></span></span><span style=\"top:-0.6099999999999997em;\"><span style=\"height:3em;\"></span><span><span><span>x</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>4</span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span></span></span><span><span><span><span><span style=\"height:3.2620299999999993em;\"><span style=\"top:-4.06603em;\"><span style=\"height:6.8160799999999995em;\"></span><span><span>∣</span></span></span><span style=\"top:-4.6640299999999995em;\"><span style=\"height:6.8160799999999995em;\"></span><span style=\"height:4.8160799999999995em;width:0.333em;\"><svg width='0.333em' height='4.8160799999999995em' style='width:0.333em' viewBox='0 0 333 4816' preserveAspectRatio='xMinYMin'><path d='M145 0 H188 V4816 H145z M145 0 H188 V4816 H145z'/></svg></span></span><span style=\"top:-9.472109999999999em;\"><span style=\"height:6.8160799999999995em;\"></span><span><span>∣</span></span></span></span><span>​</span></span><span><span style=\"height:2.75005em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>则所求行列式为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span><span>x</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>3</span></span></span></span></span></span></span></span></span></span></span> 的代数余子式的 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span>−</span><span>1</span></span></span></span> 倍\n按照范德蒙德行列式展开并求出 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span><span>x</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>3</span></span></span></span></span></span></span></span></span></span></span> 的系数即可</p>\n<h2 id=\"_2-矩阵\"> 2. 矩阵</h2>\n<p>矩阵不一定是正方形的，行和列相同的矩阵被称为<strong>方阵</strong></p>\n<h3 id=\"_2-1-矩阵的四则运算\"> 2.1 矩阵的四则运算</h3>\n<h4 id=\"_2-1-1-矩阵的加和减\"> 2.1.1 矩阵的加和减</h4>\n<p>矩阵的加和减满足<strong>交换律</strong>，<strong>结合律</strong>，<strong>数乘分配律</strong></p>\n<blockquote>\n<p>矩阵的数乘是<strong>所有元素都乘以 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span style=\"margin-right:0.03148em;\">k</span></span></span></span>，和行列式不同</strong>。\n行列式只需要一行或者一列乘就可以了。\n所以后面的方阵的行列式要特别注意指数。</p>\n</blockquote>\n<h4 id=\"_2-1-2-矩阵的乘法\"> 2.1.2 矩阵的乘法</h4>\n<p>矩阵的乘法很特殊，其计算方法为：\n<strong>行元素乘以对应列元素得到新矩阵的某行某列的一个元素</strong></p>\n<p>例如：\n若 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span><span style=\"margin-right:0.05017em;\">B</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.07153em;\">C</span></span></span></span>\n矩阵 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.07153em;\">C</span></span></span></span> 的第一行第一列的元素 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span><span>c</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>11</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 等于 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span></span></span></span> 的<strong>第一行</strong>乘以 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05017em;\">B</span></span></span></span> 的<strong>第一列</strong>的<strong>乘积之和</strong></p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:12.360040000000001em;vertical-align:-5.930020000000001em;\"></span><span><span><span><span><span><span style=\"height:6.430020000000001em;\"><span style=\"top:-8.430019999999999em;\"><span style=\"height:5.58em;\"></span><span></span></span><span style=\"top:-4.21002em;\"><span style=\"height:5.58em;\"></span><span></span></span><span style=\"top:-1.5000000000000002em;\"><span style=\"height:5.58em;\"></span><span></span></span></span><span>​</span></span><span><span style=\"height:5.93002em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:6.430020000000001em;\"><span style=\"top:-8.430019999999999em;\"><span style=\"height:5.58em;\"></span><span><span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span><span><span><span><span style=\"height:2.05002em;\"><span style=\"top:-2.2500000000000004em;\"><span style=\"height:3.1550000000000002em;\"></span><span><span>⎣</span></span></span><span style=\"top:-3.3970000000000002em;\"><span style=\"height:3.1550000000000002em;\"></span><span style=\"height:0.016em;width:0.667em;\"><svg width='0.667em' height='0.016em' style='width:0.667em' viewBox='0 0 667 16' preserveAspectRatio='xMinYMin'><path d='M319 0 H403 V16 H319z M319 0 H403 V16 H319z'/></svg></span></span><span style=\"top:-4.05002em;\"><span style=\"height:3.1550000000000002em;\"></span><span><span>⎡</span></span></span></span><span>​</span></span><span><span style=\"height:1.55002em;\"><span></span></span></span></span></span></span><span><span><span><span><span><span style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span style=\"height:3em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>11</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.0099999999999993em;\"><span style=\"height:3em;\"></span><span><span>⋯</span></span></span><span style=\"top:-1.8099999999999994em;\"><span style=\"height:3em;\"></span><span><span>⋯</span></span></span></span><span>​</span></span><span><span style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span><span style=\"width:0.5em;\"></span><span style=\"width:0.5em;\"></span><span><span><span><span style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span style=\"height:3em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>12</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.0099999999999993em;\"><span style=\"height:3em;\"></span><span><span>⋯</span></span></span><span style=\"top:-1.8099999999999994em;\"><span style=\"height:3em;\"></span><span><span>⋯</span></span></span></span><span>​</span></span><span><span style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span><span style=\"width:0.5em;\"></span><span style=\"width:0.5em;\"></span><span><span><span><span style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span style=\"height:3em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>13</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.0099999999999993em;\"><span style=\"height:3em;\"></span><span><span>⋯</span></span></span><span style=\"top:-1.8099999999999994em;\"><span style=\"height:3em;\"></span><span><span>⋯</span></span></span></span><span>​</span></span><span><span style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span><span style=\"width:0.5em;\"></span><span style=\"width:0.5em;\"></span><span><span><span><span style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span style=\"height:3em;\"></span><span><span>⋯</span></span></span><span style=\"top:-3.0099999999999993em;\"><span style=\"height:3em;\"></span><span><span>⋯</span></span></span><span style=\"top:-1.8099999999999994em;\"><span style=\"height:3em;\"></span><span><span>⋯</span></span></span></span><span>​</span></span><span><span style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span><span style=\"width:0.5em;\"></span><span style=\"width:0.5em;\"></span><span><span><span><span style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span style=\"height:3em;\"></span><span><span><span>a</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>1</span><span>n</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.0099999999999993em;\"><span style=\"height:3em;\"></span><span><span>⋯</span></span></span><span style=\"top:-1.8099999999999994em;\"><span style=\"height:3em;\"></span><span><span>⋯</span></span></span></span><span>​</span></span><span><span style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span></span></span><span><span><span><span><span style=\"height:2.05002em;\"><span style=\"top:-2.2500000000000004em;\"><span style=\"height:3.1550000000000002em;\"></span><span><span>⎦</span></span></span><span style=\"top:-3.3970000000000002em;\"><span style=\"height:3.1550000000000002em;\"></span><span style=\"height:0.016em;width:0.667em;\"><svg width='0.667em' height='0.016em' style='width:0.667em' viewBox='0 0 667 16' preserveAspectRatio='xMinYMin'><path d='M263 0 H347 V16 H263z M263 0 H347 V16 H263z'/></svg></span></span><span style=\"top:-4.05002em;\"><span style=\"height:3.1550000000000002em;\"></span><span><span>⎤</span></span></span></span><span>​</span></span><span><span style=\"height:1.55002em;\"><span></span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span><span><span><span><span style=\"height:3.550045em;\"><span style=\"top:-2.611025em;\"><span style=\"height:5.01605em;\"></span><span><span>⎣</span></span></span><span style=\"top:-3.758025em;\"><span style=\"height:5.01605em;\"></span><span style=\"height:3.01605em;width:0.667em;\"><svg width='0.667em' height='3.01605em' style='width:0.667em' viewBox='0 0 667 3016' preserveAspectRatio='xMinYMin'><path d='M319 0 H403 V3016 H319z M319 0 H403 V3016 H319z'/></svg></span></span><span style=\"top:-7.4110949999999995em;\"><span style=\"height:5.01605em;\"></span><span><span>⎡</span></span></span></span><span>​</span></span><span><span style=\"height:3.050045em;\"><span></span></span></span></span></span></span><span><span><span><span><span><span style=\"height:3.5800000000000005em;\"><span style=\"top:-6.427500000000001em;\"><span style=\"height:3.6875em;\"></span><span><span><span>b</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>11</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-5.2275em;\"><span style=\"height:3.6875em;\"></span><span><span><span>b</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>21</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-4.0275em;\"><span style=\"height:3.6875em;\"></span><span><span><span>b</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>31</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-2.1675000000000004em;\"><span style=\"height:3.6875em;\"></span><span><span><span>⋮</span><span style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span><span style=\"top:-0.9675em;\"><span style=\"height:3.6875em;\"></span><span><span><span>b</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>n</span><span>1</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:3.08em;\"><span></span></span></span></span></span><span style=\"width:0.5em;\"></span><span style=\"width:0.5em;\"></span><span><span><span><span style=\"height:3.5800000000000005em;\"><span style=\"top:-6.240000000000001em;\"><span style=\"height:3.5em;\"></span><span><span>⋯</span></span></span><span style=\"top:-5.04em;\"><span style=\"height:3.5em;\"></span><span><span>⋯</span></span></span><span style=\"top:-3.84em;\"><span style=\"height:3.5em;\"></span><span><span>⋯</span></span></span><span style=\"top:-1.9800000000000006em;\"><span style=\"height:3.5em;\"></span><span></span></span><span style=\"top:-0.78em;\"><span style=\"height:3.5em;\"></span><span><span>⋯</span></span></span></span><span>​</span></span><span><span style=\"height:3.08em;\"><span></span></span></span></span></span></span></span><span><span><span><span><span style=\"height:3.550045em;\"><span style=\"top:-2.611025em;\"><span style=\"height:5.01605em;\"></span><span><span>⎦</span></span></span><span style=\"top:-3.758025em;\"><span style=\"height:5.01605em;\"></span><span style=\"height:3.01605em;width:0.667em;\"><svg width='0.667em' height='3.01605em' style='width:0.667em' viewBox='0 0 667 3016' preserveAspectRatio='xMinYMin'><path d='M263 0 H347 V3016 H263z M263 0 H347 V3016 H263z'/></svg></span></span><span style=\"top:-7.4110949999999995em;\"><span style=\"height:5.01605em;\"></span><span><span>⎤</span></span></span></span><span>​</span></span><span><span style=\"height:3.050045em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-1.4999999999999993em;\"><span style=\"height:5.58em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span><span><span><span><span style=\"height:2.05002em;\"><span style=\"top:-2.2500000000000004em;\"><span style=\"height:3.1550000000000002em;\"></span><span><span>⎣</span></span></span><span style=\"top:-3.3970000000000002em;\"><span style=\"height:3.1550000000000002em;\"></span><span style=\"height:0.016em;width:0.667em;\"><svg width='0.667em' height='0.016em' style='width:0.667em' viewBox='0 0 667 16' preserveAspectRatio='xMinYMin'><path d='M319 0 H403 V16 H319z M319 0 H403 V16 H319z'/></svg></span></span><span style=\"top:-4.05002em;\"><span style=\"height:3.1550000000000002em;\"></span><span><span>⎡</span></span></span></span><span>​</span></span><span><span style=\"height:1.55002em;\"><span></span></span></span></span></span></span><span><span><span><span><span><span style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span style=\"height:3em;\"></span><span><span><span>c</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>11</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.0099999999999993em;\"><span style=\"height:3em;\"></span><span><span>⋯</span></span></span><span style=\"top:-1.8099999999999994em;\"><span style=\"height:3em;\"></span><span><span>⋯</span></span></span></span><span>​</span></span><span><span style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span><span style=\"width:0.5em;\"></span><span style=\"width:0.5em;\"></span><span><span><span><span style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span style=\"height:3em;\"></span><span><span>⋯</span></span></span><span style=\"top:-3.0099999999999993em;\"><span style=\"height:3em;\"></span><span><span>⋯</span></span></span><span style=\"top:-1.8099999999999994em;\"><span style=\"height:3em;\"></span><span><span>⋯</span></span></span></span><span>​</span></span><span><span style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span><span style=\"width:0.5em;\"></span><span style=\"width:0.5em;\"></span><span><span><span><span style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span style=\"height:3em;\"></span><span><span>⋯</span></span></span><span style=\"top:-3.0099999999999993em;\"><span style=\"height:3em;\"></span><span><span>⋯</span></span></span><span style=\"top:-1.8099999999999994em;\"><span style=\"height:3em;\"></span><span><span>⋯</span></span></span></span><span>​</span></span><span><span style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span><span style=\"width:0.5em;\"></span><span style=\"width:0.5em;\"></span><span><span><span><span style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span style=\"height:3em;\"></span><span><span>⋯</span></span></span><span style=\"top:-3.0099999999999993em;\"><span style=\"height:3em;\"></span><span><span>⋯</span></span></span><span style=\"top:-1.8099999999999994em;\"><span style=\"height:3em;\"></span><span><span>⋯</span></span></span></span><span>​</span></span><span><span style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span><span style=\"width:0.5em;\"></span><span style=\"width:0.5em;\"></span><span><span><span><span style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span style=\"height:3em;\"></span><span><span>⋯</span></span></span><span style=\"top:-3.0099999999999993em;\"><span style=\"height:3em;\"></span><span><span>⋯</span></span></span><span style=\"top:-1.8099999999999994em;\"><span style=\"height:3em;\"></span><span><span>⋯</span></span></span></span><span>​</span></span><span><span style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span></span></span><span><span><span><span><span style=\"height:2.05002em;\"><span style=\"top:-2.2500000000000004em;\"><span style=\"height:3.1550000000000002em;\"></span><span><span>⎦</span></span></span><span style=\"top:-3.3970000000000002em;\"><span style=\"height:3.1550000000000002em;\"></span><span style=\"height:0.016em;width:0.667em;\"><svg width='0.667em' height='0.016em' style='width:0.667em' viewBox='0 0 667 16' preserveAspectRatio='xMinYMin'><path d='M263 0 H347 V16 H263z M263 0 H347 V16 H263z'/></svg></span></span><span style=\"top:-4.05002em;\"><span style=\"height:3.1550000000000002em;\"></span><span><span>⎤</span></span></span></span><span>​</span></span><span><span style=\"height:1.55002em;\"><span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:5.930020000000001em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>矩阵的乘法满足</p>\n<ol>\n<li>结合律</li>\n</ol>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>(</span><span>A</span><span style=\"margin-right:0.05017em;\">B</span><span>)</span><span style=\"margin-right:0.07153em;\">C</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>A</span><span>(</span><span style=\"margin-right:0.07153em;\">BC</span><span>)</span></span></span></span></span></p>\n<ol start=\"2\">\n<li>左分配律和右分配律</li>\n</ol>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:3.0000000000000004em;vertical-align:-1.2500000000000002em;\"></span><span><span><span><span><span><span style=\"height:1.7500000000000002em;\"><span style=\"top:-3.91em;\"><span style=\"height:3em;\"></span><span><span>A</span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.07153em;\">C</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>A</span><span style=\"margin-right:0.05017em;\">B</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>A</span><span style=\"margin-right:0.07153em;\">C</span></span></span><span style=\"top:-2.41em;\"><span style=\"height:3em;\"></span><span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.07153em;\">C</span><span>)</span><span>A</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span>A</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.07153em;\">C</span><span>A</span></span></span></span><span>​</span></span><span><span style=\"height:1.2500000000000002em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<div><pre><code>&gt; 注意保证顺序不能变，特别是在多个矩阵一起乘的时候。\n</code></pre>\n</div><p><strong>矩阵的乘法不满足交换律</strong></p>\n<h3 id=\"_2-2-矩阵的转置\"> 2.2 矩阵的转置</h3>\n<p>矩阵的转置就是<strong>行变成列</strong></p>\n<p>性质：</p>\n<ol>\n<li>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.0913309999999998em;vertical-align:-0.25em;\"></span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span><span>)</span><span><span><span><span style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span></span></span></span></p>\n</li>\n<li>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>(</span><span>A</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1.0913309999999998em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span><span>)</span><span><span><span><span style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.924661em;vertical-align:-0.08333em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span></span></span></p>\n</li>\n<li>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.0913309999999998em;vertical-align:-0.25em;\"></span><span>(</span><span style=\"margin-right:0.03148em;\">k</span><span>A</span><span><span>)</span><span><span><span><span style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span style=\"margin-right:0.03148em;\">k</span><span><span>A</span><span><span><span><span style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span></span></span></p>\n</li>\n<li>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.0913309999999998em;vertical-align:-0.25em;\"></span><span>(</span><span>A</span><span style=\"margin-right:0.05017em;\">B</span><span><span>)</span><span><span><span><span style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span><span>A</span><span><span><span><span style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span></span></span></p>\n<blockquote>\n<p>注意，乘法这里的顺序是倒过来的。</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"_2-3-方阵的行列式\"> 2.3 方阵的行列式</h3>\n<p>方阵的行列式没有什么大的要点\n需要注意的就是数乘\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>∣</span><span style=\"margin-right:0.03148em;\">k</span><span>A</span><span>∣</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span><span style=\"margin-right:0.03148em;\">k</span><span><span><span><span style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span></span></span></span></span><span>∣</span><span>A</span><span>∣</span></span></span></span></p>\n<p><strong>矩阵的积的行列式等于行列式的积</strong></p>\n<h3 id=\"_2-4-逆矩阵\"> 2.4 逆矩阵</h3>\n<h4 id=\"_2-4-1-逆矩阵的定义和判定\"> 2.4.1 逆矩阵的定义和判定</h4>\n<p>如果存在矩阵 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05017em;\">B</span></span></span></span> 使得矩阵 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span></span></span></span> 满足</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span><span style=\"margin-right:0.05017em;\">B</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span>A</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05764em;\">E</span></span></span></span></span></p>\n<p>则 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span></span></span></span> 为可逆矩阵</p>\n<p><strong>在证明时抓住已知条件，往 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05764em;\">E</span></span></span></span> 方向构造</strong></p>\n<h4 id=\"_2-4-2-性质\"> 2.4.2 性质</h4>\n<ol>\n<li>\n<p>逆矩阵的逆为它本身</p>\n</li>\n<li>\n<p>转置矩阵的逆为逆矩阵的转</p>\n</li>\n<li>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span>A</span><span><span>A</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>−</span><span>1</span></span></span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05764em;\">E</span></span></span></span></p>\n</li>\n<li>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span>(</span><span style=\"margin-right:0.03148em;\">k</span><span>A</span><span><span>)</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>−</span><span>1</span></span></span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span><span></span><span><span><span><span style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.03148em;\">k</span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span style=\"height:3em;\"></span><span><span><span>1</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.345em;\"><span></span></span></span></span></span><span></span></span><span><span>A</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>−</span><span>1</span></span></span></span></span></span></span></span></span></span></span></span></p>\n</li>\n<li>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span>∣</span><span><span>A</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>−</span><span>1</span></span></span></span></span></span></span></span></span><span>∣</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.365108em;vertical-align:-0.52em;\"></span><span><span><span></span><span><span><span><span style=\"height:0.845108em;\"><span style=\"top:-2.655em;\"><span style=\"height:3em;\"></span><span><span><span>∣</span><span>A</span><span>∣</span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span style=\"height:3em;\"></span><span><span><span>1</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.52em;\"><span></span></span></span></span></span><span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span>∣</span><span>A</span><span><span>∣</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>−</span><span>1</span></span></span></span></span></span></span></span></span></span></span></span></p>\n</li>\n<li>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span>(</span><span>A</span><span style=\"margin-right:0.05017em;\">B</span><span><span>)</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>−</span><span>1</span></span></span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>−</span><span>1</span></span></span></span></span></span></span></span></span><span><span>A</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>−</span><span>1</span></span></span></span></span></span></span></span></span></span></span></span></p>\n</li>\n</ol>\n<blockquote>\n<p>注意抓准性质来计算，特别是第四条</p>\n</blockquote>\n<h4 id=\"_2-4-3-计算\"> 2.4.3 计算</h4>\n<ol>\n<li>伴随矩阵法\n由性质<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>−</span><span>1</span></span></span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.365108em;vertical-align:-0.52em;\"></span><span><span><span></span><span><span><span><span style=\"height:0.845108em;\"><span style=\"top:-2.655em;\"><span style=\"height:3em;\"></span><span><span><span>∣</span><span>A</span><span>∣</span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span style=\"height:3em;\"></span><span><span><span>1</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.52em;\"><span></span></span></span></span></span><span></span></span></span><span><span><span>A</span><span><span><span><span style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>∗</span></span></span></span></span></span></span></span></span></span></span></span>求解出伴随矩阵即可。\n伴随矩阵等于<strong>对应的代数余子式所组成的矩阵</strong></li>\n</ol>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.738696em;vertical-align:0em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.738696em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>∗</span></span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:5.459999999999999em;vertical-align:-2.4799999999999995em;\"></span><span><span><span><span><span><span style=\"height:2.9500349999999997em;\"><span style=\"top:-2.011015em;\"><span style=\"height:3.8160299999999996em;\"></span><span><span>⎣</span></span></span><span style=\"top:-3.158015em;\"><span style=\"height:3.8160299999999996em;\"></span><span style=\"height:1.8160299999999996em;width:0.667em;\"><svg width='0.667em' height='1.8160299999999996em' style='width:0.667em' viewBox='0 0 667 1816' preserveAspectRatio='xMinYMin'><path d='M319 0 H403 V1816 H319z M319 0 H403 V1816 H319z'/></svg></span></span><span style=\"top:-5.611064999999999em;\"><span style=\"height:3.8160299999999996em;\"></span><span><span>⎡</span></span></span></span><span>​</span></span><span><span style=\"height:2.4500349999999997em;\"><span></span></span></span></span></span></span><span><span><span><span><span><span style=\"height:2.9799999999999995em;\"><span style=\"top:-5.8275em;\"><span style=\"height:3.6875em;\"></span><span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>11</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-4.6275em;\"><span style=\"height:3.6875em;\"></span><span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>12</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-2.7674999999999996em;\"><span style=\"height:3.6875em;\"></span><span><span><span>⋮</span><span style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span><span style=\"top:-1.5675000000000006em;\"><span style=\"height:3.6875em;\"></span><span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>1</span><span>n</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:2.4799999999999995em;\"><span></span></span></span></span></span><span style=\"width:0.5em;\"></span><span style=\"width:0.5em;\"></span><span><span><span><span style=\"height:2.9799999999999995em;\"><span style=\"top:-5.8275em;\"><span style=\"height:3.6875em;\"></span><span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>12</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-4.6275em;\"><span style=\"height:3.6875em;\"></span><span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>22</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-2.7674999999999996em;\"><span style=\"height:3.6875em;\"></span><span><span><span>⋮</span><span style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span><span style=\"top:-1.5675000000000006em;\"><span style=\"height:3.6875em;\"></span><span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>2</span><span>n</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:2.4799999999999995em;\"><span></span></span></span></span></span><span style=\"width:0.5em;\"></span><span style=\"width:0.5em;\"></span><span><span><span><span style=\"height:2.9799999999999995em;\"><span style=\"top:-5.64em;\"><span style=\"height:3.5em;\"></span><span><span>⋯</span></span></span><span style=\"top:-4.44em;\"><span style=\"height:3.5em;\"></span><span><span>⋯</span></span></span><span style=\"top:-2.5799999999999996em;\"><span style=\"height:3.5em;\"></span><span></span></span><span style=\"top:-1.3800000000000006em;\"><span style=\"height:3.5em;\"></span><span><span>⋯</span></span></span></span><span>​</span></span><span><span style=\"height:2.4799999999999995em;\"><span></span></span></span></span></span><span style=\"width:0.5em;\"></span><span style=\"width:0.5em;\"></span><span><span><span><span style=\"height:2.9799999999999995em;\"><span style=\"top:-5.8275em;\"><span style=\"height:3.6875em;\"></span><span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>1</span><span>n</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-4.6275em;\"><span style=\"height:3.6875em;\"></span><span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>n</span><span>2</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-2.7674999999999996em;\"><span style=\"height:3.6875em;\"></span><span><span><span>⋮</span><span style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span><span style=\"top:-1.5675000000000006em;\"><span style=\"height:3.6875em;\"></span><span><span><span>A</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>nn</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:2.4799999999999995em;\"><span></span></span></span></span></span></span></span><span><span><span><span><span style=\"height:2.9500349999999997em;\"><span style=\"top:-2.011015em;\"><span style=\"height:3.8160299999999996em;\"></span><span><span>⎦</span></span></span><span style=\"top:-3.158015em;\"><span style=\"height:3.8160299999999996em;\"></span><span style=\"height:1.8160299999999996em;width:0.667em;\"><svg width='0.667em' height='1.8160299999999996em' style='width:0.667em' viewBox='0 0 667 1816' preserveAspectRatio='xMinYMin'><path d='M263 0 H347 V1816 H263z M263 0 H347 V1816 H263z'/></svg></span></span><span style=\"top:-5.611064999999999em;\"><span style=\"height:3.8160299999999996em;\"></span><span><span>⎤</span></span></span></span><span>​</span></span><span><span style=\"height:2.4500349999999997em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<ol start=\"2\">\n<li>\n<p>初等变换法</p>\n<ol>\n<li>在矩阵<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span></span></span></span>后面接一个<strong>单位矩阵</strong> <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05764em;\">E</span></span></span></span></li>\n<li>经过初等变换后，将 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span></span></span></span> 变成 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05764em;\">E</span></span></span></span></li>\n<li>此时，<strong>原来的</strong> <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05764em;\">E</span></span></span></span> 就变成了 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>−</span><span>1</span></span></span></span></span></span></span></span></span></span></span></span></li>\n</ol>\n</li>\n<li>\n<p>分块法</p>\n<p>利用分块矩阵将大矩阵分成小块，求解每个小矩阵的逆矩阵，再拼接起来，就求出了大矩阵的逆矩阵</p>\n</li>\n</ol>\n<h3 id=\"_2-5-特殊矩阵\"> 2.5 特殊矩阵</h3>\n<ol>\n<li>\n<p>零矩阵：每个元素均为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0</span></span></span></span>，记为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.02778em;\">O</span></span></span></span></p>\n</li>\n<li>\n<p>单位矩阵：从左往右对角线上的元素均为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1</span></span></span></span>，其余为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0</span></span></span></span>，记为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05764em;\">E</span></span></span></span></p>\n</li>\n<li>\n<p>数量矩阵： <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span style=\"margin-right:0.03148em;\">k</span></span></span></span> 乘以单位矩阵的积</p>\n</li>\n<li>\n<p>对角矩阵：<strong>非对角线上</strong>的值全为 0 的矩阵称为对角矩阵</p>\n</li>\n<li>\n<p>上（下）三角矩阵：对角线以上或者对角线以下的值全部为 0 的矩阵称为上（下）三角矩阵</p>\n<blockquote>\n<p>三角矩阵的行列式的值等于对角线上的值的乘积</p>\n</blockquote>\n</li>\n</ol>\n",
      "date_published": "2016-10-14T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "复习"
      ]
    },
    {
      "title": "毛泽东思想概论",
      "url": "https://wafer.li/blog-corners/old-inventory/Reviews/MaoTheory/%E6%AF%9B%E6%B3%BD%E4%B8%9C%E6%80%9D%E6%83%B3%E6%A6%82%E8%AE%BA/",
      "id": "https://wafer.li/blog-corners/old-inventory/Reviews/MaoTheory/%E6%AF%9B%E6%B3%BD%E4%B8%9C%E6%80%9D%E6%83%B3%E6%A6%82%E8%AE%BA/",
      "content_html": "<p>八七会议的意义</p>\n<ol>\n<li>土地革命和武装斗争</li>\n<li>枪杆子里出政权</li>\n</ol>\n",
      "date_published": "2016-10-14T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "复习"
      ]
    },
    {
      "title": "操作系统复习",
      "url": "https://wafer.li/blog-corners/old-inventory/Reviews/OS/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/",
      "id": "https://wafer.li/blog-corners/old-inventory/Reviews/OS/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/",
      "summary": "<h2 id=\"_1-operating-system\"> 1. Operating System</h2>\n<ol>\n<li>\n<p>What does a Mordern OS do?</p>\n<blockquote>\n<p>Provide abstractions\nProvide Standard Interface\nMediates Resource Usage\nConsumes Resources</p>\n</blockquote>\n</li>\n</ol>\n",
      "content_html": "<h2 id=\"_1-operating-system\"> 1. Operating System</h2>\n<ol>\n<li>\n<p>What does a Mordern OS do?</p>\n<blockquote>\n<p>Provide abstractions\nProvide Standard Interface\nMediates Resource Usage\nConsumes Resources</p>\n</blockquote>\n</li>\n</ol>\n\n<h2 id=\"_2-processes-and-threads\"> 2. Processes and Threads</h2>\n<h3 id=\"_2-1-what-is-process-and-threads\"> 2.1 What is process and threads</h3>\n<p>Process is an execution stream in the context of a particular process state.\nThread is an execution stream in the context of a thread state.</p>\n<p>The key difference: Multiple threads <strong>share</strong> parts of their state.</p>\n<p>Allowing read write the same memory, but each thread still have own registers.</p>\n<p>Reason:</p>\n<ol>\n<li>The threads must corrdinate their activities very closely.</li>\n<li>It is much easier to coordinate activities.</li>\n</ol>\n<h3 id=\"_2-2-process-state-information\"> 2.2 Process state information</h3>\n<ol>\n<li>Register</li>\n<li>Stack</li>\n<li>Memory</li>\n<li>Open file tables</li>\n<li>Singal management information</li>\n</ol>\n<h3 id=\"_2-3-multiprogramming\"> 2.3 Multiprogramming</h3>\n<p>Multiple processes at <strong>a time</strong>.\nAllow system to separate out activites cleanly.</p>\n<h3 id=\"_2-4-context-switch\"> 2.4 Context switch</h3>\n<p>Because multiprogamming, there needs to <strong>share</strong> the resource, such as CPU.</p>\n<p>Therefore, OS needs the ability to switch from one process to another.\nThat is <strong>Context Switch</strong></p>\n<h3 id=\"_2-5-pcb\"> 2.5 PCB</h3>\n<p>The way to implement the <em>Context Switch</em> is to <strong>save</strong>  and <strong>restore</strong> the hardware state in PCB (Process Control Block).</p>\n<h4 id=\"_2-5-1-pcb-depends-on-hardward\"> 2.5.1 PCB depends on hardward</h4>\n<ol>\n<li>\n<p>Register</p>\n</li>\n<li>\n<p>Porcessor Status Word</p>\n</li>\n<li>\n<p>Memory</p>\n<blockquote>\n<p>Some machine needs the Memory Management Unit(<strong>MMU</strong>)</p>\n</blockquote>\n<blockquote>\n<p>But the older PC switch all the process's memory <strong>out to disk</strong></p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"_2-6-event-driven\"> 2.6 Event-driven</h3>\n<p>OS is fundamentally event-driven.</p>\n<p>That is to wait for an event to happen, response appropriately to the event, then wait for the next event</p>\n<h3 id=\"_2-7-thread-control-block\"> 2.7 Thread Control Block</h3>\n<p>It is tipically <strong>register</strong>.</p>\n<p>Don't need to do anything to the MMU when switch threads.</p>\n<h3 id=\"_2-8-each-user-process-is-backed-by-kernel-thread\"> 2.8 Each user process is backed by kernel thread</h3>\n<p>That is the OS will have a <strong>separate</strong> thread for <strong>each</strong> process.\nAnd perform the OS activities on behalf of the process.</p>\n<p>Advantages:</p>\n<ol>\n<li>\n<p>Allow the programmer to program the actions associate with that activity as a <strong>single</strong> serial stream of actions and events</p>\n</li>\n<li>\n<p>Programmer does not have to deal with the complexity of interleaving multiple activities on the same thread</p>\n</li>\n</ol>\n<h3 id=\"_2-9-asyncorony\"> 2.9 Asyncorony</h3>\n",
      "date_published": "2016-10-14T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "复习"
      ]
    },
    {
      "title": "1. 基本概念",
      "url": "https://wafer.li/blog-corners/old-inventory/Reviews/Probability/1.%20%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/",
      "id": "https://wafer.li/blog-corners/old-inventory/Reviews/Probability/1.%20%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/",
      "summary": "<h2 id=\"_1-1-随机试验\"> 1.1 随机试验</h2>\n<ol>\n<li>可重复</li>\n<li>结果不唯一</li>\n<li>结果不确定</li>\n</ol>\n<p>随机性：包括上述性质以外还有</p>\n<ol>\n<li>结果范围确定</li>\n<li>试验完成，必有一个确定结果</li>\n</ol>\n",
      "content_html": "<h2 id=\"_1-1-随机试验\"> 1.1 随机试验</h2>\n<ol>\n<li>可重复</li>\n<li>结果不唯一</li>\n<li>结果不确定</li>\n</ol>\n<p>随机性：包括上述性质以外还有</p>\n<ol>\n<li>结果范围确定</li>\n<li>试验完成，必有一个确定结果</li>\n</ol>\n\n<h2 id=\"_1-2-样本空间\"> 1.2 样本空间</h2>\n<p>样本空间是随机试验的所有可能结果<strong>集合</strong></p>\n<h2 id=\"_1-3-随机事件\"> 1.3 随机事件</h2>\n<p>样本空间的<strong>子集</strong>叫做随机事件，元素称为<strong>样本点</strong></p>\n<p>基本事件：单点集合\n必然事件：样本空间本身，记为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>Ω</span></span></span></span>\n不可能事件：空集 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.66334em;vertical-align:-0.08167em;\"></span><span>∅</span></span></span></span></p>\n<h2 id=\"_1-4-事件关系与运算\"> 1.4 事件关系与运算</h2>\n<h3 id=\"_1-4-1-关系\"> 1.4.1 关系</h3>\n<ol>\n<li>\n<p>相等：<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span>A</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>⊂</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>⊂</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span></span></span></span> 则 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05017em;\">B</span></span></span></span></p>\n</li>\n<li>\n<p>和事件：<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>{</span><span>x</span><span>∣</span><span>x</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∈</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span>A</span><span> </span><span style=\"margin-right:0.02778em;\">or</span><span> </span><span>x</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∈</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span>}</span></span></span></span></p>\n</li>\n<li>\n<p>积事件：<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∩</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>{</span><span>x</span><span>∣</span><span>x</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∈</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span>A</span><span> </span><span>an</span><span>d</span><span> </span><span>x</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∈</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span>}</span></span></span></span></p>\n</li>\n<li>\n<p>互斥事件：<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∩</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.66334em;vertical-align:-0.08167em;\"></span><span>∅</span></span></span></span>，即 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span></span></span></span> <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05017em;\">B</span></span></span></span> <strong>不能同时发生</strong></p>\n</li>\n<li>\n<p>对立事件：<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.05764em;\">S</span><span>,</span><span> </span><span style=\"margin-right:0.16666666666666666em;\"></span><span>an</span><span>d</span><span> </span><span>A</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∩</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.66334em;vertical-align:-0.08167em;\"></span><span>∅</span></span></span></span>，<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span></span></span></span> <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05017em;\">B</span></span></span></span> <strong>必有一个发生</strong></p>\n<blockquote>\n<p>对立事件<strong>一定是</strong>互斥事件</p>\n</blockquote>\n</li>\n<li>\n<p>差事件：<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span>A</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>{</span><span>x</span><span>∣</span><span>x</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∈</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>A</span><span> </span><span>an</span><span>d</span><span> </span><span>x</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span><span>∈</span></span><span><span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span><span><span>/</span><span style=\"margin-right:0.05555555555555555em;\"></span></span></span><span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span>}</span></span></span></span></p>\n<blockquote>\n<ol>\n<li><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span>A</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.9224300000000001em;vertical-align:-0.0391em;\"></span><span>A</span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.05017em;\">B</span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span> </span><span style=\"margin-right:0.2777777777777778em;\"></span><span>⊂</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span></span></span></span></li>\n<li>若 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span>A</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>⊂</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05017em;\">B</span></span></span></span> 则，<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span>A</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.66334em;vertical-align:-0.08167em;\"></span><span>∅</span></span></span></span></li>\n<li><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span>A</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span>A</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span><span style=\"margin-right:0.05017em;\">B</span></span></span></span></li>\n</ol>\n<blockquote>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span>A</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8833300000000001em;vertical-align:0em;\"></span><span>A</span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.05017em;\">B</span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>A</span><span>(</span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span>A</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span><span style=\"margin-right:0.05017em;\">B</span></span></span></span></p>\n</blockquote>\n<ol start=\"4\">\n<li>总有 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span><span style=\"margin-right:0.05017em;\">B</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.8833300000000001em;vertical-align:0em;\"></span><span>A</span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.05017em;\">B</span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span></span></span></span>\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1.13333em;vertical-align:-0.25em;\"></span><span>(</span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span>A</span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span style=\"margin-right:0.05017em;\">B</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1.13333em;vertical-align:-0.25em;\"></span><span>(</span><span>A</span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.05017em;\">B</span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span>)</span></span></span></span></li>\n</ol>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"_1-4-2-运算\"> 1.4.2 运算</h3>\n<h4 id=\"_1-4-2-1-运算律\"> 1.4.2.1 运算律</h4>\n<ol>\n<li>\n<p>交换律：</p>\n<blockquote>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span></span></span></span>; <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∩</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∩</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span></span></span></span></p>\n</blockquote>\n</li>\n<li>\n<p>结合律：</p>\n<blockquote>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.07153em;\">C</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>(</span><span>A</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.07153em;\">C</span></span></span></span>\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∩</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∩</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.07153em;\">C</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>(</span><span>A</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∩</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∩</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.07153em;\">C</span></span></span></span></p>\n</blockquote>\n</li>\n<li>\n<p>分配律:</p>\n<blockquote>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∩</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.07153em;\">C</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>(</span><span>A</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∩</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>(</span><span>A</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.07153em;\">C</span><span>)</span></span></span></span>\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∩</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.07153em;\">C</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>(</span><span>A</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∩</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>(</span><span>A</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∩</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.07153em;\">C</span><span>)</span></span></span></span></p>\n</blockquote>\n</li>\n<li>\n<p>德摩根律：</p>\n<blockquote>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8833300000000001em;vertical-align:0em;\"></span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span>A</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.05017em;\">B</span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8833300000000001em;vertical-align:0em;\"></span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span>A</span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∩</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.8833300000000001em;vertical-align:0em;\"></span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.05017em;\">B</span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span></span></span></span>\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8833300000000001em;vertical-align:0em;\"></span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span>A</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∩</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.05017em;\">B</span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8833300000000001em;vertical-align:0em;\"></span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span>A</span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.8833300000000001em;vertical-align:0em;\"></span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.05017em;\">B</span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span></span></span></span></p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"_1-4-2-2-术语\"> 1.4.2.2 术语</h4>\n<ol>\n<li>“至少” —— 加法运算</li>\n<li>“同时” —— 乘法运算</li>\n</ol>\n<p>例： 设 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span>A</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.07153em;\">C</span></span></span></span> 三个事件，<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span>A</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.07153em;\">C</span></span></span></span> 的运算：</p>\n<ol>\n<li>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span></span></span></span> 发生，B,C 不发生</p>\n<blockquote>\n<p>A!B!C</p>\n</blockquote>\n</li>\n<li>\n<p>A与B都发生，而C 不发生</p>\n</li>\n<li>\n<p>ABC中至少有一个发生</p>\n</li>\n<li>\n<p>ABC都发生</p>\n</li>\n<li>\n<p>ABC都不发生</p>\n</li>\n<li>\n<p>ABC不多于一个发生</p>\n</li>\n<li>\n<p>ABC不多于两个发生</p>\n</li>\n<li>\n<p>ABC至少两个发生</p>\n<blockquote>\n<p>AB + AC + BC</p>\n</blockquote>\n</li>\n<li>\n<p>ABC恰有一个发生</p>\n<blockquote>\n<p>A!B!C + !AB!C + !A!BC</p>\n</blockquote>\n</li>\n<li>\n<p>ABC 恰有两个发生</p>\n<blockquote>\n<p>AB!C + !ABC + A!BC</p>\n</blockquote>\n</li>\n</ol>\n<p>例2：在班上，任选一名学生：\nA: 男生\nB：二年级\nC: 登山队员</p>\n<ol>\n<li>AB!C =</li>\n<li>在什么条件下，ABC = C（C 包含于 AB）</li>\n<li>在什么条件下，C 包含于 B</li>\n</ol>\n<h2 id=\"_1-5-频率和概率\"> 1.5 频率和概率</h2>\n<h3 id=\"_1-5-1-频率\"> 1.5.1 频率</h3>\n<p>频率 = 频数 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>/</span></span></span></span> 试验总数</p>\n<p>频数：在 n 次试验中，发生某事件的<strong>次数</strong></p>\n<p>基本性质</p>\n<ol>\n<li><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span>0</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≤</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span><span style=\"margin-right:0.10764em;\">f</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>(</span><span>A</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≥</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1</span></span></span></span></li>\n<li><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span><span style=\"margin-right:0.10764em;\">f</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>(</span><span style=\"margin-right:0.05764em;\">S</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1</span></span></span></span></li>\n<li>若 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span>⋯</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 是两两不相容事件，则有 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span><span style=\"margin-right:0.10764em;\">f</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.55556em;vertical-align:0em;\"></span><span>⋯</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span><span style=\"margin-right:0.10764em;\">f</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span><span style=\"margin-right:0.10764em;\">f</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span>⋯</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span><span style=\"margin-right:0.10764em;\">f</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span></span></span></span></li>\n</ol>\n<h3 id=\"_1-5-2-概率\"> 1.5.2 概率</h3>\n<h4 id=\"_1-5-2-1-统计定义\"> 1.5.2.1 统计定义</h4>\n<p>在一组<strong>相同</strong>条件下，重复地做 n 次试验，记, <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span><span>n</span><span><span><span><span style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>A</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>为 n 次试验中，事件 A 发生的次数。</p>\n<p>当 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span>n</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>→</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span>∞</span></span></span></span>，频率（<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.0566969999999998em;vertical-align:-0.345em;\"></span><span><span></span><span><span><span><span style=\"height:0.7116969999999999em;\"><span style=\"top:-2.6550000000000002em;\"><span style=\"height:3em;\"></span><span><span><span>n</span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.410305em;\"><span style=\"height:3em;\"></span><span><span><span><span>n</span><span><span><span><span style=\"height:0.3448em;\"><span style=\"top:-2.3567071428571427em;margin-left:0em;margin-right:0.07142857142857144em;\"><span style=\"height:2.5em;\"></span><span><span>A</span></span></span></span><span>​</span></span><span><span style=\"height:0.14329285714285717em;\"><span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:0.345em;\"><span></span></span></span></span></span><span></span></span></span></span></span>）稳定在某一个常数 P 附近。\n且随着 n 的增大，摆动的幅度越来越小，此时称 A 为<strong>随机事件</strong>，称 p 为事件 A 发生的概率，记作：<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span>p</span></span></span></span></p>\n<h4 id=\"_1-5-2-2-数学定义\"> 1.5.2.2 数学定义</h4>\n<p>对于随即试验赋予一个实数<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span>)</span></span></span></span>, 称为<strong>概率</strong>，满足已下条件</p>\n<ol>\n<li>\n<p>对于任何事件 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span></span></span></span>，有 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≥</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0</span></span></span></span></p>\n</li>\n<li>\n<p>对于必然事件 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05764em;\">S</span></span></span></span>，有 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.05764em;\">S</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1</span></span></span></span></p>\n<blockquote>\n<p>也可以表示为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>Ω</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1</span></span></span></span></p>\n</blockquote>\n</li>\n<li>\n<p>可列可加性：对于两两不相容事件，则有 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.55556em;vertical-align:0em;\"></span><span>⋯</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span>⋯</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span></span></span></span></p>\n<blockquote>\n<p>也称为<strong>完全可加性</strong></p>\n</blockquote>\n</li>\n</ol>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span>)</span></span></span></span> 表征事件 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span></span></span></span> 在一次试验中发生的可能性大小。</p>\n<blockquote>\n<p>上述要点也是概率的性质。\n注意，概率是<strong>趋近得到的</strong>，概率为 1 的事件<strong>不一定</strong>是必然事件。\n同理，概率为 0 的事件<strong>不一定</strong>是必然事件。</p>\n</blockquote>\n<h4 id=\"_1-5-2-3-性质\"> 1.5.2.3 性质</h4>\n<ol>\n<li>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>∅</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0</span></span></span></span></p>\n</li>\n<li>\n<p>有限可加：对于<strong>两两不相容</strong>事件\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.55556em;vertical-align:0em;\"></span><span>⋯</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span>⋯</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span></span></span></span></p>\n<blockquote>\n<p>可以推广到 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span>n</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span>∞</span></span></span></span> 的可列可加性</p>\n</blockquote>\n</li>\n<li>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span>A</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>⊂</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>⇒</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≥</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span>)</span></span></span></span></p>\n</li>\n<li>\n<p>任何事件 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span></span></span></span> 都有 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1</span></span></span></span></p>\n</li>\n<li>\n<p>逆事件：<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.13333em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span>A</span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span>)</span></span></span></span></p>\n</li>\n<li>\n<p>加法：<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span style=\"margin-right:0.05017em;\">B</span><span>)</span></span></span></span></p>\n</li>\n<li>\n<p>对于一般事件，有</p>\n</li>\n</ol>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.55556em;vertical-align:0em;\"></span><span>⋯</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:2.929066em;vertical-align:-1.277669em;\"></span><span><span><span><span style=\"height:1.6513970000000002em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span style=\"height:3.05em;\"></span><span><span><span>i</span><span>=</span><span>1</span></span></span></span><span style=\"top:-3.050005em;\"><span style=\"height:3.05em;\"></span><span><span>∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span style=\"height:3.05em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:1.277669em;\"><span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:2.463782em;vertical-align:-1.413777em;\"></span><span><span><span><span style=\"height:1.050005em;\"><span style=\"top:-1.8723309999999997em;margin-left:0em;\"><span style=\"height:3.05em;\"></span><span><span><span>1</span><span>≤</span><span>i</span><span>&lt;</span><span style=\"margin-right:0.05724em;\">j</span><span>≤</span><span>n</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span style=\"height:3.05em;\"></span><span><span>∑</span></span></span></span><span>​</span></span><span><span style=\"height:1.413777em;\"><span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span>A</span><span><span><span><span style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.05724em;\">j</span></span></span></span><span>​</span></span><span><span style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:2.488226em;vertical-align:-1.438221em;\"></span><span><span><span><span style=\"height:1.050005em;\"><span style=\"top:-1.8478869999999998em;margin-left:0em;\"><span style=\"height:3.05em;\"></span><span><span><span>1</span><span>≤</span><span>i</span><span>&lt;</span><span style=\"margin-right:0.05724em;\">j</span><span>&lt;</span><span style=\"margin-right:0.03148em;\">k</span><span>≤</span><span>n</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span style=\"height:3.05em;\"></span><span><span>∑</span></span></span></span><span>​</span></span><span><span style=\"height:1.438221em;\"><span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span>A</span><span><span><span><span style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.05724em;\">j</span></span></span></span><span>​</span></span><span><span style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span><span>A</span><span><span><span><span style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.03148em;\">k</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span>⋯</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1.1141079999999999em;vertical-align:-0.25em;\"></span><span>(</span><span>−</span><span>1</span><span><span>)</span><span><span><span><span style=\"height:0.864108em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>n</span><span>−</span><span>1</span></span></span></span></span></span></span></span></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span>⋯</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span></span></span></span></span></p>\n<h3 id=\"_1-5-3-概率空间\"> 1.5.3 概率空间</h3>\n<h4 id=\"_1-5-3-1-代数\"> 1.5.3.1 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span style=\"margin-right:0.03588em;\">σ</span></span></span></span> 代数</h4>\n<p>称 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>Ω</span></span></span></span> 样本空间的一些子集所成的集合 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.13889em;\">F</span></span></span></span>，若 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.13889em;\">F</span></span></span></span> 满足：</p>\n<ol>\n<li><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span>Ω</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∈</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.13889em;\">F</span></span></span></span></li>\n<li>若 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span>A</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∈</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.13889em;\">F</span></span></span></span> ,则 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.9224300000000001em;vertical-align:-0.0391em;\"></span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span>A</span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∈</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.13889em;\">F</span></span></span></span></li>\n<li>若 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∈</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.13889em;\">F</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>n</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span>1</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>2</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>…</span></span></span></span>，则称 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.104002em;vertical-align:-0.29971000000000003em;\"></span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">⋃</span><span><span><span><span style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>i</span><span>=</span><span>1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>∞</span></span></span></span><span>​</span></span><span><span style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∈</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.13889em;\">F</span></span></span></span></li>\n</ol>\n<p>则称 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>{</span><span>Ω</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.13889em;\">F</span><span>}</span></span></span></span> 为可测空间，称 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.13889em;\">F</span></span></span></span> 为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span style=\"margin-right:0.03588em;\">σ</span><span>−</span></span></span></span>代数</p>\n<h4 id=\"_1-5-3-2-样本空间\"> 1.5.3.2 样本空间</h4>\n<p>称 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>{</span><span>Ω</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.13889em;\">F</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>p</span><span>}</span></span></span></span> 为样本空间，其中：</p>\n<ol>\n<li><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>Ω</span></span></span></span> 样本空间</li>\n<li><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.13889em;\">F</span></span></span></span> 事件域</li>\n<li><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span>p</span></span></span></span> 概率</li>\n</ol>\n<h4 id=\"_1-5-3-3-性质\"> 1.5.3.3 性质</h4>\n<ol>\n<li>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>∅</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0</span></span></span></span></p>\n</li>\n<li>\n<p>若<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∈</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.13889em;\">F</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>i</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span>1</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>2</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>…</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>n</span></span></span></span> 且 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span>A</span><span><span><span><span style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.05724em;\">j</span></span></span></span><span>​</span></span><span><span style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>∅</span><span>(</span><span>i</span><span>!</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.05724em;\">j</span><span>)</span></span></span></span></p>\n</li>\n<li>\n<p>当 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span><span style=\"margin-right:0.05017em;\">B</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.66334em;vertical-align:-0.08167em;\"></span><span>∅</span></span></span></span> 则 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span>)</span></span></span></span></p>\n<blockquote>\n<p>若 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span>A</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.05017em;\">B</span></span></span></span> 为任意事件，那么， <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span style=\"margin-right:0.05017em;\">B</span><span>)</span></span></span></span>\n将上式推广到 n 个，则有</p>\n</blockquote>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:2.929066em;vertical-align:-1.277669em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span><span><span style=\"height:1.6513970000000002em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span style=\"height:3.05em;\"></span><span><span><span>i</span><span>=</span><span>1</span></span></span></span><span style=\"top:-3.050005em;\"><span style=\"height:3.05em;\"></span><span><span>⋃</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span style=\"height:3.05em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:1.277669em;\"><span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:2.929066em;vertical-align:-1.277669em;\"></span><span><span><span><span style=\"height:1.6513970000000002em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span style=\"height:3.05em;\"></span><span><span><span>i</span><span>=</span><span>1</span></span></span></span><span style=\"top:-3.050005em;\"><span style=\"height:3.05em;\"></span><span><span>∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span style=\"height:3.05em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:1.277669em;\"><span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:2.463782em;vertical-align:-1.413777em;\"></span><span><span><span><span style=\"height:1.050005em;\"><span style=\"top:-1.8723309999999997em;margin-left:0em;\"><span style=\"height:3.05em;\"></span><span><span><span>1</span><span>≤</span><span>i</span><span>&lt;</span><span style=\"margin-right:0.05724em;\">j</span><span>≤</span><span>n</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span style=\"height:3.05em;\"></span><span><span>∑</span></span></span></span><span>​</span></span><span><span style=\"height:1.413777em;\"><span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span>A</span><span><span><span><span style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.05724em;\">j</span></span></span></span><span>​</span></span><span><span style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1.6000100000000002em;vertical-align:-0.55001em;\"></span><span style=\"position:relative;top:-0.000004999999999977245em;\">∑</span></span></span></span></span></p>\n<p>// TODO</p>\n</li>\n<li>\n<p>单调不减性：若 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span>A</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>⊂</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05017em;\">B</span></span></span></span> 则 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>A</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≥</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0</span></span></span></span>，则 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≥</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span>)</span></span></span></span></p>\n</li>\n<li>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.13333em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span>A</span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span>)</span></span></span></span></p>\n</li>\n<li>\n<p>设 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∈</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.13889em;\">F</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>n</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span>1</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>2</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>…</span></span></span></span>，且 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>⊂</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>⊂</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span>…</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>，则 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.104002em;vertical-align:-0.29971000000000003em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">⋃</span><span><span><span><span style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>n</span><span>=</span><span>1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>∞</span></span></span></span><span>​</span></span><span><span style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span><span>lim</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>n</span><span>→</span><span>∞</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></p>\n<blockquote>\n<p>称为<strong>下连续</strong></p>\n</blockquote>\n</li>\n<li>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∈</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.13889em;\">F</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>n</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span>1</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>2</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>…</span></span></span></span>，且 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>⊃</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>⊃</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span>…</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>⊃</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>⊃</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.12em;vertical-align:0em;\"></span><span>…</span></span></span></span>，则 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.104002em;vertical-align:-0.29971000000000003em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">⋂</span><span><span><span><span style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>n</span><span>=</span><span>1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>∞</span></span></span></span><span>​</span></span><span><span style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span><span>lim</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>n</span><span>→</span><span>∞</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span></span></span></span></p>\n<blockquote>\n<p>称为<strong>上连续</strong>\n6 和 7 也称作 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span>p</span></span></span></span> 的连续性</p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"_1-5-3-4-例题\"> 1.5.3.4 例题</h4>\n<ol>\n<li>\n<p>设 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span>A</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.07153em;\">C</span></span></span></span> 为三事件，已知<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.07153em;\">C</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>1/4</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span style=\"margin-right:0.05017em;\">B</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span style=\"margin-right:0.07153em;\">C</span><span>)</span><span>,</span><span> </span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.07153em;\">BC</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>1/8</span></span></span></span> 求 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span><span style=\"margin-right:0.07153em;\">BC</span></span></span></span>中至少有一个发生的概率。</p>\n<blockquote>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:6.80744em;vertical-align:-3.1537200000000003em;\"></span><span><span><span><span><span><span style=\"height:3.65372em;\"><span style=\"top:-6.13516em;\"><span style=\"height:3.32144em;\"></span><span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.07153em;\">C</span><span>)</span></span></span><span style=\"top:-4.63516em;\"><span style=\"height:3.32144em;\"></span><span></span></span><span style=\"top:-2.6537199999999994em;\"><span style=\"height:3.32144em;\"></span><span></span></span><span style=\"top:-0.8277199999999998em;\"><span style=\"height:3.32144em;\"></span><span></span></span></span><span>​</span></span><span><span style=\"height:3.1537200000000003em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:3.65372em;\"><span style=\"top:-6.13516em;\"><span style=\"height:3.32144em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.07153em;\">C</span><span>)</span></span></span><span style=\"top:-4.63516em;\"><span style=\"height:3.32144em;\"></span><span><span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span style=\"margin-right:0.05017em;\">B</span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span style=\"margin-right:0.07153em;\">C</span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.07153em;\">BC</span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span style=\"margin-right:0.07153em;\">BC</span><span>)</span></span></span><span style=\"top:-2.6537199999999994em;\"><span style=\"height:3.32144em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>4</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>4</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>4</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>8</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>0</span></span></span><span style=\"top:-0.8277199999999998em;\"><span style=\"height:3.32144em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>0.625</span></span></span></span><span>​</span></span><span><span style=\"height:3.1537200000000003em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n</blockquote>\n</li>\n<li>\n<p>将编号为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span>1</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>2</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>3</span></span></span></span> 的三本书任意地排在了书架上，求至少有一本书从左到右的排列序号与之编号相同的概率。</p>\n<blockquote>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.03148em;\">k</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>: 第 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span style=\"margin-right:0.03148em;\">k</span></span></span></span> 本书在第 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span style=\"margin-right:0.03148em;\">k</span></span></span></span> 个位置上， <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span style=\"margin-right:0.03148em;\">k</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span>1</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>2</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>3</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>…</span></span></span></span>\n则 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.03148em;\">k</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.355em;vertical-align:-0.345em;\"></span><span><span></span><span><span><span><span style=\"height:1.01em;\"><span style=\"top:-2.6550000000000002em;\"><span style=\"height:3em;\"></span><span><span><span>3</span><span>!</span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span style=\"height:3em;\"></span><span><span><span>1</span><span>(</span><span>3</span><span>−</span><span>1</span><span>)!</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.345em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>1/3</span></span></span></span>\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span>A</span><span><span><span><span style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.05724em;\">j</span></span></span></span><span>​</span></span><span><span style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.355em;vertical-align:-0.345em;\"></span><span><span></span><span><span><span><span style=\"height:1.01em;\"><span style=\"top:-2.6550000000000002em;\"><span style=\"height:3em;\"></span><span><span><span>3</span><span>!</span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span style=\"height:3em;\"></span><span><span><span>1</span><span>×</span><span>1</span><span>×</span><span>(</span><span>3</span><span>−</span><span>2</span><span>)!</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.345em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>1/6</span></span></span></span>\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>1/</span><span><span>3</span><span>!</span></span></span></span></span></p>\n</blockquote>\n</li>\n<li>\n<p>（匹配问题） 某人写了 n 封信，并将它们随机放入写着 n 封信收信人地址的信封内，求：</p>\n<ol>\n<li>至少有一封信正确的概率</li>\n<li>n 个信封上的地址均不正确的概率</li>\n<li>恰有 r 个信封上的地址正确的概率</li>\n</ol>\n<blockquote>\n<p>B:至少有一封信是对的。\nB_r：恰有 r 个是对的\nA_i: 第 i 封信对的</p>\n</blockquote>\n<blockquote>\n<p>1）</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:13.994548000000002em;vertical-align:-6.747274000000001em;\"></span><span><span><span><span><span><span style=\"height:7.247274em;\"><span style=\"top:-9.810166em;\"><span style=\"height:3.427em;\"></span><span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span>)</span></span></span><span style=\"top:-8.310166em;\"><span style=\"height:3.427em;\"></span><span></span></span><span style=\"top:-6.328725999999999em;\"><span style=\"height:3.427em;\"></span><span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span></span></span><span style=\"top:-4.502725999999999em;\"><span style=\"height:3.427em;\"></span><span></span></span><span style=\"top:-2.4157259999999994em;\"><span style=\"height:3.427em;\"></span><span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span>A</span><span><span><span><span style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.05724em;\">j</span></span></span></span><span>​</span></span><span><span style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span>)</span></span></span><span style=\"top:-0.3397259999999993em;\"><span style=\"height:3.427em;\"></span><span><span>⋯</span></span></span><span style=\"top:1.1602740000000007em;\"><span style=\"height:3.427em;\"></span><span></span></span><span style=\"top:2.6602740000000007em;\"><span style=\"height:3.427em;\"></span><span><span><span style=\"margin-right:0.05764em;\">S</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:6.747274000000001em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:7.247274em;\"><span style=\"top:-9.810166em;\"><span style=\"height:3.427em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span style=\"margin-right:0.05764em;\">S</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span style=\"margin-right:0.05764em;\">S</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span style=\"margin-right:0.05764em;\">S</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>⋯</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>(</span><span>−</span><span>1</span><span><span>)</span><span><span><span><span style=\"height:0.864108em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>n</span><span>−</span><span>1</span></span></span></span></span></span></span></span></span><span><span style=\"margin-right:0.05764em;\">S</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-6.3287260000000005em;\"><span style=\"height:3.427em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>n</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span>,</span><span> </span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span style=\"margin-right:0.05764em;\">S</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>n</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>n</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>1</span></span></span><span style=\"top:-2.415726000000001em;\"><span style=\"height:3.427em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>n</span><span>!</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>(</span><span>n</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>2</span><span>)!</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>n</span><span>(</span><span>n</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>1</span><span>)</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.936em;\"><span></span></span></span></span></span><span></span></span><span>,</span><span> </span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span style=\"margin-right:0.05764em;\">S</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>1/2</span><span>!</span></span></span><span style=\"top:2.660273999999999em;\"><span style=\"height:3.427em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>1/</span><span>n</span><span>!</span></span></span></span><span>​</span></span><span><span style=\"height:6.747273999999999em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>则</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:5.56095em;vertical-align:-2.530475em;\"></span><span><span><span><span><span><span style=\"height:3.030475em;\"><span style=\"top:-5.360432em;\"><span style=\"height:3.6513970000000002em;\"></span><span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span>)</span></span></span><span style=\"top:-2.7230350000000003em;\"><span style=\"height:3.6513970000000002em;\"></span><span></span></span></span><span>​</span></span><span><span style=\"height:2.530475em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:3.030475em;\"><span style=\"top:-5.360432em;\"><span style=\"height:3.6513970000000002em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>2</span><span>!</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>3</span><span>!</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>…</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>…</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>(</span><span>−</span><span>1</span><span><span>)</span><span><span><span><span style=\"height:0.864108em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>n</span><span>+</span><span>1</span></span></span></span></span></span></span></span></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>n</span><span>!</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span></span></span><span style=\"top:-2.7230350000000003em;\"><span style=\"height:3.6513970000000002em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span><span><span style=\"height:1.6513970000000002em;\"><span style=\"top:-1.8478869999999998em;margin-left:0em;\"><span style=\"height:3.05em;\"></span><span><span><span style=\"margin-right:0.03148em;\">k</span><span>=</span><span>1</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span style=\"height:3.05em;\"></span><span><span>∑</span></span></span><span style=\"top:-4.300005em;margin-left:0em;\"><span style=\"height:3.05em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:1.302113em;\"><span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span></span><span><span><span><span style=\"height:1.5261079999999998em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.03148em;\">k</span><span>!</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>(</span><span>−</span><span>1</span><span><span>)</span><span><span><span><span style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span style=\"margin-right:0.03148em;\">k</span><span>+</span><span>1</span></span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span></span></span></span><span>​</span></span><span><span style=\"height:2.530475em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>所以 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span><span>lim</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>n</span><span>→</span><span>∞</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span><span>e</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>−</span><span>1</span></span></span></span></span></span></span></span></span></span></span></span></p>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>0</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span>)</span></span></span></span></li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"3\">\n<li><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.0001em;vertical-align:-0.2501em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span><span>i</span><span><span><span><span style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span style=\"height:2.5em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:0.2501em;\"><span></span></span></span></span></span></span><span><span>A</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span><span>i</span><span><span><span><span style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span style=\"height:2.5em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:0.2501em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span>⋯</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span><span>i</span><span><span><span><span style=\"height:0.16454285714285719em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span style=\"height:2.5em;\"></span><span><span style=\"margin-right:0.02778em;\">r</span></span></span></span><span>​</span></span><span><span style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:0.2501em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.365108em;vertical-align:-0.52em;\"></span><span><span></span><span><span><span><span style=\"height:0.845108em;\"><span style=\"top:-2.655em;\"><span style=\"height:3em;\"></span><span><span><span>n</span><span>(</span><span>n</span><span>−</span><span>1</span><span>)</span><span>…</span><span>(</span><span>n</span><span>−</span><span style=\"margin-right:0.02778em;\">r</span><span>+</span><span>1</span><span>)</span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span style=\"height:3em;\"></span><span><span><span>1</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.52em;\"><span></span></span></span></span></span><span></span></span></span></span></span>\n而其余 r 个不对，即 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.355em;vertical-align:-0.345em;\"></span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span><span><span><span style=\"height:0.911231em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span style=\"margin-right:0.03148em;\">k</span><span>=</span><span>0</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>n</span><span>−</span><span style=\"margin-right:0.02778em;\">r</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span></span><span><span><span><span style=\"height:1.01em;\"><span style=\"top:-2.6550000000000002em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.03148em;\">k</span><span>!</span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span style=\"height:3em;\"></span><span><span><span>(</span><span>−</span><span>1</span><span>)</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.345em;\"><span></span></span></span></span></span><span></span></span></span></span></span>\n所以</li>\n</ol>\n</blockquote>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:6.720898000000001em;vertical-align:-3.1104490000000005em;\"></span><span><span><span><span><span><span style=\"height:3.6104490000000005em;\"><span style=\"top:-5.610449em;\"><span style=\"height:3.7583360000000003em;\"></span><span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.02778em;\">r</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span></span></span><span style=\"top:-2.25em;\"><span style=\"height:3.7583360000000003em;\"></span><span></span></span></span><span>​</span></span><span><span style=\"height:3.1104490000000005em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:3.6104490000000005em;\"><span style=\"top:-5.610449em;\"><span style=\"height:3.7583360000000003em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span style=\"margin-right:0.07153em;\">C</span><span><span><span><span style=\"height:0.7143919999999999em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.02778em;\">r</span></span></span></span><span>​</span></span><span><span style=\"height:0.247em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>n</span><span>(</span><span>n</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>1</span><span>)</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>…</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>(</span><span>n</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.02778em;\">r</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>1</span><span>)</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.936em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span><span><span style=\"height:1.7583360000000003em;\"><span style=\"top:-1.8478869999999998em;margin-left:0em;\"><span style=\"height:3.05em;\"></span><span><span><span style=\"margin-right:0.03148em;\">k</span><span>=</span><span>0</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span style=\"height:3.05em;\"></span><span><span>∑</span></span></span><span style=\"top:-4.300005em;margin-left:0em;\"><span style=\"height:3.05em;\"></span><span><span><span>n</span><span>−</span><span style=\"margin-right:0.02778em;\">r</span></span></span></span></span><span>​</span></span><span><span style=\"height:1.302113em;\"><span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span></span><span><span><span><span style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.03148em;\">k</span><span>!</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>(</span><span>−</span><span>1</span><span>)</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span></span></span><span style=\"top:-2.25em;\"><span style=\"height:3.7583360000000003em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.02778em;\">r</span><span>!</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span><span><span style=\"height:1.7583360000000003em;\"><span style=\"top:-1.8478869999999998em;margin-left:0em;\"><span style=\"height:3.05em;\"></span><span><span><span style=\"margin-right:0.03148em;\">k</span><span>=</span><span>0</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span style=\"height:3.05em;\"></span><span><span>∑</span></span></span><span style=\"top:-4.300005em;margin-left:0em;\"><span style=\"height:3.05em;\"></span><span><span><span>n</span><span>−</span><span style=\"margin-right:0.02778em;\">r</span></span></span></span></span><span>​</span></span><span><span style=\"height:1.302113em;\"><span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.03148em;\">k</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>−</span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span></span></span></span><span>​</span></span><span><span style=\"height:3.1104490000000005em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<blockquote>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.13889em;\">T</span><span>im</span><span>e</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∏</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.13889em;\">P</span></span></span></span>\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.104002em;vertical-align:-0.29971000000000003em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">⋃</span><span><span><span><span style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>i</span><span>=</span><span>1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>n</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.104002em;vertical-align:-0.29971000000000003em;\"></span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∏</span><span><span><span><span style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>i</span><span>=</span><span>1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span>(</span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>))</span></span></span></span></p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"_1-6-等可能概型\"> 1.6 等可能概型</h2>\n<h3 id=\"_1-6-1-定义\"> 1.6.1 定义</h3>\n<ol>\n<li>元素有限</li>\n<li>基本事件发生概率相同</li>\n</ol>\n<p>由上，基本事件概率 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>({</span><span><span>e</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>})</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>1/</span><span>n</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>i</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span>1</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>2</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>3</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>⋯</span></span></span></span></p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:3.2498900000000006em;vertical-align:-1.4137769999999998em;\"></span><span><span><span><span style=\"height:1.8361130000000006em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span style=\"height:3.05em;\"></span><span><span><span style=\"margin-right:0.05724em;\">j</span><span>=</span><span>1</span></span></span></span><span style=\"top:-3.050005em;\"><span style=\"height:3.05em;\"></span><span><span>∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span style=\"height:3.05em;\"></span><span><span style=\"margin-right:0.03148em;\">k</span></span></span></span><span>​</span></span><span><span style=\"height:1.4137769999999998em;\"><span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>({</span><span><span>e</span><span><span><span><span style=\"height:0.31166400000000005em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span><span>i</span><span><span><span><span style=\"height:0.3280857142857143em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span style=\"height:2.5em;\"></span><span><span style=\"margin-right:0.05724em;\">j</span></span></span></span><span>​</span></span><span><span style=\"height:0.2818857142857143em;\"><span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:0.34731999999999996em;\"><span></span></span></span></span></span></span><span>})</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.03148em;\">k</span><span>/</span><span>n</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:2.04633em;vertical-align:-0.686em;\"></span><span><span></span><span><span><span><span style=\"height:1.36033em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.05017em;\">B</span><span>a</span><span>s</span><span>i</span><span>c</span><span> </span><span>e</span><span style=\"margin-right:0.03588em;\">v</span><span>e</span><span>n</span><span>t</span><span> </span><span>in</span><span> </span><span style=\"margin-right:0.05764em;\">S</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.05017em;\">B</span><span>a</span><span>s</span><span>i</span><span>c</span><span> </span><span style=\"margin-right:0.05764em;\">E</span><span style=\"margin-right:0.03588em;\">v</span><span>e</span><span>n</span><span>t</span><span>s</span><span> </span><span>in</span><span> </span><span>A</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span></span></span></span></span></p>\n<p>实际推断原理：概率很小的事件在<strong>一次试验</strong>中<strong>几乎</strong>不发生</p>\n<h3 id=\"_1-6-2-例题\"> 1.6.2 例题</h3>\n<p>例1： 一个袋里有 5 个球，3 个白，2 个黑，从中任取三个：</p>\n<ol>\n<li>求全是白球</li>\n<li>全是黑球</li>\n<li>一黑一白</li>\n</ol>\n<p>改变上例为放回操作，重做题目。</p>\n<p>例2： 产品检验模型，有 N 件，D 件次品，N - D 件正品\n问任取 n 件，恰有 k 件是次品的概率</p>\n<p>例3： 打牌（去除大小王），4 人，求某人拿到 4 张黑桃，且其他花色都是 3 张的概率</p>\n<blockquote>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:2.443416em;vertical-align:-0.9523079999999999em;\"></span><span><span></span><span><span><span><span style=\"height:1.4911079999999999em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.07153em;\">C</span><span><span><span><span style=\"height:0.7959080000000001em;\"><span style=\"top:-2.433692em;margin-left:-0.07153em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>52</span></span></span></span><span style=\"top:-3.0448000000000004em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>13</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.26630799999999993em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.07153em;\">C</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-2.4518920000000004em;margin-left:-0.07153em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>13</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>4</span></span></span></span><span>​</span></span><span><span style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span><span style=\"margin-right:0.07153em;\">C</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-2.4518920000000004em;margin-left:-0.07153em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>13</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span><span style=\"margin-right:0.07153em;\">C</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-2.4518920000000004em;margin-left:-0.07153em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>13</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span><span style=\"margin-right:0.07153em;\">C</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-2.4518920000000004em;margin-left:-0.07153em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>13</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:0.9523079999999999em;\"><span></span></span></span></span></span><span></span></span></span></span></span></span></p>\n</blockquote>\n<p>例4： 把一副牌洗透了，求 4 张 A 连在一起的概率。</p>\n<blockquote>\n<p>捆绑 + 插空。</p>\n</blockquote>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:2.443416em;vertical-align:-0.9523079999999999em;\"></span><span><span></span><span><span><span><span style=\"height:1.4911079999999999em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span><span>A</span><span><span><span><span style=\"height:0.7959080000000001em;\"><span style=\"top:-2.433692em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>52</span></span></span></span><span style=\"top:-3.0448000000000004em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>52</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.26630799999999993em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span><span>A</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>4</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>4</span></span></span></span><span>​</span></span><span><span style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span><span style=\"margin-right:0.07153em;\">C</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-2.4518920000000004em;margin-left:-0.07153em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>49</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span><span>A</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>50</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>50</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:0.9523079999999999em;\"><span></span></span></span></span></span><span></span></span></span></span></span></span></p>\n<p>例5：分房模型</p>\n<p>将 n 个小球随机地放到 N 个大盒子中，求下列事件概率：</p>\n<p>A：某指定的 n 个盒子中各有一个球；</p>\n<blockquote>\n<p>球选盒子</p>\n</blockquote>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:2.05744em;vertical-align:-0.686em;\"></span><span><span></span><span><span><span><span style=\"height:1.37144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.10903em;\">N</span><span><span><span><span style=\"height:0.590392em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>n</span><span>!</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span></span></span></span></span></p>\n<p>B：每个盒子中至多有一个球；</p>\n<blockquote>\n<p>先把 n 个 盒子选出来，然后球选盒子</p>\n</blockquote>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:2.04633em;vertical-align:-0.686em;\"></span><span><span></span><span><span><span><span style=\"height:1.36033em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.10903em;\">N</span><span><span><span><span style=\"height:0.590392em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.07153em;\">C</span><span><span><span><span style=\"height:0.664392em;\"><span style=\"top:-2.424669em;margin-left:-0.07153em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.10903em;\">N</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.275331em;\"><span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span></span></span></span></span></p>\n<p>C：某指定的一个盒子中恰有 m（m 小于等于 n） 个球</p>\n<blockquote>\n<p>先将指定的 m 个球选出来，然后让剩下的小球到剩余的盒子中去</p>\n</blockquote>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.07153em;\">C</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:2.134331em;vertical-align:-0.686em;\"></span><span><span></span><span><span><span><span style=\"height:1.448331em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.10903em;\">N</span><span><span><span><span style=\"height:0.590392em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.07153em;\">C</span><span><span><span><span style=\"height:0.664392em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>m</span></span></span></span><span>​</span></span><span><span style=\"height:0.247em;\"><span></span></span></span></span></span></span><span>(</span><span style=\"margin-right:0.10903em;\">N</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>1</span><span><span>)</span><span><span><span><span style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>n</span><span>−</span><span>m</span></span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span></span></span></span></span></p>\n<p>例6：假设没人的生日在 365 天中任一天，等可能，则随机选取 n 个人：</p>\n<ol>\n<li>\n<p>他们的生日各不相同的概率</p>\n<blockquote>\n<p>分房模型。</p>\n</blockquote>\n</li>\n<li>\n<p>至少有两人相同的概率</p>\n<blockquote>\n<p>间接法，通过求解对立事件的概率来求解。</p>\n</blockquote>\n</li>\n</ol>\n<p>例7：摸球问题\n设盒中有 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span style=\"margin-right:0.0037em;\">α</span></span></span></span> 个白球，<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.05278em;\">β</span></span></span></span> 个黑球，现采用放回和不放回两种抽样方式。\n从中任取 a + b 个球，问摸过的球中恰有 a 个白，b 个黑球的概率。</p>\n<h2 id=\"_1-6-补充-几何概型\"> 1.6 补充：几何概型</h2>\n<h3 id=\"_1-6sp-1-背景-约会问题\"> 1.6sp.1 背景：约会问题</h3>\n<p>甲，乙两人相约在 0 到 T 这短时间内在预订的地点会面。先到的人等另外一人 t 时间，之后离开。\n求甲、乙两人能会面的概率。</p>\n<blockquote>\n<p>设 x, y 为到达的时刻，<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span>x</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≤</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span>0</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.03588em;\">y</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≤</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.13889em;\">T</span></span></span></span>\n“会面” <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.36687em;vertical-align:0em;\"></span><span>=</span></span></span></span> <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>∣</span><span>x</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.03588em;\">y</span><span>∣</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≤</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.61508em;vertical-align:0em;\"></span><span>t</span></span></span></span>，通过画平面直角坐标系解决。</p>\n</blockquote>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:4.755188em;vertical-align:-2.127594em;\"></span><span><span><span><span><span><span style=\"height:2.627594em;\"><span style=\"top:-4.627594em;\"><span style=\"height:3.491108em;\"></span><span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span>)</span></span></span><span style=\"top:-2.349514em;\"><span style=\"height:3.491108em;\"></span><span></span></span></span><span>​</span></span><span><span style=\"height:2.127594em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:2.627594em;\"><span style=\"top:-4.627594em;\"><span style=\"height:3.491108em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.13889em;\">T</span><span><span><span><span style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.13889em;\">T</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>(</span><span style=\"margin-right:0.13889em;\">T</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>t</span><span><span>)</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span></span></span><span style=\"top:-2.349514em;\"><span style=\"height:3.491108em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>(</span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span></span><span><span><span><span style=\"height:1.29208em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.13889em;\">T</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>t</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span><span>)</span><span><span><span><span style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:2.127594em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<h3 id=\"_1-6sp-2-定义\"> 1.6sp.2 定义</h3>\n<p>试验 E 具有:</p>\n<ol>\n<li>样本空间<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>Ω</span></span></span></span> 是一、二、三维中的度量(<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>L</span><span>(</span><span>Ω</span><span>)</span></span></span></span>)</li>\n<li>样本点在 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>Ω</span></span></span></span> 中均匀分布</li>\n</ol>\n<p>则称 E 为几何概型，则 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.53em;vertical-align:-0.52em;\"></span><span><span></span><span><span><span><span style=\"height:1.01em;\"><span style=\"top:-2.655em;\"><span style=\"height:3em;\"></span><span><span><span>L</span><span>(</span><span>Ω</span><span>)</span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span style=\"height:3em;\"></span><span><span><span>L</span><span>(</span><span>A</span><span>)</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.52em;\"><span></span></span></span></span></span><span></span></span></span></span></span> 叫做几何概率</p>\n<h3 id=\"_1-6sp-3-例题\"> 1.6sp.3 例题</h3>\n<ol>\n<li>\n<p>平面上画有某距离为 a 的一些平行线，想平面上任意投一长为 l 的针，试求针与平行线相交的概率。</p>\n<blockquote>\n<p>取针的中点 M，中点到相交平行线的距离为 x ，与相交平行线的夹角为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span>ϕ</span></span></span></span>\n则 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>Ω</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>{(</span><span>x</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>ϕ</span><span>)</span><span>∣0</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≤</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span>x</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≤</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.040392em;vertical-align:-0.345em;\"></span><span><span></span><span><span><span><span style=\"height:0.695392em;\"><span style=\"top:-2.6550000000000002em;\"><span style=\"height:3em;\"></span><span><span><span>2</span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span style=\"height:3em;\"></span><span><span><span>a</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.345em;\"><span></span></span></span></span></span><span></span></span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>0</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≤</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span>ϕ</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≤</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.03588em;\">π</span><span>}</span></span></span></span>\n相交 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.36687em;vertical-align:0em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>{(</span><span>x</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>ϕ</span><span>)</span><span>∣</span><span>x</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≤</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.2251079999999999em;vertical-align:-0.345em;\"></span><span><span></span><span><span><span><span style=\"height:0.8801079999999999em;\"><span style=\"top:-2.6550000000000002em;\"><span style=\"height:3em;\"></span><span><span><span>2</span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.01968em;\">l</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.345em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.05764em;\">S</span><span>in</span><span>ϕ</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>(</span><span>x</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>ϕ</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∈</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>Ω</span><span>}</span></span></span></span></p>\n</blockquote>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:13.334808000000002em;vertical-align:-6.417404000000001em;\"></span><span><span><span><span><span><span style=\"height:6.917404000000001em;\"><span style=\"top:-9.116332000000002em;\"><span style=\"height:3.625928em;\"></span><span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span>)</span></span></span><span style=\"top:-7.040332000000001em;\"><span style=\"height:3.625928em;\"></span><span></span></span><span style=\"top:-4.754404000000001em;\"><span style=\"height:3.625928em;\"></span><span></span></span><span style=\"top:-2.0519639999999995em;\"><span style=\"height:3.625928em;\"></span><span></span></span><span style=\"top:-0.2259639999999994em;\"><span style=\"height:3.625928em;\"></span><span></span></span><span style=\"top:1.805476000000001em;\"><span style=\"height:3.625928em;\"></span><span></span></span></span><span>​</span></span><span><span style=\"height:6.417404000000001em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:6.917404000000001em;\"><span style=\"top:-9.116332000000002em;\"><span style=\"height:3.625928em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>L</span><span>(</span><span>Ω</span><span>)</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>L</span><span>(</span><span>A</span><span>)</span></span></span></span><span>​</span></span><span><span style=\"height:0.936em;\"><span></span></span></span></span></span><span></span></span></span></span><span style=\"top:-4.754404000000001em;\"><span style=\"height:3.625928em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.625928em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span><span></span><span><span><span><span style=\"height:0.695392em;\"><span style=\"top:-2.6550000000000002em;\"><span style=\"height:3em;\"></span><span><span><span>2</span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span style=\"height:3em;\"></span><span><span><span>a</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.345em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.03588em;\">π</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.74582em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;\">∫</span><span><span><span><span style=\"height:0.8592920000000001em;\"><span style=\"top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>0</span></span></span><span style=\"top:-3.2579000000000002em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.03588em;\">π</span></span></span></span><span>​</span></span><span><span style=\"height:0.35582em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span></span><span><span><span><span style=\"height:0.8801079999999999em;\"><span style=\"top:-2.6550000000000002em;\"><span style=\"height:3em;\"></span><span><span><span>2</span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.01968em;\">l</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.345em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.05764em;\">S</span><span>in</span><span>ϕ</span><span>d</span><span>ϕ</span></span></span></span><span>​</span></span><span><span style=\"height:1.0310000000000001em;\"><span></span></span></span></span></span><span></span></span></span></span><span style=\"top:-2.0519639999999995em;\"><span style=\"height:3.625928em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.37144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>πa</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>2</span><span style=\"margin-right:0.01968em;\">l</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span></span></span><span style=\"top:1.805476000000001em;\"><span style=\"height:3.625928em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.03588em;\">π</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span></span><span><span><span><span style=\"height:1.37144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>a</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.01968em;\">l</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span></span></span></span><span>​</span></span><span><span style=\"height:6.417404000000001em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n</li>\n</ol>\n<h2 id=\"_1-7-条件概率\"> 1.7 条件概率</h2>\n<h3 id=\"_1-7-1-定义\"> 1.7.1 定义</h3>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span></span></span></span> <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05017em;\">B</span></span></span></span> 是两个事件，且 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>&gt;</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0</span></span></span></span>，则称</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span>∣</span><span>A</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:2.363em;vertical-align:-0.936em;\"></span><span><span></span><span><span><span><span style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span>)</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span style=\"margin-right:0.05017em;\">B</span><span>)</span></span></span></span><span>​</span></span><span><span style=\"height:0.936em;\"><span></span></span></span></span></span><span></span></span></span></span></span></span></p>\n<p>称为事件 A 发生下，事件 B 发生的概率</p>\n<p>由于条件概率仍然是概率，则满足概率加法</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>∣</span><span>A</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>∣</span><span>A</span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>∣</span><span>A</span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>∣</span><span>A</span><span>)</span><span>∅</span></span></span></span></span></p>\n<p><strong>解题要点：从 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span></span></span></span> 中寻找属于 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05017em;\">B</span></span></span></span> 的元素，即 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span></span></span></span> <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05017em;\">B</span></span></span></span> 的交集</strong></p>\n<h3 id=\"_1-7-2-全概率公式和贝叶斯公式\"> 1.7.2 全概率公式和贝叶斯公式</h3>\n<h4 id=\"_1-7-2-1-样本空间的划分\"> 1.7.2.1 样本空间的划分</h4>\n<p>满足以下条件的称为样本空间的划分</p>\n<ol>\n<li><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.05724em;\">j</span></span></span></span><span>​</span></span><span><span style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.66334em;vertical-align:-0.08167em;\"></span><span>∅</span></span></span></span></li>\n<li><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.55556em;vertical-align:0em;\"></span><span>⋯</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05764em;\">S</span></span></span></span></li>\n</ol>\n<p>则 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span>⋯</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 称为样本空间 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05764em;\">S</span></span></span></span> 的 <strong>划分</strong></p>\n<h4 id=\"_1-7-2-2-全概率公式\"> 1.7.2.2 全概率公式</h4>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:4.729066em;vertical-align:-2.114533em;\"></span><span><span><span><span><span><span style=\"height:2.614533em;\"><span style=\"top:-5.42593em;\"><span style=\"height:3.6513970000000002em;\"></span><span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span>)</span></span></span><span style=\"top:-3.1145329999999998em;\"><span style=\"height:3.6513970000000002em;\"></span><span></span></span></span><span>​</span></span><span><span style=\"height:2.114533em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:2.614533em;\"><span style=\"top:-5.42593em;\"><span style=\"height:3.6513970000000002em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span>∣</span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span>∣</span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>⋯</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span>∣</span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span>n</span><span>)</span></span></span><span style=\"top:-3.1145329999999998em;\"><span style=\"height:3.6513970000000002em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span><span><span style=\"height:1.6513970000000002em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span style=\"height:3.05em;\"></span><span><span><span>i</span><span>=</span><span>1</span></span></span></span><span style=\"top:-3.050005em;\"><span style=\"height:3.05em;\"></span><span><span>∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span style=\"height:3.05em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:1.277669em;\"><span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span>∣</span><span><span>A</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span></span></span></span><span>​</span></span><span><span style=\"height:2.114533em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<h4 id=\"_1-7-2-3-贝叶斯公式\"> 1.7.2.3 贝叶斯公式</h4>\n<p>假设 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span>⋯</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>Ω</span></span></span></span> 的一个划分，<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>&gt;</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>0</span><span>,</span><span> </span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>&gt;</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0</span></span></span></span>, 则有</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>∣</span><span>A</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:2.55711em;vertical-align:-1.1301100000000002em;\"></span><span><span></span><span><span><span><span style=\"height:1.427em;\"><span style=\"top:-2.305708em;\"><span style=\"height:3em;\"></span><span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span><span><span><span style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span style=\"margin-right:0.05724em;\">j</span><span>=</span><span>1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.43581800000000004em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span>∣</span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.05724em;\">j</span></span></span></span><span>​</span></span><span><span style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.05724em;\">j</span></span></span></span><span>​</span></span><span><span style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span>)</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span>∣</span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span></span></span></span><span>​</span></span><span><span style=\"height:1.1301100000000002em;\"><span></span></span></span></span></span><span></span></span></span></span></span></span></p>\n<p><strong>以上两个公式的关键，事件，<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>Ω</span></span></span></span>的划分</strong></p>\n<h4 id=\"_1-7-2-4-乘法公式\"> 1.7.2.4 乘法公式</h4>\n<p>设 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>&gt;</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0</span></span></span></span> 则有\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span style=\"margin-right:0.05017em;\">B</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span>)</span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span>∣</span><span style=\"margin-right:0.05017em;\">B</span><span>)</span></span></span></span>\n推广 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span>⋯</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>∣</span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>∣</span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>⋯</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>∣</span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span>⋯</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>n</span><span>−</span><span>1</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span>)</span></span></span></span> , 当 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span>⋯</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>n</span><span>−</span><span>1</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>&lt;</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0</span></span></span></span></p>\n<h4 id=\"_1-7-2-5-例题\"> 1.7.2.5 例题</h4>\n<ol>\n<li>盒子里有 16 个球，6 个玻璃球， 10 个木头球。玻璃球有 2 红 4 蓝，木头球有 3 红 7 蓝。问题：摸一个球，已知是玻璃球，问是蓝色的概率</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>\\</th>\n<th>玻璃</th>\n<th>木头</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>红</td>\n<td>2</td>\n<td>3</td>\n</tr>\n<tr>\n<td>蓝</td>\n<td>4</td>\n<td>7</td>\n</tr>\n<tr>\n<td>\\</td>\n<td>6</td>\n<td>10</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>观察可知 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span>∣</span><span style=\"margin-right:0.05017em;\">B</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>4/6</span></span></span></span>\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>p</span><span>(</span><span>A</span><span style=\"margin-right:0.05017em;\">B</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>4/16</span></span></span></span></p>\n</blockquote>\n<ol start=\"2\">\n<li>\n<p>某人忘了电话号码的最后一位，因而随意拨号，求拨号不超过 2 次就能接通的概率</p>\n<blockquote>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>:</span></span></span></span> 第一次通\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>:</span></span></span></span> 第二次通\n有 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1.03333em;vertical-align:-0.15em;\"></span><span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span>A</span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></p>\n</blockquote>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:6.1582099999999995em;vertical-align:-2.8291049999999998em;\"></span><span><span><span><span><span><span style=\"height:3.3291049999999998em;\"><span style=\"top:-5.767215em;\"><span style=\"height:3.32144em;\"></span><span><span>∴</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span>)</span></span></span><span style=\"top:-3.7857749999999997em;\"><span style=\"height:3.32144em;\"></span><span></span></span><span style=\"top:-1.4783350000000004em;\"><span style=\"height:3.32144em;\"></span><span></span></span></span><span>​</span></span><span><span style=\"height:2.8291049999999998em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:3.3291049999999998em;\"><span style=\"top:-5.767215em;\"><span style=\"height:3.32144em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span>A</span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span></span></span><span style=\"top:-3.7857749999999997em;\"><span style=\"height:3.32144em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>10</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span>A</span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>∣</span><span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span>A</span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span></span></span><span style=\"top:-1.4783350000000004em;\"><span style=\"height:3.32144em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>10</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span></span></span></span><span>​</span></span><span><span style=\"height:2.8291049999999998em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n</li>\n<li>\n<p>抓阄：有 5 张条，其中 3 张有，2 张无。现从中任取一张，不放回，问第一个人抽到有的概率</p>\n<blockquote>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>5</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span></span></span></span></span></p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:15.244870000000002em;vertical-align:-7.372435000000001em;\"></span><span><span><span><span><span><span style=\"height:7.872435000000001em;\"><span style=\"top:-10.310545000000001em;\"><span style=\"height:3.32144em;\"></span><span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span>)</span></span></span><span style=\"top:-8.810545000000001em;\"><span style=\"height:3.32144em;\"></span><span></span></span><span style=\"top:-7.267215000000001em;\"><span style=\"height:3.32144em;\"></span><span></span></span><span style=\"top:-5.767215000000001em;\"><span style=\"height:3.32144em;\"></span><span></span></span><span style=\"top:-4.223885000000001em;\"><span style=\"height:3.32144em;\"></span><span></span></span><span style=\"top:-2.723885em;\"><span style=\"height:3.32144em;\"></span><span></span></span><span style=\"top:-0.7424449999999986em;\"><span style=\"height:3.32144em;\"></span><span></span></span><span style=\"top:1.0835550000000014em;\"><span style=\"height:3.32144em;\"></span><span></span></span><span style=\"top:3.064995000000001em;\"><span style=\"height:3.32144em;\"></span><span></span></span></span><span>​</span></span><span><span style=\"height:7.372435000000001em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:7.872435000000001em;\"><span style=\"top:-10.310545000000001em;\"><span style=\"height:3.32144em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span>Ω</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span>(</span><span>A</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span>A</span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span>))</span></span></span><span style=\"top:-7.267215000000001em;\"><span style=\"height:3.32144em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span>A</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span>A</span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span>A</span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span>A</span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span>)</span></span></span><span style=\"top:-4.223885000000001em;\"><span style=\"height:3.32144em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span>)</span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span>∣</span><span>A</span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span>A</span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span>∣</span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span>A</span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span>)</span></span></span><span style=\"top:-0.7424449999999986em;\"><span style=\"height:3.32144em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>5</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>4</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>5</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>4</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span></span></span><span style=\"top:3.064995000000001em;\"><span style=\"height:3.32144em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>5</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span></span></span></span><span>​</span></span><span><span style=\"height:7.372435000000001em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n</blockquote>\n</li>\n<li>\n<p>某实验室的晶体管由三个厂家提供，有下表：</p>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>厂家</th>\n<th>次品率</th>\n<th>份额</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>0.02</td>\n<td>15%</td>\n</tr>\n<tr>\n<td>2</td>\n<td>0.01</td>\n<td>80%</td>\n</tr>\n<tr>\n<td>3</td>\n<td>0.03</td>\n<td>5%</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li>随机取一支，它是次品的概率</li>\n<li>随机取一支，已知是次品，是出自 1 厂的概率</li>\n</ol>\n<blockquote>\n<p>常识： <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span>0.02</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.83333em;vertical-align:-0.08333em;\"></span><span>15%</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span>0.01</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.83333em;vertical-align:-0.08333em;\"></span><span>80%</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span>0.03</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.80556em;vertical-align:-0.05556em;\"></span><span>5%</span></span></span></span>\n1): <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>: 拿到的次品来自于第 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.65952em;vertical-align:0em;\"></span><span>i</span></span></span></span> 个厂家生产的</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span>∣</span><span><span>A</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span></span></span></span></span></p>\n<p>2):</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:5.0760000000000005em;vertical-align:-2.2880000000000007em;\"></span><span><span><span><span><span><span style=\"height:2.788em;\"><span style=\"top:-4.788em;\"><span style=\"height:3.427em;\"></span><span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>∣</span><span style=\"margin-right:0.05017em;\">B</span><span>)</span></span></span><span style=\"top:-2.1249999999999996em;\"><span style=\"height:3.427em;\"></span><span></span></span></span><span>​</span></span><span><span style=\"height:2.2880000000000007em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:2.788em;\"><span style=\"top:-4.788em;\"><span style=\"height:3.427em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span>)</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span>∣</span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span></span></span></span><span>​</span></span><span><span style=\"height:0.936em;\"><span></span></span></span></span></span><span></span></span></span></span><span style=\"top:-2.1249999999999996em;\"><span style=\"height:3.427em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>0.0125</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>15%</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>0.02</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span></span></span></span><span>​</span></span><span><span style=\"height:2.2880000000000007em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n</blockquote>\n<h2 id=\"_1-8-独立性\"> 1.8 独立性</h2>\n<p>若 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span></span></span></span> <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05017em;\">B</span></span></span></span> 两事件，满足 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span>∣</span><span style=\"margin-right:0.05017em;\">B</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span>)</span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span>)</span></span></span></span>, 即 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span>∣</span><span style=\"margin-right:0.05017em;\">B</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span>)</span></span></span></span>\n则 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span>A</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.05017em;\">B</span></span></span></span> <strong>相互独立</strong>，简称独立</p>\n<h3 id=\"_1-8-1-独立性定理\"> 1.8.1 独立性定理</h3>\n<ol>\n<li>\n<p>若 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span>A</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.05017em;\">B</span></span></span></span> 独立，则 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span>∣</span><span style=\"margin-right:0.05017em;\">B</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span>)</span></span></span></span></p>\n</li>\n<li>\n<p>若 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span>A</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.05017em;\">B</span></span></span></span> 独立，则 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.0777700000000001em;vertical-align:-0.19444em;\"></span><span>A</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.05017em;\">B</span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span>;</span><span> </span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span>A</span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span>;</span><span> </span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span>A</span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.05017em;\">B</span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span></span></span></span></p>\n<blockquote>\n<p>推广：若<strong>积事件</strong>的概率都等于<strong>事件概率的积</strong>。那么事件相互独立</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"_1-8-2-推论\"> 1.8.2 推论</h3>\n<ol>\n<li>若 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>⋯</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 相互独立，那么其中的<strong>任意 k 个事件也相互独立</strong></li>\n<li>若 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>⋯</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 相互独立，将其中<strong>任意多个</strong>转换为<strong>对立事件</strong>，也相互独立</li>\n</ol>\n<h3 id=\"_1-8-3-例题\"> 1.8.3 例题</h3>\n<ol>\n<li>\n<p>质地均匀的正四面体，分别染上红色，黄色，蓝色，第四个面染上红、黄、蓝三种颜色。试验：扔一次，观察接触桌子的一面所对应的颜色。</p>\n<blockquote>\n<p>假设 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span></span></span></span>：有红色，<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05017em;\">B</span></span></span></span>：有黄色，<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.07153em;\">C</span></span></span></span>：有蓝色\n有 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>：第<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.65952em;vertical-align:0em;\"></span><span>i</span></span></span></span> 个面接触桌子\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>1/4</span></span></span></span>，<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>4</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>4</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.07153em;\">C</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>4</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>\n有</p>\n</blockquote>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:3.8074399999999997em;vertical-align:-1.6537199999999999em;\"></span><span><span><span><span><span><span style=\"height:2.15372em;\"><span style=\"top:-4.63516em;\"><span style=\"height:3.32144em;\"></span><span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span>)</span></span></span><span style=\"top:-2.6537200000000003em;\"><span style=\"height:3.32144em;\"></span><span></span></span></span><span>​</span></span><span><span style=\"height:1.6537199999999999em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:2.15372em;\"><span style=\"top:-4.63516em;\"><span style=\"height:3.32144em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.07153em;\">C</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>4</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span></span></span><span style=\"top:-2.6537200000000003em;\"><span style=\"height:3.32144em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>4</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>4</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>2</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span></span></span></span><span>​</span></span><span><span style=\"height:1.6537199999999999em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<blockquote>\n<p>且<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span style=\"margin-right:0.05017em;\">B</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>4</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span><span></span><span><span><span><span style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span style=\"height:3em;\"></span><span><span><span>4</span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span style=\"height:3em;\"></span><span><span><span>1</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.345em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span><span></span><span><span><span><span style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span style=\"height:3em;\"></span><span><span><span>2</span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span style=\"height:3em;\"></span><span><span><span>1</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.345em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span><span></span><span><span><span><span style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span style=\"height:3em;\"></span><span><span><span>2</span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span style=\"height:3em;\"></span><span><span><span>1</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.345em;\"><span></span></span></span></span></span><span></span></span></span></span></span>\n又<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69224em;vertical-align:0em;\"></span><span>∵</span></span></span></span> <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span style=\"margin-right:0.07153em;\">BC</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>4</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>1/4</span></span></span></span></p>\n</blockquote>\n<blockquote>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69224em;vertical-align:0em;\"></span><span>∴</span></span></span></span> 两两独立不代表三个以上的事件组独立</p>\n</blockquote>\n</li>\n<li>\n<p>n 个人同时射击某一个目标，假设每人击中目标的概率为 p， 且各人是否击中目标相互独立，求目标被击中的概率 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05017em;\">B</span></span></span></span>。</p>\n<blockquote>\n<p>假设 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05017em;\">B</span></span></span></span>：目标被击中\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>：第 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.65952em;vertical-align:0em;\"></span><span>i</span></span></span></span> 个击中，则 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.104002em;vertical-align:-0.29971000000000003em;\"></span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">⋃</span><span><span><span><span style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>i</span><span>=</span><span>i</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></p>\n</blockquote>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:9.458132em;vertical-align:-4.479066em;\"></span><span><span><span><span><span><span style=\"height:4.979066em;\"><span style=\"top:-6.979066em;\"><span style=\"height:3.6513970000000002em;\"></span><span><span>∴</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span>)</span></span></span><span style=\"top:-4.561397em;\"><span style=\"height:3.6513970000000002em;\"></span><span></span></span><span style=\"top:-2.25em;\"><span style=\"height:3.6513970000000002em;\"></span><span></span></span><span style=\"top:0.16766900000000007em;\"><span style=\"height:3.6513970000000002em;\"></span><span></span></span></span><span>​</span></span><span><span style=\"height:4.479066em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:4.979066em;\"><span style=\"top:-6.979066em;\"><span style=\"height:3.6513970000000002em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span><span><span style=\"height:1.6513970000000002em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span style=\"height:3.05em;\"></span><span><span><span>i</span><span>=</span><span>1</span></span></span></span><span style=\"top:-3.050005em;\"><span style=\"height:3.05em;\"></span><span><span>⋃</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span style=\"height:3.05em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:1.277669em;\"><span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span></span></span><span style=\"top:-4.561397em;\"><span style=\"height:3.6513970000000002em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>⋯</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span></span></span><span style=\"top:-2.25em;\"><span style=\"height:3.6513970000000002em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span><span><span style=\"height:1.6513970000000002em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span style=\"height:3.05em;\"></span><span><span><span>i</span><span>=</span><span>1</span></span></span></span><span style=\"top:-3.050005em;\"><span style=\"height:3.05em;\"></span><span><span>∏</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span style=\"height:3.05em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:1.277669em;\"><span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span>A</span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span></span></span><span style=\"top:0.16766900000000007em;\"><span style=\"height:3.6513970000000002em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>(</span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>p</span><span><span>)</span><span><span><span><span style=\"height:0.7143919999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:4.479066em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n</li>\n</ol>\n<h2 id=\"_1-9-第一章例题\"> 1.9 第一章例题</h2>\n<ol>\n<li>\n<p>从 5 双不同的鞋子中任取 4 只，4 只鞋子中至少有 2 只配成一双的概率。</p>\n<blockquote>\n<p>间接法：没有任何两只配成一双\n排列法：</p>\n</blockquote>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:6.24154em;vertical-align:-2.87077em;\"></span><span><span><span><span><span><span style=\"height:3.37077em;\"><span style=\"top:-5.80888em;\"><span style=\"height:3.32144em;\"></span><span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span>)</span></span></span><span style=\"top:-3.82744em;\"><span style=\"height:3.32144em;\"></span><span></span></span><span style=\"top:-1.4366700000000003em;\"><span style=\"height:3.32144em;\"></span><span></span></span></span><span>​</span></span><span><span style=\"height:2.87077em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:3.37077em;\"><span style=\"top:-5.80888em;\"><span style=\"height:3.32144em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span>A</span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span>)</span></span></span><span style=\"top:-3.82744em;\"><span style=\"height:3.32144em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>10</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>9</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>8</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>7</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>10</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>8</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>6</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>4</span></span></span></span><span>​</span></span><span><span style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span></span></span></span></span><span style=\"top:-1.4366700000000003em;\"><span style=\"height:3.32144em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>21</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>8</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span></span></span></span><span>​</span></span><span><span style=\"height:2.87077em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<blockquote>\n<p>组合法：</p>\n</blockquote>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:9.704414000000002em;vertical-align:-4.602207000000002em;\"></span><span><span><span><span><span><span style=\"height:5.102207em;\"><span style=\"top:-9.678252em;\"><span style=\"height:5.4401530000000005em;\"></span><span><span>n</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span style=\"margin-right:0.07153em;\">C</span><span><span><span><span style=\"height:0.8641079999999999em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>10</span></span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>4</span></span></span></span><span>​</span></span><span><span style=\"height:0.247em;\"><span></span></span></span></span></span></span><span>,</span><span> </span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span>m</span><span><span><span><span style=\"height:0.3448em;\"><span style=\"top:-2.694969em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:3em;\"></span><span><span><span><span><span><span style=\"height:0.9283300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span>A</span></span></span><span style=\"top:-3.83033em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.049em;\"></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:0.30503100000000005em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span style=\"margin-right:0.07153em;\">C</span><span><span><span><span style=\"height:0.8641079999999999em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>5</span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>4</span></span></span></span><span>​</span></span><span><span style=\"height:0.247em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>2</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>2</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>2</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>2</span></span></span><span style=\"top:-8.178252em;\"><span style=\"height:5.4401530000000005em;\"></span><span></span></span><span style=\"top:-4.078098999999999em;\"><span style=\"height:5.4401530000000005em;\"></span><span><span><span><span><span><span><span style=\"height:3.4401530000000005em;\"><span style=\"top:-6.047931em;\"><span style=\"height:3.4911079999999997em;\"></span><span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span>)</span></span></span><span style=\"top:-4.280371em;\"><span style=\"height:3.4911079999999997em;\"></span><span></span></span><span style=\"top:-1.8032629999999996em;\"><span style=\"height:3.4911079999999997em;\"></span><span></span></span></span><span>​</span></span><span><span style=\"height:2.940153em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:3.4401530000000005em;\"><span style=\"top:-6.047931em;\"><span style=\"height:3.4911079999999997em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span>A</span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span>)</span></span></span><span style=\"top:-4.280371em;\"><span style=\"height:3.4911079999999997em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span></span><span><span><span><span style=\"height:1.10756em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>n</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>m</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span></span></span><span style=\"top:-1.8032629999999996em;\"><span style=\"height:3.4911079999999997em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span></span><span><span><span><span style=\"height:1.4911079999999999em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.07153em;\">C</span><span><span><span><span style=\"height:0.7959080000000001em;\"><span style=\"top:-2.433692em;margin-left:-0.07153em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>5</span></span></span><span style=\"top:-3.0448000000000004em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>4</span></span></span></span><span>​</span></span><span><span style=\"height:0.26630799999999993em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>2</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>2</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>2</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>2</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.07153em;\">C</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-2.4518920000000004em;margin-left:-0.07153em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>10</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>4</span></span></span></span><span>​</span></span><span><span style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:0.9523079999999999em;\"><span></span></span></span></span></span><span></span></span></span></span></span><span>​</span></span><span><span style=\"height:2.940153em;\"><span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:4.602207000000002em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<blockquote>\n<p>直接法：</p>\n</blockquote>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:4.548216em;vertical-align:-2.024108em;\"></span><span><span><span><span><span><span style=\"height:2.524108em;\"><span style=\"top:-4.66em;\"><span style=\"height:3em;\"></span><span><span><span>m</span><span><span><span><span style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>A</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span style=\"margin-right:0.07153em;\">C</span><span><span><span><span style=\"height:0.8641079999999999em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>5</span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.247em;\"><span></span></span></span></span></span></span><span><span style=\"margin-right:0.07153em;\">C</span><span><span><span><span style=\"height:0.8641079999999999em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>8</span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.247em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span style=\"margin-right:0.07153em;\">C</span><span><span><span><span style=\"height:0.8641079999999999em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>5</span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.247em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.135892em;\"><span style=\"height:3em;\"></span><span><span>n</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span style=\"margin-right:0.07153em;\">C</span><span><span><span><span style=\"height:0.8641079999999999em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>10</span></span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>4</span></span></span></span><span>​</span></span><span><span style=\"height:0.247em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-1.6358920000000001em;\"><span style=\"height:3em;\"></span><span><span>d</span></span></span></span><span>​</span></span><span><span style=\"height:2.024108em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n</li>\n<li>\n<p>设 A B 两事件， 已知 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>0.5</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.13333em;vertical-align:-0.25em;\"></span><span>0.6</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span>∣</span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span>A</span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0.4</span></span></span></span>\n求 (1) <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.13333em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span>A</span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span style=\"margin-right:0.05017em;\">B</span><span>)</span></span></span></span> (2) <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span style=\"margin-right:0.05017em;\">B</span><span>)</span></span></span></span> (3) <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span>)</span></span></span></span></p>\n<blockquote>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.13333em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span>A</span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span style=\"margin-right:0.05017em;\">B</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.13333em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span>A</span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1.13333em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span>∣</span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span>A</span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0.2</span></span></span></span></p>\n</blockquote>\n<blockquote>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:7.58666em;vertical-align:-3.54333em;\"></span><span><span><span><span><span><span style=\"height:4.04333em;\"><span style=\"top:-6.04333em;\"><span style=\"height:2.88333em;\"></span><span></span></span><span style=\"top:-4.54333em;\"><span style=\"height:2.88333em;\"></span><span></span></span><span style=\"top:-3em;\"><span style=\"height:2.88333em;\"></span><span></span></span><span style=\"top:-1.5em;\"><span style=\"height:2.88333em;\"></span><span></span></span><span style=\"top:0em;\"><span style=\"height:2.88333em;\"></span><span></span></span></span><span>​</span></span><span><span style=\"height:3.54333em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:4.04333em;\"><span style=\"top:-6.16em;\"><span style=\"height:3em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∵</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>A</span><span style=\"margin-right:0.05017em;\">B</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span>A</span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span style=\"margin-right:0.05017em;\">B</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>⊃</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span>A</span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span style=\"margin-right:0.05017em;\">B</span></span></span><span style=\"top:-3.11667em;\"><span style=\"height:3em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∴</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span style=\"margin-right:0.05017em;\">B</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span>A</span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span style=\"margin-right:0.05017em;\">B</span><span>)</span></span></span><span style=\"top:-0.11667000000000005em;\"><span style=\"height:3em;\"></span><span><span></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span style=\"margin-right:0.05017em;\">B</span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>A</span><span style=\"margin-right:0.05017em;\">B</span><span>)</span></span></span></span><span>​</span></span><span><span style=\"height:3.54333em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n</blockquote>\n</li>\n<li>\n<p>设考生的报名表来自三个地区各有 10 份， 15 份， 25 份，其中女生分别为 3 份， 7 份， 5 份。随机从一地区，先后任取两份报名表。</p>\n<p>求\n(1) 先取出一份是女生的概率；\n(2) 已知后取出的一份为男生的，而先取出的一份为女生的概率。</p>\n<blockquote>\n<p>设 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.03148em;\">k</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>：第 k 次取出的是女生 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span style=\"margin-right:0.03148em;\">k</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span>1</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>2</span></span></span></span>\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>：考生第 i 个地区，<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.65952em;vertical-align:0em;\"></span><span>i</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span>1</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>2</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>3</span></span></span></span>\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span></span></span></span></p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:10.993662em;vertical-align:-5.246831em;\"></span><span><span><span><span><span><span style=\"height:5.746831em;\"><span style=\"top:-7.746831em;\"><span style=\"height:3.8011130000000004em;\"></span><span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span></span></span><span style=\"top:-5.329162em;\"><span style=\"height:3.8011130000000004em;\"></span><span></span></span><span style=\"top:-3.347722em;\"><span style=\"height:3.8011130000000004em;\"></span><span></span></span><span style=\"top:-1.5217219999999996em;\"><span style=\"height:3.8011130000000004em;\"></span><span></span></span><span style=\"top:0.45971799999999974em;\"><span style=\"height:3.8011130000000004em;\"></span><span></span></span></span><span>​</span></span><span><span style=\"height:5.246831em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:5.746831em;\"><span style=\"top:-7.746831em;\"><span style=\"height:3.8011130000000004em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span><span><span style=\"height:1.8011130000000004em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span style=\"height:3.05em;\"></span><span><span><span>i</span><span>=</span><span>1</span></span></span></span><span style=\"top:-3.050005em;\"><span style=\"height:3.05em;\"></span><span><span>∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span style=\"height:3.05em;\"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style=\"height:1.277669em;\"><span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>∣</span><span><span>A</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span></span></span><span style=\"top:-3.347722em;\"><span style=\"height:3.8011130000000004em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>3</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>10</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>3</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>15</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>7</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>3</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>25</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>5</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span></span></span><span style=\"top:0.45971799999999974em;\"><span style=\"height:3.8011130000000004em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>90</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>29</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span></span></span></span><span>​</span></span><span><span style=\"height:5.246831em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n</blockquote>\n<blockquote>\n<p>条件概率</p>\n</blockquote>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:9.6911em;vertical-align:-4.59555em;\"></span><span><span><span><span><span><span style=\"height:5.09555em;\"><span style=\"top:-7.095550000000001em;\"><span style=\"height:3.56033em;\"></span><span></span></span><span style=\"top:-4.932220000000001em;\"><span style=\"height:3.56033em;\"></span><span></span></span><span style=\"top:-3.4322200000000005em;\"><span style=\"height:3.56033em;\"></span><span></span></span><span style=\"top:-1.9322200000000005em;\"><span style=\"height:3.56033em;\"></span><span></span></span><span style=\"top:0.04922000000000015em;\"><span style=\"height:3.56033em;\"></span><span></span></span></span><span>​</span></span><span><span style=\"height:4.59555em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:5.09555em;\"><span style=\"top:-7.095550000000001em;\"><span style=\"height:3.56033em;\"></span><span><span></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>∣</span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.56033em;\"><span style=\"top:-2.22667em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span><span>)</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span><span>)</span></span></span></span><span>​</span></span><span><span style=\"height:1.02333em;\"><span></span></span></span></span></span><span></span></span></span></span><span style=\"top:-3.4322200000000005em;\"><span style=\"height:3.56033em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∵</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span></span></span><span style=\"top:0.04922000000000015em;\"><span style=\"height:3.56033em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∴</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>90</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>29</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>90</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>61</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span></span></span></span><span>​</span></span><span><span style=\"height:4.59555em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:7.62999em;vertical-align:-3.5649950000000006em;\"></span><span><span><span><span><span><span style=\"height:4.064995em;\"><span style=\"top:-6.181665em;\"><span style=\"height:3em;\"></span><span><span>∴</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span><span style=\"top:-4.681665em;\"><span style=\"height:3em;\"></span><span></span></span><span style=\"top:-3.1383349999999997em;\"><span style=\"height:3em;\"></span><span></span></span><span style=\"top:-1.6383349999999997em;\"><span style=\"height:3em;\"></span><span></span></span><span style=\"top:-0.09500499999999956em;\"><span style=\"height:3em;\"></span><span></span></span></span><span>​</span></span><span><span style=\"height:3.5649950000000006em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:4.064995em;\"><span style=\"top:-6.181665em;\"><span style=\"height:3em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>Ω</span><span>(</span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span><span>)</span></span></span><span style=\"top:-3.1383349999999997em;\"><span style=\"height:3em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span>(</span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span><span>)</span></span></span><span style=\"top:-0.09500499999999956em;\"><span style=\"height:3em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:3.5649950000000006em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:12.065004000000002em;vertical-align:-5.782502000000001em;\"></span><span><span><span><span><span><span style=\"height:6.282502em;\"><span style=\"top:-8.282502000000001em;\"><span style=\"height:3.8011130000000004em;\"></span><span><span>∴</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span><span>)</span></span></span><span style=\"top:-5.864833000000001em;\"><span style=\"height:3.8011130000000004em;\"></span><span></span></span><span style=\"top:-3.4037200000000007em;\"><span style=\"height:3.8011130000000004em;\"></span><span></span></span><span style=\"top:-0.9860510000000011em;\"><span style=\"height:3.8011130000000004em;\"></span><span></span></span><span style=\"top:0.9953890000000004em;\"><span style=\"height:3.8011130000000004em;\"></span><span></span></span></span><span>​</span></span><span><span style=\"height:5.782502000000001em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:6.282502em;\"><span style=\"top:-8.282502000000001em;\"><span style=\"height:3.8011130000000004em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span><span><span style=\"height:1.8011130000000004em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span style=\"height:3.05em;\"></span><span><span><span>i</span><span>=</span><span>1</span></span></span></span><span style=\"top:-3.050005em;\"><span style=\"height:3.05em;\"></span><span><span>∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span style=\"height:3.05em;\"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style=\"height:1.277669em;\"><span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span></span></span><span style=\"top:-3.4037200000000016em;\"><span style=\"height:3.8011130000000004em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span><span><span style=\"height:1.8011130000000004em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span style=\"height:3.05em;\"></span><span><span><span>i</span><span>=</span><span>1</span></span></span></span><span style=\"top:-3.050005em;\"><span style=\"height:3.05em;\"></span><span><span>∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span style=\"height:3.05em;\"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style=\"height:1.277669em;\"><span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>∣</span><span><span>A</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span><span><span><span style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.80333em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span><span>∣</span><span><span>A</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span></span></span><span style=\"top:0.9953889999999986em;\"><span style=\"height:3.8011130000000004em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>9</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>7</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span></span></span></span><span>​</span></span><span><span style=\"height:5.782501999999999em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n</li>\n<li>\n<p>在 AB 电路中，元件的损坏是相互独立的。在 T 内，元件损坏的概率为</p>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>元件</th>\n<th>k1</th>\n<th>k2</th>\n<th>A_1</th>\n<th>A_2</th>\n<th>A_3</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>几率</td>\n<td>0.1</td>\n<td>0.2</td>\n<td>0.4</td>\n<td>0.7</td>\n<td>0.5</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>设 B 为断路事件</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.5000000000000002em;vertical-align:-0.5000000000000002em;\"></span><span><span><span><span><span><span style=\"height:1em;\"><span style=\"top:-3.16em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.05017em;\">B</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span style=\"margin-right:0.03148em;\">k</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>(</span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span>A</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span style=\"margin-right:0.03148em;\">k</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:0.5000000000000002em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n</blockquote>\n",
      "date_published": "2016-10-14T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "复习"
      ]
    },
    {
      "title": "2. 随机变量及其分布",
      "url": "https://wafer.li/blog-corners/old-inventory/Reviews/Probability/2.%20%E9%9A%8F%E6%9C%BA%E5%8F%98%E9%87%8F%E5%8F%8A%E5%85%B6%E5%88%86%E5%B8%83/",
      "id": "https://wafer.li/blog-corners/old-inventory/Reviews/Probability/2.%20%E9%9A%8F%E6%9C%BA%E5%8F%98%E9%87%8F%E5%8F%8A%E5%85%B6%E5%88%86%E5%B8%83/",
      "summary": "<h2 id=\"_2-1-随机变量\"> 2.1 随机变量</h2>\n<p>样本空间是<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>{</span><span>e</span><span>}</span></span></span></span>, <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.07847em;\">X</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.07847em;\">X</span><span>(</span><span>e</span><span>)</span></span></span></span> 是定义在 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05764em;\">S</span></span></span></span> 上的<strong>实值单值函数</strong>，则称 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.07847em;\">X</span></span></span></span> 为随机变量。\n定义域是 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05764em;\">S</span></span></span></span>，值域是实数集合\n<strong>注意是单值函数</strong>，也就是说，随机变量就是一个数。</p>\n<p>可以使用随机变量来表示事件</p>\n<blockquote>\n<p>例如 1 表示 true , 0 表示 false</p>\n</blockquote>\n",
      "content_html": "<h2 id=\"_2-1-随机变量\"> 2.1 随机变量</h2>\n<p>样本空间是<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>{</span><span>e</span><span>}</span></span></span></span>, <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.07847em;\">X</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.07847em;\">X</span><span>(</span><span>e</span><span>)</span></span></span></span> 是定义在 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05764em;\">S</span></span></span></span> 上的<strong>实值单值函数</strong>，则称 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.07847em;\">X</span></span></span></span> 为随机变量。\n定义域是 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05764em;\">S</span></span></span></span>，值域是实数集合\n<strong>注意是单值函数</strong>，也就是说，随机变量就是一个数。</p>\n<p>可以使用随机变量来表示事件</p>\n<blockquote>\n<p>例如 1 表示 true , 0 表示 false</p>\n</blockquote>\n\n<h2 id=\"_2-1-1-例题\"> 2.1.1 例题</h2>\n<ol>\n<li>\n<p>盒子里有 5 个球， 2 白 ，3 黑，从中任取 3 个球</p>\n<blockquote>\n<p>设 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.07847em;\">X</span></span></span></span> 为抽取黑球的个数，则 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>:</span></span></span></span> 全是黑球 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.36687em;vertical-align:0em;\"></span><span>⇒</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.07847em;\">X</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>3</span></span></span></span></p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"_2-2-离散随机变量及其分布律\"> 2.2 离散随机变量及其分布律</h2>\n<p>设 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.07847em;\">X</span></span></span></span> 的所有可能取值为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span><span>x</span><span><span><span><span style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.03148em;\">k</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>(</span><span style=\"margin-right:0.03148em;\">k</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>1</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>2</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>…</span><span>)</span></span></span></span>\n则 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>{</span><span style=\"margin-right:0.07847em;\">X</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span><span>x</span><span><span><span><span style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.03148em;\">k</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>}</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span><span style=\"margin-right:0.13889em;\">P</span><span><span><span><span style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.03148em;\">k</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span> </span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.03148em;\">k</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span>1</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>2</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>…</span></span></span></span></p>\n<p>由概率性质可知：</p>\n<ol>\n<li>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span><span style=\"margin-right:0.13889em;\">P</span><span><span><span><span style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.03148em;\">k</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≥</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0</span></span></span></span></p>\n</li>\n<li>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.104002em;vertical-align:-0.29971000000000003em;\"></span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span><span><span><span style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span style=\"margin-right:0.03148em;\">k</span><span>=</span><span>1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>∞</span></span></span></span><span>​</span></span><span><span style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span style=\"margin-right:0.13889em;\">P</span><span><span><span><span style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.03148em;\">k</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1</span></span></span></span></p>\n</li>\n</ol>\n<p>上述性质称为分布律，也可用表格表示</p>\n<h3 id=\"_2-2-1-0-1-分布\"> 2.2.1 0 - 1 分布</h3>\n<p>在<strong>一次试验中</strong>\n若 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.07847em;\">X</span></span></span></span> 只可能取 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span>0</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>1</span></span></span></span> 两个值（事件 A 出现或不出现），那么</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>{</span><span>x</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.03148em;\">k</span><span>}</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.149108em;vertical-align:-0.25em;\"></span><span><span>p</span><span><span><span><span style=\"height:0.8991079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span>(</span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1.149108em;vertical-align:-0.25em;\"></span><span>p</span><span><span>)</span><span><span><span><span style=\"height:0.8991079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>1</span><span>−</span><span style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.03148em;\">k</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span>0</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>1</span></span></span></span></span></p>\n<h3 id=\"_2-2-2-伯努利试验-二项分布\"> 2.2.2 伯努利试验（二项分布）</h3>\n<p>设有一个 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05764em;\">E</span></span></span></span>，只有两个结果，现将 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05764em;\">E</span></span></span></span> 进行 n 次独立的<strong>重复试验</strong>，称为 n 重伯努利试验。</p>\n<p>伯努利试验满足二项分布：</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>{</span><span style=\"margin-right:0.07847em;\">X</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.03148em;\">k</span><span>}</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.149108em;vertical-align:-0.25em;\"></span><span><span style=\"margin-right:0.07153em;\">C</span><span><span><span><span style=\"height:0.8991079999999998em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.03148em;\">k</span></span></span></span><span>​</span></span><span><span style=\"height:0.247em;\"><span></span></span></span></span></span></span><span><span>p</span><span><span><span><span style=\"height:0.8991079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span>(</span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1.149108em;vertical-align:-0.25em;\"></span><span>p</span><span><span>)</span><span><span><span><span style=\"height:0.8991079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>n</span><span>−</span><span style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span><span> </span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.03148em;\">k</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span>0</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>1</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>2</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>…</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>n</span></span></span></span></span></p>\n<p>简化为：<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span>(</span><span>n</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>p</span><span>)</span></span></span></span></p>\n<h4 id=\"_2-2-2-1-例题\"> 2.2.2.1 例题</h4>\n<ol>\n<li>\n<p>仪器中有 5 块同类固体组件相互独立工作，每一块经 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.13889em;\">T</span></span></span></span> 小时后损坏的概率为 p， 问： <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.13889em;\">T</span></span></span></span> 小时后，其中有 3 块损坏的概率 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span>p</span></span></span></span></p>\n<blockquote>\n<p>设 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.02778em;\">r</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.03588em;\">v</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.07847em;\">X</span></span></span></span>——损坏块数，有 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.07847em;\">X</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∼</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span>(</span><span>s</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>p</span><span>)</span></span></span></span>，则：\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>p</span><span>{</span><span style=\"margin-right:0.07847em;\">X</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>3</span><span>}</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span><span style=\"margin-right:0.07153em;\">C</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-2.4518920000000004em;margin-left:-0.07153em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>5</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span><span>p</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>3</span></span></span></span></span></span></span></span><span>(</span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span>p</span><span><span>)</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span></span></span></span></p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"_2-2-3-泊松分布\"> 2.2.3 泊松分布</h3>\n<p>利用泊松定理，则有：</p>\n<p>设 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span>λ</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>&lt;</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0</span></span></span></span>, <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span>n</span></span></span></span> 是任意正整数，设<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span>n</span><span>p</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span>λ</span></span></span></span>(<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span>p</span></span></span></span> 很小)，则\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span>∀</span><span style=\"margin-right:0.03148em;\">k</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∈</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.771331em;vertical-align:0em;\"></span><span><span style=\"margin-right:0.07153em;\">Z</span><span><span><span><span style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>+</span></span></span></span></span></span></span></span></span></span></span>,则有：</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.5991079999999998em;vertical-align:-0.7em;\"></span><span><span><span><span style=\"height:0.69444em;\"><span style=\"top:-2.4em;margin-left:0em;\"><span style=\"height:3em;\"></span><span><span><span>n</span><span>→</span><span>∞</span></span></span></span><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span>lim</span></span></span></span><span>​</span></span><span><span style=\"height:0.7em;\"><span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span style=\"margin-right:0.07153em;\">C</span><span><span><span><span style=\"height:0.8991079999999998em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.03148em;\">k</span></span></span></span><span>​</span></span><span><span style=\"height:0.247em;\"><span></span></span></span></span></span></span><span><span>p</span><span><span><span><span style=\"height:0.8991079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span>(</span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1.149108em;vertical-align:-0.25em;\"></span><span>p</span><span><span>)</span><span><span><span><span style=\"height:0.8991079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>n</span><span>−</span><span style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>知：</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:6.425108000000001em;vertical-align:-2.962554000000001em;\"></span><span><span><span><span><span><span style=\"height:3.462554em;\"><span style=\"top:-5.561661999999999em;\"><span style=\"height:3.526108em;\"></span><span><span><span style=\"margin-right:0.07153em;\">C</span><span><span><span><span style=\"height:0.8991079999999998em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.03148em;\">k</span></span></span></span><span>​</span></span><span><span style=\"height:0.247em;\"><span></span></span></span></span></span></span><span><span>p</span><span><span><span><span style=\"height:0.8991079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span>(</span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>p</span><span><span>)</span><span><span><span><span style=\"height:0.8991079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>n</span><span>−</span><span style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.7356619999999996em;\"><span style=\"height:3.526108em;\"></span><span></span></span><span style=\"top:-1.5495539999999992em;\"><span style=\"height:3.526108em;\"></span><span></span></span></span><span>​</span></span><span><span style=\"height:2.962554000000001em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:3.462554em;\"><span style=\"top:-5.561661999999999em;\"><span style=\"height:3.526108em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.03148em;\">k</span><span>!</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>n</span><span>(</span><span>n</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>1</span><span>)</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>…</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>(</span><span>n</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.03148em;\">k</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>1</span><span>)</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span>(</span><span><span></span><span><span><span><span style=\"height:1.37144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>n</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>λ</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span><span>)</span><span><span><span><span style=\"height:0.8991079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span>(</span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span></span><span><span><span><span style=\"height:1.37144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>n</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>λ</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span><span>)</span><span><span><span><span style=\"height:0.8991079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>n</span><span>−</span><span style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-1.549554em;\"><span style=\"height:3.526108em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.526108em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.03148em;\">k</span><span>!</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span><span>λ</span><span><span><span><span style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span><span></span><span><span><span><span style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span><span>n</span><span><span><span><span style=\"height:0.7751079999999999em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>n</span><span>(</span><span>n</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>1</span><span>)</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>…</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>(</span><span>n</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.03148em;\">k</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>1</span><span>)</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span>(</span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span></span><span><span><span><span style=\"height:1.37144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>n</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>λ</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span><span>)</span><span><span><span><span style=\"height:0.7143919999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>n</span></span></span></span></span></span></span></span></span><span>(</span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span></span><span><span><span><span style=\"height:1.37144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>n</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>λ</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span><span>)</span><span><span><span><span style=\"height:0.8991079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>−</span><span style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:2.962554em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>定义：称 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.02778em;\">r</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.03588em;\">v</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.07847em;\">X</span></span></span></span>，若</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>{</span><span style=\"margin-right:0.07847em;\">X</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.03148em;\">k</span><span>}</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:2.212108em;vertical-align:-0.686em;\"></span><span><span></span><span><span><span><span style=\"height:1.526108em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.03148em;\">k</span><span>!</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span><span>λ</span><span><span><span><span style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span><span>e</span><span><span><span><span style=\"height:0.8991079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>−</span><span>λ</span></span></span></span></span></span></span></span></span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.03148em;\">k</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span>0</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>1</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>2</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>…</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>n</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>…</span></span></span></span></span></p>\n<p>记为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>Π</span><span>(</span><span>λ</span><span>)</span></span></span></span></p>\n<h4 id=\"_2-2-3-1-例题\"> 2.2.3.1 例题</h4>\n<ol>\n<li>\n<p>例：在保险公司 2500 名同一年龄同社会阶层人参保，据统计在此类人中，每年每人死亡率为 0.002，每人参保在 1 月 1 日交 1200 元保费，而死亡时家属可以从保险公司领取 20 万保险金。求：(不计利息及管理费)</p>\n<ol>\n<li>保险公司亏本的概率</li>\n<li>保险公司获利不少于 100 万的概率</li>\n</ol>\n<blockquote>\n<p>死亡人数 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.02778em;\">r</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.03588em;\">v</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.07847em;\">X</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∼</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span>(</span><span>2500</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>0.002</span><span>)</span></span></span></span></p>\n</blockquote>\n<blockquote>\n<p>亏本：<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span>200000</span><span style=\"margin-right:0.07847em;\">X</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>&gt;</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>3000000</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>→</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span style=\"margin-right:0.07847em;\">X</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>&gt;</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>15</span></span></span></span></p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:17.306452em;vertical-align:-8.403226em;\"></span><span><span><span><span><span><span style=\"height:8.903226em;\"><span style=\"top:-10.903226em;\"><span style=\"height:3.801113em;\"></span><span><span>∴</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>p</span><span>{</span><span style=\"margin-right:0.07847em;\">X</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>&gt;</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>15</span><span>}</span></span></span><span style=\"top:-8.461113000000001em;\"><span style=\"height:3.801113em;\"></span><span></span></span><span style=\"top:-6.961113em;\"><span style=\"height:3.801113em;\"></span><span></span></span><span style=\"top:-5.461113em;\"><span style=\"height:3.801113em;\"></span><span></span></span><span style=\"top:-2.999999999999999em;\"><span style=\"height:3.801113em;\"></span><span></span></span><span style=\"top:-0.557887em;\"><span style=\"height:3.801113em;\"></span><span></span></span><span style=\"top:0.942113em;\"><span style=\"height:3.801113em;\"></span><span></span></span><span style=\"top:2.442113em;\"><span style=\"height:3.801113em;\"></span><span></span></span><span style=\"top:3.942113em;\"><span style=\"height:3.801113em;\"></span><span></span></span></span><span>​</span></span><span><span style=\"height:8.403226em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:8.903226em;\"><span style=\"top:-10.903226em;\"><span style=\"height:3.801113em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span><span><span style=\"height:1.801113em;\"><span style=\"top:-1.8478869999999998em;margin-left:0em;\"><span style=\"height:3.05em;\"></span><span><span><span style=\"margin-right:0.03148em;\">k</span><span>=</span><span>16</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span style=\"height:3.05em;\"></span><span><span>∑</span></span></span><span style=\"top:-4.300005em;margin-left:0em;\"><span style=\"height:3.05em;\"></span><span><span><span>2500</span></span></span></span></span><span>​</span></span><span><span style=\"height:1.302113em;\"><span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span style=\"margin-right:0.07153em;\">C</span><span><span><span><span style=\"height:0.8991079999999998em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>2500</span></span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.03148em;\">k</span></span></span></span><span>​</span></span><span><span style=\"height:0.247em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>⋅</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>0.00</span><span><span>2</span><span><span><span><span style=\"height:0.8991079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>⋅</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>0.99</span><span><span>8</span><span><span><span><span style=\"height:0.8991079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>2500</span><span>−</span><span style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-6.961113em;\"><span style=\"height:3.801113em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≈</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>p</span><span>{</span><span style=\"margin-right:0.07847em;\">X</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≤</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>15</span><span>}</span></span></span><span style=\"top:-2.999999999999999em;\"><span style=\"height:3.801113em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≈</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span><span><span style=\"height:1.801113em;\"><span style=\"top:-1.8478869999999998em;margin-left:0em;\"><span style=\"height:3.05em;\"></span><span><span><span style=\"margin-right:0.03148em;\">k</span><span>=</span><span>0</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span style=\"height:3.05em;\"></span><span><span>∑</span></span></span><span style=\"top:-4.300005em;margin-left:0em;\"><span style=\"height:3.05em;\"></span><span><span><span>15</span></span></span></span></span><span>​</span></span><span><span style=\"height:1.302113em;\"><span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span></span><span><span><span><span style=\"height:1.526108em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.03148em;\">k</span><span>!</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span><span>5</span><span><span><span><span style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span><span>e</span><span><span><span><span style=\"height:0.864108em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>−</span><span>5</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:0.942113em;\"><span style=\"height:3.801113em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≈</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>0.998</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>…</span></span></span><span style=\"top:3.942113em;\"><span style=\"height:3.801113em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>0.000069</span></span></span></span><span>​</span></span><span><span style=\"height:8.403226em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n</blockquote>\n</li>\n<li>\n<p>二进制传输信号，信道无记忆，误码率为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0.2</span></span></span></span>，为了抗干扰，重复发送消息：<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05764em;\">S</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>01101</span></span></span></span>，假设信道对每个 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span>0</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>1</span></span></span></span>的干扰相互独立，问：</p>\n<ol>\n<li>重复 5 次 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05764em;\">S</span></span></span></span>, 能成功发送一次的概率。</li>\n<li>为确保成功的概率为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0.99</span></span></span></span>, 问至少应该重复发送多少次。</li>\n</ol>\n<blockquote>\n<p>无记忆：</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:4.500000000000002em;vertical-align:-2.000000000000001em;\"></span><span><span><span><span><span><span style=\"height:2.5000000000000004em;\"><span style=\"top:-4.5em;\"><span style=\"height:2.84em;\"></span><span></span></span><span style=\"top:-3em;\"><span style=\"height:2.84em;\"></span><span></span></span><span style=\"top:-1.4999999999999991em;\"><span style=\"height:2.84em;\"></span><span></span></span></span><span>​</span></span><span><span style=\"height:2.000000000000001em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:2.5000000000000004em;\"><span style=\"top:-4.66em;\"><span style=\"height:3em;\"></span><span><span></span><span>p</span><span>{</span><span><span style=\"margin-right:0.05278em;\">β</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span>…</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span style=\"margin-right:0.05278em;\">β</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>m</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>(</span><span style=\"margin-right:0.00773em;\">R</span><span>ece</span><span>i</span><span style=\"margin-right:0.03588em;\">v</span><span>e</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∣</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span style=\"margin-right:0.0037em;\">α</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.0037em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span style=\"margin-right:0.0037em;\">α</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.0037em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span>…</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span style=\"margin-right:0.0037em;\">α</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.0037em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>m</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>(</span><span style=\"margin-right:0.05764em;\">S</span><span>e</span><span>n</span><span>d</span><span>)}</span></span></span><span style=\"top:-1.6599999999999997em;\"><span style=\"height:3em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>p</span><span>{</span><span><span style=\"margin-right:0.05278em;\">β</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∣</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span style=\"margin-right:0.0037em;\">α</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.0037em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>}</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>⋅</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>p</span><span>{</span><span><span style=\"margin-right:0.05278em;\">β</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∣</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span style=\"margin-right:0.0037em;\">α</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.0037em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>}</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>…</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>p</span><span>{</span><span><span style=\"margin-right:0.05278em;\">β</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>m</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∣</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span style=\"margin-right:0.0037em;\">α</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.0037em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>m</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>}</span></span></span></span><span>​</span></span><span><span style=\"height:2.0000000000000004em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<ol>\n<li>引入一个合理的随机变量：<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.02778em;\">r</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.03588em;\">v</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.07847em;\">X</span></span></span></span>(次数)，则，正确接收的次数 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.02778em;\">r</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.03588em;\">v</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.07847em;\">X</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∼</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.05017em;\">B</span><span>(</span><span>5</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>p</span><span>)</span></span></span></span> （<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span>p</span></span></span></span> 为每次发 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05764em;\">S</span></span></span></span> 能正确收到的概率）</li>\n</ol>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:13.548216000000002em;vertical-align:-6.524108000000001em;\"></span><span><span><span><span><span><span style=\"height:7.024108000000001em;\"><span style=\"top:-9.184108000000002em;\"><span style=\"height:3em;\"></span><span><span>p</span></span></span><span style=\"top:-7.684108em;\"><span style=\"height:3em;\"></span><span></span></span><span style=\"top:-6.184108em;\"><span style=\"height:3em;\"></span><span></span></span><span style=\"top:-4.684108em;\"><span style=\"height:3em;\"></span><span></span></span><span style=\"top:-3.16em;\"><span style=\"height:3em;\"></span><span></span></span><span style=\"top:-1.6599999999999993em;\"><span style=\"height:3em;\"></span><span></span></span><span style=\"top:-0.13589199999999924em;\"><span style=\"height:3em;\"></span><span></span></span><span style=\"top:1.3641080000000008em;\"><span style=\"height:3em;\"></span><span></span></span><span style=\"top:2.8641080000000008em;\"><span style=\"height:3em;\"></span><span></span></span></span><span>​</span></span><span><span style=\"height:6.524108000000001em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:7.024108000000001em;\"><span style=\"top:-9.184108000000002em;\"><span style=\"height:3em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>{</span><span style=\"margin-right:0.00773em;\">R</span><span>ece</span><span>i</span><span style=\"margin-right:0.03588em;\">v</span><span>e</span><span> </span><span style=\"margin-right:0.05764em;\">S</span><span>∣</span><span style=\"margin-right:0.05764em;\">S</span><span>e</span><span>n</span><span>d</span><span> </span><span style=\"margin-right:0.05764em;\">S</span><span>}</span></span></span><span style=\"top:-6.184108em;\"><span style=\"height:3em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span><span>0∣0</span></span><span style=\"margin-right:0.13889em;\">P</span><span><span>1∣1</span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span>⋯</span></span></span><span style=\"top:-3.16em;\"><span style=\"height:3em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>(</span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>0.2</span><span><span>)</span><span><span><span><span style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>5</span></span></span></span></span></span></span></span></span></span><span style=\"top:-0.13589199999999924em;\"><span style=\"height:3em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>0.</span><span><span>8</span><span><span><span><span style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>5</span></span></span></span></span></span></span></span></span></span><span style=\"top:2.8641080000000008em;\"><span style=\"height:3em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>0.328</span></span></span></span><span>​</span></span><span><span style=\"height:6.524108000000001em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li></li>\n</ol>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:10.524108000000002em;vertical-align:-5.012054000000002em;\"></span><span><span><span><span><span><span style=\"height:5.512054000000001em;\"><span style=\"top:-7.672054000000001em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.13889em;\">P</span><span>{</span><span style=\"margin-right:0.05764em;\">S</span><span>u</span><span>ccess</span><span>}</span></span></span><span style=\"top:-6.172054em;\"><span style=\"height:3em;\"></span><span></span></span><span style=\"top:-4.672053999999999em;\"><span style=\"height:3em;\"></span><span></span></span><span style=\"top:-3.1720539999999993em;\"><span style=\"height:3em;\"></span><span></span></span><span style=\"top:-1.6479459999999992em;\"><span style=\"height:3em;\"></span><span></span></span><span style=\"top:-0.14794599999999836em;\"><span style=\"height:3em;\"></span><span></span></span><span style=\"top:1.3520540000000016em;\"><span style=\"height:3em;\"></span><span></span></span></span><span>​</span></span><span><span style=\"height:5.012054000000002em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:5.512054000000001em;\"><span style=\"top:-7.672054000000001em;\"><span style=\"height:3em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>{</span><span style=\"margin-right:0.07847em;\">X</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≥</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>1</span><span>}</span></span></span><span style=\"top:-4.672054em;\"><span style=\"height:3em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>{</span><span style=\"margin-right:0.07847em;\">X</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>0</span><span>}</span></span></span><span style=\"top:-1.6479460000000001em;\"><span style=\"height:3em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span style=\"margin-right:0.07153em;\">C</span><span><span><span><span style=\"height:0.8641079999999999em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>5</span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>0</span></span></span></span><span>​</span></span><span><span style=\"height:0.247em;\"><span></span></span></span></span></span></span><span>0.32</span><span><span>8</span><span><span><span><span style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>0</span></span></span></span></span></span></span></span><span>(</span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>0.328</span><span><span>)</span><span><span><span><span style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>5</span></span></span></span></span></span></span></span></span></span><span style=\"top:1.3520540000000008em;\"><span style=\"height:3em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>0.863</span></span></span></span><span>​</span></span><span><span style=\"height:5.012054000000001em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n</blockquote>\n<blockquote>\n<ol start=\"3\">\n<li></li>\n</ol>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>{</span><span style=\"margin-right:0.07847em;\">X</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≥</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>1</span><span>}</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0.99</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>(</span><span>0.672</span><span><span>)</span><span><span><span><span style=\"height:0.7143919999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span></span></span></span></span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>n</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>12</span></span></span></span></span></p>\n</blockquote>\n</li>\n<li>\n<p>电话交换机，每分钟呼叫次数 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.07847em;\">X</span></span></span></span> 服从 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>Π</span><span>(</span><span>4</span><span>)</span></span></span></span>，求：</p>\n<ol>\n<li>每分钟恰有 8 次呼叫的概率</li>\n<li>每分钟不大于 10 次的概率</li>\n</ol>\n<blockquote>\n<ol>\n<li><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.02778em;\">r</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.03588em;\">v</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.07847em;\">X</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∼</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>Π</span><span>(</span><span>4</span><span>)</span></span></span></span>\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>{</span><span style=\"margin-right:0.07847em;\">X</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.03148em;\">k</span><span>}</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.3879199999999998em;vertical-align:-0.345em;\"></span><span><span></span><span><span><span><span style=\"height:1.0429199999999998em;\"><span style=\"top:-2.6550000000000002em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.03148em;\">k</span><span>!</span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span style=\"height:3em;\"></span><span><span><span><span>λ</span><span><span><span><span style=\"height:0.9270285714285713em;\"><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span style=\"height:2.5em;\"></span><span><span style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:0.345em;\"><span></span></span></span></span></span><span></span></span><span><span>e</span><span><span><span><span style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>−</span><span>λ</span></span></span></span></span></span></span></span></span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.03148em;\">k</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span>0</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>1</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>2</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>…</span></span></span></span></li>\n</ol>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"_2-2-4-超几何分布-产品检验模型\"> 2.2.4 超几何分布——产品检验模型</h3>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:8.910632000000001em;vertical-align:-4.205316000000001em;\"></span><span><span><span><span><span><span style=\"height:4.705316000000001em;\"><span style=\"top:-7.496417000000001em;\"><span style=\"height:3.631101em;\"></span><span></span></span><span style=\"top:-5.996417em;\"><span style=\"height:3.631101em;\"></span><span></span></span><span style=\"top:-3.7053159999999994em;\"><span style=\"height:3.631101em;\"></span><span></span></span><span style=\"top:-1.5857849999999991em;\"><span style=\"height:3.631101em;\"></span><span></span></span><span style=\"top:-0.08578499999999956em;\"><span style=\"height:3.631101em;\"></span><span></span></span></span><span>​</span></span><span><span style=\"height:4.205316000000001em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:4.705316000000001em;\"><span style=\"top:-7.496417000000001em;\"><span style=\"height:3.631101em;\"></span><span><span></span><span style=\"margin-right:0.13889em;\">P</span><span>{</span><span style=\"margin-right:0.07847em;\">X</span><span>(</span><span style=\"margin-right:0.10903em;\">N</span><span>u</span><span>mb</span><span style=\"margin-right:0.02778em;\">er</span><span> </span><span>o</span><span style=\"margin-right:0.10764em;\">f</span><span> </span><span>De</span><span style=\"margin-right:0.10764em;\">f</span><span>ec</span><span>t</span><span>i</span><span style=\"margin-right:0.03588em;\">v</span><span>e</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.03148em;\">k</span><span>}</span></span></span><span style=\"top:-3.7053159999999994em;\"><span style=\"height:3.631101em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.6311010000000001em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.07153em;\">C</span><span><span><span><span style=\"height:0.6461920000000001em;\"><span style=\"top:-2.4064690000000004em;margin-left:-0.07153em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.10903em;\">N</span></span></span><span style=\"top:-3.0448000000000004em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.29353099999999993em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.7418620000000002em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.07153em;\">C</span><span><span><span><span style=\"height:0.849108em;\"><span style=\"top:-2.424669em;margin-left:-0.07153em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.10903em;\">M</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.03148em;\">k</span></span></span></span><span>​</span></span><span><span style=\"height:0.275331em;\"><span></span></span></span></span></span></span><span><span style=\"margin-right:0.07153em;\">C</span><span><span><span><span style=\"height:0.8892389999999999em;\"><span style=\"top:-2.406469em;margin-left:-0.07153em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span style=\"margin-right:0.10903em;\">N</span><span>−</span><span style=\"margin-right:0.10903em;\">M</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>n</span><span>−</span><span style=\"margin-right:0.03148em;\">k</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.351862em;\"><span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:0.9795309999999999em;\"><span></span></span></span></span></span><span></span></span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.03148em;\">k</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>0</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>1</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>2</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>…</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.01968em;\">l</span></span></span><span style=\"top:-0.08578500000000044em;\"><span style=\"height:3.631101em;\"></span><span><span></span><span style=\"margin-right:0.01968em;\">l</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>min</span><span>(</span><span style=\"margin-right:0.10903em;\">M</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>n</span><span>)</span></span></span></span><span>​</span></span><span><span style=\"height:4.205316em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>当</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:2.610632em;vertical-align:-0.9795309999999999em;\"></span><span>lim</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span style=\"margin-right:0.10903em;\">N</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>→</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∞</span></span><span><span></span><span><span><span><span style=\"height:1.6311010000000001em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.07153em;\">C</span><span><span><span><span style=\"height:0.6461920000000001em;\"><span style=\"top:-2.4064690000000004em;margin-left:-0.07153em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.10903em;\">N</span></span></span><span style=\"top:-3.0448000000000004em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.29353099999999993em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.7418620000000002em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.07153em;\">C</span><span><span><span><span style=\"height:0.849108em;\"><span style=\"top:-2.424669em;margin-left:-0.07153em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.10903em;\">M</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.03148em;\">k</span></span></span></span><span>​</span></span><span><span style=\"height:0.275331em;\"><span></span></span></span></span></span></span><span><span style=\"margin-right:0.07153em;\">C</span><span><span><span><span style=\"height:0.8892389999999999em;\"><span style=\"top:-2.406469em;margin-left:-0.07153em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span style=\"margin-right:0.10903em;\">N</span><span>−</span><span style=\"margin-right:0.10903em;\">M</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>n</span><span>−</span><span style=\"margin-right:0.03148em;\">k</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.351862em;\"><span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:0.9795309999999999em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.149108em;vertical-align:-0.25em;\"></span><span><span style=\"margin-right:0.07153em;\">C</span><span><span><span><span style=\"height:0.8991079999999998em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.03148em;\">k</span></span></span></span><span>​</span></span><span><span style=\"height:0.247em;\"><span></span></span></span></span></span></span><span><span>p</span><span><span><span><span style=\"height:0.8991079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span>(</span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1.149108em;vertical-align:-0.25em;\"></span><span>p</span><span><span>)</span><span><span><span><span style=\"height:0.8991079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>n</span><span>−</span><span style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>其中</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:2.04633em;vertical-align:-0.686em;\"></span><span><span></span><span><span><span><span style=\"height:1.36033em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.10903em;\">N</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.10903em;\">M</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>→</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span>p</span></span></span></span></span></p>\n<h2 id=\"_2-3-随机变量的分布函数\"> 2.3 随机变量的分布函数</h2>\n<h3 id=\"_2-3-1-定义\"> 2.3.1 定义</h3>\n<p>设随机变量 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.07847em;\">X</span></span></span></span>，<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span style=\"margin-right:0.07847em;\">X</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∈</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.00773em;\">R</span></span></span></span>, 则称 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">F</span><span>(</span><span>x</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>{</span><span style=\"margin-right:0.07847em;\">X</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≤</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>x</span><span>}</span></span></span></span> 为随机变量 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.07847em;\">X</span></span></span></span> 的分布函数。</p>\n<h3 id=\"_2-3-2-性质\"> 2.3.2 性质</h3>\n<ol>\n<li>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">F</span><span>(</span><span>x</span><span>)</span></span></span></span> 为不减函数</p>\n<blockquote>\n<p>即 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.6891em;vertical-align:-0.15em;\"></span><span><span>x</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>&gt;</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span><span>x</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>，有 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">F</span><span>(</span><span><span>x</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≥</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">F</span><span>(</span><span><span>x</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span></span></span></span>\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69224em;vertical-align:0em;\"></span><span>∵</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">F</span><span>(</span><span><span>x</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">F</span><span>(</span><span><span>x</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>{</span><span><span>x</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>&lt;</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span style=\"margin-right:0.07847em;\">X</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>&lt;</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span><span>x</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>}</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≥</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0</span></span></span></span></p>\n</blockquote>\n</li>\n<li>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span>0</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≤</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">F</span><span>(</span><span>x</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≤</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1</span></span></span></span> (非负有界性)\n且 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">F</span><span>(</span><span>−</span><span>∞</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span><span>lim</span><span><span><span><span style=\"height:0.25833100000000003em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>x</span><span>→</span><span>−</span><span>∞</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.13889em;\">F</span><span>(</span><span>x</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0</span></span></span></span>\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">F</span><span>(</span><span>∞</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span><span>lim</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>x</span><span>→</span><span>∞</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.13889em;\">F</span><span>(</span><span>x</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1</span></span></span></span></p>\n</li>\n<li>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">F</span><span>(</span><span>x</span><span>)</span></span></span></span> 是右连续的</p>\n<blockquote>\n<p>即 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">F</span><span>(</span><span>x</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>0</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">F</span><span>(</span><span>x</span><span>)</span></span></span></span></p>\n</blockquote>\n</li>\n<li>\n<p>可导性</p>\n</li>\n</ol>\n<h3 id=\"_2-3-3-利用-计算概率\"> 2.3.3 利用 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">F</span><span>(</span><span>x</span><span>)</span></span></span></span> 计算概率</h3>\n<ol>\n<li><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>{</span><span><span>x</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>&lt;</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span style=\"margin-right:0.07847em;\">X</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≤</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span><span>x</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>}</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">F</span><span>(</span><span><span>x</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">F</span><span>(</span><span><span>x</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span></span></span></span></li>\n<li><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>{</span><span style=\"margin-right:0.07847em;\">X</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>&lt;</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>x</span><span>}</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">F</span><span>(</span><span>x</span><span>)</span></span></span></span></li>\n<li><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>{</span><span style=\"margin-right:0.07847em;\">X</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>x</span><span>}</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">F</span><span>(</span><span>x</span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">F</span><span>(</span><span>x</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>0</span><span>)</span></span></span></span></li>\n<li><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>{</span><span><span>x</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>&lt;</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span style=\"margin-right:0.07847em;\">X</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>&lt;</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span><span>x</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>}</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">F</span><span>(</span><span><span>x</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>0</span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">F</span><span>(</span><span><span>x</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span></span></span></span></li>\n</ol>\n<h3 id=\"_2-3-4-例题\"> 2.3.4 例题</h3>\n<p>设随机变量 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.07847em;\">X</span></span></span></span> 的分布律为</p>\n<table>\n<thead>\n<tr>\n<th>X</th>\n<th>-1</th>\n<th>2</th>\n<th>3</th>\n<th>s</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span><span>p</span><span><span><span><span style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.03148em;\">k</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></td>\n<td><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span><span></span><span><span><span><span style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span style=\"height:3em;\"></span><span><span><span>4</span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span style=\"height:3em;\"></span><span><span><span>1</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.345em;\"><span></span></span></span></span></span><span></span></span></span></span></span></td>\n<td><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>1/2</span></span></span></span></td>\n<td><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>1/4</span></span></span></span></td>\n<td><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1</span></span></span></span></td>\n</tr>\n</tbody>\n</table>\n<p>求：</p>\n<ol>\n<li>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.07847em;\">X</span></span></span></span> 的分布函数</p>\n<blockquote>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">F</span><span>(</span><span>x</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>{</span><span style=\"margin-right:0.07847em;\">X</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≤</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>x</span><span>}</span></span></span></span>\n当 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span>x</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>&lt;</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span>−</span><span>1</span></span></span></span> 时，<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">F</span><span>(</span><span>x</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0</span></span></span></span>\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span>−</span><span>1</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≤</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span>x</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>&lt;</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>2</span><span>,</span><span> </span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.13889em;\">F</span><span>(</span><span>x</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>{</span><span style=\"margin-right:0.07847em;\">X</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>−</span><span>1</span><span>}</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span><span></span><span><span><span><span style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span style=\"height:3em;\"></span><span><span><span>4</span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span style=\"height:3em;\"></span><span><span><span>1</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.345em;\"><span></span></span></span></span></span><span></span></span></span></span></span>\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span>2</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≤</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span style=\"margin-right:0.07847em;\">X</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>&lt;</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>3</span><span>,</span><span> </span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.13889em;\">F</span><span>(</span><span>x</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>{</span><span style=\"margin-right:0.07847em;\">X</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≤</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>x</span><span>}</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>{</span><span style=\"margin-right:0.07847em;\">X</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>−</span><span>1</span><span>}</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∪</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>{</span><span style=\"margin-right:0.07847em;\">X</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>2</span><span>}</span></span></span></span></p>\n</blockquote>\n<blockquote>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69224em;vertical-align:0em;\"></span><span>∴</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">F</span><span>(</span><span>x</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:8.40004em;vertical-align:-3.9500200000000003em;\"></span><span><span><span><span><span><span style=\"height:4.45002em;\"><span style=\"top:-1.36599em;\"><span style=\"height:4.416em;\"></span><span><span>⎩</span></span></span><span style=\"top:-1.35799em;\"><span style=\"height:4.416em;\"></span><span style=\"height:2.4160000000000004em;width:0.889em;\"><svg width='0.889em' height='2.4160000000000004em' style='width:0.889em' viewBox='0 0 889 2416' preserveAspectRatio='xMinYMin'><path d='M384 0 H504 V2416 H384z M384 0 H504 V2416 H384z'/></svg></span></span><span style=\"top:-4.41601em;\"><span style=\"height:4.416em;\"></span><span><span>⎨</span></span></span><span style=\"top:-5.55801em;\"><span style=\"height:4.416em;\"></span><span style=\"height:2.4160000000000004em;width:0.889em;\"><svg width='0.889em' height='2.4160000000000004em' style='width:0.889em' viewBox='0 0 889 2416' preserveAspectRatio='xMinYMin'><path d='M384 0 H504 V2416 H384z M384 0 H504 V2416 H384z'/></svg></span></span><span style=\"top:-7.96602em;\"><span style=\"height:4.416em;\"></span><span><span>⎧</span></span></span></span><span>​</span></span><span><span style=\"height:3.9500200000000003em;\"><span></span></span></span></span></span></span><span><span><span><span><span><span style=\"height:4.423em;\"><span style=\"top:-6.423em;\"><span style=\"height:3.008em;\"></span><span><span>0</span></span></span><span style=\"top:-4.121em;\"><span style=\"height:3.008em;\"></span><span><span><span></span><span><span><span><span style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span style=\"height:3em;\"></span><span><span><span>4</span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span style=\"height:3em;\"></span><span><span><span>1</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.345em;\"><span></span></span></span></span></span><span></span></span></span></span><span style=\"top:-1.819em;\"><span style=\"height:3.008em;\"></span><span><span><span></span><span><span><span><span style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span style=\"height:3em;\"></span><span><span><span>4</span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span style=\"height:3em;\"></span><span><span><span>3</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.345em;\"><span></span></span></span></span></span><span></span></span></span></span><span style=\"top:0.48300000000000043em;\"><span style=\"height:3.008em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:3.9230000000000005em;\"><span></span></span></span></span></span><span style=\"width:1em;\"></span><span><span><span><span style=\"height:4.423em;\"><span style=\"top:-6.423em;\"><span style=\"height:3.008em;\"></span><span><span>x</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>&lt;</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>−</span><span>1</span></span></span><span style=\"top:-4.121em;\"><span style=\"height:3.008em;\"></span><span><span>−</span><span>1</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≤</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>x</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>&lt;</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>2</span></span></span><span style=\"top:-1.819em;\"><span style=\"height:3.008em;\"></span><span><span>2</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≤</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>x</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>&lt;</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>3</span></span></span><span style=\"top:0.48300000000000043em;\"><span style=\"height:3.008em;\"></span><span><span>x</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≤</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>3</span></span></span></span><span>​</span></span><span><span style=\"height:3.9230000000000005em;\"><span></span></span></span></span></span></span></span><span></span></span></span></span></span></span></p>\n</blockquote>\n<blockquote>\n<p>即 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">F</span><span>(</span><span>x</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.15557em;vertical-align:-0.40557em;\"></span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span><span><span><span style=\"height:0.14546899999999996em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span><span>x</span><span><span><span><span style=\"height:0.3448em;\"><span style=\"top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;\"><span style=\"height:2.5em;\"></span><span><span style=\"margin-right:0.03148em;\">k</span></span></span></span><span>​</span></span><span><span style=\"height:0.15122857142857138em;\"><span></span></span></span></span></span></span><span>≤</span><span>x</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.40557em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>{</span><span style=\"margin-right:0.07847em;\">X</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span><span>x</span><span><span><span><span style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.03148em;\">k</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>}</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.15557em;vertical-align:-0.40557em;\"></span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span><span><span><span style=\"height:0.14546899999999996em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span><span>x</span><span><span><span><span style=\"height:0.3448em;\"><span style=\"top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;\"><span style=\"height:2.5em;\"></span><span><span style=\"margin-right:0.03148em;\">k</span></span></span></span><span>​</span></span><span><span style=\"height:0.15122857142857138em;\"><span></span></span></span></span></span></span><span>≤</span><span>x</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.40557em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span>p</span><span><span><span><span style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.03148em;\">k</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></p>\n</blockquote>\n</li>\n<li>\n<p>求 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>{</span><span style=\"margin-right:0.07847em;\">X</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≤</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span><span></span><span><span><span><span style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span style=\"height:3em;\"></span><span><span><span>2</span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span style=\"height:3em;\"></span><span><span><span>1</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.345em;\"><span></span></span></span></span></span><span></span></span><span>}</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>{</span><span><span></span><span><span><span><span style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span style=\"height:3em;\"></span><span><span><span>2</span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span style=\"height:3em;\"></span><span><span><span>3</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.345em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>&lt;</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span style=\"margin-right:0.07847em;\">X</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≤</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span><span></span><span><span><span><span style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span style=\"height:3em;\"></span><span><span><span>2</span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span style=\"height:3em;\"></span><span><span><span>1</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.345em;\"><span></span></span></span></span></span><span></span></span><span>}</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>{</span><span>2</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≤</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span style=\"margin-right:0.07847em;\">X</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≤</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>3</span><span>}</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>{</span><span style=\"margin-right:0.07847em;\">X</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>&lt;</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>2</span><span>}</span></span></span></span> 的概率。</p>\n<blockquote>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:2.30744em;vertical-align:-0.90372em;\"></span><span><span><span><span><span><span style=\"height:1.4037200000000003em;\"><span style=\"top:-3.4037200000000003em;\"><span style=\"height:3.32144em;\"></span><span><span style=\"margin-right:0.13889em;\">P</span><span>{</span><span style=\"margin-right:0.07847em;\">X</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≤</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>2</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span>}</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.13889em;\">F</span><span>(</span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>2</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>4</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span></span></span></span><span>​</span></span><span><span style=\"height:0.90372em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:4.61488em;vertical-align:-2.05744em;\"></span><span><span><span><span><span><span style=\"height:2.55744em;\"><span style=\"top:-4.55744em;\"><span style=\"height:3.32144em;\"></span><span><span style=\"margin-right:0.13889em;\">P</span><span>{</span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>2</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>&lt;</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.07847em;\">X</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≤</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>2</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>5</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span>}</span></span></span><span style=\"top:-2.25em;\"><span style=\"height:3.32144em;\"></span><span></span></span></span><span>​</span></span><span><span style=\"height:2.05744em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:2.55744em;\"><span style=\"top:-4.55744em;\"><span style=\"height:3.32144em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.13889em;\">F</span><span>(</span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>2</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>5</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.13889em;\">F</span><span>(</span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>2</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span>)</span></span></span><span style=\"top:-2.25em;\"><span style=\"height:3.32144em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>4</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>4</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span></span></span></span><span>​</span></span><span><span style=\"height:2.05744em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:8.422320000000001em;vertical-align:-3.9611600000000005em;\"></span><span><span><span><span><span><span style=\"height:4.4611600000000005em;\"><span style=\"top:-6.9426000000000005em;\"><span style=\"height:3.32144em;\"></span><span><span style=\"margin-right:0.13889em;\">P</span><span>{</span><span>2</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≤</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.07847em;\">X</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≤</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>3</span><span>}</span></span></span><span style=\"top:-4.96116em;\"><span style=\"height:3.32144em;\"></span><span></span></span><span style=\"top:-2.653719999999999em;\"><span style=\"height:3.32144em;\"></span><span></span></span><span style=\"top:-0.3462799999999996em;\"><span style=\"height:3.32144em;\"></span><span></span></span></span><span>​</span></span><span><span style=\"height:3.9611600000000005em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:4.4611600000000005em;\"><span style=\"top:-6.9426000000000005em;\"><span style=\"height:3.32144em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>{</span><span style=\"margin-right:0.07847em;\">X</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>2</span><span>}</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>{</span><span>2</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>&lt;</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.07847em;\">X</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≤</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>3</span><span>}</span></span></span><span style=\"top:-4.96116em;\"><span style=\"height:3.32144em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>2</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.13889em;\">F</span><span>(</span><span>3</span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.13889em;\">F</span><span>(</span><span>2</span><span>)</span></span></span><span style=\"top:-2.653719999999999em;\"><span style=\"height:3.32144em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>2</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>4</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span></span></span><span style=\"top:-0.3462799999999996em;\"><span style=\"height:3.32144em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>4</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span></span></span></span><span>​</span></span><span><span style=\"height:3.9611600000000005em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>{</span><span style=\"margin-right:0.07847em;\">X</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>&lt;</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>2</span><span>}</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>4</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>{</span><span style=\"margin-right:0.07847em;\">X</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≤</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>2</span><span>}</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>{</span><span style=\"margin-right:0.07847em;\">X</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>2</span><span>}</span></span></span></span></span></p>\n</blockquote>\n</li>\n</ol>\n",
      "date_published": "2016-10-14T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "复习"
      ]
    },
    {
      "title": "概率的历史",
      "url": "https://wafer.li/blog-corners/old-inventory/Reviews/Probability/%E6%A6%82%E7%8E%87%E7%9A%84%E5%8E%86%E5%8F%B2/",
      "id": "https://wafer.li/blog-corners/old-inventory/Reviews/Probability/%E6%A6%82%E7%8E%87%E7%9A%84%E5%8E%86%E5%8F%B2/",
      "summary": "<h2 id=\"_1-起源\"> 1. 起源</h2>\n<h3 id=\"_1-1-远古时期\"> 1.1 远古时期</h3>\n<p>概率和概率论起源于游戏之中。</p>\n",
      "content_html": "<h2 id=\"_1-起源\"> 1. 起源</h2>\n<h3 id=\"_1-1-远古时期\"> 1.1 远古时期</h3>\n<p>概率和概率论起源于游戏之中。</p>\n\n<p>在远古时期，就有古人用猪或者羊的距骨来玩投掷距骨的游戏。\n由于距骨能投掷出四面，其很可能就是骰子的前身。\n古埃及发掘出的陶器甚至还显示古埃及人就已经在玩一个叫做 &quot;Hounds and Jackals&quot; 的游戏，这与现在的印度游戏“蛇梯棋”（一个用骰子来决定步数 的棋类游戏）十分相像。<sup></sup></p>\n<p>但是直到中世纪甚至文化复兴时期，虽然当时有投注赔率和保险业保险费用的计算需要，但是仍然没有产生相应的方法论来计算赔率或者保险费用。<sup></sup></p>\n<h3 id=\"_1-2-概率论的创立\"> 1.2 概率论的创立</h3>\n<p>真正的数学意义上的概率论的创立是由卡当诺(Jerome Cardan)、帕斯卡(Blaise Pascal)、费马(Pierre de Fermat) 完成的。</p>\n<p>卡当诺的 <em>Games of Chance</em> 一书写于 1564 年（但直到 1663 年才发表），他在书中描述了他对于丢骰子等赌博游戏的研究，其中他证明了利用期望结果和非期望结果的<strong>比值</strong>来定义赔率的有效性，这意味着<strong>一个事件的概率是该事件的发生次数和总可能结果的比值</strong>这一命题得到证明<sup></sup>。此书被认为是第一部概率论著作，对现代概率论的创立有着重要作用。</p>\n<p>真正的<strong>数学意义上的概率论</strong>的创立源于<strong>帕斯卡</strong>受某位热衷于赌博的朋友的影响，同<strong>费马</strong>通信讨论了这一问题。<sup></sup>其具体问题是：基于赢得赌局的概率，两个提前结束游戏的玩家如何在给定现在赌局的情形下公平的分赌注。这一讨论中提到了<strong>期望</strong>这一重要的概念。</p>\n<h3 id=\"_1-3-概率论的诞生\"> 1.3 概率论的诞生</h3>\n<p>此后，在帕斯卡的影响下，惠更斯于 1657 年发表了 <em>De ratiociniis in ludo aleae</em> （英文译作 &quot;On Reasoning in Games of Chance&quot;，中文一般译作《论赌博中的计算》），此书中结合了费马和帕斯卡的观点，在“点数分配”问题的研究中，提出了<strong>期望</strong>这一概念和其相关的理论。</p>\n<p>《论赌博中的计算》一书的发表，标志着现代概率论的正式诞生。此书也被认为是现代概率论的第一本书。</p>\n<h2 id=\"_2-18-世纪时期\"> 2. 18 世纪时期</h2>\n<p>在 18 世纪时期，人们开始使用数学工具进行概率的计算，概率和概率论开始渐渐成为数学的一个重要分支，概率开始拥有了良好的数学基础。\n通过数学工具的运用，一些较为复杂的概率模型得以得到计算。</p>\n<p>18 世纪时期的著作中，1713 年发表的雅各布·伯努利(Jakob I. Bernoulli)的《猜度术》(<em>Ars Conjectandi</em>) 是 18 世纪概率论发展的里程碑。\n书中不仅完善和拓展了惠更斯的期望值理论和公式，提出了伯努利实验和概率的古典概型，而且提出了伯努利数<sup></sup>和伯努利定理，这是大数定律<sup></sup>的最早形式。</p>\n<blockquote>\n<p>惠更斯所提出的期望值公式为<sup></sup></p>\n</blockquote>\n<blockquote>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05764em;\">E</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:2.1407700000000003em;vertical-align:-0.8804400000000001em;\"></span><span><span></span><span><span><span><span style=\"height:1.2603300000000002em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span><span>p</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span>p</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>⋯</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span>p</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span><span>p</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>0</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span>a</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>0</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span>p</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span>a</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>⋯</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span>p</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span><span>a</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:0.8804400000000001em;\"><span></span></span></span></span></span><span></span></span></span></span></span></span></p>\n</blockquote>\n<blockquote>\n<p>伯努利通过假设 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span><span>p</span><span><span><span><span style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 是互不相容的事件的概率，因此这就意味上式的分母为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1</span></span></span></span>，从而使得惠更斯的公式得到简化。</p>\n</blockquote>\n<h2 id=\"_3-19-世纪时期\"> 3. 19 世纪时期</h2>\n<p>时间来到 19 世纪，19 世纪的天文学发展使得统计学和概率学说的应用越发广泛，此时，概率论的研究方法也越来越多的应用到了统计学上。\n同时，19 世纪的几个天才数学家也促进了概率论的长足发展。</p>\n<h3 id=\"_3-1-高斯\"> 3.1 高斯</h3>\n<p>其中之一便是高斯(Gauss)，高斯在数学方面的天赋是独特的，被称为“数学界的狐狸”。他于 1801 年使用基于正态误差分布的最小二乘法成功计算出了谷神星小行星的轨道（该行星于 1801 年 12 月 31 日夜晚被再次发现），并于 1809 年经过完善了相关数学理论后，发表了这一计算方法。在这年发表的文章中，高斯通过论证</p>\n<p><strong>误差分布导出的极大似然估计 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.36687em;vertical-align:0em;\"></span><span>=</span></span></span></span> 算术平均值</strong></p>\n<p>并证明了唯一满足这一性质的概率密度函数为</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>x</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:2.25144em;vertical-align:-0.93em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.2027799999999997em;\"><span style=\"height:3em;\"></span><span><span><span><span><span style=\"height:0.90722em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span style=\"padding-left:0.833em;\"><span>2</span><span style=\"margin-right:0.03588em;\">π</span></span></span><span style=\"top:-2.86722em;\"><span style=\"height:3em;\"></span><span style=\"min-width:0.853em;height:1.08em;\"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span>​</span></span><span><span style=\"height:0.13278em;\"><span></span></span></span></span></span><span style=\"margin-right:0.03588em;\">σ</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.93em;\"><span></span></span></span></span></span><span></span></span><span><span>e</span><span><span><span><span style=\"height:1.24644em;\"><span style=\"top:-3.4534200000000004em;margin-right:0.05em;\"><span style=\"height:3em;\"></span><span><span><span>−</span><span><span></span><span><span><span><span style=\"height:1.1328857142857145em;\"><span style=\"top:-2.5061857142857145em;\"><span style=\"height:3em;\"></span><span><span><span>2</span><span><span style=\"margin-right:0.03588em;\">σ</span><span><span><span><span style=\"height:0.9384399999999999em;\"><span style=\"top:-2.93844em;margin-right:0.1em;\"><span style=\"height:2.64444em;\"></span><span>2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.2255000000000003em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.049em;\"></span></span><span style=\"top:-3.384em;\"><span style=\"height:3em;\"></span><span><span><span><span>x</span><span><span><span><span style=\"height:1.04844em;\"><span style=\"top:-3.04844em;margin-right:0.1em;\"><span style=\"height:2.64444em;\"></span><span>2</span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:0.49381428571428565em;\"><span></span></span></span></span></span><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>这就是正态分布的概率密度函数。</p>\n<p>但是高斯的数学证明部分并不完善，有种循环论证的味道：因为算术平均是优良的，所以误差符合正态分布；反过来，又基于正态分布来推导出最小二乘法和算术平均来说明其优良性。<sup></sup></p>\n<h3 id=\"_3-2-拉普拉斯\"> 3.2 拉普拉斯</h3>\n<p>此时便轮到拉普拉斯出场了，拉普拉斯也是著名的数学家，他发现的<strong>拉普拉斯变换</strong>和<strong>拉普拉斯方程</strong>在现今的图像处理等领域得到了广泛的运用。</p>\n<p>拉普拉斯在看到高斯发表的文章后，通过结合中心极限定理，提出了元误差解释，证明了正态分布的正确性。并在《概率的分析理论》(Théorie analytique des probabilités) 一书中结合了类似<strong>矩母函数</strong>、<strong>最小二乘法</strong>、<strong>归纳概率</strong>、<strong>假设检验</strong>等许多基本的统计学和概率论的理论。</p>\n<p>同时，拉普拉斯也发现了形式为</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>x</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.7935600000000003em;vertical-align:-0.686em;\"></span><span><span></span><span><span><span><span style=\"height:1.10756em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>2</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>m</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span><span>e</span><span><span><span><span style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>−</span><span>m</span><span>∣</span><span>x</span><span>∣</span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>的概率密度分布函数，并在之后被命名为<strong>拉普拉斯分布</strong></p>\n<h3 id=\"_3-3-19-世纪末\"> 3.3 19 世纪末</h3>\n<p>到 19 世纪末为止，概率论与统计学的结合愈发紧密，在统计力学领域，波尔茨曼(Ludwig Eduard Boltzmann)和吉布斯(Josiah Willard Gibbs)利用概率论的方法，成功地解释了气体的性质，例如气体是随机运动的粒子。</p>\n<p>有趣的是，概率学的历史作为一项独立的分支，在这个时期也建立了起来。\n其标志便是托尔亨特(Isaac Todhunter)于 1865 年发表了其著名的著作 <em>History of the Mathematical Theory of Probability from the Time of Pascal to that of Lagrange</em></p>\n<h2 id=\"_4-20-世纪时期\"> 4. 20 世纪时期</h2>\n<p>20 世纪时期，概率论和概率学说开始迅猛发展，公理体系建立起来，应用更为广泛，同时与其他科学领域的交叉也更为深入。</p>\n<h3 id=\"_4-1-概率与统计\"> 4.1 概率与统计</h3>\n<p>到了 20 世纪之后，由于统计学对<strong>假设检验</strong>的重视，概率论和统计学变得越发不可分割。现今，假设检验的统计方法已经广泛地应用到生物学，物理学和药物的临床试验等科学研究中。\n假设检验需要检测样本概率的显著性水平，从而判断是否接受统计假设。</p>\n<h3 id=\"_4-2-概率与物理学\"> 4.2 概率与物理学</h3>\n<p>随着 20 世纪物理学进入微观领域的研究，概率论的随机过程领域的研究也有所进展。例如为了描述布朗运动（液体中的悬浮颗粒的运动），马可罗夫过程被提出，随后应用范围不断拓宽，现今马可罗夫过程已经应用于统计、生物学和计算机互联网中。</p>\n<h3 id=\"_4-3-概率与金融\"> 4.3 概率与金融</h3>\n<p>同时，由于 20 世纪前期经济的发展和马可罗夫过程的提出，为描述股票的随机波动提供了复杂的概率模型，从而也促进了金融数学的发展，并由此产生了布莱克-舒尔模型(BS Model)、期权定价等一系列金融工具<sup></sup></p>\n<h3 id=\"_4-4-概率的解释\"> 4.4 概率的解释</h3>\n<p>20 世纪同时也见证了关于“概率的解释”的争端，在 20 世纪中期，概率被倾向于解释为 <strong>大量重复试验的频率的趋近值</strong>。</p>\n<p>而在 20 世纪末期，贝叶斯概率的观点得到复兴，贝叶斯概率学派的观点倾向于将概率定义为<strong>概率是某人对一个命题的信任程度</strong></p>\n<p>两者的主要区别在于，频率学派主要以<strong>事件</strong>作为建模主体，而贝叶斯学派以<strong>观察者的知识</strong>作为概率的建模主体。观察者首先为事件赋予一个概率，并通过观察结果来校正概率。</p>\n<blockquote>\n<p>例如扔 100 次硬币，20 次正面，80 次反面。频率学派认为扔第 101 次的概率为 0.5，而贝叶斯学派认为概率应为 0.8</p>\n</blockquote>\n<h3 id=\"_4-5-概率公理\"> 4.5 概率公理</h3>\n<p>1933 年，安德雷·柯尔莫哥洛夫(Andrey Nikolaevich Kolmogorov) 提出了著名的概率公理，这解决了在具有<strong>无限的可能结果时</strong>的概率的数学处理问题。</p>\n<h3 id=\"_4-6-概率与计算机科学\"> 4.6 概率与计算机科学</h3>\n<p>在 20 年代中后期，由于电子计算机的发明和核武器研制的需要，冯·诺伊曼，斯塔尼斯拉夫·乌拉姆和尼古拉斯·梅特罗波利斯提出了基于概率统计的蒙特卡洛方法。<sup></sup>\n其中心观点是利用随机数通过计算机模拟计算得到随机过程。</p>\n<blockquote>\n<p>在解决实际问题的时候应用蒙特卡洛方法主要有两部分工作：<sup></sup></p>\n</blockquote>\n<blockquote>\n<ol>\n<li>用蒙特卡洛方法模拟某一过程时，需要产生各种概率分布的随机变量。</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>用统计方法把模型的数字特征估计出来，从而得到实际问题的数值解。</li>\n</ol>\n</blockquote>\n<h2 id=\"_5-21-世纪后\"> 5. 21 世纪后</h2>\n<p>在 21 世纪后，概率和概率论随着机器学习和神经网络等计算机技术的发展，应用范围越加宽广。</p>\n<p>2006 年之后，雷米·库洛姆（Remi Coulom）提出了基于蒙特卡洛方法的蒙特卡洛搜索树算法。\n随后，这一算法被广泛应用到计算机围棋领域。</p>\n<p>2008 年，MoGo 在九路围棋中达到段位水平，2012 年 1 月，Zen 程序在19路围棋上以 3:1 击败二段棋手约翰·特朗普(John Tromp)，2016 年 3 月 使用蒙特卡洛算法和深度学习的 AlphaGo 程序在五番棋比赛中以 4:1 击败韩国九段棋手李世乭，Goranking 跃居世界第二。</p>\n<hr>\n<section>\n<ol>\n<li id=\"footnote1\"><p>F. N. David (1962), <a href=\"https://books.google.com/books?id=B2GCjgEACAAJ&amp;dq=isbn:9780852641712&amp;hl=en&amp;sa=X&amp;ved=0ahUKEwiT0fO9x9zMAhVW2GMKHa9hCOQQ6AEIHTAA\" target=\"_blank\" rel=\"noopener noreferrer\">Games, Gods and Gambling</a> </p>\n</li>\n<li id=\"footnote2\"><p>Franklin, <em>Science of Conjecture</em>, ch. 11. </p>\n</li>\n<li id=\"footnote3\"><p>P. Chance magazine (2012) <a href=\"https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0ahUKEwiXmufnkt3MAhVH5GMKHZuhCoMQFggdMAA&amp;url=http%3A%2F%2Fwww.columbia.edu%2F~pg2113%2Findex_files%2FGorroochurn-Some%2520Laws.pdf&amp;usg=AFQjCNFPRKznhEiPP-EZLMcUUNB4lZE5bg&amp;sig2=PojtUGZ77Ux1ntdArjwSlA\" target=\"_blank\" rel=\"noopener noreferrer\">Some laws and problems in classical probability and how Cardano anticipated them Gorrochum</a> </p>\n</li>\n<li id=\"footnote4\"><p>O'Connor, J. J.; Robertson, E. F.. &quot;The MacTutor History of Mathematics archive: Pierre de Fermat&quot; <a href=\"http://www-groups.dcs.st-and.ac.uk/~history/Biographies/Fermat.html\" target=\"_blank\" rel=\"noopener noreferrer\">http://www-groups.dcs.st-and.ac.uk/~history/Biographies/Fermat.html</a> </p>\n</li>\n<li id=\"footnote5\"><p>伯努利数最先由伯努利研究，棣莫弗以他的名字来命名，其计算公式为: <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.3762159999999999em;vertical-align:-0.481108em;\"></span><span><span style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span><span><span><span style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span style=\"margin-right:0.05724em;\">j</span><span>=</span><span>0</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>m</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.43581800000000004em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span><span style=\"top:0em;\"><span>(</span></span><span><span><span><span style=\"height:0.895108em;\"><span style=\"top:-2.3550000000000004em;\"><span style=\"height:2.7em;\"></span><span><span><span style=\"margin-right:0.05724em;\">j</span></span></span></span><span style=\"top:-3.144em;\"><span style=\"height:2.7em;\"></span><span><span><span>m</span><span>+</span><span>1</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.481108em;\"><span></span></span></span></span></span><span style=\"top:0em;\"><span>)</span></span></span></span><span><span style=\"margin-right:0.05017em;\">B</span><span><span><span><span style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.05724em;\">j</span></span></span></span><span>​</span></span><span><span style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0</span></span></span></span> </p>\n</li>\n<li id=\"footnote6\"><p>大数定律描述相当多次的重复实验的结果，其结果趋向于期望值 </p>\n</li>\n<li id=\"footnote7\"><p>https://en.wikipedia.org/wiki/Ars_Conjectandi </p>\n</li>\n<li id=\"footnote8\"><p>靳志辉(2012 年 11 月 8 日) <a href=\"https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=2&amp;ved=0ahUKEwjbibqV8dzMAhUG2WMKHf0uAR8QFggkMAE&amp;url=http%3A%2F%2Fwww.med.mcgill.ca%2Fepidemiology%2Fhanley%2Fbios601%2FMean-Quantile%2Fintro-normal-distribution-2.pdf&amp;usg=AFQjCNH6QThphNNNKzDlZIjMiiB2_SoP9g&amp;sig2=vQwqkHTB78R2h5UlvryPMA&amp;bvm=bv.122129774,d.cGc\" target=\"_blank\" rel=\"noopener noreferrer\">正态分布的前世今生</a> </p>\n</li>\n<li id=\"footnote9\"><p>Bernstein, Against the Gods, ch. 18. </p>\n</li>\n<li id=\"footnote10\"><p>Metropolis, Nicholas; Stanislaw Ulam (1949) <a href=\"http://home.gwu.edu/~stroud/classics/MetropolisUlam49.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">The Monte Carlo method</a> </p>\n</li>\n<li id=\"footnote11\"><p><a href=\"https://zh.wikipedia.org/wiki/%E8%92%99%E5%9C%B0%E5%8D%A1%E7%BE%85%E6%96%B9%E6%B3%95\" target=\"_blank\" rel=\"noopener noreferrer\">蒙特卡洛方法</a> </p>\n</li>\n</ol>\n</section>\n",
      "date_published": "2016-10-14T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "复习"
      ]
    },
    {
      "title": "实现阶段",
      "url": "https://wafer.li/blog-corners/old-inventory/Reviews/TSPi/%E5%AE%9E%E7%8E%B0%E9%98%B6%E6%AE%B5/",
      "id": "https://wafer.li/blog-corners/old-inventory/Reviews/TSPi/%E5%AE%9E%E7%8E%B0%E9%98%B6%E6%AE%B5/",
      "summary": "<h2 id=\"_1-实现标准\"> 1. 实现标准</h2>\n<p>扩展了设计标准</p>\n<ol>\n<li>\n<p>Standards Review</p>\n<blockquote>\n<p>审查了世界标准</p>\n</blockquote>\n</li>\n<li>\n<p>Naming, interfae and message standards</p>\n</li>\n<li>\n<p>Coding Standards</p>\n<ol>\n<li>\n<blockquote>\n<p>编码规范</p>\n</blockquote>\n</li>\n</ol>\n</li>\n<li>\n<p>Size Standards</p>\n</li>\n</ol>\n",
      "content_html": "<h2 id=\"_1-实现标准\"> 1. 实现标准</h2>\n<p>扩展了设计标准</p>\n<ol>\n<li>\n<p>Standards Review</p>\n<blockquote>\n<p>审查了世界标准</p>\n</blockquote>\n</li>\n<li>\n<p>Naming, interfae and message standards</p>\n</li>\n<li>\n<p>Coding Standards</p>\n<ol>\n<li>\n<blockquote>\n<p>编码规范</p>\n</blockquote>\n</li>\n</ol>\n</li>\n<li>\n<p>Size Standards</p>\n</li>\n</ol>\n\n<h2 id=\"_2-表格\"> 2.  表格</h2>\n<ol>\n<li>INS</li>\n<li>LOGT</li>\n<li>LOGD</li>\n</ol>\n<h2 id=\"_3-策略\"> 3. 策略</h2>\n<ol>\n<li>复查</li>\n<li>复用</li>\n<li>测试</li>\n</ol>\n",
      "date_published": "2017-03-27T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "复习"
      ]
    },
    {
      "title": "设计阶段",
      "url": "https://wafer.li/blog-corners/old-inventory/Reviews/TSPi/%E8%AE%BE%E8%AE%A1%E9%98%B6%E6%AE%B5/",
      "id": "https://wafer.li/blog-corners/old-inventory/Reviews/TSPi/%E8%AE%BE%E8%AE%A1%E9%98%B6%E6%AE%B5/",
      "summary": "<h2 id=\"_1-hld-作业\"> 1. HLD(作业)</h2>\n<p>设计阶段要完成高层设计，出 SDS，软件设计规格说明（体系结构文档）</p>\n<p>包含：</p>\n<ol>\n<li>\n<p>软件层次架构设计</p>\n</li>\n<li>\n<p>功能模块设计</p>\n<blockquote>\n<p>要根据需求分析书来</p>\n</blockquote>\n</li>\n<li>\n<p>数据库设计</p>\n<blockquote>\n<p>就是数据库设计，包括 E-R 图和数据库表设计</p>\n</blockquote>\n</li>\n<li>\n<p>接口和界面设计</p>\n</li>\n</ol>\n",
      "content_html": "<h2 id=\"_1-hld-作业\"> 1. HLD(作业)</h2>\n<p>设计阶段要完成高层设计，出 SDS，软件设计规格说明（体系结构文档）</p>\n<p>包含：</p>\n<ol>\n<li>\n<p>软件层次架构设计</p>\n</li>\n<li>\n<p>功能模块设计</p>\n<blockquote>\n<p>要根据需求分析书来</p>\n</blockquote>\n</li>\n<li>\n<p>数据库设计</p>\n<blockquote>\n<p>就是数据库设计，包括 E-R 图和数据库表设计</p>\n</blockquote>\n</li>\n<li>\n<p>接口和界面设计</p>\n</li>\n</ol>\n\n<h2 id=\"_2-设计标准\"> 2. 设计标准</h2>\n<ol>\n<li>\n<p>Naming Conventions</p>\n<blockquote>\n<p>命名公约，各项命名的规定</p>\n</blockquote>\n</li>\n<li>\n<p>Interface formats</p>\n<blockquote>\n<p>内部的 API 接口设计和外部的 UI 设计\n界面设计线图（界面区域划分）</p>\n</blockquote>\n</li>\n<li>\n<p>System and Error Messages</p>\n<blockquote>\n<p>就是 LOG 和 Exception 界面</p>\n</blockquote>\n</li>\n<li>\n<p>Defect Standars</p>\n<blockquote>\n<p>缺陷标准，使用 PSPi 的就行</p>\n</blockquote>\n</li>\n<li>\n<p>LOC counting</p>\n<blockquote>\n<p>只计算新增的和修改过的代码</p>\n</blockquote>\n</li>\n<li>\n<p>Design Representation Standards</p>\n<blockquote>\n<p>就是 SDS 的内容</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"_3-设计复用库\"> 3. 设计复用库</h2>\n<ol>\n<li>\n<p>复用的接口标准</p>\n</li>\n<li>\n<p>复用的文档标准</p>\n</li>\n<li>\n<p>复用部分的质量标准</p>\n</li>\n<li>\n<p>应用复用库的技术支持</p>\n</li>\n</ol>\n",
      "date_published": "2017-03-27T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "复习"
      ]
    },
    {
      "title": "Rxjava2 坑点详解",
      "url": "https://wafer.li/blog-corners/old-inventory/Rxjava/Rxjava2%20%E5%9D%91%E7%82%B9%E8%AF%A6%E8%A7%A3/",
      "id": "https://wafer.li/blog-corners/old-inventory/Rxjava/Rxjava2%20%E5%9D%91%E7%82%B9%E8%AF%A6%E8%A7%A3/",
      "summary": "<p>Rxjava，是一个响应式的(Reactive)，基于观察者模式的异步框架。</p>\n<p>除此之外，还有其他的 RxScala 和 RxSwift 等。</p>\n<blockquote>\n<p>说起来现在已经 2017 年了，应该没有什么 Java 工程师不知道什么是 Rxjava 了吧</p>\n</blockquote>\n",
      "content_html": "<p>Rxjava，是一个响应式的(Reactive)，基于观察者模式的异步框架。</p>\n<p>除此之外，还有其他的 RxScala 和 RxSwift 等。</p>\n<blockquote>\n<p>说起来现在已经 2017 年了，应该没有什么 Java 工程师不知道什么是 Rxjava 了吧</p>\n</blockquote>\n\n<p>网上关于 Rxjava 的文章已经非常多了， 如果你没有了解过 Rxjava；</p>\n<p>那么请直接到文章最后看一些资料和教程；</p>\n<p>这里就主要来讲讲一些 Rxjava2 的坑点。</p>\n<h2 id=\"_1-observable-和-flowable\"> 1. <code>Observable</code> 和 <code>Flowable</code></h2>\n<p>Rxjava2 新增了一个 <code>Flowable</code>，看起来 API 调用和 <code>Observable</code> 类似，而且官方的 README 上都是 <code>Flowable</code> 的示例教程；</p>\n<p>那么很自然的就会联想到 <code>Flowable</code> 是 <code>Obserable</code> 的替代用品；</p>\n<p>它们的 API 调用没有什么区别；</p>\n<p>如果你这么想那就是 <strong>大错特错</strong>！</p>\n<p>它们俩存在一个很大的区别就是关于背压问题的处理。</p>\n<h3 id=\"_1-1-什么是背压-backpressure\"> 1.1 什么是背压(backpressure)</h3>\n<p>在异步任务中，经常会出现一种情况：生产者生产产品过快，而消费者消费速率不同；</p>\n<p>如果不做处理，那么接收端就会被发送端淹没，或者发送端堆积一大堆事件无法处理，最终导致内存爆炸。</p>\n<p>在计算机网络中，对于这种情况的最简单处理就是采用停等模型，直到收到接收端的回报之后，才发送下一个数据。</p>\n<p>而背压，指的就是这样一种处理策略：</p>\n<p>通过将默认的被动接受事件的模式变成 <strong>主动请求事件</strong> ，从而避免接收端处理不及而被淹没或者 OOM 的问题。</p>\n<h3 id=\"_1-2-关于背压的不同处理\"> 1.2 关于背压的不同处理</h3>\n<p>那么两者具体的区别就是：</p>\n<ol>\n<li>\n<p><code>Flowable</code> 是有背压策略的，需要<strong>主动请求事件发送</strong></p>\n</li>\n<li>\n<p>而 <code>Observable</code> 是没有背压策略的，事件会自动发送，多了就会 OOM</p>\n</li>\n</ol>\n<h3 id=\"_1-3-具体的例子\"> 1.3 具体的例子</h3>\n<p>Observable：</p>\n<div><pre><code><span>Observable</span><span>.</span><span>just</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>)</span>\n          <span>.</span><span>subscribe</span><span>(</span><span>new</span> <span>Observer</span><span><span>&lt;</span><span>Integer</span><span>></span></span><span>(</span><span>)</span> <span>{</span>\n              <span>@Override</span>\n              <span>public</span> <span>void</span> <span>onSubscribe</span><span>(</span><span>Disposable</span> d<span>)</span> <span>{</span>\n                  <span>// Disposable 用来取消订阅</span>\n              <span>}</span>\n\n              <span>@Override</span>\n              <span>public</span> <span>void</span> <span>onNext</span><span>(</span><span>Integer</span> value<span>)</span> <span>{</span>\n\n              <span>}</span>\n\n              <span>@Override</span>\n              <span>public</span> <span>void</span> <span>onError</span><span>(</span><span>Throwable</span> e<span>)</span> <span>{</span>\n\n              <span>}</span>\n\n              <span>@Override</span>\n              <span>public</span> <span>void</span> <span>onComplete</span><span>(</span><span>)</span> <span>{</span>\n\n              <span>}</span>\n          <span>}</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><p><code>Observable</code> 对应的是 <code>Observer</code>；</p>\n<p>这个写法是没有背压控制的，如果事件过多会 OOM</p>\n<p>Flowable：</p>\n<div><pre><code><span>Flowable</span><span>.</span><span>just</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>)</span>\n<span>.</span><span>subscribe</span><span>(</span><span>new</span> <span>Subscriber</span><span><span>&lt;</span><span>Integer</span><span>></span></span><span>(</span><span>)</span> <span>{</span>\n    <span>Subscription</span> sub<span>;</span>\n    <span>//当订阅后，会首先调用这个方法，其实就相当于onStart()，</span>\n    <span>//传入的Subscription s参数可以用于请求数据或者取消订阅</span>\n    <span>@Override</span>\n    <span>public</span> <span>void</span> <span>onSubscribe</span><span>(</span><span>Subscription</span> s<span>)</span> <span>{</span>\n        <span>Log</span><span>.</span><span>w</span><span>(</span><span>\"TAG\"</span><span>,</span><span>\"onsubscribe start\"</span><span>)</span><span>;</span>\n        sub<span>=</span>s<span>;</span>\n        sub<span>.</span><span>request</span><span>(</span><span>1</span><span>)</span><span>;</span>\n        <span>Log</span><span>.</span><span>w</span><span>(</span><span>\"TAG\"</span><span>,</span><span>\"onsubscribe end\"</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>@Override</span>\n    <span>public</span> <span>void</span> <span>onNext</span><span>(</span><span>Integer</span> o<span>)</span> <span>{</span>\n        <span>Log</span><span>.</span><span>w</span><span>(</span><span>\"TAG\"</span><span>,</span><span>\"onNext--->\"</span><span>+</span>o<span>)</span><span>;</span>\n        sub<span>.</span><span>request</span><span>(</span><span>1</span><span>)</span><span>;</span>\n    <span>}</span>\n    <span>@Override</span>\n    <span>public</span> <span>void</span> <span>onError</span><span>(</span><span>Throwable</span> t<span>)</span> <span>{</span>\n        t<span>.</span><span>printStackTrace</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n    <span>@Override</span>\n    <span>public</span> <span>void</span> <span>onComplete</span><span>(</span><span>)</span> <span>{</span>\n        <span>Log</span><span>.</span><span>w</span><span>(</span><span>\"TAG\"</span><span>,</span><span>\"onComplete\"</span><span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><p><code>Flowable</code> 对应的是 <code>Subscriber</code></p>\n<p>可以看到，在具体的回调方法中，我们需要使用 <code>request()</code> 来指示上游的数据传输。</p>\n<p>否则， <strong>数据是不会自动传输的</strong>。</p>\n<p>还有一个有趣的地方在于上面代码的输出结果：</p>\n<div><pre><code>onsubscribe start\nonNext---<span>></span><span>0</span>\nonNext---<span>></span><span>1</span>\nonNext---<span>></span><span>2</span>\n<span>..</span>.\nonNext---<span>></span><span>10</span>\nonComplete\nonsubscribe end\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>可以看到，<code>onNext</code> 在 <code>onSubscribe</code> 方法 <strong>并没有执行完毕</strong> 就开始调用了。</p>\n<p>具体来说，是在 <code>request()</code> 之后，<code>onNext</code> 方法就立即被执行了；</p>\n<blockquote>\n<p>不过在实践中也不一定是这样的结果</p>\n</blockquote>\n<p>所以千万要注意，在 <code>request()</code> 之前就要将所有的初始化工作做好。</p>\n<h2 id=\"_2-线程调度\"> 2. 线程调度</h2>\n<p>能够对线程进行自由调度是 Rxjava 的一大优势；</p>\n<p>但是，由于 Rxjava 的 API 是流式调用，所以很可能会出现线程调度的坑。</p>\n<p>具体来说，Rxjava 通过 <code>subscribeOn()</code> 和 <code>observeOn()</code>  来实现对线程的调度；</p>\n<p>其中，<code>subscribeOn()</code> 指定的是数据的生产线程；</p>\n<p><code>observeOn()</code> 指定的是数据的消费线程。</p>\n<p>但是，一个很重要的区别在于：</p>\n<ol>\n<li>\n<p><code>subscribeOn()</code> 只能指定一次</p>\n<blockquote>\n<p>如果多次指定，则以第一次为准</p>\n</blockquote>\n</li>\n<li>\n<p><code>observeOn()</code> 可以指定多次</p>\n<blockquote>\n<p>每指定一次，其之后流式操作所在的线程就会是指定的线程</p>\n</blockquote>\n</li>\n</ol>\n<p>举个例子：</p>\n<div><pre><code><span>Observable</span><span>.</span><span>just</span><span>(</span><span>getFilePath</span><span>(</span><span>)</span><span>)</span>\n           <span>//指定在新线程中创建被观察者</span>\n          <span>.</span><span>subscribeOn</span><span>(</span><span>Schedulers</span><span>.</span><span>newThread</span><span>(</span><span>)</span><span>)</span>\n          <span>//将接下来执行的线程环境指定为io线程</span>\n          <span>.</span><span>observeOn</span><span>(</span><span>Schedulers</span><span>.</span><span>io</span><span>(</span><span>)</span><span>)</span>\n            <span>//map就处在io线程</span>\n          <span>.</span><span>map</span><span>(</span>mMapOperater<span>)</span>\n            <span>//将后面执行的线程环境切换为主线程，</span>\n            <span>//但是这一句依然执行在io线程</span>\n          <span>.</span><span>observeOn</span><span>(</span><span>AndroidSchedulers</span><span>.</span><span>mainThread</span><span>(</span><span>)</span><span>)</span>\n          <span>//指定线程无效，但这句代码本身执行在主线程</span>\n          <span>.</span><span>subscribeOn</span><span>(</span><span>Schedulers</span><span>.</span><span>io</span><span>(</span><span>)</span><span>)</span>\n          <span>//执行在主线程</span>\n          <span>.</span><span>subscribe</span><span>(</span>mSubscriber<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h2 id=\"_3-参考资料\"> 3. 参考资料</h2>\n<p><a href=\"https://gank.io/post/560e15be2dca930e00da1083\" target=\"_blank\" rel=\"noopener noreferrer\">给 Android 开发者的 RxJava 详解</a></p>\n<p><a href=\"http://www.jianshu.com/p/6fd8640046f1\" target=\"_blank\" rel=\"noopener noreferrer\">关于RxJava最友好的文章</a></p>\n<p><a href=\"http://www.jianshu.com/p/e61e1307e538\" target=\"_blank\" rel=\"noopener noreferrer\">关于RxJava最友好的文章（进阶）</a></p>\n<p><a href=\"http://www.jianshu.com/p/2c4799fa91a4\" target=\"_blank\" rel=\"noopener noreferrer\">关于RxJava最友好的文章——背压（Backpressure）</a></p>\n<p><a href=\"http://www.jianshu.com/p/220955eefc1f\" target=\"_blank\" rel=\"noopener noreferrer\">关于 RxJava 最友好的文章—— RxJava 2.0 全新来袭</a></p>\n",
      "date_published": "2021-07-15T11:52:03.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Rxjava"
      ]
    },
    {
      "title": "Solidity 基础知识和概述",
      "url": "https://wafer.li/blog-corners/old-inventory/Solidity/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%92%8C%E6%A6%82%E8%BF%B0/",
      "id": "https://wafer.li/blog-corners/old-inventory/Solidity/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%92%8C%E6%A6%82%E8%BF%B0/",
      "summary": "<p>Solidity 是运行于以太坊(Ethereum) 区块链上的智能合约语言，它是图灵完备的，意味着可以用它写一些任意复杂度的程序并运行于区块链中。</p>\n",
      "content_html": "<p>Solidity 是运行于以太坊(Ethereum) 区块链上的智能合约语言，它是图灵完备的，意味着可以用它写一些任意复杂度的程序并运行于区块链中。</p>\n\n<h2 id=\"_1-区块链基础知识\"> 1. 区块链基础知识</h2>\n<p>区块链加密货币的技术基础，本文属于 Solidity，对此不过多介绍，可能在以后会在其他文章进行介绍。</p>\n<h3 id=\"_1-1-交易\"> 1.1 交易</h3>\n<p>区块链形象的来说就是一个全球共享的交易数据库，这意味着每个人都可以访问这个数据库并发起更改，这个更改就是 <strong>交易</strong>。</p>\n<p>区块链对交易有单一性保证，也就是当你的交易正在提交到数据库的时候，其他的交易不能影响你的交易。</p>\n<p>同时，区块链对交易有完成保证，意思就是一个交易，要不就 <strong>全部完成</strong>，要不就 <strong>都不完成</strong>。不会出现一方余额变动，而另一方却不变的情况。</p>\n<p>其次，一个交易总是由发起方进行密码学方面的签名(signed)，这也就保证交易的来源方的可信赖性。只有拥有对应的密钥键值对，才能从账户中转钱。</p>\n<h3 id=\"_1-2-区块\"> 1.2 区块</h3>\n<p>交易数据库都有一个需要处理的基本问题：如果两个交易都想清空一个账户的余额怎么办？这在比特币的术语中叫做 <strong>&quot;doble-spend attack&quot;</strong>，也就是交易之间出现了冲突。</p>\n<p>区块链对此作出的回答是， <strong>你不需要担心这种问题</strong>。\n区块链会对交易的顺序作出选择，此时，这些交易会被捆绑进一个 <strong>区块</strong> 中，当两个交易出现冲突的时候，排在后面的交易就会被抛弃而不会进入区块中。</p>\n<p>这些区块在时间上呈现出一种线性的形状，因而我们将这些区块所构成的系统，也就是上面的交易数据库称为 <strong>区块链</strong></p>\n<p>而区块链中所应用的交易选择机制，也就是交易的公证机制，我们称其为 <strong>挖矿</strong></p>\n<p>之所以称其为挖矿，原因在于新的包含 <strong>你所承认的交易</strong> 的区块是通过一系列的计算得到的，这个新区块的生成很类似从一堆数据中把金子挖出来的过程。</p>\n<p>区块计算成功后，区块链系统会给予挖矿者奖励，在比特币系统中是赠与比特币，以太币系统则是奖励以太币。</p>\n<p>当然，一个区块也有可能会被退回(reverted)，不过是仅当这个区块位于区块链的头部的时候；当越来越多的区块被加到区块链的头部之后，你所计算出的区块被退回的可能性就会越来越低。</p>\n<h2 id=\"_2-以太坊虚拟机-evm\"> 2. 以太坊虚拟机(EVM)</h2>\n<p>以太坊虚拟机(Ethereum Virtual Machine) 是以太坊合约(contract)的运行环境，也即 Solidity 的运行环境。</p>\n<p>和普通的虚拟机不同的是，EVM 不是一个沙盒系统，而是 <strong>完全独立的</strong></p>\n<p>运行在 EVM 中的合约不能访问互联网、文件系统或者其他的进程，只能和运行于 EVM 的其他合约进行交互。</p>\n<p>EVM 中有如下概念：</p>\n<h3 id=\"_2-1-账户-accounts\"> 2.1 账户(Accounts)</h3>\n<p>EVM 中有着两种账户：\n一种称为外来账户(External owned Accounts)，是使用公私有的键值对控制访问的，也就是真实人类控制的帐号。</p>\n<p>另一种称为合约账户(Contract Accounts)，是含有代码的合约控制的帐号，代码被存储在合约中。</p>\n<p>账户通过地址来进行标识；\n外部账户的地址通过其 public key 来确定；\n合约账户的地址是在其被创建的时候确定的，通过它的创建者(即交易的发送者)的地址和从创建者地址发送的交易数量来确定。</p>\n<p>EVM 对于这两种账户都是平等对待的，不管它存不存储着代码。</p>\n<p>每个账户都有着一个持久化的 key-value <code>mapping</code>(类似 <code>HashMap</code>)。<code>key</code> 和 <code>value</code> 分别是 256bit words 和 256bit words。这个 <code>mapping</code> 被称为 <code>storage</code></p>\n<p>同时，每个账户都具有 <strong>以太币</strong> 的余额(balance)，可以通过发送以太币的交易来修改。</p>\n<p>两种账户的对比</p>\n<ul>\n<li>外部账户(External Accounts)\n<ul>\n<li>具有以太币余额</li>\n<li>可以发送交易(可以发送或者触发合约代码)</li>\n<li>使用键值对来控制</li>\n<li>不储存有代码</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>合约账户(Contract Accounts)\n<ul>\n<li>具有以太币余额</li>\n<li>储存有代码</li>\n<li>其代码的执行通过交易或者其他合约发送的信息来触发</li>\n<li>当其代码执行时，可以：\n<ul>\n<li>执行任意复杂度的操作(图灵完备)</li>\n<li>修改其自身的持久性存储(storage)</li>\n<li>调用其他合约</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"_2-2-交易-transactions\"> 2.2 交易(Transactions)</h3>\n<p>交易是一个账户发给另一个帐号的消息，交易可以包含二进制的数据(称为它的负载)，和以太币</p>\n<p>如果目标账户具有代码，那么这个代码就会被执行，并且交易会提供其负载充当代码的输入数据。</p>\n<p>如果目标账户是 <strong>零账户(zero-account)</strong>(它的账户的地址是 0)，那么，该交易就会创建一个 <strong>新的合约</strong>。上面已经说过，合约的地址是通过发送者的地址来确定的。</p>\n<p>此时，交易的负载就会充当合约的构建参数，此时，EVM 开始执行构造函数，进行合约的构建，其结果即合约的代码，被存入合约账户中。</p>\n<p>也就是说，不需要传入合约本身的代码即可完成合约的构建</p>\n<h3 id=\"_2-3-汽油-gas\"> 2.3 汽油(Gas)</h3>\n<p>汽油是以太坊用于衡量执行交易的工作量的单位。</p>\n<p>由于发起交易有可能导致合约的执行，代码执行就需要 CS 领域中的时间与空间，即需要矿工的算力来作为支撑。</p>\n<p>为了保证网络中的算力不被大规模消耗和锁死，以太坊中的每一个交易都需要消耗汽油来完成，即交易的 <strong>手续费</strong>。</p>\n<p>之所以称之为 <strong>汽油</strong>，是因为这个“手续费”是需要事先从交易发起者的账户中扣除掉，与该交易绑定，很类似一个汽车加油的过程。</p>\n<p>唯一不同的是，<strong>交易的发起者可以自定义汽油的价格</strong></p>\n<p>也就是说，交易发起者通过事先从账户中扣除一定量的 <strong>以太</strong>，作为充入的汽油；\n充入的以太费用 = 汽油量 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span>×</span></span></span></span> 自定义的汽油价格，汽油量实际上是通过充入的以太费用倒推得到的。</p>\n<p>这也就类似于一个加油的过程。</p>\n<p>然后，矿工开始处理交易，并按照一定的规则 <strong>不断消耗汽油</strong></p>\n<p>当计算完成时，区块被生成，并加入区块链中，矿工得到所消耗的汽油的以太费用作为交易的手续费；\n同时， <strong>多余的汽油会被退还回交易发起者的账户</strong>。</p>\n<p>但是，如果汽油耗尽，交易还未处理完成的话，那么矿工就会 <strong>回退所有修改</strong>，并将该交易作为 <strong>失败的交易</strong> 加入到区块链中，同时， <strong>收取所有的汽油费用，不退换给发起者。</strong></p>\n<h3 id=\"_2-4-存储-内存和栈\"> 2.4 存储, 内存和栈</h3>\n<h4 id=\"_2-4-1-存储-storage\"> 2.4.1 存储(Storage)</h4>\n<p>每一个帐号都会具有一个 256bit -&gt; 256 bit 的键值对，这个键值对被称作 <code>storage</code>\n在合约中进行 <code>storage</code> 的遍历和枚举是不可能的，而且在 <code>storage</code>的读写操作都是相对昂贵的。</p>\n<blockquote>\n<p>即通常用于存储一些持久化的数据，所以称作 <code>storage</code></p>\n</blockquote>\n<p>事实上 <code>storage</code> 的读写是十分昂贵的，它需要 20000 gas 进行一次初始化，需要 5000 gas 来进行数据的修改，同时还需要 200 gas 进行一个 word 的读取。</p>\n<p>为什么需要这么贵呢？是因为存储在 <code>storage</code> 的数据是永久保存在区块链中的，需要真实的存储开销。</p>\n<h4 id=\"_2-4-2-内存-memory\"> 2.4.2 内存(Memory)</h4>\n<p>第二个存储类型是 <code>memory</code>，就像内存一样，<code>memory</code> 仅在合约运行中有效，当合约运行完成时，内存就会被清空重置。</p>\n<p>内存是线性的并被字节编码；\n对于读取操作来说，只能一次性读取 256bit 的数据，即一个 word;\n而对于写入操作来说，可以写入 8bit 或者 256bit。</p>\n<p>当你读写超过了一个 word 的时候，内存以 word(256bit) 的级别扩大；\n当然，随着内存的扩大，就要相应收取 gas 作为费用。\n需要注意的是，内存每扩大一个数量级，都是平方级别的，所以不要过多使用内存，否则会消耗很多 gas。</p>\n<p>相比 <code>storage</code> 来说，<code>memory</code> 的处理开销就便宜很多。\n它只需要 3 gas 来读写数据，如果内存扩大了那么就收取一些扩容费用的 gas。</p>\n<p>一般来说，内存就是通常的工作用地，基本的，不需要永久存储的东西都可以放到内存中。</p>\n<h4 id=\"_2-4-3-栈-stack\"> 2.4.3 栈(Stack)</h4>\n<p>EVM 不像传统的计算机是一个以寄存器为主的机器，而是以栈为主的机器，所有的计算都在一个被称作 <code>stack</code> 的空间中进行。</p>\n<p>这个栈具有 1024 个元素的容量，而且包含着一些 word。</p>\n<p>对于栈的访问仅限于前 16 个元素；\n在前 16 个元素中，你可以将任意一个复制到顶部，或者将任意一个元素和顶部的元素做交换。</p>\n<p>其他的操作则是提取顶部元素(可以不止提取一个)进行计算并将结果压入栈中。</p>\n<p>当然，你也可以将栈中的元素移到内存和存储中，不过对于比前 16 个更深一点的元素就不能访问到了，除非你将前 16 个元素移除。</p>\n<p>通常，这个栈中的元素不会使用到，就像函数栈一样由编译器或者解释器来操作。</p>\n<h3 id=\"_2-5-指令集\"> 2.5 指令集</h3>\n<p>EVM 的指令集比较简短，所有的指令都是对基本数据类型和 256bit 的字的操作，包含了一般的算术运算、位运算、逻辑运算和比较运算等，同时还可以进行条件跳转和非条件跳转。</p>\n<p>同时，合约还可以访问它所在区块的一些信息比如说区块的编号和区块的时间戳。</p>\n<h3 id=\"_2-6-信息调用-message-calls\"> 2.6 信息调用(Message Calls)</h3>\n<p>合约可以通过 <strong>信息调用</strong> 来调用其他的合约或者给一个非合约账户发送以太币。</p>\n<p>信息调用和交易类似，都具备一个发送者，目标者，数据负载，以太币，汽油和返回的数据。</p>\n<p>事实上，每一个交易都是由 top-level 的信息调用组成的，top-level 的信息调用可以创建其他信息调用。</p>\n<p>合约可以决定通过信息调用所传递的 gas 数量，如果一个 out-of-gas exception 发生的话，调用栈中就会压入一个 error value 来标识异常的发生。</p>\n<p>此时，只有通过该调用传送的 gas 会被消耗掉。同时，发起信息调用的合约会手动引起一个异常，以保证异常栈的呈现。</p>\n<p>上面也说过，被调用的合约会收到一个新鲜的 <code>memory</code> 实例，并可以访问随调用传来的数据负载；</p>\n<p>此时，系统会提供一个额外的空间用于存储这种数据负载，叫做 <code>calldata</code></p>\n<p>当合约代码执行完毕后，它可以将数据返回，而返回的数据会存储在调用者的内存中。</p>\n<p>调用的深度被限制在 <strong>1024</strong>，所以对于一些比较复杂的操作，使用循环会比使用递归要好。</p>\n<h3 id=\"_2-7-委托调用-delegatecall-调用代码-callcode-和库\"> 2.7 委托调用(Delegatecall)/调用代码(Callcode)和库</h3>\n<p>委托调用是一种特别的信息调用，它可以将调用者的上下文暴露给被调用者。</p>\n<p>下面举一个简单的例子：</p>\n<div><pre><code><span>contract</span> <span>D</span> <span>{</span>\n    unit <span>public</span> n<span>;</span>\n    <span>address</span> <span>public</span> sender<span>;</span>\n\n    <span>function</span> <span>delegatecallSetN</span><span>(</span><span>address</span> _e<span>,</span> unit _n<span>)</span> <span>{</span>\n        _e<span>.</span><span>delegatecall</span><span>(</span><span>byte4</span><span>(</span><span>sha3</span><span>(</span><span>\"setN(unit256)\"</span><span>)</span><span>)</span><span>,</span> _n<span>)</span>\n    <span>}</span>\n<span>}</span>\n\n<span>contract</span> <span>E</span> <span>{</span>\n    unit <span>public</span> n<span>;</span>\n    <span>address</span> <span>public</span> sender<span>;</span>\n    funciton <span>setN</span><span>(</span>unit _n<span>)</span> <span>{</span>\n        n <span>=</span> _n<span>;</span>\n        sender <span>=</span> msg<span>.</span>sender<span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>当一个合约 <code>C</code> 调用 <code>D</code> 的方法时，是 <code>D</code> 的 <code>sender</code> 被设置成了 <code>C</code> ，而不是 <code>E</code> 的方法被设置。</p>\n<p>这就是 delegatecall 和普通调用的区别，它相当于将其他合约的函数引入到了当前合约的作用域中。</p>\n<p>引入这种调用之后，我们就可以在合约中动态调用函数，这也为我们实现 Solidity 的函数库提供了途径。</p>\n<p>不过需要提醒的是，这个 <code>delegatecall</code> 方法是相当低级的方法， <strong>如果不做深入开发可以不管它</strong></p>\n<h3 id=\"_2-8-日志\"> 2.8 日志</h3>\n<p>EVM 也提供从底层直至区块层级的日志功能，用这些功能来实现 <strong>事件系统</strong></p>\n<p>但是，合约在它被创建之后就不能访问日志数据，不过日志数据可以从区块链的外部被访问。</p>\n<p>一些日志数据被存储在布隆过滤器(bloom filter)中，所以一些轻量级的客户端也可以访问部分的区块链日志。</p>\n<h3 id=\"_2-9-合约创建\"> 2.9 合约创建</h3>\n<p>合约除了通过信息调用来创建以外，还可以通过一个特别的指令来创建。</p>\n<p>指令创建和普通的信息调用创建的区别在于，在指令创建完毕之后，创建者可以获取到新合约的地址。</p>\n<h3 id=\"_2-10-自毁\"> 2.10 自毁</h3>\n<p>想要去除区块链中的代码的唯一途径就是通过合约的自毁。</p>\n<p>当合约调用析构指令(<code>selfdestruct</code>) 时，合约账户中剩余的以太币会被发往制定的目标，然后，合约的 <code>storage</code> 和代码就会从区块链中删除。</p>\n<blockquote>\n<p>即使合约代码中不包含 <code>selfdestruct</code> 指令，它也可以通过调用 <code>delegatecall</code> 或者 <code>callcode</code> 指令来执行</p>\n</blockquote>\n<blockquote>\n<p>以太坊客户端似乎还未实现旧合约和旧代码的删除功能。存储节点可以自行选择是否删除合约。</p>\n</blockquote>\n<blockquote>\n<p>当期，外部账户是无法被删除的。</p>\n</blockquote>\n",
      "date_published": "2021-07-15T11:52:03.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Solidity"
      ]
    },
    {
      "title": "Material Design 主体环境",
      "url": "https://wafer.li/blog-corners/old-inventory/material-design/Material%20Design%20%E4%B8%BB%E4%BD%93%E7%8E%AF%E5%A2%83/",
      "id": "https://wafer.li/blog-corners/old-inventory/material-design/Material%20Design%20%E4%B8%BB%E4%BD%93%E7%8E%AF%E5%A2%83/",
      "summary": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p><strong>Material Design 是一个三维环境，包括了灯光，实体，和投射阴影。</strong></p>\n<center><img src=\"https://material-design.storage.googleapis.com/publish/material_v_9/0B7WCemMG6e0VVFpiZ041SmhwY2c/what_is_material_environment.png\" width=\"500\"/></center>\n",
      "content_html": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p><strong>Material Design 是一个三维环境，包括了灯光，实体，和投射阴影。</strong></p>\n<center><img src=\"https://material-design.storage.googleapis.com/publish/material_v_9/0B7WCemMG6e0VVFpiZ041SmhwY2c/what_is_material_environment.png\" width=\"500\"/></center>\n\n<p>所有的实体对象都具有 x, y, z 三个坐标。</p>\n<p>一个对象只能拥有一个 z 轴位置。（即不允许两个实体重叠）</p>\n<p>主光源用于制造方向投影，散射光源用于制造柔和阴影。</p>\n<ul>\n<li>实体厚度： 1dp</li>\n<li>阴影由重叠实体之间的高低差产生\n<blockquote>\n<p>即阴影实际上就是高低差的代表</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"_2-3d-世界\"> 2. 3D 世界</h2>\n<p>Material Design 是一个 3D 世界。\n这意味着所有的实体都具有 3 个维度的坐标；\nz 轴垂直对齐于屏幕，正轴指向屏幕外侧。</p>\n<center><img src=\"https://material-design.storage.googleapis.com/publish/material_v_9/0Bx4BSt6jniD7UXpQYWltVjNPWXc/whatismaterial_environment_3d.png\"/></center>\n<p>一个实体厚度为 1dp，并独享一个 z 轴坐标。</p>\n<blockquote>\n<p>dp = (像素宽度 * 160) / 像素密度</p>\n</blockquote>\n<p>在网页端，z 轴是用来分层而不是用来展示视角，z 轴的坐标通过操作 y 轴来模拟实现。</p>\n<h2 id=\"_3-灯光和阴影\"> 3. 灯光和阴影</h2>\n<p>在环境中，虚拟光源营造出了场景。</p>\n<p>主光源用于投射方向投影，而散射光源用于在各个角度投射柔和的光影。</p>\n<p>在环境中的阴影由以上这两种光源来实现。\n在 Android 开发中，阴影的产生是因为光源被不同 z 轴坐标上的实体遮挡。在网页开发中，通过调整 y 轴来进行仿真实现。</p>\n<p>下面是一个标高为 6 dp 的实体的例子。</p>\n<center><img src=\"https://material-design.storage.googleapis.com/publish/material_v_9/0B6Okdz75tqQsSFZUZ01GTk13T28/whatismaterial_environment_shadow1.png\" width=\"300\"/></center>\n<center>直射光源投射的阴影</center>\n<center><img src=\"https://material-design.storage.googleapis.com/publish/material_v_9/0B6Okdz75tqQsdDhaaTMwMTFVLTA/whatismaterial_environment_shadow2.png\" width=\"300\"/></center>\n<center>散射光源的阴影</center>\n<center><img src=\"https://material-design.storage.googleapis.com/publish/material_v_9/0B6Okdz75tqQsNnVmbTNMUF9DR0U/whatismaterial_environment_shadow3.png\" width=\"300\"></center>\n<center>两种光源的混合投影</center>\n",
      "date_published": "2016-10-14T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "MaterialDesign"
      ]
    },
    {
      "title": "Material Design 实体属性",
      "url": "https://wafer.li/blog-corners/old-inventory/material-design/Material%20Design%20%E5%AE%9E%E4%BD%93%E5%B1%9E%E6%80%A7/",
      "id": "https://wafer.li/blog-corners/old-inventory/material-design/Material%20Design%20%E5%AE%9E%E4%BD%93%E5%B1%9E%E6%80%A7/",
      "summary": "<h2 id=\"概述\"> 概述</h2>\n<p><strong>Material 具有某些不可变的特点和固有的行为模式</strong></p>\n<center><img src=\"https://material-design.storage.googleapis.com/publish/material_v_9/0B7WCemMG6e0VU1RSV0tORnl5a2M/what_is_material_material_properties.png\" width=\"300\"></center>\n<p>了解关于 Material 的特点能有助于你更好的利用 Material，以期与 Material Design 具有一致性。</p>\n",
      "content_html": "<h2 id=\"概述\"> 概述</h2>\n<p><strong>Material 具有某些不可变的特点和固有的行为模式</strong></p>\n<center><img src=\"https://material-design.storage.googleapis.com/publish/material_v_9/0B7WCemMG6e0VU1RSV0tORnl5a2M/what_is_material_material_properties.png\" width=\"300\"></center>\n<p>了解关于 Material 的特点能有助于你更好的利用 Material，以期与 Material Design 具有一致性。</p>\n\n<h2 id=\"material-的特点\"> Material 的特点</h2>\n<ol>\n<li>固体</li>\n<li>占用空间中唯一的位置</li>\n<li>不可穿透的</li>\n<li>形状可改变</li>\n<li>只在平面方向上改变大小</li>\n<li>不可弯折</li>\n<li>可以融入其他 Material</li>\n<li>可以分割，分裂，和恢复</li>\n<li>可以被创建和摧毁</li>\n<li>可以在任何轴进行移动</li>\n</ol>\n<h2 id=\"物理特性\"> 物理特性</h2>\n<h3 id=\"厚度\"> 厚度</h3>\n<p>实体具有可变化的长宽尺寸，和 1 dp 的厚度。</p>\n<center><img src=\"https://material-design.storage.googleapis.com/publish/material_v_9/0B8v7jImPsDi-aTBFT1FDVEstenM/whatismaterial_materialproperties_physicalproperties_thickness_01_yes.png\" width=\"300\"/></center>\n<center><div style=\"color:#4CAF50;\">Do，材料的长和宽可以变化</div></center>\n<center><img src=\"https://material-design.storage.googleapis.com/publish/material_v_9/0B8v7jImPsDi-Sno0Qy1FY3UtaFk/whatismaterial_materialproperties_physicalproperties_thickness_02_no.png\" width=\"300\"/></center>\n<center><div style=\"color:#D32F2F;\">Don't，材料的厚度为 1 dp</div></center>\n<h3 id=\"投射阴影\"> 投射阴影</h3>\n<p>投射阴影是用来表示两个实体之间的相对距离。</p>\n<center><img src=\"http://i.imgur.com/sEbIYXv.gif\" width=\"500\" /></center>\n<center><div style=\"color:#4CAF50;\">Do，材料的阴影是实体间距离的体现</div></center>\n<center><img src=\"http://i.imgur.com/nlKqF3f.gif\" width=\"500\"/></center>\n<center><div style=\"color:#D32F2F;\">Don't，阴影不能用来描边</div></center>\n<h3 id=\"内容\"> 内容</h3>\n<p>内容能以任意的形状和颜色在实体上显示，内容不给实体增加厚度。\n<center><img src=\"http://i.imgur.com/iMyNv9h.gif\" width=\"500\"/></center>\n<center><div style=\"color:#4CAF50;\"> Do，内容能以任意的形状和颜色来展示</div></center></p>\n<p>内容的行为可以独立于实体，但是被实体的大小所限制。\n<center><img src=\"http://i.imgur.com/gRC6fhQ.gif\" width=\"500\"/></center>\n<center><div style=\"color:#4CAF50;\"> Do，内容被实体大小所限制</div></center></p>\n<h3 id=\"点击事件\"> 点击事件</h3>\n<p>实体是<strong>固体</strong>。</p>\n<p>点击事件不能穿过实体。\n<center>\n<img src=\"https://material-design.storage.googleapis.com/publish/material_v_9/0Bx4BSt6jniD7bDZac2JGV2RUNk0/whatismaterial_properties_physical3.png\" width=400/>\n</center>\n<center><div style=\"color:#4CAF50;\">Do, 点击事件只能影响前台实体</div></center></p>\n<center>\n<img src=\"https://material-design.storage.googleapis.com/publish/material_v_9/0Bx4BSt6jniD7RVdsUWRKN2xlaGc/whatismaterial_properties_physical4.png\" width=400/>\n</center>\n<center><div style=\"color:#D32F2F;\">Don't，点击事件不能穿过实体</div></center>\n",
      "date_published": "2016-10-15T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "MaterialDesign"
      ]
    },
    {
      "title": "Material Design 概述",
      "url": "https://wafer.li/blog-corners/old-inventory/material-design/Material%20Design%20%E6%A6%82%E8%BF%B0/",
      "id": "https://wafer.li/blog-corners/old-inventory/material-design/Material%20Design%20%E6%A6%82%E8%BF%B0/",
      "summary": "<h2 id=\"_1-介绍\"> 1. 介绍</h2>\n<p>Material Design 是 Google 官方在 2014 I/O 上发布的设计语言。</p>\n<p>事实上随着更多的 Android 设备进入到 5.0 以上系列，Material Design 的应用也愈加广泛。</p>\n",
      "content_html": "<h2 id=\"_1-介绍\"> 1. 介绍</h2>\n<p>Material Design 是 Google 官方在 2014 I/O 上发布的设计语言。</p>\n<p>事实上随着更多的 Android 设备进入到 5.0 以上系列，Material Design 的应用也愈加广泛。</p>\n\n<h2 id=\"_2-设计原则\"> 2. 设计原则</h2>\n<h3 id=\"_2-1-material-is-the-metaphor\"> 2.1 Material is the metaphor</h3>\n<p>实体(Material) 是此设计语言的基本组成，与众不同的触感是实体的基础。</p>\n<p>实体的表面和边缘提供了基于真实效果的体验，熟悉的<strong>触感</strong>能让用户快速的理解和感知，实体的多样性能更好反映真实世界的设计效果，而又不会脱离客观规律。</p>\n<p><strong>光效</strong>、<strong>表面质感</strong>、<strong>运动感</strong>这三点是解释物体运动规律、交互方式、空间关系的关键。真实的光效可以解释物体之间的交合关系、空间关系，以及单个物体的运动。</p>\n<h3 id=\"_2-2-鲜明、形象、深思熟虑\"> 2.2 鲜明、形象、深思熟虑</h3>\n<p>新的视觉语言，在基本元素的处理上，借鉴了传统的印刷设计——排版、网格、空间、比例、配色、图像使用——这些基础的平面设计规范。在这些设计基础上下功夫，不但可以愉悦用户，而且能够构建出视觉层级、视觉意义以及视觉聚焦。精心选择色彩、图像、选择合乎比例的字体、留白，力求构建出鲜明、形象的用户界面，让用户沉浸其中。</p>\n<p>Material Design 设计语言强调根据用户行为凸显核心功能，进而为用户提供操作指引。</p>\n<h3 id=\"_2-3-有意义的动画效果\"> 2.3 有意义的动画效果</h3>\n<p>动画效果(简称动效)可以有效地暗示、指引用户。动效的设计要根据用户行为而定，能够改变整体设计的触感。</p>\n<p>动效应当在独立的场景呈现。通过动效，让物体的变化以更连续、更平滑的方式呈现给用户，让用户能够充分知晓所发生的变化。</p>\n<p>动效应该是有意义的、合理的，动效的目的是为了吸引用户的注意力，以及维持整个系统的连续性体验。动效反馈需细腻、清爽。转场动效需高效、明晰。</p>\n",
      "date_published": "2016-10-14T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "MaterialDesign"
      ]
    },
    {
      "title": "Material Design 高度和阴影",
      "url": "https://wafer.li/blog-corners/old-inventory/material-design/Material%20Design%20%E9%AB%98%E5%BA%A6%E5%92%8C%E9%98%B4%E5%BD%B1/",
      "id": "https://wafer.li/blog-corners/old-inventory/material-design/Material%20Design%20%E9%AB%98%E5%BA%A6%E5%92%8C%E9%98%B4%E5%BD%B1/",
      "summary": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>在 Materail Design 中，物体的行为和真实世界中很相似。</p>\n<center>\n<img src=\"http://ooo.0o0.ooo/2016/10/25/580f8d694233c.png\" width= 300/>\n</center>\n",
      "content_html": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>在 Materail Design 中，物体的行为和真实世界中很相似。</p>\n<center>\n<img src=\"http://ooo.0o0.ooo/2016/10/25/580f8d694233c.png\" width= 300/>\n</center>\n\n<p>在真实世界中，物体堆放和叠加在一起，但是不能穿过彼此，并且会投射出阴影。\nMaterial Design 的实体与之类似，也需要投射阴影。</p>\n<p>Material Design 实体具有以下三个高度属性：</p>\n<ul>\n<li>\n<p>高度：指的是一个物体 <strong>表面</strong> 到另一物体表面的距离。物体的高度决定了它的阴影投射情况</p>\n</li>\n<li>\n<p>默认高度：任何的实体都具有默认高度(Resting Elevation)，在一个平台中，组件的默认高度是 <strong>一致的</strong>，但是不同的 <strong>平台</strong> 或者 <strong>设备</strong> 可能具有不同的默认高度。</p>\n</li>\n<li>\n<p>动态的高度偏移：这个属性指的是实体在 <strong>响应事件时</strong> 相对于 <strong>默认高度</strong> 的偏移量。</p>\n</li>\n</ul>\n<h2 id=\"_2-高度-android\"> 2. 高度（Android）</h2>\n<h3 id=\"_2-1-说明\"> 2.1 说明</h3>\n<p>高度的表示单位也是 dp，与 x 和 y 坐标一样。</p>\n<p>需要注意的是，由于实体也具有厚度(1 dp)，所以高度指的是从一个实体表面到另一个实体表面的距离。</p>\n<center>\n<img src=\"http://ooo.0o0.ooo/2016/10/25/580f911c51c09.png\" width=550/>\n</center>\n<p>同时，一个子对象的高度，指的是其 <strong>相对于父对象的距离</strong>。</p>\n<h3 id=\"_2-2-默认高度\"> 2.2 默认高度</h3>\n<p>默认高度是不会变化的，当一个组件的高度变化时，它应该尽快的恢复默认高度。</p>\n<p>各个 Android 组件的默认高度可以到<a href=\"https://material.google.com/material-design/elevation-shadows.html#elevation-shadows-elevation-android\" target=\"_blank\" rel=\"noopener noreferrer\">官网</a>查看。</p>\n<p>对于桌面环境来说，为了容纳鼠标和其他非触摸事件，它的组件的默认高度要比 Android 组件的默认高度低 2 dp。</p>\n<p>组件的高度在不同的 App 之间应该相同，但是在不同设备之间不同。</p>\n<p>比如说电视和 PC 就比手机具有更深的层次。</p>\n<h3 id=\"_2-3-感应高度和动态的高度偏移\"> 2.3 感应高度和动态的高度偏移</h3>\n<p>一些组件可能拥有感应高度，也就是说它会根据用户的输入（比如说触摸事件）来改变自己的高度。</p>\n<p>一般来说，触摸，或者按压一个组件会使它的高度变高。</p>\n<p>这些高度变化是通过 <strong>动态高度偏移</strong> 实现的。</p>\n<p>动态高度偏移是相对于默认高度来说，组件需要移动的高度量。</p>\n<p>动态高度偏移保证了在移动应用中组件高度偏移量的一致性。组件接受到触摸事件后，都能有一个不变的高度偏移量。</p>\n<p>一旦触摸事件完毕，或者被取消，那么组件就必须恢复到其默认高度。</p>\n<h3 id=\"_2-4-避免高度冲突\"> 2.4 避免高度冲突</h3>\n<p>拥有感应高度的组件可能会导致其他组件随着其高度变化而变化，这是因为 <strong>组件不可以相互穿透</strong>。</p>\n<p>避免冲突的方法有很多：</p>\n<p>在某一元素水平上，元素可以在它们产生冲突前提前移动或者消失。比如说一个 FAB 就可以在用户选择一个卡片的时候消失或者移出屏幕。</p>\n<p>在布局水平上，你需要通过设计你的 App 布局来减少冲突的可能性。</p>\n<p>比如说将 FAB 置于卡片列表的一端来避免 FAB 与卡片出现的冲突。</p>\n<h3 id=\"_2-5-组件高度比较\"> 2.5 组件高度比较</h3>\n<center>\n<img src=\"http://ooo.0o0.ooo/2016/10/25/580f97a8896b0.png\"/>\n</center>\n<p>图中只有组件的高度是正确的，其他的属性(比如面积)不一定正确</p>\n<center>\n![whatismaterial_3d_elevation3](https://ooo.0o0.ooo/2016/10/25/580f985cb48ba.png)\n</center>\n一个卡片，App Bar 和 FAB 的例子\n<center>\n![whatismaterial_3d_elevation4](https://ooo.0o0.ooo/2016/10/25/580f989bbcbd6.png)\n</center>\n另一个 Navigation Drawer 的例子\n<h2 id=\"_3-阴影\"> 3. 阴影</h2>\n<p>阴影给物体的高度和其运动的方向给予了一个重要的视觉线索。</p>\n<p>它们也是唯一的用于区分不同平面的视觉线索。</p>\n<p>一个物体的阴影由其高度决定。</p>\n<center>\n<img src=\"http://ooo.0o0.ooo/2016/10/25/580f99629c60b.png\" width=300/>\n</center>\n<div style=\"color:#D32F2F;text-align:center\">\n不可取，没有阴影，无法区分 FAB 和背景\n</div>\n<center>\n<img src=\"http://ooo.0o0.ooo/2016/10/25/580f9a338a84a.png\" width=300/>\n</center>\n<div style=\"color:#D32F2F;text-align:center\">\n不可取，过于脆弱的阴影表示 FAB 和蓝色背景是在同一个平面的\n</div>\n<center>\n<img src=\"http://ooo.0o0.ooo/2016/10/25/580f9afa716f2.png\" width=300/>\n</center>\n<div style=\"color:#4CAF50;text-align:center\">\n可取，较大且柔软的阴影表示 FAB 的高度比蓝色背景要高。\n</div>\n<p>当出现触摸事件时，阴影可以提供一个物体运动方向的视觉线索，以体现物体和平面之间的相对距离。</p>\n<center>\n<img src=\"http://ooo.0o0.ooo/2016/10/27/581193071df86.png\" width=300/>\n</center>\n<div style=\"color:#D32F2F;text-align:center\">\n不可取，没有阴影无法指示物体是增大体积还是增加高度\n</div>\n<center>\n<img src=\"http://ooo.0o0.ooo/2016/10/27/581193e7b8cfa.png\" width=300/>\n</center>\n<div style=\"color:#4CAF50;text-align:center\">\n可取，阴影变得更大，更柔软表明了物体的高度在增加；<br />\n反之，阴影变得更小，更脆弱表明物体的高度在减少\n</div>\n<center>\n<img src=\"http://ooo.0o0.ooo/2016/10/27/581194ad53a92.png\" width=300/>\n</center>\n<div style=\"color:#4CAF50; text-align:center\">\n可取，阴影不改变，表明物体的高度没有增加，而只是体积增大了。\n</div>\n<h3 id=\"_3-1-组件参考高度\"> 3.1 组件参考高度</h3>\n<p>下面列出一些组件的参考高度，它们应当作为高度的典范来使用。</p>\n<h4 id=\"_3-1-1-app-bar\"> 3.1.1 App Bar</h4>\n<p><strong>4dp</strong></p>\n<p><img src=\"https://ooo.0o0.ooo/2016/10/27/581197337063a.png\" alt=\"whatismaterial_3d_elevation_component06\" /></p>\n<h4 id=\"_3-1-2-raised-button\"> 3.1.2 Raised Button</h4>\n<p>默认高度： <strong>2dp</strong>\n按下高度： <strong>8dp</strong></p>\n<p><img src=\"https://ooo.0o0.ooo/2016/10/27/581197947852f.png\" alt=\"whatismaterial_3d_elevation_component02\" /></p>\n<h4 id=\"_3-1-3-floating-action-button-fab\"> 3.1.3 Floating Action Button(FAB)</h4>\n<p>默认高度： <strong>6dp</strong>\n按下高度： <strong>12dp</strong></p>\n<p><img src=\"https://ooo.0o0.ooo/2016/10/27/581198129617a.png\" alt=\"whatismaterial_3d_elevation_component08\" /></p>\n<h4 id=\"_3-1-4-card\"> 3.1.4 Card</h4>\n<p>按下高度： <strong>2dp</strong>\n抬起高度： <strong>8dp</strong></p>\n<p><img src=\"https://ooo.0o0.ooo/2016/10/27/58119867c7e68.png\" alt=\"whatismaterial_3d_elevation_component03\" /></p>\n<h4 id=\"_3-1-5-menus-and-sub-menus\"> 3.1.5 Menus and sub menus</h4>\n<p>菜单： <strong>8dp</strong></p>\n<p>每个子菜单相对于父菜单增加 1dp</p>\n<p><img src=\"https://ooo.0o0.ooo/2016/10/27/581198f529dfc.png\" alt=\"whatismaterial_3d_elevation_component09\" /></p>\n<h4 id=\"_3-1-6-dialogs\"> 3.1.6 Dialogs</h4>\n<p><strong>24dp</strong></p>\n<p><img src=\"https://ooo.0o0.ooo/2016/10/27/5811992fdb62f.png\" alt=\"whatismaterial_3d_elevation_component12\" /></p>\n<h4 id=\"_3-1-7-nav-drawer-and-right-drawer\"> 3.1.7 Nav Drawer and Right Drawer</h4>\n<p><strong>16dp</strong></p>\n<p><img src=\"https://ooo.0o0.ooo/2016/10/27/5811998438b5d.png\" alt=\"whatismaterial_3d_elevation_component10\" /></p>\n<h4 id=\"_3-1-8-modal-button-sheet\"> 3.1.8 Modal Button Sheet</h4>\n<p><strong>16dp</strong></p>\n<p><img src=\"https://ooo.0o0.ooo/2016/10/27/581199c05092c.png\" alt=\"whatismaterial_3d_elevation_component11\" /></p>\n<h4 id=\"_3-1-9-refresh-indecator\"> 3.1.9 Refresh indecator</h4>\n<p><strong>3dp</strong></p>\n<p><img src=\"https://ooo.0o0.ooo/2016/10/27/58119a02a62c2.png\" alt=\"whatismaterial_3d_elevation_component05\" /></p>\n<h4 id=\"_3-1-10-quick-entry-search-bar\"> 3.1.10 Quick entry/Search bar</h4>\n<p>默认高度： <strong>2dp</strong>\n滚动高度： <strong>3dp</strong></p>\n<p><img src=\"https://ooo.0o0.ooo/2016/10/27/58119a4d3e9cd.png\" alt=\"whatismaterial_3d_elevation_component04\" /></p>\n<h4 id=\"_3-1-11-snackbar\"> 3.1.11 Snackbar</h4>\n<p><strong>6dp</strong></p>\n<p><img src=\"https://ooo.0o0.ooo/2016/10/27/58119a7fe42f7.png\" alt=\"whatismaterial_3d_elevation_component07\" /></p>\n<h4 id=\"_3-1-12-switch\"> 3.1.12 Switch</h4>\n<p><strong>1dp</strong></p>\n<p><img src=\"https://ooo.0o0.ooo/2016/10/27/58119aa685bdd.png\" alt=\"whatismaterial_3d_elevation_component01\" /></p>\n<h2 id=\"_4-对象间关系\"> 4. 对象间关系</h2>\n<p>对象和对象集合间的关系和组织结构就决定了，当某个对象移动时，其他的对象是否随其移动。</p>\n<p>对象可以独立的移动，也可以被其他上层对象的移动而随其移动</p>\n<h3 id=\"_4-1-对象的层次结构\"> 4.1 对象的层次结构</h3>\n<p>所有的对象都在一个 <strong>父子关系</strong> 的组织结构中。</p>\n<blockquote>\n<p>由于 Android 采用 XML 标签结构</p>\n</blockquote>\n<p>一个对象可以是系统的子对象，也可以是另一个对象的子对象。</p>\n<p>父子关系的说明：</p>\n<ul>\n<li>任何一个对象都有一个父对象</li>\n<li>任何一个对象可以拥有 0 或多个子对象</li>\n<li>子对象从父对象中继承可变属性，例如位置，旋转角度，放大倍数，和高度</li>\n<li>同一层级的两个对象称为兄弟对象</li>\n</ul>\n<p>如图，卡片上的按钮随着内容的滚动而滚动</p>\n<p><img src=\"https://ooo.0o0.ooo/2016/10/27/5811aa8d33959.gif\" alt=\"ezgif-979248372\" /></p>\n<h3 id=\"_4-2-例外\"> 4.2 例外</h3>\n<p>父对象是根对象的对象，例如一些主要的 UI 组件，它们的移动是独立于其他对象的。</p>\n<p>比如说，一个 FAB 是不会随着内容的移动而滚动的。</p>\n<p>其他的这种对象还包括：</p>\n<ul>\n<li>Nav drawer</li>\n<li>App bar</li>\n<li>Dialogs</li>\n</ul>\n<p>如图，FAB 不随着内容的滚动而滚动</p>\n<p><img src=\"https://ooo.0o0.ooo/2016/10/27/5811b33c38ca6.gif\" alt=\"ezgif-3827406795\" /></p>\n<h3 id=\"_4-3-交互\"> 4.3 交互</h3>\n<p>对象和其他对象的交互动作由它所在的结构位置决定。</p>\n<p>例如：</p>\n<ul>\n<li>子对象具有一个能与父对象区分的最小 z 轴高度。其他的对象不能插入到这个父对象和子对象之间</li>\n<li>滚动的卡片是兄弟对象，所以它们会一起移动。而控制它们移动的就是它们的父对象。</li>\n</ul>\n<h3 id=\"_4-4-高度\"> 4.4 高度</h3>\n<p>对象的高度取决于它的内容的结构还有它是否能独立于其他对象移动。</p>\n",
      "image": "https://ooo.0o0.ooo/2016/10/25/580f985cb48ba.png",
      "date_published": "2016-10-27T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "MaterialDesign"
      ]
    },
    {
      "title": "旧文仓库",
      "url": "https://wafer.li/blog-corners/old-inventory/",
      "id": "https://wafer.li/blog-corners/old-inventory/",
      "content_html": "<p>原先(2020年)以前写的一些文章，质量不太高，因此就直接放这里堆着。</p>\n",
      "date_published": "2021-07-09T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": []
    },
    {
      "title": "LeetCode 笔记之——837. 新 21 点",
      "url": "https://wafer.li/blog-corners/rollroll/algo/leetcode/leetcode-%E7%AC%94%E8%AE%B0%E4%B9%8B%E2%80%94%E2%80%94837-%E6%96%B0-21-%E7%82%B9/",
      "id": "https://wafer.li/blog-corners/rollroll/algo/leetcode/leetcode-%E7%AC%94%E8%AE%B0%E4%B9%8B%E2%80%94%E2%80%94837-%E6%96%B0-21-%E7%82%B9/",
      "summary": "<p><a href=\"https://leetcode-cn.com/problems/new-21-game\" target=\"_blank\" rel=\"noopener noreferrer\">题目</a></p>\n<p>爱丽丝参与一个大致基于纸牌游戏 “21点” 规则的游戏，描述如下：</p>\n<p>爱丽丝以 0 分开始，并在她的得分少于 K 分时抽取数字。 抽取时，她从 <code>[1, W]</code> 的范围中随机获得一个整数作为分数进行累计，其中 W 是整数。 每次抽取都是独立的，其结果具有相同的概率。</p>\n<p>当爱丽丝获得不少于 K 分时，她就停止抽取数字。 爱丽丝的分数不超过 N 的概率是多少？</p>\n",
      "content_html": "<p><a href=\"https://leetcode-cn.com/problems/new-21-game\" target=\"_blank\" rel=\"noopener noreferrer\">题目</a></p>\n<p>爱丽丝参与一个大致基于纸牌游戏 “21点” 规则的游戏，描述如下：</p>\n<p>爱丽丝以 0 分开始，并在她的得分少于 K 分时抽取数字。 抽取时，她从 <code>[1, W]</code> 的范围中随机获得一个整数作为分数进行累计，其中 W 是整数。 每次抽取都是独立的，其结果具有相同的概率。</p>\n<p>当爱丽丝获得不少于 K 分时，她就停止抽取数字。 爱丽丝的分数不超过 N 的概率是多少？</p>\n\n<h2 id=\"_1-题解思路\"> 1. 题解思路</h2>\n<p>问题要求的东西，是爱丽丝最后分数的概率；</p>\n<p>而分数，在什么时候不会变动呢？就在不能抽牌的时候！</p>\n<p>所以，爱丽丝停止抽牌的时机点在哪？</p>\n<p>当分数不少于 K，即分数大于等于 K 时，爱丽丝就会停止抽牌，所以最后一次抽牌的时间点就在分数等于 K - 1 时！</p>\n<p>所以从最后一个可抽牌时机，当且仅当分数为 K - 1 时进行分析！</p>\n<h2 id=\"_2-以-n-21-k-17-w-10-为例\"> 2. 以 N = 21，K = 17，W = 10 为例</h2>\n<p>此时最后一个可抽牌分数为 16；</p>\n<p>那么，当分数为 16 的时候，再抽一张牌，所得分数不大于 21 的概率，则有：</p>\n<ol>\n<li>如果抽到 1，那么此时分数为 17，不能继续抽牌，显然此时 17 &lt; 21，概率为 1</li>\n<li>如果抽到 2，那么此时分数为 18，同理，概率为 1\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.31em;vertical-align:0em;\"></span><span>⋯</span></span></span></span></li>\n<li>如果抽到 5，那么此时分数为 21，同理，概率为 1</li>\n<li>如果抽到 6，那么此时分数为 22，概率为 0</li>\n<li>如果抽到 7，那么此时分数为 23，概率为 0\n<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.31em;vertical-align:0em;\"></span><span>⋯</span></span></span></span></li>\n<li>如果抽到 10，那么分数为 26，概率为 0</li>\n</ol>\n<p>由于抽到每一张牌的概率是<strong>等可能的</strong>，因此，就有：</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:5.307440000000001em;vertical-align:-2.4037200000000003em;\"></span><span><span><span><span><span><span style=\"height:2.9037200000000003em;\"><span style=\"top:-4.90372em;\"><span style=\"height:3.32144em;\"></span><span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>16</span><span>)</span></span></span><span style=\"top:-3.07772em;\"><span style=\"height:3.32144em;\"></span><span></span></span><span style=\"top:-1.5777200000000002em;\"><span style=\"height:3.32144em;\"></span><span></span></span></span><span>​</span></span><span><span style=\"height:2.40372em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:2.9037200000000003em;\"><span style=\"top:-4.90372em;\"><span style=\"height:3.32144em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>10</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>[</span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>0</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>0</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>0</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>0</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>0</span><span>]</span></span></span><span style=\"top:-1.5777199999999998em;\"><span style=\"height:3.32144em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>0.5</span></span></span></span><span>​</span></span><span><span style=\"height:2.4037200000000003em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>那么对于 16 而言，其最终分数不大于 21 点的概率为 0.5</p>\n<p>当分数为 15 时，爱丽丝再抽一张牌，其分数有可能变为 <code>[16, 25]</code>，那么其最终分数不大于 21 点的概率则有：</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:5.307440000000001em;vertical-align:-2.4037200000000003em;\"></span><span><span><span><span><span><span style=\"height:2.9037200000000003em;\"><span style=\"top:-4.90372em;\"><span style=\"height:3.32144em;\"></span><span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>15</span><span>)</span></span></span><span style=\"top:-3.07772em;\"><span style=\"height:3.32144em;\"></span><span></span></span><span style=\"top:-1.5777200000000002em;\"><span style=\"height:3.32144em;\"></span><span></span></span></span><span>​</span></span><span><span style=\"height:2.40372em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:2.9037200000000003em;\"><span style=\"top:-4.90372em;\"><span style=\"height:3.32144em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>10</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>[</span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>16</span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>0</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>0</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>0</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>0</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>0</span><span>]</span></span></span><span style=\"top:-1.5777199999999998em;\"><span style=\"height:3.32144em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>0.5</span></span></span></span><span>​</span></span><span><span style=\"height:2.4037200000000003em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>从这里，我们可以看出规律：</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>x</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.13889em;\">W</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>[</span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>x</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>1</span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>x</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>2</span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span>⋯</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>x</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">W</span><span>)]</span></span></span></span></span></p>\n<p>其中 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span>x</span></span></span></span> 为 <strong>分数</strong>，而 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>x</span><span>)</span></span></span></span> 则为 <strong>当分数为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span>x</span></span></span></span> 时，最终分数不大于 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> 的概率</strong></p>\n<p>所以，<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>0</span><span>)</span></span></span></span> 即为 <strong>当分数为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0</span></span></span></span> 时，最终分数不大于 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">N</span></span></span></span> 的概率</strong>，就是我们要求的结果。</p>\n<p>得出方程之后，很容易就可以看出，<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>x</span><span>)</span></span></span></span> 的结果和其后面 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.01389em;\">W</span></span></span></span> 个的结果相关；</p>\n<p>所以，这就是一道 <strong>动态规划</strong> 题目！</p>\n<h2 id=\"_3-动态规划三板斧\"> 3. 动态规划三板斧</h2>\n<h3 id=\"_3-1-初始状态\"> 3.1. 初始状态</h3>\n<p>K 之后的值就不变了，同时 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>x</span><span>)</span></span></span></span> 的结果和其后面 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.01389em;\">W</span></span></span></span> 个的结果相关；</p>\n<p>因此，我们只需要关心 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span style=\"margin-right:0.07153em;\">K</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.13889em;\">W</span></span></span></span> 个值即可；</p>\n<p>所以，初始化 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span style=\"margin-right:0.07153em;\">K</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.13889em;\">W</span></span></span></span> 长度的数组，<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>[</span><span style=\"margin-right:0.07153em;\">K</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.07153em;\">K</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">W</span><span>]</span></span></span></span> 的值对应进行初始化即可</p>\n<h3 id=\"_3-2-状态转移方程\"> 3.2 状态转移方程</h3>\n<p>从上面可以得到公式</p>\n<h3 id=\"_3-3-终止状态\"> 3.3 终止状态</h3>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span>x</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0</span></span></span></span> 时，<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>x</span><span>)</span></span></span></span> 即为所求</p>\n<h2 id=\"_4-优化与坑点\"> 4. 优化与坑点</h2>\n<h3 id=\"_4-1-更好的状态转移方程\"> 4.1 更好的状态转移方程</h3>\n<p>我们看到，对于 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>x</span><span>)</span></span></span></span> 而言，需要求解 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.01389em;\">W</span></span></span></span> 长度的值才能得到；</p>\n<p>如果 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.01389em;\">W</span></span></span></span> 很大，就会导致超时。</p>\n<p>观察 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>x</span><span>)</span></span></span></span> 的表达式可以看出，它与 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>x</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>1</span><span>)</span></span></span></span> 是错位的：</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:4.61488em;vertical-align:-2.05744em;\"></span><span><span><span><span><span><span style=\"height:2.55744em;\"><span style=\"top:-4.55744em;\"><span style=\"height:3.32144em;\"></span><span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>x</span><span>)</span></span></span><span style=\"top:-2.25em;\"><span style=\"height:3.32144em;\"></span><span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>x</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>1</span><span>)</span></span></span></span><span>​</span></span><span><span style=\"height:2.05744em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:2.55744em;\"><span style=\"top:-4.55744em;\"><span style=\"height:3.32144em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.13889em;\">W</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>[</span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>x</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>1</span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>x</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>2</span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>⋯</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>x</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.13889em;\">W</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>1</span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>x</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.13889em;\">W</span><span>)]</span></span></span><span style=\"top:-2.25em;\"><span style=\"height:3.32144em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.13889em;\">W</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>[</span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>x</span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>x</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>1</span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>⋯</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>x</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.13889em;\">W</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>1</span><span>)]</span></span></span></span><span>​</span></span><span><span style=\"height:2.05744em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>因此，就可以采取 <strong>错位相减法</strong>，消除多余的项：</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:6.114880000000001em;vertical-align:-2.807440000000001em;\"></span><span><span><span><span><span><span style=\"height:3.30744em;\"><span style=\"top:-5.30744em;\"><span style=\"height:3.32144em;\"></span><span></span></span><span style=\"top:-3.4814399999999996em;\"><span style=\"height:3.32144em;\"></span><span></span></span><span style=\"top:-1.4999999999999996em;\"><span style=\"height:3.32144em;\"></span><span></span></span></span><span>​</span></span><span><span style=\"height:2.8074400000000006em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:3.30744em;\"><span style=\"top:-5.30744em;\"><span style=\"height:3.32144em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∴</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>x</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>1</span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>x</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.13889em;\">W</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>[</span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>x</span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>x</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.13889em;\">W</span><span>)]</span></span></span><span style=\"top:-1.4999999999999991em;\"><span style=\"height:3.32144em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∴</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>x</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>1</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.13889em;\">W</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>[</span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>x</span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>x</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.13889em;\">W</span><span>)]</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>x</span><span>)</span></span></span></span><span>​</span></span><span><span style=\"height:2.807440000000001em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>最终我们得到的方程</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>x</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.13889em;\">W</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>[</span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>x</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>1</span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>x</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span style=\"margin-right:0.13889em;\">W</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>1</span><span>)]</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>x</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>1</span><span>)</span></span></span></span></span></p>\n<p>这个方程只需要计算两项，大大减少了计算的数量。</p>\n<h3 id=\"_4-2-和-之间的关系\"> 4.2 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>N</span></span></span></span> 和 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span><span>K</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.01389em;\">W</span></span></span></span></span> 之间的关系</h3>\n<p>在构造初始状态的时候，我们可以得知，在 <code>[K, N]</code> 时，概率为 1；</p>\n<p>在 <code>[N, K + W - 1]</code> 时，概率为 0；</p>\n<p>我相信很多人的第一反应应该是这样；</p>\n<p>但是这里我们就犯了一个先入为主的错误，认为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>N</span></span></span></span> 一定在 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>K</span></span></span></span> 和 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span><span>K</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.01389em;\">W</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>1</span></span></span></span></span> 之间，实际上一定是这样吗？</p>\n<p><strong>肯定不是！</strong></p>\n<p>例如 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span><span>N</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>10000</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>K</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>17</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.01389em;\">W</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>10</span></span></span></span></span> 时，<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>N</span></span></span></span> 就肯定不在 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>[</span><span>K</span><span>,</span><span> </span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span>K</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.01389em;\">W</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>1</span></span><span>]</span></span></span></span> 之间。</p>\n<p>当 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span>N</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≥</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span><span>K</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.01389em;\">W</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>1</span></span></span></span></span> 时，则对于 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span><span>[</span><span>K</span><span>,</span><span> </span><span style=\"margin-right:0.16666666666666666em;\"></span><span>K</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.01389em;\">W</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>1</span><span>]</span></span></span></span></span> 中的所有概率都为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1</span></span></span></span>；</p>\n<p>因此，在初始化时，我们的分界点应该是</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span><span><span>N</span><span><span><span><span style=\"height:0.738696em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>⋆</span></span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>min</span><span>(</span><span>N</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>K</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.01389em;\">W</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>1</span><span>)</span></span></span></span></span></span></p>\n<h3 id=\"_4-3-对于-dp-k-1-的简便求法\"> 4.3 对于 dp[K -1] 的简便求法</h3>\n<p>对于我们需要计算的第一个值，就是我们初始状态的 <code>dp[K - 1]</code>，对于这个值，我们不能套用上面优化过后的公式；</p>\n<p>因为这个公式是一个递推式，需要通过第一个值来计算得出，那么显然我们的第一个值就是 <code>dp[K - 1]</code>；</p>\n<p>而 <code>dp[K - 1]</code>，从例子中，我们是通过其后面的 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.01389em;\">W</span></span></span></span> 个值计算出来的；</p>\n<p>那么这里就有问题了，当 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.01389em;\">W</span></span></span></span> 很大的时候，我们求解 <code>dp[K - 1]</code> 就会耗时比较长。</p>\n<p>其实经过观察，我们可以看出，对于 <code>dp[K - 1]</code> 有:</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:5.730112em;vertical-align:-2.6150559999999996em;\"></span><span><span><span><span><span><span style=\"height:3.1150560000000005em;\"><span style=\"top:-5.621952em;\"><span style=\"height:3.828336em;\"></span><span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span style=\"margin-right:0.07153em;\">K</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>1</span><span>)</span></span></span><span style=\"top:-2.8076160000000003em;\"><span style=\"height:3.828336em;\"></span><span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span style=\"margin-right:0.07153em;\">K</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>1</span><span>)</span></span></span></span><span>​</span></span><span><span style=\"height:2.6150559999999996em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:3.1150560000000005em;\"><span style=\"top:-5.621952em;\"><span style=\"height:3.828336em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.13889em;\">W</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>[</span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span style=\"margin-right:0.07153em;\">K</span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span style=\"margin-right:0.07153em;\">K</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>1</span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>⋯</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span style=\"margin-right:0.07153em;\">K</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.13889em;\">W</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>1</span><span>)]</span></span></span><span style=\"top:-2.8076160000000003em;\"><span style=\"height:3.828336em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.13889em;\">W</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>⋅</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span><span><span style=\"height:1.8283360000000004em;\"><span style=\"top:-1.855664em;margin-left:0em;\"><span style=\"height:3.05em;\"></span><span><span><span>i</span><span>=</span><span style=\"margin-right:0.07153em;\">K</span></span></span></span><span style=\"top:-3.050005em;\"><span style=\"height:3.05em;\"></span><span><span>∑</span></span></span><span style=\"top:-4.300005em;margin-left:0em;\"><span style=\"height:3.05em;\"></span><span><span><span style=\"margin-right:0.07153em;\">K</span><span>+</span><span style=\"margin-right:0.13889em;\">W</span><span>−</span><span>1</span></span></span></span></span><span>​</span></span><span><span style=\"height:1.294336em;\"><span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>i</span><span>)</span></span></span></span><span>​</span></span><span><span style=\"height:2.6150559999999996em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>对于 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>i</span><span>)</span></span></span></span> 则有：</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:14.377120999999999em;vertical-align:-6.9385604999999995em;\"></span><span><span><span><span><span><span style=\"height:7.4385604999999995em;\"><span style=\"top:-9.4385605em;\"><span style=\"height:4.121em;\"></span><span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>i</span><span>)</span></span></span><span style=\"top:-5.7835605em;\"><span style=\"height:4.121em;\"></span><span><span><span style=\"margin-right:0.10903em;\">N</span><span><span><span><span style=\"height:0.738696em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>⋆</span></span></span></span></span></span></span></span></span></span><span style=\"top:-1.0842155000000007em;\"><span style=\"height:4.121em;\"></span><span><span>∴</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span style=\"margin-right:0.07153em;\">K</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>1</span><span>)</span></span></span><span style=\"top:1.8315604999999988em;\"><span style=\"height:4.121em;\"></span><span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span style=\"margin-right:0.07153em;\">K</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>1</span><span>)</span></span></span></span><span>​</span></span><span><span style=\"height:6.9385604999999995em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:7.4385604999999995em;\"><span style=\"top:-9.4385605em;\"><span style=\"height:4.121em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span><span><span><span><span style=\"height:2.05002em;\"><span style=\"top:-2.49999em;\"><span style=\"height:3.15em;\"></span><span><span>⎩</span></span></span><span style=\"top:-2.49199em;\"><span style=\"height:3.15em;\"></span><span style=\"height:0.016em;width:0.889em;\"><svg width='0.889em' height='0.016em' style='width:0.889em' viewBox='0 0 889 16' preserveAspectRatio='xMinYMin'><path d='M384 0 H504 V16 H384z M384 0 H504 V16 H384z'/></svg></span></span><span style=\"top:-3.15001em;\"><span style=\"height:3.15em;\"></span><span><span>⎨</span></span></span><span style=\"top:-4.292009999999999em;\"><span style=\"height:3.15em;\"></span><span style=\"height:0.016em;width:0.889em;\"><svg width='0.889em' height='0.016em' style='width:0.889em' viewBox='0 0 889 16' preserveAspectRatio='xMinYMin'><path d='M384 0 H504 V16 H384z M384 0 H504 V16 H384z'/></svg></span></span><span style=\"top:-4.30002em;\"><span style=\"height:3.15em;\"></span><span><span>⎧</span></span></span></span><span>​</span></span><span><span style=\"height:1.55002em;\"><span></span></span></span></span></span></span><span><span><span><span><span><span style=\"height:2.121em;\"><span style=\"top:-4.121em;\"><span style=\"height:3.008em;\"></span><span><span>1</span><span>,</span></span></span><span style=\"top:-1.819em;\"><span style=\"height:3.008em;\"></span><span><span>0</span><span>,</span></span></span></span><span>​</span></span><span><span style=\"height:1.621em;\"><span></span></span></span></span></span><span style=\"width:1em;\"></span><span><span><span><span style=\"height:2.121em;\"><span style=\"top:-4.121em;\"><span style=\"height:3.008em;\"></span><span><span style=\"margin-right:0.07153em;\">K</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≤</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>i</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≤</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span style=\"margin-right:0.10903em;\">N</span><span><span><span><span style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>⋆</span></span></span></span></span></span></span></span></span></span><span style=\"top:-1.819em;\"><span style=\"height:3.008em;\"></span><span><span><span style=\"margin-right:0.10903em;\">N</span><span><span><span><span style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>⋆</span></span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>&lt;</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>i</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≤</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.07153em;\">K</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.13889em;\">W</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:1.621em;\"><span></span></span></span></span></span></span></span><span></span></span></span></span><span style=\"top:-5.7835605em;\"><span style=\"height:4.121em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>min</span><span>(</span><span style=\"margin-right:0.10903em;\">N</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.07153em;\">K</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.13889em;\">W</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>1</span><span>)</span></span></span><span style=\"top:-1.0842155000000007em;\"><span style=\"height:4.121em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.13889em;\">W</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>⋅</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span><span><span style=\"height:1.8843450000000002em;\"><span style=\"top:-1.855664em;margin-left:0em;\"><span style=\"height:3.05em;\"></span><span><span><span>i</span><span>=</span><span style=\"margin-right:0.07153em;\">K</span></span></span></span><span style=\"top:-3.050005em;\"><span style=\"height:3.05em;\"></span><span><span>∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span style=\"height:3.05em;\"></span><span><span><span><span style=\"margin-right:0.10903em;\">N</span><span><span><span><span style=\"height:0.7633428571428571em;\"><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span style=\"height:2.5em;\"></span><span><span>⋆</span></span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:1.294336em;\"><span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span>i</span><span>)</span></span></span><span style=\"top:1.8315604999999988em;\"><span style=\"height:4.121em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.13889em;\">W</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>⋅</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>(</span><span><span style=\"margin-right:0.10903em;\">N</span><span><span><span><span style=\"height:0.738696em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>⋆</span></span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.07153em;\">K</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>1</span><span>)</span></span></span></span><span>​</span></span><span><span style=\"height:6.9385604999999995em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>最终，我们得到了</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.10764em;\">f</span><span>(</span><span style=\"margin-right:0.07153em;\">K</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>1</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.13889em;\">W</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>⋅</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>(</span><span><span style=\"margin-right:0.10903em;\">N</span><span><span><span><span style=\"height:0.738696em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>⋆</span></span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span style=\"margin-right:0.07153em;\">K</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>1</span><span>)</span></span></span></span></span></p>\n<p>可以在 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span><span>O</span><span>(</span><span>1</span><span>)</span></span></span></span></span> 时间复杂度就求解出 <code>dp[K - 1]</code></p>\n<h3 id=\"_4-4-特殊情况\"> 4.4 特殊情况</h3>\n<p>到现在为止，我们还没有考虑一些特殊情况，如:</p>\n<ol>\n<li><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span style=\"margin-right:0.10903em;\">N</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≤</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0</span></span></span></span></li>\n<li><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span style=\"margin-right:0.07153em;\">K</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≤</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0</span></span></span></span></li>\n<li><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span style=\"margin-right:0.13889em;\">W</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≤</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0</span></span></span></span></li>\n</ol>\n<p>从题目提示中，我们发现只有 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.07153em;\">K</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0</span></span></span></span> 是可能的，因为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span style=\"margin-right:0.10903em;\">N</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≥</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span style=\"margin-right:0.07153em;\">K</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≥</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0</span></span></span></span> 且 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span style=\"margin-right:0.13889em;\">W</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≥</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1</span></span></span></span></p>\n<p>所以当 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.07153em;\">K</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0</span></span></span></span> 的时候，玩家不能抽牌，所得分数一定不会大于 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">N</span></span></span></span>，所以此时概率为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1</span></span></span></span></p>\n<h2 id=\"_5-代码\"> 5. 代码</h2>\n<div><pre><code><span>class</span> Solution <span>{</span>\n  <span>fun</span> <span>new21Game</span><span>(</span>N<span>:</span> Int<span>,</span> K<span>:</span> Int<span>,</span> W<span>:</span> Int<span>)</span><span>:</span> Double <span>{</span>\n        <span>// 0. K == 0 的特殊情况</span>\n        <span>if</span> <span>(</span>K <span>==</span> <span>0</span><span>)</span> <span>{</span>\n            <span>return</span> <span>1.0</span>\n        <span>}</span>\n\n        <span>// 1. 初始化 K + W 个元素</span>\n        <span>val</span> dp <span>=</span> <span>DoubleArray</span><span>(</span>K <span>+</span> W<span>)</span>\n\n        <span>// 2. dp[K..N*] = 1</span>\n        <span>val</span> spanPoint <span>=</span> kotlin<span>.</span>math<span>.</span><span>min</span><span>(</span>N<span>,</span> K <span>+</span> W <span>-</span> <span>1</span><span>)</span>\n        <span>for</span> <span>(</span>i <span>in</span> K<span>..</span>spanPoint<span>)</span> <span>{</span>\n            dp<span>[</span>i<span>]</span> <span>=</span> <span>1.0</span>\n        <span>}</span>\n\n        <span>// 3. 计算 dp[K - 1]</span>\n        dp<span>[</span>K <span>-</span> <span>1</span><span>]</span> <span>=</span> <span>(</span><span>1.0</span> <span>/</span> W<span>)</span> <span>*</span> <span>(</span>spanPoint <span>-</span> K <span>+</span> <span>1</span><span>)</span>\n\n        <span>// 4. for K-2 until 0</span>\n        <span>(</span><span>(</span>K <span>-</span> <span>2</span><span>)</span> downTo <span>0</span><span>)</span><span>.</span><span>forEach</span> <span>{</span>\n            dp<span>[</span>it<span>]</span> <span>=</span> <span>(</span><span>1.0</span> <span>/</span> W<span>)</span> <span>*</span> <span>(</span>dp<span>[</span>it <span>+</span> <span>1</span><span>]</span> <span>-</span> dp<span>[</span>it <span>+</span> <span>1</span> <span>+</span> W<span>]</span><span>)</span> <span>+</span> dp<span>[</span>it <span>+</span> <span>1</span><span>]</span>\n        <span>}</span>\n\n        <span>// 5. 结果即为 dp[0]</span>\n        <span>return</span> dp<span>[</span><span>0</span><span>]</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div>",
      "date_published": "2021-07-15T11:52:03.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "LeetCode"
      ]
    },
    {
      "title": "Android 面经总结 2019 春招",
      "url": "https://wafer.li/blog-corners/rollroll/interview/android-%E9%9D%A2%E7%BB%8F%E6%80%BB%E7%BB%93-2019-%E6%98%A5%E6%8B%9B/",
      "id": "https://wafer.li/blog-corners/rollroll/interview/android-%E9%9D%A2%E7%BB%8F%E6%80%BB%E7%BB%93-2019-%E6%98%A5%E6%8B%9B/",
      "summary": "<p>折腾了好一段时间，也算是找到了工作了，做个面经总结来告慰一下我的学生生涯</p>\n",
      "content_html": "<p>折腾了好一段时间，也算是找到了工作了，做个面经总结来告慰一下我的学生生涯</p>\n\n<h2 id=\"_1-ihandy\"> 1. iHandy</h2>\n<p>为什么 Android 要设计 Intent Service？直接使用线程不就行了？</p>\n<blockquote>\n<p>考点：Intent Service 和线程的区别\n答：Thread 依赖于 Activity 存在，在 Activity finish 的时候 Thread 必须终止，否则会造成内存泄漏\nIntent Service 不依赖于 Activity 存在，当 Activity 关闭之后，它依旧会继续进行，直到任务完成或者系统强制将其回收</p>\n</blockquote>\n<p>按下 App 强制停止，发生了什么？</p>\n<blockquote>\n<p>调用了 forceStopPackage()</p>\n</blockquote>\n<p>跨进程单例实现</p>\n<blockquote>\n<p>使用 AIDL 接口实现一个单例，然后制定一个进程存储（实现）这个单例，其他进程连接这个 Service 获取其 Binder</p>\n</blockquote>\n<h2 id=\"_2-头条\"> 2. 头条</h2>\n<p><a href=\"https://leetcode.com/problems/sort-colors/\" target=\"_blank\" rel=\"noopener noreferrer\">荷兰国旗问题</a></p>\n<p>只遍历一次的算法</p>\n<p><img src=\"/images/android-面经总结/荷兰国旗算法示意图.png\" alt=\"荷兰国旗算法示意图\" /></p>\n<p><code>curr</code> 从前往后遍历：</p>\n<ol>\n<li>如果遍历到白球，<code>curr++</code></li>\n<li>如果遍历到红球，则与 <code>red</code> 交换，然后 <code>red++</code>，<code>curr++</code></li>\n<li>如果遍历到黑球，则与 <code>black</code> 交换，<code>black--</code>，<strong><code>curr</code> 不动</strong></li>\n</ol>\n<p><code>curr</code> 表示 <strong>前面已经排好了</strong>，和后面交换并不保证前面已经排好</p>\n<p>HTTPS 通信流程</p>\n<blockquote>\n<p>HTTPS 全称是：HTTP over TLS</p>\n</blockquote>\n<Mermaid id=\"mermaid-382ee203\" data-code=\"%E5%AE%A2%E6%88%B7%E7%AB%AF-%3E%E6%9C%8D%E5%8A%A1%E7%AB%AF%3A%20%E5%8F%91%E8%B5%B7%E8%AF%B7%E6%B1%82%EF%BC%8C%E5%8C%85%E6%8B%AC%E5%8D%8F%E8%AE%AE%E7%89%88%E6%9C%AC%EF%BC%8C%E6%94%AF%E6%8C%81%E7%AE%97%E6%B3%95%E5%92%8C%E9%9A%8F%E6%9C%BA%E5%87%BD%E6%95%B0%20random1%0A%E6%9C%8D%E5%8A%A1%E7%AB%AF-%3E%E5%AE%A2%E6%88%B7%E7%AB%AF%3A%20%E7%A1%AE%E8%AE%A4%E7%89%88%E6%9C%AC%EF%BC%8C%E9%9A%8F%E6%9C%BA%E6%95%B0%20random2%20%E5%92%8C%E6%94%AF%E6%8C%81%E7%AE%97%E6%B3%95%0A%E6%9C%8D%E5%8A%A1%E7%AB%AF-%3E%E5%AE%A2%E6%88%B7%E7%AB%AF%3A%20%E5%8F%91%E9%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%85%AC%E9%92%A5%E8%AF%81%E4%B9%A6%0A%E5%AE%A2%E6%88%B7%E7%AB%AF-%3E%E5%AE%A2%E6%88%B7%E7%AB%AF%3A%20%E9%AA%8C%E8%AF%81%E8%AF%81%E4%B9%A6%E7%AD%BE%E5%90%8D%0A%E5%AE%A2%E6%88%B7%E7%AB%AF-%3E%E5%AE%A2%E6%88%B7%E7%AB%AF%3A%20%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0%20random3%20%E5%B9%B6%E9%80%9A%E8%BF%87%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%85%AC%E9%92%A5%E5%8A%A0%E5%AF%86%E7%94%9F%E6%88%90%20premaster%0A%E5%AE%A2%E6%88%B7%E7%AB%AF-%3E%E6%9C%8D%E5%8A%A1%E7%AB%AF%3A%20%E5%8A%A0%E5%AF%86%E5%90%8E%E7%9A%84%20premaster%0A%E6%9C%8D%E5%8A%A1%E7%AB%AF-%3E%E6%9C%8D%E5%8A%A1%E7%AB%AF%3A%20%E7%94%A8%E7%A7%81%E9%92%A5%E8%A7%A3%E5%AF%86%20premaster%EF%BC%8C%E8%8E%B7%E5%8F%96%20random3%0A%E5%AE%A2%E6%88%B7%E7%AB%AF-%3E%E5%AE%A2%E6%88%B7%E7%AB%AF%3A%20%E4%BD%BF%E7%94%A8%20random1%20random2%20random3%20%E7%94%9F%E6%88%90%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%A7%98%E9%92%A5%0A%E6%9C%8D%E5%8A%A1%E7%AB%AF-%3E%E6%9C%8D%E5%8A%A1%E7%AB%AF%3A%20%E4%BD%BF%E7%94%A8%20random1%20random2%20random3%20%E7%94%9F%E6%88%90%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%A7%98%E9%92%A5%0A%E5%AE%A2%E6%88%B7%E7%AB%AF-%3E%E6%9C%8D%E5%8A%A1%E7%AB%AF%3A%20%E4%BD%BF%E7%94%A8%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%A7%98%E9%92%A5%E8%BF%9B%E8%A1%8C%E5%8A%A0%E5%AF%86%E9%80%9A%E4%BF%A1%0A\"></Mermaid><p>HTTPS 的验证过程如何防止中间人攻击？中间人偷换公钥怎么办？</p>\n<blockquote>\n<p>搞清楚几个问题：</p>\n<ol>\n<li>服务器 SSL 证书是怎么来的？\n-&gt; 是从 CA 申请的，CA 向服务器下发公私钥对，并在证书中使用 CA 私钥对服务器公钥进行签名</li>\n<li>客户端是如何验证的？\n-&gt; 客户端拿到服务器公钥之后，使用 CA 公钥对签名部分进行解密，然后对比解密后的公钥是不是同一个（即签名校验）\n所以，防止中间人攻击是经过 CA 来实现的\n如果发现证书签名不一致，则说明遭受到了中间人攻击，那么就中断连接\n重点：HTTPS 防止中间人是依靠 CA 实现的，因此，并不是一定可以防止中间人攻击，如果客户系统导入了奇怪的证书，就可能会遭受到中间人攻击</li>\n</ol>\n</blockquote>\n<h2 id=\"_3-珍爱网\"> 3. 珍爱网</h2>\n<p><code>HashMap</code> 与 <code>ArrayList</code> 如何扩容</p>\n<blockquote>\n<p>ArrayList\n插入前先确保容量，如果不足就扩容，数组增长到 1.5 倍\n<strong>不会自动缩小</strong></p>\n<p>HashMap</p>\n<ol>\n<li>初始大小 16，扩容因子 <code>loadFactor</code> 0.75</li>\n<li>当 <code>size &gt; capacity * loadFactor</code> 时，就扩容 2 倍</li>\n<li>数组扩容完毕之后进行 <code>rehash()</code></li>\n<li>HashMap 的 hash 方法为 <code>hashCode &amp; (sizeOfArray - 1)</code></li>\n<li><a href=\"https://wafer.li/Interview/hashmap-%E7%9A%84-loadfactor-%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF-0-75\" target=\"_blank\" rel=\"noopener noreferrer\">为什么是 0.75</a></li>\n</ol>\n</blockquote>\n<p><code>HashMap</code> 的键值对是否可以为 <code>null</code></p>\n<blockquote>\n<p><code>HashMap</code> 可以为 <code>null</code>(Key, Value 都可以)\n<code>HashTable</code> 不行</p>\n</blockquote>\n<p><code>HashMap</code> 与 <code>Set</code> 的 <code>put</code> 有什么区别</p>\n<blockquote>\n<p><code>HashMap</code> 的 <code>put</code> 当存在相同 Key 的时候会改变原值\n<code>Set</code> 的 <code>put</code> 不会</p>\n</blockquote>\n<p>GC 过程</p>\n<ol>\n<li>对象是否已死(GCRoot可达性)</li>\n<li>四大引用(强 -&gt; 软 -&gt; 弱 -&gt; 虚逐步递减)\n<blockquote>\n<p>强：最为普通的引用，如果对象不死，就不会被回收\n软：稍弱一些的引用，如果即将 OutOfMemoryError 就会对其进行回收\n弱：常用的防止内存泄漏的引用类型，只要进行垃圾回收就马上被回收\n虚：最弱的引用，无法取到目标对象，用于跟踪对象垃圾回收的状态，通过查看引用队列是否有虚引用判断其是否即将被回收</p>\n</blockquote>\n</li>\n<li>是否有必要\n<blockquote>\n<p>GCRoot 不可达 -&gt; 第一次标记进入 F-Queue -&gt; F-Queue 第二次标记 -&gt; 回收</p>\n</blockquote>\n</li>\n<li>回收方法区(废弃常量、无用静态类)</li>\n<li>类没有实例</li>\n<li>ClassLoader 也被回收</li>\n<li>Class 对象没有被引用</li>\n<li>回收算法</li>\n<li>标记-清除算法(会产生内存碎片)</li>\n<li>复制-清除算法(初生代常用，from 和 to Survivor 区域)</li>\n<li>标记-移动算法(老生代常用，标记回收对象，回收之后移动剩余对象)</li>\n</ol>\n<p><code>wait()</code> 和 <code>sleep()</code> 的区别</p>\n<ol>\n<li><code>wait()</code> 位于 <code>Object</code>，<code>sleep()</code> 位于 <code>Thread</code></li>\n<li><code>wait()</code> 只能用于同步块， <code>sleep()</code> 什么地方都使用</li>\n<li><code>wait()</code> 会释放锁，<code>sleep()</code> 不会释放锁</li>\n</ol>\n<p>线程开启有哪几种方式</p>\n<ol>\n<li>继承 <code>Thread</code>，重写 <code>run()</code></li>\n<li>实现 <code>Runnable</code>，调用 <code>Thread.start()</code></li>\n<li>实现 <code>Callable</code>，使用 <code>FutureTask</code> 包装并传入 <code>Thread</code></li>\n<li><code>FutureTask</code> 获取返回值实现原理 (<code>get()</code>)\n<blockquote>\n<p>如果完成了，就返回，如果未完成，就阻塞主线程，等待结果</p>\n</blockquote>\n</li>\n</ol>\n<p>如何保证线程执行顺序</p>\n<ol>\n<li><code>thread.join()</code> 当前线程等待 <code>thread</code> 的终止</li>\n<li>使用锁</li>\n<li>使用 <code>Condition</code></li>\n<li>CAS 操作</li>\n</ol>\n",
      "image": "https://wafer.li/images/android-面经总结/荷兰国旗算法示意图.png",
      "date_published": "2021-07-15T11:52:03.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "面试经验"
      ]
    },
    {
      "title": "HashMap 的 loadFactor 为什么是 0.75",
      "url": "https://wafer.li/blog-corners/rollroll/interview/hashmap-%E7%9A%84-loadfactor-%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF-0-75/",
      "id": "https://wafer.li/blog-corners/rollroll/interview/hashmap-%E7%9A%84-loadfactor-%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF-0-75/",
      "summary": "<p>之前看各大面经的时候搜索到了这个问题，切实感觉到如果刨根问底的问，自己还真不能抵挡住这种攻势，现在闲暇时间又心血来潮地想起来这个问题，就打算好好弄懂弄透，也希望能在将来面试的时候做好准备。</p>\n<p>本文基于<a href=\"https://stackoverflow.com/a/31401836\" target=\"_blank\" rel=\"noopener noreferrer\">这个 StackOverflow 回答</a>进一步推导，并给出详细解答步骤</p>\n",
      "content_html": "<p>之前看各大面经的时候搜索到了这个问题，切实感觉到如果刨根问底的问，自己还真不能抵挡住这种攻势，现在闲暇时间又心血来潮地想起来这个问题，就打算好好弄懂弄透，也希望能在将来面试的时候做好准备。</p>\n<p>本文基于<a href=\"https://stackoverflow.com/a/31401836\" target=\"_blank\" rel=\"noopener noreferrer\">这个 StackOverflow 回答</a>进一步推导，并给出详细解答步骤</p>\n\n<h2 id=\"_1-loadfactor-是什么\"> 1. loadFactor 是什么</h2>\n<p>loadFactor 翻译为 <strong>负载因子</strong>，是 HashMap 负载程度的一个度量，所谓负载程度即 HashMap 持有的元素数量和 HashMap 大小的比值</p>\n<p>当 HashMap 中的元素数量大于 <code>capacity * loadFactor</code> 时，HashMap 就要扩容，并进行重新 hash</p>\n<p>那么，我们可以得出一个重要结论，<code>loadFactor</code> 是为了让 HashMap 尽可能 <strong>不满</strong> 而存在的</p>\n<p>众所周知，HashMap 越空越好，这样插入和查找都能尽可能接近常数级别</p>\n<p>那么接下来的一个重要问题就是：HashMap 什么时候是空的？通过这个问题，我们就可以一步一步推导出 <code>loadFactor</code> 的值</p>\n<h2 id=\"_2-hashmap-什么时候不是很满\"> 2. HashMap 什么时候不是很满</h2>\n<p>我们调整 loadFactor 的根本目标在于，要让元素的插入时间缩短到最少，也就是说，<strong>元素最好不要发生碰撞</strong></p>\n<p><strong>只要元素在插入时不发生碰撞，那么我们的 HashMap 就不算特别的满</strong></p>\n<p>这是一个很重要的结论，通过它，我们成功地把 HashMap 满不满的问题，转换到了插入元素是否碰撞的问题</p>\n<h2 id=\"_3-插入元素的碰撞几率\"> 3. 插入元素的碰撞几率</h2>\n<p>插入元素是否碰撞，这是一个概率事件，有可能碰撞，也可能不碰撞</p>\n<p>对于一个未知的元素，它有可能插入到 HashMap 的任何一个位置，因此，对于未知的元素插入，碰撞是<strong>等可能的</strong>，而一个元素是否碰撞和它之后的元素是否碰撞并无关系，因此是 <strong>独立的</strong></p>\n<blockquote>\n<p>为什么是独立的？因为 HashMap 采用拉链法解决碰撞，碰撞的元素不占用数组空间，因此一个元素是否碰撞和它前一个元素是否碰撞没有关系</p>\n</blockquote>\n<p>在这里，我们要引入一个假设，上面我们提到的 HashMap 不是很满，但是 loadFactor 也不应该让一个 HashMap 过于空，太空的 HashMap 会造成空间的浪费；\n假如一个元素的插入正好导致它碰撞，那么说明这个 HashMap 肯定不是特别空旷，而且当元素插入就碰撞时，恰好说明我们需要扩大 HashMap，而不是修改元素的 <code>hash()</code> 方法</p>\n<p>因此，我们有单个元素插入碰撞的概率为</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span>p</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>s</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span></span></span></span></span></p>\n<h2 id=\"_4-hashmap-在插入过程中不发生碰撞的概率\"> 4. HashMap 在插入过程中不发生碰撞的概率</h2>\n<p>得到单个元素插入发生碰撞的概率之后，我们来考虑整个 HashMap 在插入过程中不发生碰撞的概率</p>\n<p>对于一个 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span>s</span></span></span></span> 大小的 Hashmap，我们插入 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span>n</span></span></span></span> 个元素，这个操作属于等可能独立事件的<strong>重复操作</strong>，满足 <strong>二项分布</strong>，因此我们可以得出，在这个重复插入操作中，没有碰撞的概率为：</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:4.61488em;vertical-align:-2.05744em;\"></span><span><span><span><span><span><span style=\"height:2.55744em;\"><span style=\"top:-4.55744em;\"><span style=\"height:3.32144em;\"></span><span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>0</span><span>)</span></span></span><span style=\"top:-2.25em;\"><span style=\"height:3.32144em;\"></span><span></span></span></span><span>​</span></span><span><span style=\"height:2.05744em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:2.55744em;\"><span style=\"top:-4.55744em;\"><span style=\"height:3.32144em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span style=\"margin-right:0.07153em;\">C</span><span><span><span><span style=\"height:0.8641079999999999em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>0</span></span></span></span><span>​</span></span><span><span style=\"height:0.247em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>(</span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>s</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span><span>)</span><span><span><span><span style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>0</span></span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>(</span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>s</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span><span>)</span><span><span><span><span style=\"height:0.864108em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>n</span><span>−</span><span>0</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-2.25em;\"><span style=\"height:3.32144em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>(</span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>s</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span><span>)</span><span><span><span><span style=\"height:0.7143919999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:2.05744em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<h2 id=\"_5-什么叫-hashmap-很可能不满\"> 5. 什么叫“HashMap 很可能不满”</h2>\n<p>假如一个 HashMap，它在插入元素的过程中，如果它一次碰撞都没有发生，说明它没有满；</p>\n<p>上面我们得到了这个事件的概率，如果这个事件发生的概率很大，那么就说明 HashMap <strong>很可能不满</strong></p>\n<p>所以，若 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>(</span><span>0</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≤</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0.5</span></span></span></span>，则说明 HashMap 很可能没有满</p>\n<p>则有</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:2.30744em;vertical-align:-0.90372em;\"></span><span><span><span><span><span><span style=\"height:1.4037200000000003em;\"><span style=\"top:-3.4037200000000003em;\"><span style=\"height:3.32144em;\"></span><span><span>(</span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>s</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span><span>)</span><span><span><span><span style=\"height:0.7143919999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≥</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>2</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span></span></span></span><span>​</span></span><span><span style=\"height:0.90372em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>其中 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span>n</span></span></span></span> 代表 HashMap 中元素的个数，<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span>s</span></span></span></span> 代表 HashMap 的数组大小</p>\n<h2 id=\"_6-loadfactor-的计算过程\"> 6. loadFactor 的计算过程</h2>\n<p>HashMap 中 <code>loadFactor</code> 即为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>n</span><span>/</span><span>s</span></span></span></span>，首先求出 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span>n</span></span></span></span>，对于上面的式子取对数，则有</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:10.571307000000001em;vertical-align:-5.0356535em;\"></span><span><span><span><span><span><span style=\"height:5.5356535000000004em;\"><span style=\"top:-7.5856535em;\"><span style=\"height:3.3714399999999998em;\"></span><span><span>n</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>ln</span><span>(</span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>s</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span>)</span></span></span><span style=\"top:-5.228213499999999em;\"><span style=\"height:3.3714399999999998em;\"></span><span><span>n</span></span></span><span style=\"top:-2.4766655em;\"><span style=\"height:3.3714399999999998em;\"></span><span><span>n</span></span></span><span style=\"top:0.2748824999999997em;\"><span style=\"height:3.3714399999999998em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:5.0356535em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:5.5356535000000004em;\"><span style=\"top:-7.5856535em;\"><span style=\"height:3.3714399999999998em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≥</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>−</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>ln</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>2</span></span></span><span style=\"top:-5.228213499999999em;\"><span style=\"height:3.3714399999999998em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≤</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.37144em;\"><span style=\"top:-2.2648919999999997em;\"><span style=\"height:3em;\"></span><span><span>ln</span><span>(</span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span></span><span><span><span><span style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span style=\"height:3em;\"></span><span><span><span>s</span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span style=\"height:3em;\"></span><span><span><span>1</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.345em;\"><span></span></span></span></span></span><span></span></span><span>)</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>−</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>ln</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:1.080108em;\"><span></span></span></span></span></span><span></span></span></span></span><span style=\"top:-2.4766655em;\"><span style=\"height:3.3714399999999998em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≤</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.37144em;\"><span style=\"top:-2.2648919999999997em;\"><span style=\"height:3em;\"></span><span><span>ln</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span></span><span><span><span><span style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span style=\"height:3em;\"></span><span><span><span>s</span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span style=\"height:3em;\"></span><span><span><span>s</span><span>−</span><span>1</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.345em;\"><span></span></span></span></span></span><span></span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>−</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>ln</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:1.080108em;\"><span></span></span></span></span></span><span></span></span></span></span><span style=\"top:0.2748824999999997em;\"><span style=\"height:3.3714399999999998em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≤</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.37144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>ln</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span></span><span><span><span><span style=\"height:0.695392em;\"><span style=\"top:-2.655em;\"><span style=\"height:3em;\"></span><span><span><span>s</span><span>−</span><span>1</span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span style=\"height:3em;\"></span><span><span><span>s</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.403331em;\"><span></span></span></span></span></span><span></span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>ln</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:1.089331em;\"><span></span></span></span></span></span><span></span></span></span></span></span><span>​</span></span><span><span style=\"height:5.0356535em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>所以，当 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span>n</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≤</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.5635929999999998em;vertical-align:-0.6834849999999999em;\"></span><span><span></span><span><span><span><span style=\"height:0.8801079999999999em;\"><span style=\"top:-2.59898em;\"><span style=\"height:3em;\"></span><span><span><span><span>l</span><span>n</span></span><span style=\"margin-right:0.19516666666666668em;\"></span><span><span></span><span><span><span><span style=\"height:0.8443142857142858em;\"><span style=\"top:-2.656em;\"><span style=\"height:3em;\"></span><span><span><span>2</span><span>s</span><span>−</span><span>1</span></span></span></span><span style=\"top:-3.2255em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.049em;\"></span></span><span style=\"top:-3.384em;\"><span style=\"height:3em;\"></span><span><span><span>2</span><span>s</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.40352142857142853em;\"><span></span></span></span></span></span><span></span></span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span style=\"height:3em;\"></span><span><span><span><span>l</span><span>n</span></span><span style=\"margin-right:0.19516666666666668em;\"></span><span>2</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.6834849999999999em;\"><span></span></span></span></span></span><span></span></span></span></span></span> 时，HashMap <strong>很可能</strong>不满，所以</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.7935600000000003em;vertical-align:-0.686em;\"></span><span><span></span><span><span><span><span style=\"height:1.10756em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>s</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≤</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:2.4607710000000003em;vertical-align:-1.089331em;\"></span><span><span></span><span><span><span><span style=\"height:1.37144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>s</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>ln</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span></span><span><span><span><span style=\"height:0.695392em;\"><span style=\"top:-2.655em;\"><span style=\"height:3em;\"></span><span><span><span>s</span><span>−</span><span>1</span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span style=\"height:3em;\"></span><span><span><span>s</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.403331em;\"><span></span></span></span></span></span><span></span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>ln</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:1.089331em;\"><span></span></span></span></span></span><span></span></span></span></span></span></span></p>\n<p>当 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span>s</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>→</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span>∞</span></span></span></span> 时，有</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:2.760771em;vertical-align:-1.1303855em;\"></span><span><span><span><span><span><span style=\"height:1.6303855em;\"><span style=\"top:-3.6303855em;\"><span style=\"height:3.3714399999999998em;\"></span><span><span style=\"margin-right:0.01968em;\">l</span><span>o</span><span>a</span><span>d</span><span style=\"margin-right:0.13889em;\">F</span><span>a</span><span>c</span><span>t</span><span style=\"margin-right:0.02778em;\">or</span></span></span></span><span>​</span></span><span><span style=\"height:1.1303855em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:1.6303855em;\"><span style=\"top:-3.6303855em;\"><span style=\"height:3.3714399999999998em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span><span><span style=\"height:0.69444em;\"><span style=\"top:-2.4em;margin-left:0em;\"><span style=\"height:3em;\"></span><span><span><span>s</span><span>→</span><span>∞</span></span></span></span><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span>lim</span></span></span></span><span>​</span></span><span><span style=\"height:0.7em;\"><span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span></span><span><span><span><span style=\"height:1.37144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>s</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>ln</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span></span><span><span><span><span style=\"height:0.695392em;\"><span style=\"top:-2.655em;\"><span style=\"height:3em;\"></span><span><span><span>s</span><span>−</span><span>1</span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span style=\"height:3em;\"></span><span><span><span>s</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.403331em;\"><span></span></span></span></span></span><span></span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>ln</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:1.089331em;\"><span></span></span></span></span></span><span></span></span></span></span></span><span>​</span></span><span><span style=\"height:1.1303855em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>对于分母的式子有</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:2.17689em;vertical-align:-0.8384450000000001em;\"></span><span><span><span><span><span><span style=\"height:1.338445em;\"><span style=\"top:-3.338445em;\"><span style=\"height:3.1075600000000003em;\"></span><span><span><span><span><span style=\"height:0.69444em;\"><span style=\"top:-2.4em;margin-left:0em;\"><span style=\"height:3em;\"></span><span><span><span>s</span><span>→</span><span>∞</span></span></span></span><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span>lim</span></span></span></span><span>​</span></span><span><span style=\"height:0.7em;\"><span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span>s</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>ln</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span></span><span><span><span><span style=\"height:1.10756em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>s</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>1</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>s</span></span></span></span><span>​</span></span><span><span style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span></span></span></span></span></span><span>​</span></span><span><span style=\"height:0.8384450000000001em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>从形式上来看，当 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span>s</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>→</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span>∞</span></span></span></span> 时，<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.2484389999999999em;vertical-align:-0.403331em;\"></span><span><span></span><span><span><span><span style=\"height:0.845108em;\"><span style=\"top:-2.655em;\"><span style=\"height:3em;\"></span><span><span><span>2</span><span>s</span><span>−</span><span>1</span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span style=\"height:3em;\"></span><span><span><span>2</span><span>s</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.403331em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>→</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0</span></span></span></span>，则上式为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.44445em;vertical-align:0em;\"></span><span>∞</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>⋅</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0</span></span></span></span> 型，应转换为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span><span></span><span><span><span><span style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span style=\"height:3em;\"></span><span><span><span>∞</span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span style=\"height:3em;\"></span><span><span><span>0</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.345em;\"><span></span></span></span></span></span><span></span></span></span></span></span> 或者 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.040392em;vertical-align:-0.345em;\"></span><span><span></span><span><span><span><span style=\"height:0.695392em;\"><span style=\"top:-2.6550000000000002em;\"><span style=\"height:3em;\"></span><span><span><span>0</span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span style=\"height:3em;\"></span><span><span><span>∞</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.345em;\"><span></span></span></span></span></span><span></span></span></span></span></span> 计算，对 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span>s</span></span></span></span> 取倒数，有：\n令 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span>s</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span><span></span><span><span><span><span style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span style=\"height:3em;\"></span><span><span><span>t</span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span style=\"height:3em;\"></span><span><span><span>1</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.345em;\"><span></span></span></span></span></span><span></span></span></span></span></span>：</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:10.966749em;vertical-align:-5.2333745em;\"></span><span><span><span><span><span><span style=\"height:5.7333745em;\"><span style=\"top:-7.7917055em;\"><span style=\"height:3.638439em;\"></span><span></span></span><span style=\"top:-4.8314895em;\"><span style=\"height:3.638439em;\"></span><span></span></span><span style=\"top:-2.1299415em;\"><span style=\"height:3.638439em;\"></span><span></span></span><span style=\"top:0.5778275000000002em;\"><span style=\"height:3.638439em;\"></span><span></span></span></span><span>​</span></span><span><span style=\"height:5.2333745em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:5.7333745em;\"><span style=\"top:-7.7917055em;\"><span style=\"height:3.638439em;\"></span><span><span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span><span><span style=\"height:0.69444em;\"><span style=\"top:-2.382892em;margin-left:0em;\"><span style=\"height:3em;\"></span><span><span><span>t</span><span>→</span><span>0</span></span></span></span><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span>lim</span></span></span></span><span>​</span></span><span><span style=\"height:0.717108em;\"><span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>t</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span>ln</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span></span><span><span><span><span style=\"height:1.580108em;\"><span style=\"top:-2.2648919999999997em;\"><span style=\"height:3em;\"></span><span><span><span></span><span><span><span><span style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span style=\"height:3em;\"></span><span><span><span>t</span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span style=\"height:3em;\"></span><span><span><span>1</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.345em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>1</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.7350000000000003em;\"><span style=\"height:3em;\"></span><span><span><span></span><span><span><span><span style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span style=\"height:3em;\"></span><span><span><span>t</span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span style=\"height:3em;\"></span><span><span><span>1</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.345em;\"><span></span></span></span></span></span><span></span></span></span></span></span><span>​</span></span><span><span style=\"height:1.080108em;\"><span></span></span></span></span></span><span></span></span></span></span><span style=\"top:-4.8314895em;\"><span style=\"height:3.638439em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span><span><span style=\"height:0.69444em;\"><span style=\"top:-2.382892em;margin-left:0em;\"><span style=\"height:3em;\"></span><span><span><span>t</span><span>→</span><span>0</span></span></span></span><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span>lim</span></span></span></span><span>​</span></span><span><span style=\"height:0.717108em;\"><span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>t</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span>ln</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span></span><span><span><span><span style=\"height:1.580108em;\"><span style=\"top:-2.2648919999999997em;\"><span style=\"height:3em;\"></span><span><span><span></span><span><span><span><span style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span style=\"height:3em;\"></span><span><span><span>t</span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span style=\"height:3em;\"></span><span><span><span>1</span><span>−</span><span>t</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.345em;\"><span></span></span></span></span></span><span></span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.7350000000000003em;\"><span style=\"height:3em;\"></span><span><span><span></span><span><span><span><span style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span style=\"height:3em;\"></span><span><span><span>t</span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span style=\"height:3em;\"></span><span><span><span>1</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.345em;\"><span></span></span></span></span></span><span></span></span></span></span></span><span>​</span></span><span><span style=\"height:1.080108em;\"><span></span></span></span></span></span><span></span></span></span></span><span style=\"top:-2.1299415em;\"><span style=\"height:3.638439em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span><span><span style=\"height:0.69444em;\"><span style=\"top:-2.382892em;margin-left:0em;\"><span style=\"height:3em;\"></span><span><span><span>t</span><span>→</span><span>0</span></span></span></span><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span>lim</span></span></span></span><span>​</span></span><span><span style=\"height:0.717108em;\"><span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>t</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span>ln</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>t</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span></span></span></span></span><span style=\"top:0.5778275000000002em;\"><span style=\"height:3.638439em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span><span><span style=\"height:0.69444em;\"><span style=\"top:-2.382892em;margin-left:0em;\"><span style=\"height:3em;\"></span><span><span><span>t</span><span>→</span><span>0</span></span></span></span><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span>lim</span></span></span></span><span>​</span></span><span><span style=\"height:0.717108em;\"><span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span></span><span><span><span><span style=\"height:1.638439em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>t</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.7933310000000002em;\"><span style=\"height:3em;\"></span><span><span>ln</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span></span><span><span><span><span style=\"height:0.845108em;\"><span style=\"top:-2.655em;\"><span style=\"height:3em;\"></span><span><span><span>1</span><span>−</span><span>t</span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span style=\"height:3em;\"></span><span><span><span>1</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.403331em;\"><span></span></span></span></span></span><span></span></span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span>⋯</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>(</span><span>⋆</span><span>)</span></span></span></span><span>​</span></span><span><span style=\"height:5.2333745em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>遇见 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span>x</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>→</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0</span></span></span></span>，就要想 <strong>等价无穷小</strong>，对于 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span>ln</span></span></span></span> 可以构造 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>ln</span><span>(</span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>x</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∼</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span>x</span></span></span></span>，则有：</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:7.14295em;vertical-align:-3.3214750000000004em;\"></span><span><span><span><span><span><span style=\"height:3.8214749999999995em;\"><span style=\"top:-5.8214749999999995em;\"><span style=\"height:3.32144em;\"></span><span></span></span><span style=\"top:-3.4307049999999997em;\"><span style=\"height:3.32144em;\"></span><span></span></span><span style=\"top:-1.0692949999999997em;\"><span style=\"height:3.32144em;\"></span><span></span></span></span><span>​</span></span><span><span style=\"height:3.3214750000000004em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:3.8214749999999995em;\"><span style=\"top:-5.8214749999999995em;\"><span style=\"height:3.32144em;\"></span><span><span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span>ln</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>t</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span></span></span></span></span><span style=\"top:-3.4307049999999997em;\"><span style=\"height:3.32144em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>ln</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>t</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>t</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>t</span></span></span></span><span>​</span></span><span><span style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span></span></span></span></span><span style=\"top:-1.0692949999999997em;\"><span style=\"height:3.32144em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>ln</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span></span><span><span><span><span style=\"height:1.29208em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>t</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>t</span></span></span></span><span>​</span></span><span><span style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span></span></span></span></span></span><span>​</span></span><span><span style=\"height:3.3214750000000004em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>则 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>(</span><span>⋆</span><span>)</span></span></span></span>式则有</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:16.157975999999998em;vertical-align:-7.828988000000001em;\"></span><span><span><span><span><span><span style=\"height:8.328987999999999em;\"><span style=\"top:-10.328987999999999em;\"><span style=\"height:3.617887em;\"></span><span></span></span><span style=\"top:-7.990439999999999em;\"><span style=\"height:3.617887em;\"></span><span></span></span><span style=\"top:-6.081109999999999em;\"><span style=\"height:3.617887em;\"></span><span></span></span><span style=\"top:-4.581109999999999em;\"><span style=\"height:3.617887em;\"></span><span></span></span><span style=\"top:-2.549669999999999em;\"><span style=\"height:3.617887em;\"></span><span><span>∴</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.01968em;\">l</span><span>o</span><span>a</span><span>d</span><span style=\"margin-right:0.13889em;\">F</span><span>a</span><span>c</span><span>t</span><span style=\"margin-right:0.02778em;\">or</span></span></span><span style=\"top:0.21110100000000065em;\"><span style=\"height:3.617887em;\"></span><span></span></span><span style=\"top:2.0511010000000005em;\"><span style=\"height:3.617887em;\"></span><span></span></span><span style=\"top:3.551101000000001em;\"><span style=\"height:3.617887em;\"></span><span></span></span></span><span>​</span></span><span><span style=\"height:7.828988000000001em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:8.328987999999999em;\"><span style=\"top:-10.328987999999999em;\"><span style=\"height:3.617887em;\"></span><span><span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span><span><span style=\"height:0.69444em;\"><span style=\"top:-2.382892em;margin-left:0em;\"><span style=\"height:3em;\"></span><span><span><span>t</span><span>→</span><span>0</span></span></span></span><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span>lim</span></span></span></span><span>​</span></span><span><span style=\"height:0.717108em;\"><span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span></span><span><span><span><span style=\"height:1.617887em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>t</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.7933310000000002em;\"><span style=\"height:3em;\"></span><span><span><span></span><span><span><span><span style=\"height:0.824556em;\"><span style=\"top:-2.655em;\"><span style=\"height:3em;\"></span><span><span><span>1</span><span>−</span><span>t</span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span style=\"height:3em;\"></span><span><span><span>t</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.403331em;\"><span></span></span></span></span></span><span></span></span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span></span></span><span style=\"top:-7.990439999999999em;\"><span style=\"height:3.617887em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span><span><span style=\"height:0.69444em;\"><span style=\"top:-2.382892em;margin-left:0em;\"><span style=\"height:3em;\"></span><span><span><span>t</span><span>→</span><span>0</span></span></span></span><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span>lim</span></span></span></span><span>​</span></span><span><span style=\"height:0.717108em;\"><span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span></span><span><span><span><span style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>t</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span></span></span></span></span><span style=\"top:-6.081109999999999em;\"><span style=\"height:3.617887em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>1</span></span></span><span style=\"top:-2.549669999999999em;\"><span style=\"height:3.617887em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span><span><span style=\"height:0.69444em;\"><span style=\"top:-2.4em;margin-left:0em;\"><span style=\"height:3em;\"></span><span><span><span>s</span><span>→</span><span>∞</span></span></span></span><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span>lim</span></span></span></span><span>​</span></span><span><span style=\"height:0.7em;\"><span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span></span><span><span><span><span style=\"height:1.37144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>s</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>ln</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span></span><span><span><span><span style=\"height:0.695392em;\"><span style=\"top:-2.655em;\"><span style=\"height:3em;\"></span><span><span><span>s</span><span>−</span><span>1</span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span style=\"height:3em;\"></span><span><span><span>s</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.403331em;\"><span></span></span></span></span></span><span></span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>ln</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:1.089331em;\"><span></span></span></span></span></span><span></span></span></span></span><span style=\"top:0.21110100000000065em;\"><span style=\"height:3.617887em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span><span><span style=\"height:0.69444em;\"><span style=\"top:-2.4em;margin-left:0em;\"><span style=\"height:3em;\"></span><span><span><span>s</span><span>→</span><span>∞</span></span></span></span><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span><span>lim</span></span></span></span><span>​</span></span><span><span style=\"height:0.7em;\"><span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span></span><span><span><span><span style=\"height:1.37144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>1</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>ln</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span></span></span><span style=\"top:2.0511010000000005em;\"><span style=\"height:3.617887em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>ln</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>2</span></span></span><span style=\"top:3.551101000000001em;\"><span style=\"height:3.617887em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∼</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>0.693</span></span></span></span><span>​</span></span><span><span style=\"height:7.828988000000001em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<h2 id=\"_7-为什么是-0-75\"> 7. 为什么是 0.75</h2>\n<p>从上面的计算来看，<code>loadFactor</code> 取 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span>ln</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>2</span></span></span></span> 时，能够让 HashMap 尽可能不满</p>\n<p>但是在实际中，HashMap 碰撞与否，其实是与 <code>hashCode()</code> 的设计有很大关系，因此 JDK 设计者在平衡空间利用和性能方面给了一个更高的经验数字。</p>\n<h2 id=\"_8-总结\"> 8. 总结</h2>\n<p>当然，这只是一家之言，你也可以从其他方面解释 0.75 这个值如何如何；</p>\n<p>其实这种刨根问底的问题，终究希望考察你的 <strong>能力</strong> 而不是 <strong>记忆</strong>，只要你能给出自己的解释，而不是被问住，呆若木鸡，就能通过面试。</p>\n",
      "date_published": "2021-07-15T11:52:03.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "面试经验"
      ]
    },
    {
      "title": "卷卷",
      "url": "https://wafer.li/blog-corners/rollroll/",
      "id": "https://wafer.li/blog-corners/rollroll/",
      "content_html": "<p>卷卷，人一出生其实就在漩涡之中，只能奋力的，奋力的逃出漩涡之地。</p>\n<p>记录各种算法的做题记录和面经。</p>\n",
      "date_published": "2021-07-09T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": []
    },
    {
      "title": "Realforce 87u",
      "url": "https://wafer.li/blog-corners/talk/Realforce%2087u/",
      "id": "https://wafer.li/blog-corners/talk/Realforce%2087u/",
      "summary": "<p>最近终于下定决心来买这个键盘了。</p>\n<p>主要说说使用感受吧</p>\n<p>2018/1/8 更新部分内容</p>\n",
      "content_html": "<p>最近终于下定决心来买这个键盘了。</p>\n<p>主要说说使用感受吧</p>\n<p>2018/1/8 更新部分内容</p>\n\n<h2 id=\"_1-手感\"> 1. 手感</h2>\n<p>我买的这个是静音版，手感介于红轴和茶轴之间，就是稍微软一点的茶轴，按起来有种噗噗的感觉；</p>\n<p>显然，打击感是一点也没有了，不过真的有种揉胸的感觉。</p>\n<p>不过这个键盘的优点在于：由于是分区压力，所以能极大地缓解小拇指的压力；</p>\n<p>之前我用的 filco 青轴，最后有 40% 的概率用小拇指打不出 shift 按键；</p>\n<p>这也是为什么我要买一个新键盘的原因。</p>\n<h2 id=\"_2-特色功能\"> 2. 特色功能</h2>\n<p>Realforce 87u 有个特色功能，就是把没有什么卵用的 Scroll Lock 变成了 NumLock；</p>\n<p>也就是说，这个键盘有 <strong>小键盘</strong> 的功能！</p>\n<p>这是我在 87 键盘上从来没有见到过的。</p>\n<p>不过在 Mac 上，这个 NumLock 就失效了；</p>\n<blockquote>\n<p>2018/1/8 补充：\n<strong>可惜的是，自从升级到 High Sierra 之后下面的方法就不管用了</strong>\n<strong>不过吧，反正我也不怎么用这个小键盘，先就这样吧。</strong></p>\n</blockquote>\n<p>需要使用 Karabiner 进行键位修改。</p>\n<p>首先下载 Karabiner，这里有个小问题就是 <code>brew cask</code> 会报 <code>Operation not permitted</code> 的错误；</p>\n<p>所以最好还是自己下载镜像安装为好。</p>\n<p>随后点击 <code>Open private.xml</code>：</p>\n<p><img src=\"https://ww1.sinaimg.cn/large/006tNbRwly1feindhtm6kj318g0zoagn.jpg\" alt=\"\" /></p>\n<p>然后加上一条自定义配置<sup></sup>：</p>\n<div><pre><code><span><span><span>&lt;</span>item</span><span>></span></span>\n    <span><span><span>&lt;</span>name</span><span>></span></span>Map Realforce Numlock to OSX Numlock function<span><span><span>&lt;/</span>name</span><span>></span></span>\n    <span><span><span>&lt;</span>identifier</span><span>></span></span>private.pc_numlock_to_mac_numlock<span><span><span>&lt;/</span>identifier</span><span>></span></span>\n    <span><span><span>&lt;</span>autogen</span><span>></span></span>__KeyToKey__ KeyCode::KEYPAD_CLEAR, KeyCode::VK_IOHIKEYBOARD_TOGGLE_NUMLOCK<span><span><span>&lt;/</span>autogen</span><span>></span></span>\n<span><span><span>&lt;/</span>item</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>最后再到 <code>Change Key</code> 启用就可以了。</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/006tNbRwly1feingd0pg8j30ts06qabi.jpg\" alt=\"\" /></p>\n<h2 id=\"_3-缺点\"> 3. 缺点</h2>\n<p>目前遇到的缺点只有一个：</p>\n<p>就是它的导线槽太紧了，几乎是死死卡住键盘的线缆；</p>\n<p>结果我摆弄的时候需要用很大的力气才能把线弄出来，希望以后不要弄烂为好；</p>\n<blockquote>\n<p>小贴士：弄的时候长痛不如短痛，直接一个猛劲可以更快的减轻线缆的损伤</p>\n</blockquote>\n<p>其次就是居然不配理线用的尼龙扎带，差评！</p>\n<h2 id=\"_4-为什么不买-hhkb\"> 4. 为什么不买 HHKB</h2>\n<p>不喜欢 HHKB 的配列。</p>\n<p>我就爱用 <code>Caps Lock</code> 🙃</p>\n<h2 id=\"_5-总结\"> 5. 总结</h2>\n<p>如果你很喜欢用青轴，很享受用青轴的打击感，请直接买青轴，静电容不适合你；</p>\n<p>如果你用青轴感觉到力不从心，但是钱不够，请买茶轴或者红轴；</p>\n<p>如果你有点闲钱，而且比较有意向打造一个良好的打字环境，那么可以考虑买一个静电容；</p>\n<p>最后来一张玉照：</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/006tNbRwly1feinxuuro5j31kw23ve83.jpg\" alt=\"\" /></p>\n<h2 id=\"_6-补充\"> 6. 补充</h2>\n<p>上传一张 Switch 的说明书，说不定以后会用到。</p>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tNc79ly1fn953gfiazj31kw2t5h2v.jpg\" alt=\"\" /></p>\n<hr>\n<section>\n<ol>\n<li id=\"footnote1\"><p><a href=\"https://www.zhihu.com/question/39522431/answer/81753723\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.zhihu.com/question/39522431/answer/81753723</a> </p>\n</li>\n</ol>\n</section>\n",
      "image": "https://ww1.sinaimg.cn/large/006tNbRwly1feindhtm6kj318g0zoagn.jpg",
      "date_published": "2021-07-15T11:52:03.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "杂谈"
      ]
    },
    {
      "title": "ofo 使用体验",
      "url": "https://wafer.li/blog-corners/talk/ofo%20%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/",
      "id": "https://wafer.li/blog-corners/talk/ofo%20%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/",
      "summary": "<p>最近因为和舍友出去看电影，终于第一次体验了一下著名的小黄车 ofo；</p>\n<p>ofo 的确是很方便，同时也解决了所谓「最后一公里」的这个需求痛点；</p>\n<p>但是，我不得不说，ofo 的运营团队还很年轻，一些很基本的流程问题都没搞清楚就胡乱上线功能。</p>\n",
      "content_html": "<p>最近因为和舍友出去看电影，终于第一次体验了一下著名的小黄车 ofo；</p>\n<p>ofo 的确是很方便，同时也解决了所谓「最后一公里」的这个需求痛点；</p>\n<p>但是，我不得不说，ofo 的运营团队还很年轻，一些很基本的流程问题都没搞清楚就胡乱上线功能。</p>\n\n<h2 id=\"_1-校园认证\"> 1. 校园认证</h2>\n<p>就比如说 ofo 的校园认证，的确对我等大学生有很大的优惠；</p>\n<p>但是，当你校园认证不通过，而你急着用车，去进行了普通认证，那么：</p>\n<p><strong>你就再也不能进行校园认证了!</strong></p>\n<p>明明就是一个很容易考虑到的 Corner Case，可是 ofo 却没有处理好；</p>\n<p>看来 ofo 还需要多招几个测试大牛。</p>\n<h2 id=\"_2-客服电话\"> 2. 客服电话</h2>\n<p>APP 上解决不了的问题，一般的用户就会想着去联系客服解决；</p>\n<p>在这里我不得不说一声 MMP，ofo 的客服电话三天两头打不通；</p>\n<p>在半个小时之内，我连续向其拨打了 12 通电话；但是，只有 3 通是能接通的。</p>\n<p>第一通电话接通之后，首先是让我退押金，然后再打电话；</p>\n<blockquote>\n<p>这也无可厚非，毕竟银行信用卡激活就是这么要求的</p>\n</blockquote>\n<p>第二通电话，就有点莫名其妙了，首先接话员连普通话也说不标准；</p>\n<p>然后说没有权限恢复我的认证状态，在经过多次撕逼之后，让我去找一个微信号去解决；</p>\n<p>结果这个微信号居然是个  <strong>异常号！</strong></p>\n<p>第三通电话之后，告诉我，你还有余额没有退，所以不能给你恢复认证状态。</p>\n<p>结果呢？帮我申请了余额退款，说要到账之后才能进行下一步的操作。</p>\n<p>所以就导致我现在，没有押金，余额还在银行流转，所以小黄车就不关我什么事了。</p>\n<h2 id=\"_3-总结\"> 3. 总结</h2>\n<p>可以看出，就是因为一个没有考虑到的 Corner Case ，现在我只能去骑 mobike;</p>\n<p>想到当年即使是写小学期项目，也要跟队员讨论个大半天的 Corner Case 才开始着手编码；</p>\n<p>可能这就是互联网 APP 泡沫生态的现状吧：</p>\n<p>大家都去抢功能，让功能尽早上线，剩下的维护啊支持啊，都可以往后边放一放。</p>\n",
      "date_published": "2021-07-15T11:52:03.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "杂谈"
      ]
    },
    {
      "title": "杂谈",
      "url": "https://wafer.li/blog-corners/talk/",
      "id": "https://wafer.li/blog-corners/talk/",
      "content_html": "<p>杂谈</p>\n<p>顾名思义，就是随便写的一点东西。</p>\n",
      "date_published": "2021-07-09T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": []
    },
    {
      "title": "打字训练网站",
      "url": "https://wafer.li/blog-corners/talk/%E6%89%93%E5%AD%97%E8%AE%AD%E7%BB%83%E7%BD%91%E7%AB%99/",
      "id": "https://wafer.li/blog-corners/talk/%E6%89%93%E5%AD%97%E8%AE%AD%E7%BB%83%E7%BD%91%E7%AB%99/",
      "content_html": "<p>买了新键盘之后就想试一试它的威力，所以就找了一个打字训练网站来打字；</p>\n<p>在知乎上找了一圈，结果就找到了 <a href=\"http://www.keybr.com/practice\" target=\"_blank\" rel=\"noopener noreferrer\">这个</a>；</p>\n<p>练了一圈的感受就是： <strong>左手好累啊！！！</strong></p>\n<p>基本上单词表里面最长的 S 和 T 都在左手了，而我又习惯使用左手来按空格键；</p>\n<p>结果就是我的左手现在累得不成样子了；</p>\n<p>不过最后成绩也不怎么样，大概也就 50 多 wpm 吧，相信大家一定会比我打字快的。</p>\n<p><img src=\"https://ww4.sinaimg.cn/large/006tNc79ly1fenqgox6a5j317a0jejtu.jpg\" alt=\"\" /></p>\n",
      "image": "https://ww4.sinaimg.cn/large/006tNc79ly1fenqgox6a5j317a0jejtu.jpg",
      "date_published": "2021-07-15T11:52:03.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "杂谈"
      ]
    },
    {
      "title": "近月少女的礼仪 2.1 感想",
      "url": "https://wafer.li/blog-corners/talk/%E8%BF%91%E6%9C%88%E5%B0%91%E5%A5%B3%E7%9A%84%E7%A4%BC%E4%BB%AA%202.1%20%E6%84%9F%E6%83%B3/",
      "id": "https://wafer.li/blog-corners/talk/%E8%BF%91%E6%9C%88%E5%B0%91%E5%A5%B3%E7%9A%84%E7%A4%BC%E4%BB%AA%202.1%20%E6%84%9F%E6%83%B3/",
      "summary": "<p>最近这部 FD 发售之后就忍不住玩了一下；</p>\n<p>会结合本篇《近月少女的礼仪 2》(月に寄りそう乙女の作法２)　来谈一谈感想；</p>\n<p>内有剧透，慎点</p>\n",
      "content_html": "<p>最近这部 FD 发售之后就忍不住玩了一下；</p>\n<p>会结合本篇《近月少女的礼仪 2》(月に寄りそう乙女の作法２)　来谈一谈感想；</p>\n<p>内有剧透，慎点</p>\n\n<h2 id=\"_1-介绍\"> 1. 介绍</h2>\n<p>此次发售的 FD 主要包含两条线路：艾斯特线和春心线，不过春心线是打酱油的，就没玩。</p>\n<p>同时收录了前传《近月少女的礼仪0》，讲述大藏衣远学生时代的故事。</p>\n<h2 id=\"_2-内容和感想\"> 2. 内容和感想</h2>\n<p>艾斯特是本篇的女主角，在此 FD 中是着重描写的对象；</p>\n<p>在取得菲丽展最优秀奖之后，两人回老家拜访父母（这基本属于固定流程了），随后回到学院展开第二年的学习生活的事。</p>\n<p>对于本篇的评价中，多有『矛盾冲突不足』的批评；</p>\n<p>相比前作《近月少女的礼仪 1》中暗流涌动的家族纷争，《近月 2》因为主角生长在优渥的环境中，因而在设定背景中缺失了磨炼的土壤，虽有才能，但是远远不及其父母闪耀。</p>\n<p>在 FD 中此问题进一步暴露，由于取得了最优秀奖，班上的设计天才贾斯子开始认真对待设计的作业和考试，因而我们的主角小两口接连落败。</p>\n<p>于是他们终于发现（实际上在本篇结尾也有体现），自己的才能只不过是人家的一个小指头；</p>\n<p>于是一个问题就出现了， <strong>自己无论如何努力，都比不过天才</strong>；</p>\n<p>小两口对此询问了很多的人，包括在公寓的邻居们，还直接向自己的父母求助；</p>\n<p>不过露娜的回复真的比较令人伤心：</p>\n<blockquote>\n<p>「自己从来没有在才能上碰过壁，请随便努力一下吧」</p>\n</blockquote>\n<p>说实话，玩到这里的时候我是比较揪心的，明明自己也拥有耀眼的才能，但是，却只能这样任由其被更耀眼的光芒掩盖吗？</p>\n<p>不过，幸好我们现在是主角小两口，经过和现任校长商量之后（顺便把校长洗白了），决定组成设计师组合『eS』一同向天才挑战！</p>\n<p>不过，既然组成了设计师组合，那么提交设计的时候，就必须放弃一人，另外一人要尽力对设计图做出点检和修正。</p>\n<p>于是很顺理成章的就过渡到是否要放弃自己的恋人身份，以女仆的身份来面对自己的主人兼恋人。</p>\n<p>这个选项可以说是整个近月系列中最为重要和必有的选项</p>\n<blockquote>\n<p>为什么是『必有』？因为这是个伪娘游戏啊！</p>\n</blockquote>\n<p>但是，这个选项第一次承担了 END 分支的作用，而不只是单纯的 CG 回收。</p>\n<p>如果选择了恋人，那么最后，就因为小两口要决出胜负，而双双输给天才贾斯子；</p>\n<blockquote>\n<p>不过即使输给了天才，小两口还是双双获得了二等奖，还是没有决出胜负（笑）</p>\n</blockquote>\n<p>如果选择了女仆，那么因为艾斯特的设计得到了完善，那么就能够战胜贾斯子。</p>\n<p>这里是最让我惊艳的，<strong>如果你不选择被 gang，那么就达不成完美结局。</strong>（看起来官方也很懂玩家的心嘛）</p>\n<p>也许在经过这一次的经历后，我们的才华大少爷才理解并践行了父亲一直以来对他的忠告：「能为谁派上用场是很了不起的事」</p>\n<p>原本由于露娜的原因，我第一次选的时候仍然想让他去和自己的恋人竞争；</p>\n<p>毕竟是樱小路露娜的儿子啊，怎么会输给他人，肯定是心性还不够成熟。</p>\n<p>不过玩到最后，果然我们的主角还是「朝日的女儿」啊（笑）。</p>\n<h2 id=\"_3-亮点\"> 3. 亮点</h2>\n<ol>\n<li>\n<p>贾斯子和梅宫的百合剧</p>\n<blockquote>\n<p>《梅宫理论及其周边》（笑）</p>\n</blockquote>\n</li>\n<li>\n<p>才华的泳装</p>\n<blockquote>\n<p>我们的才华大小姐越来越漂亮了</p>\n</blockquote>\n</li>\n<li>\n<p>才华走 T 台的衣服</p>\n<blockquote>\n<p>真的好像他妈，差点认错了</p>\n</blockquote>\n</li>\n<li>\n<p>艾斯特的姐姐</p>\n<blockquote>\n<p>走 T 台和妹妹抢就算了，还要和妹妹抢男朋友……</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"_4-缺憾\"> 4. 缺憾</h2>\n<p>最大的缺憾当然还是前作主要人物露娜和游星 <strong>没有登场</strong></p>\n<p>估计官方还想再捞一笔，毕竟有很多人都期待这两个前作的最主要人物登场；</p>\n<p>毕竟父亲（朝日娘）看到自己儿子女装侍奉另一个主人，想起来就十分有趣！</p>\n<h2 id=\"_5-和一代的比较\"> 5. 和一代的比较</h2>\n<p>当然，整体剧情的矛盾和跌宕比不上一代是公认的；</p>\n<p>不过，《近月 2》仍不失为一部十分优秀的作品，其中，我们的大少爷（小姐）的复杂性格和追求成功的方式可能更为现实，而不像露娜一样过于虚幻。</p>\n<p>虽说如此，如果要做 《近月 3》的话，剧情安排上势必要起波澜（比如说大藏前家主身亡，衣远独力难支，家族重新陷入动荡和纷争），否则 3 只能是当做炒冷饭作品而已，这样只会砸烂近月的金字招牌。</p>\n",
      "date_published": "2021-07-15T11:52:03.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "杂谈"
      ]
    },
    {
      "title": "Android 单界面多功能点 MVVM 架构（一）",
      "url": "https://wafer.li/blog-corners/tech/android/arch/android-%E5%8D%95%E7%95%8C%E9%9D%A2%E5%A4%9A%E5%8A%9F%E8%83%BD%E7%82%B9-mvvm-%E6%9E%B6%E6%9E%84%EF%BC%88%E4%B8%80%EF%BC%89/",
      "id": "https://wafer.li/blog-corners/tech/android/arch/android-%E5%8D%95%E7%95%8C%E9%9D%A2%E5%A4%9A%E5%8A%9F%E8%83%BD%E7%82%B9-mvvm-%E6%9E%B6%E6%9E%84%EF%BC%88%E4%B8%80%EF%BC%89/",
      "summary": "<p>Android App 的技术架构经过多年演进之后，形成了目前 Google 在 Jetpack 中推崇的 MVVM 架构。</p>\n<p>但是 Google 官方推崇的 MVVM 是多界面的 MVVM，即多个界面在同一个功能模块中，UI、数据如何进行组合的问题；</p>\n<p>而现在的 Android App 基本上是大而全的，特别是直播系的 App，有时候单单一个直播 Activity 就有十几二十个功能点，假如采用 Google 的 MVVM 解决方案，就会造成单个 Activity 过于臃肿的问题，这和 Google 多年来想解决的 Activity 膨胀问题是相互矛盾的。</p>\n<p>因此，这里就来介绍一种我在之前的公司所使用的用于解决单个界面功能过于复杂的 MVVM 架构。</p>\n",
      "content_html": "<p>Android App 的技术架构经过多年演进之后，形成了目前 Google 在 Jetpack 中推崇的 MVVM 架构。</p>\n<p>但是 Google 官方推崇的 MVVM 是多界面的 MVVM，即多个界面在同一个功能模块中，UI、数据如何进行组合的问题；</p>\n<p>而现在的 Android App 基本上是大而全的，特别是直播系的 App，有时候单单一个直播 Activity 就有十几二十个功能点，假如采用 Google 的 MVVM 解决方案，就会造成单个 Activity 过于臃肿的问题，这和 Google 多年来想解决的 Activity 膨胀问题是相互矛盾的。</p>\n<p>因此，这里就来介绍一种我在之前的公司所使用的用于解决单个界面功能过于复杂的 MVVM 架构。</p>\n\n<h2 id=\"_1-总体目标\"> 1. 总体目标</h2>\n<p>对于这里的这个 MVVM 架构，它的总目标是清晰的，就是解决在直播系 App 中，单个界面所包含的功能点过于繁杂，导致代码结构不清晰的问题。</p>\n<p>用比较高情商的话来说，就是 <strong>「分离关注点」</strong>！</p>\n<h2 id=\"_2-架构分层\"> 2. 架构分层</h2>\n<p>对于 MVVM 架构来说，可以粗略的分为两层：</p>\n<ol>\n<li>界面层</li>\n<li>数据层</li>\n</ol>\n<p>然后 ViewModel 在这两层之中充当桥梁的作用。</p>\n<h2 id=\"_3-界面层\"> 3. 界面层</h2>\n<p>本文所描述的架构需要重点解决的问题就在这一层中。</p>\n<p>既然 Activity 的业务过于繁重，那么我们就需要对其进行拆分；</p>\n<p>那么就需要使用一个新的概念来充当 Activity 各种功能点的业务容器，在这里我将其命名为 <strong>UseCase</strong>。</p>\n<p>在这一层中，主要涉及以下概念，下文会对它们和其职责进行详细介绍:</p>\n<ol>\n<li>Activity</li>\n<li>UseCase</li>\n<li>ViewModel</li>\n</ol>\n<h3 id=\"_3-1-activity\"> 3.1 Activity</h3>\n<p>将 Activity 划分为多个 UseCase，分为独立的功能块，达到关注点分离的目的。</p>\n<p>对此，针对 Activity 有如下要求：</p>\n<ol>\n<li>Activity xml 不包含实际控件，使用 <code>&lt;include&gt;</code> 引入各个功能块视图</li>\n<li>Activity 类包含各个 UseCase</li>\n<li>Activity 包含例如<code>onBackPressed()</code>、<code>onKeyDown()</code>、<code>onActivityResult()</code> 的相关处理</li>\n<li>Activity 为其中的 UseCase 添加各种监听事件和注入生命周期。</li>\n</ol>\n<h3 id=\"_3-2-usecase\"> 3.2 UseCase</h3>\n<div><p>提示</p>\n<p>UseCase 的名称受到 <a href=\"https://github.com/KunMinX/Jetpack-MVVM-Best-Practice\" target=\"_blank\" rel=\"noopener noreferrer\">JetPack-MVVM-Best-Practice</a> 的启发</p>\n<p>在此特地声明</p>\n</div>\n<p>UseCase 在本架构中，实际上充当了一个功能点的角色，那么对于一个功能点来说，它应当具备以下的几个要件：</p>\n<ol>\n<li>UseCase 应当具备界面</li>\n<li>UseCase 应当具备操纵数据的 Handler</li>\n<li>UseCase 应当具备 Activity 相关生命周期的处理能力</li>\n</ol>\n<p>针对这几个需求，可以设计 UseCase 的构造器的参数:</p>\n<ol>\n<li><code>ViewBinding</code>，是 UseCase 的界面操作的入口，通过它可以获取 UseCase 相关的界面元素；实际上就是<code>&lt;include&gt;</code>进来的各个 layout</li>\n<li><code>LifecycleOwner</code>，用于为 UseCase 提供生命周期，在这里由 Activity 承担</li>\n<li><code>ViewModelStoreProvider</code>，用于构建 UseCase 所需的 ViewModel，在这里也由 Activity 承担</li>\n</ol>\n<p>同时，为了让 UseCase 具备生命周期的监听特性，让 UseCase 实现 <code>LifecycleObserver</code>，通过它可以使用 <code>OnLifeCycleEvent</code> 注解进行生命周期的相关相应和处理。</p>\n<div><p>提示</p>\n<p>这里利用了 <a href=\"https://developer.android.com/topic/libraries/view-binding\" target=\"_blank\" rel=\"noopener noreferrer\">ViewBinding</a> 的一个特性</p>\n<p>ViewBinding 针对 <code>&lt;include&gt;</code> 标签会生成一个对应的 LayoutViewBinding 节点</p>\n<p>使用这一特性，就可以对 UseCase 所使用到的界面元素进行隔离，防止其轻易的获取到与其不相关的 View 元素，从而能够减少复杂性和阅读代码的心智负担。</p>\n</div>\n<h3 id=\"_3-3-架构关系和数据之间的通信\"> 3.3 架构关系和数据之间的通信</h3>\n<p>到这里，我们介绍了界面层中两个比较关键的概念，由于我们想解决的是单界面，多个功能点的问题，因此它们之间的关系就比较重要了，这里来梳理一下：</p>\n<ol>\n<li>Activity 和 UseCase 是一对多的包含关系</li>\n<li>UseCase 不能包含 UseCase，它应当是扁平的，否则会使得架构进一步复杂</li>\n<li>UseCase 可以持有多个 ViewModel，但仅限于兄弟之间和 Activity 的 ViewModel，不能持有其他 Activity 的 ViewModel</li>\n<li>UseCase 之间以及 UseCase 和 Activity 之间使用 ViewModel 进行通信，UseCase 通过 LiveData 的 observe 接收通信内容</li>\n</ol>\n<p>整个通信框架类似电话线路：</p>\n<ol>\n<li>总机可以拨分机</li>\n<li>分机之间可以相互拨</li>\n<li>打电话到外部(其他 Activity)必须通过总机</li>\n</ol>\n<p>同时，由于给各个 UseCase 传入的是同一个 <code>ViewModelStoreProvider</code>；</p>\n<p>因此，同一个 Activity 下的 UseCase 可以共享 ViewModel，这样就能实现 UseCase 之间可以获取对方的操作接口，实现上文中的 <strong>分机相互拨电话</strong> 的功能。</p>\n<h2 id=\"_4-数据层\"> 4. 数据层</h2>\n<h3 id=\"_4-1-生命周期\"> 4.1 生命周期</h3>\n<p>从实践中来看，一般来说大而全的 App 都是分为各个模块的，因此对于一个功能模块的数据层来说，它也应该具备自己的生命周期。</p>\n<p>这里参照 Activity 的生命周期，对数据层的生命周期设计如下:</p>\n<ol>\n<li>onCreate\n<blockquote>\n<p>数据层工作的最早阶段，如第一次登陆</p>\n</blockquote>\n</li>\n<li>onStart\n<blockquote>\n<p>与数据层业务相关的页面被打开的时候，由 Activity 的 ViewModel 进行通知</p>\n</blockquote>\n</li>\n<li>onResume\n<blockquote>\n<p>与数据层相关的界面到达前台的时候</p>\n</blockquote>\n</li>\n<li>onPause\n<blockquote>\n<p>与数据层相关的界面进入后台的时候</p>\n</blockquote>\n</li>\n<li>onStop\n<blockquote>\n<p>与数据层相关的界面关闭的时候，由 Activity 的 ViewModel 的 <code>onCleared()</code> 进行通知</p>\n</blockquote>\n</li>\n<li>onDestroy\n<blockquote>\n<p>数据层工作的最后阶段，如登出</p>\n</blockquote>\n</li>\n</ol>\n<p>同时，还应该提供一个登陆的相关周期，处理掉线重连问题，这里设计为：</p>\n<ol>\n<li>onLogin</li>\n<li>onLogout</li>\n</ol>\n<p>针对数据层的生命周期，还有一个特殊的坑点，就是 <strong>界面的开启和关闭不是一定成对执行的</strong>；</p>\n<p>如果界面层存在一些卡主线程的东西，就会导致前一个 Activity 实例没有 onStop 的时候，后一个 Activity 实例就执行了 onStart；</p>\n<p>因此对数据层的 onStart 和 onStop 的调用中要有 <code>runGenreation</code> 的概念；</p>\n<p>在 onStart 时，生成新的 <code>runGenreation</code> 给界面层；</p>\n<p>在 onStop 时，对比外界传入的 <code>runGenreation</code>，和内部的是否一致，如果不一致则不执行具体的业务流程。</p>\n<h3 id=\"_4-2-module-manager\"> 4.2 Module Manager</h3>\n<p>整体功能块的数据层可以采用一个大 Manager，这里称为 Module Manager。</p>\n<p>它可以用单例模式或者使用依赖注入框架进行注入。</p>\n<p>主要功能：</p>\n<ol>\n<li>处理数据层的生命周期</li>\n<li>为各个功能点的 Manager(Function Manager)，提供引用点和 <code>CoroutineScope</code></li>\n</ol>\n<h3 id=\"_4-2-function-manager\"> 4.2 Function Manager</h3>\n<p>与各个功能点直接相关的就是 Function Manager，它继承数据层生命周期相关的接口，从而实现在数据层相关的生命周期的数据处理。</p>\n<p>主要功能：</p>\n<ol>\n<li>实现各个模块的功能点</li>\n<li>持有具体数据以及通知的渠道(Flow 或者 LiveData)</li>\n<li>处理各种网络回调工作</li>\n<li>处理各种生命周期的回调工作</li>\n</ol>\n<h2 id=\"_5-viewmodel-的职责\"> 5. ViewModel 的职责</h2>\n<p>到这一阶段，我们的 MVVM 框架就大体设计完成了，在这里回顾一下 ViewModel 的相关职责：</p>\n<ol>\n<li>接收各个 Function Manager 的数据输出渠道，并转成 LiveData</li>\n<li>Activity 的 ViewModel 还负责 Manager 的 onStart 和 onStop 的工作，需要记录对应的 runGenreation</li>\n</ol>\n<h2 id=\"_6-架构图\"> 6. 架构图</h2>\n<Mermaid id=\"mermaid-64a55a5a\" data-code=\"graph%20TB%0A%20%20subgraph%20%E7%95%8C%E9%9D%A2%E5%B1%82%20Activity%0A%20%20%20%20UseCase1%20--%3E%20ViewModel1%0A%20%20%20%20UseCase1%20--%3E%20ViewModel2%0A%20%20%20%20UseCase2%20--%3E%20ViewModel1%0A%20%20%20%20UseCase2%20--%3E%20ViewModel2%0A%20%20end%0A%20%20subgraph%20%E6%95%B0%E6%8D%AE%E5%B1%82%20Module%20Manager%0A%20%20%20%20FunctionManager1%0A%20%20%20%20FunctionManager2%0A%20%20end%0A%20%20ViewModel1%20--%3E%20FunctionManager1%0A%20%20ViewModel2%20--%3E%20FunctionManager2%0A\"></Mermaid>",
      "date_published": "2021-07-15T11:52:03.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Android"
      ]
    },
    {
      "title": "Android 单界面多功能点 MVVM 架构（二）",
      "url": "https://wafer.li/blog-corners/tech/android/arch/android-%E5%8D%95%E7%95%8C%E9%9D%A2%E5%A4%9A%E5%8A%9F%E8%83%BD%E7%82%B9-mvvm-%E6%9E%B6%E6%9E%84%EF%BC%88%E4%BA%8C%EF%BC%89/",
      "id": "https://wafer.li/blog-corners/tech/android/arch/android-%E5%8D%95%E7%95%8C%E9%9D%A2%E5%A4%9A%E5%8A%9F%E8%83%BD%E7%82%B9-mvvm-%E6%9E%B6%E6%9E%84%EF%BC%88%E4%BA%8C%EF%BC%89/",
      "summary": "<p><a href=\"/blog-corners/tech/android/arch/android-%E5%8D%95%E7%95%8C%E9%9D%A2%E5%A4%9A%E5%8A%9F%E8%83%BD%E7%82%B9-mvvm-%E6%9E%B6%E6%9E%84%EF%BC%88%E4%B8%80%EF%BC%89\">上文</a>  提出了一种单界面多功能点的 MVVM 架构，但是尚存在一点问题，就是当某个特定的事件需要多个 UseCase 进行响应的问题。</p>\n<p>例如直播的送礼物事件，需要礼物动画和送礼物的列表同时进行变化，在这里针对这个问题提出解决办法。</p>\n",
      "content_html": "<p><a href=\"/blog-corners/tech/android/arch/android-%E5%8D%95%E7%95%8C%E9%9D%A2%E5%A4%9A%E5%8A%9F%E8%83%BD%E7%82%B9-mvvm-%E6%9E%B6%E6%9E%84%EF%BC%88%E4%B8%80%EF%BC%89\">上文</a>  提出了一种单界面多功能点的 MVVM 架构，但是尚存在一点问题，就是当某个特定的事件需要多个 UseCase 进行响应的问题。</p>\n<p>例如直播的送礼物事件，需要礼物动画和送礼物的列表同时进行变化，在这里针对这个问题提出解决办法。</p>\n\n<h2 id=\"_1-从需求分析\"> 1. 从需求分析</h2>\n<p>我们可以从这个需求分析一下我们需要一些什么样的功能来实现我们这个需求。</p>\n<p>首先，针对于 UseCase 之间的活动，我们可以通过他们的 ViewModel 对它们予以操控；因此，我们所提出的概念应该具备调用多个 ViewModel 的能力。</p>\n<p>其次，这种跨 UseCase 的事件的发源地我们是无法确定的，它实际上和产品需求有关；因此，我们所提出的概念应该能够在多个 UseCase 获取到。</p>\n<p>最后，它应该能处理 View 的生命周期问题，当 View 的生命周期结束时，它应当消除和它相关的一些变量等。</p>\n<p>从这几点分析上来看，我们可以得出，我们需要的这个东西应当是一种<strong>ViewModel</strong>；</p>\n<p>而这种 ViewModel 具备操作多个其他 ViewModel 的能力。</p>\n<h2 id=\"_2-viewmodelmanager\"> 2. ViewModelManager</h2>\n<p>于是乎，我们为这个概念取名为 <code>ViewModelManager</code>；</p>\n<p>首先，它继承于 <code>ViewModel</code>；</p>\n<p>然后，通过给它传入 <code>ViewModelProvider</code>，我们就可以通过这个 Provider 去获取各类 ViewModel 的实例。</p>\n<p>由于 <code>ViewModelManager</code> 是 ViewModel，那么它自然而然的能处理生命周期；</p>\n<p>最后，为了能让多个 UseCase 能够获取到 <code>ViewModelManager</code>，我们需要给 UseCase 提供一个特殊的 <strong>ViewModelProvider</strong>，在这里称为 <code>viewModelManagerProvider</code>。</p>\n<p><code>ViewModelProvider</code> 是通过传入所需的 <code>ViewModel</code> 的 <code>Class</code> 来获取对应的 ViewModel 的实例的类；</p>\n<p>具体来说，它在接收到 <code>ViewModel</code> 的 <code>Class</code> 之后，会从它的 <code>ViewModelStore</code> 中获取对应的 <code>ViewModel</code>；</p>\n<p>如果没获取到，那么会使用 <code>ViewModelProvider.Factory</code> 来对 ViewModel 进行构建。</p>\n<p>所以，我们需要为 <code>ViewModelManager</code> 提供一个能够构造它的 <code>Provider.Factory</code>；</p>\n<p>针对这一步，我们直接照抄 <code>ViewModelProvider.Factory</code> 的源码，再注入 <code>ViewModelProvider</code> 即可。</p>\n<p>那么通过构造 <code>viewModelManagerProvider</code>，我们就实现了在各个 UseCase 都能获取到某个 <code>ViewModelManager</code> 的功能。</p>\n<div><p>提示</p>\n<p>这里有个小坑点，由于默认的 <code>ViewModelProvider.Factory</code> 是通过 <strong>反射</strong> 构建新的 ViewModel 的；</p>\n<p>因此，我们需要对 <code>ViewModelManagerProviderFactory</code> 配置混淆，让其构造函数不要被混淆处理，否则反射调用将会失败造成崩溃。</p>\n</div>\n<h2 id=\"_3-架构图\"> 3. 架构图</h2>\n<Mermaid id=\"mermaid-382ee204\" data-code=\"classDiagram%0A%20%20%20%20class%20ViewModel%20%7B%0A%0A%20%20%20%20%7D%0A%0A%20%20%20%20class%20ViewModelManager%20%7B%0A%20%20%20%20%20%20%2F%2F%20%E7%94%A8%E4%BA%8E%E8%8E%B7%E5%8F%96%E5%85%B6%E4%BB%96%20ViewModel%0A%20%20%20%20%20%20%23viewModelProvider%3A%20ViewModelProvider%0A%20%20%20%20%7D%0A%0A%20%20%20%20ViewModel%20%3C%7C--%20ViewModelManager%0A%0A%20%20%20%20class%20UseCase%20%7B%0A%20%20%20%20%20%20%2B%20viewModelManagerProvider%3A%20ViewModelProvider%0A%20%20%20%20%7D%0A%0A%20%20%20%20UseCase%20--%3E%20ViewModelManager%20%3A%20%E4%BD%BF%E7%94%A8%20viewModelManagerProvider%20%E8%8E%B7%E5%8F%96%0A\"></Mermaid>",
      "date_published": "2021-07-15T11:52:03.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Android"
      ]
    },
    {
      "title": "ItemDecoration 实战之 GirdSpacingItemDecoration（一）",
      "url": "https://wafer.li/blog-corners/tech/android/itemdecoration-%E5%AE%9E%E6%88%98%E4%B9%8B-girdspacingitemdecoration%EF%BC%88%E4%B8%80%EF%BC%89/",
      "id": "https://wafer.li/blog-corners/tech/android/itemdecoration-%E5%AE%9E%E6%88%98%E4%B9%8B-girdspacingitemdecoration%EF%BC%88%E4%B8%80%EF%BC%89/",
      "summary": "<p>在 Android 开发中，给网格状布局的元素之间添加空隙，并让他们居中对齐算是 UI 层面的一个常见需求;</p>\n<p>很多时候我们都是通过在 itemView 中添加适当的 margin 来实现的，但是这个实现方式在遇到头尾部空隙和中间不一致时，就需要进行特殊处理，而且从权责上来看，实际上也不应该由 itemView 负责这个间隙的调整工作。</p>\n<p>当然，Google 提供了一个 ItemDecoration 类专门来做这个事情，但是网上对于这个类的解析文章水平参差不齐，例如本文的<a href=\"https://www.jianshu.com/p/f41db270d5fe\" target=\"_blank\" rel=\"noopener noreferrer\">参考文章</a>，解析写的很好，但是提供出来的例子性能很糟糕，这里采用这篇文章进行参考，同时给出一个性能较好的例子供大家使用。</p>\n<p>在这里也感谢此文的作者，他写的这篇文章很好的解释了 ItemDecoration 的原理，也使我增加了知识从而成文。</p>\n",
      "content_html": "<p>在 Android 开发中，给网格状布局的元素之间添加空隙，并让他们居中对齐算是 UI 层面的一个常见需求;</p>\n<p>很多时候我们都是通过在 itemView 中添加适当的 margin 来实现的，但是这个实现方式在遇到头尾部空隙和中间不一致时，就需要进行特殊处理，而且从权责上来看，实际上也不应该由 itemView 负责这个间隙的调整工作。</p>\n<p>当然，Google 提供了一个 ItemDecoration 类专门来做这个事情，但是网上对于这个类的解析文章水平参差不齐，例如本文的<a href=\"https://www.jianshu.com/p/f41db270d5fe\" target=\"_blank\" rel=\"noopener noreferrer\">参考文章</a>，解析写的很好，但是提供出来的例子性能很糟糕，这里采用这篇文章进行参考，同时给出一个性能较好的例子供大家使用。</p>\n<p>在这里也感谢此文的作者，他写的这篇文章很好的解释了 ItemDecoration 的原理，也使我增加了知识从而成文。</p>\n\n<h2 id=\"_0-太长不看\"> 0. 太长不看</h2>\n<p>文章最后有参考代码的链接</p>\n<h2 id=\"_1-itemdecoration-的布局原理\"> 1. ItemDecoration 的布局原理</h2>\n<p>这里就引用参考文章的图</p>\n<p><img src=\"/images/itemdecoration-实战之-girdspacingitemdecoration（一）/itemdecoration-原理.png\" alt=\"ItemDecoration 原理\" /></p>\n<p>其中，蓝色部分就是我们在 ItemDecoration 中的 <code>getItemOffsets</code> 给 <code>outRect</code> 设置的边界。</p>\n<p>对于这种单纯增加空隙的效果，我们仅需要关注 <code>getItemOffsets</code> 即可。</p>\n<h2 id=\"_2-仅设置单独一边的问题\"> 2. 仅设置单独一边的问题</h2>\n<p>当然，我们很容易想到，如果需要给元素之间增加边界，那么我们就在元素的一边单独增加边界不就行了吗？</p>\n<p>然而不行，在 GridLayoutManager 下会呈现出这种效果：</p>\n<p><img src=\"/images/itemdecoration-实战之-girdspacingitemdecoration（一）/仅设置一边边距的效果.png\" alt=\"仅设置一边边距的效果\" /></p>\n<p>可以看到，这里面 1 是正常的，但是 2 和 3 都被拉长了；</p>\n<p>原因就是 GridLayoutManager 会将所有的空间给元素进行平均分配，看橙色底的格子，每个格子就是 GridLayoutManager 给元素分配的空间，橙色部分的边距就是我们设定的 itemOffsets 和 margin 的组合，以下统称为 offsets</p>\n<p>那么由于 2 没有在左边设置 offsets，那么 2 的 itemView 就会贴着橙色格子的边，然后右边与边上有边距，那么就出现了元素被拉伸的情况，同时，这几个元素从视觉效果上来看，也没有「居中」排列。</p>\n<h2 id=\"_3-解决问题的关键\"> 3. 解决问题的关键</h2>\n<p>那么按照这个布局策略以及我们的「元素有空隙、整体居中」的布局要求，那么就得出了两点：</p>\n<ol>\n<li>每个元素所提供的 offset 要相同——这样 itemView 才不会被压缩</li>\n<li>元素之间的间距相同</li>\n</ol>\n<p>按照第一点，我们可以计算平均每个元素需要提供的 offset 值，我们将其叫做 <code>sizeAvg</code></p>\n<p>显然，<code>sizeAvg</code> 有如下等式：</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:2.30744em;vertical-align:-0.8804400000000001em;\"></span><span><span style=\"margin-right:0.01389em;\">sizeAvg</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>spanCount</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>start</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>end</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.01389em;\">spacing</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∗</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>(</span><span>spanCount</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>1</span><span>)</span></span></span></span><span>​</span></span><span><span style=\"height:0.8804400000000001em;\"><span></span></span></span></span></span><span></span></span></span></span></span></span></span></p>\n<p>其中 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.61508em;vertical-align:0em;\"></span><span><span>start</span></span></span></span></span> 和 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span><span>end</span></span></span></span></span> 分别是距离 recyclerView 「左边」和「右边」的边距，<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8623000000000001em;vertical-align:-0.19444em;\"></span><span><span style=\"margin-right:0.01389em;\">spacing</span></span></span></span></span> 是每个元素之间的间距，<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span><span>spanCount</span></span></span></span></span> 是这一排元素的个数</p>\n<p>根据我们得出的第一点关系，我们得到了第一个等式，然后根据第二点关系，我们就能算出各个 item 的各个边所需要提供的值。</p>\n<p>例如第一个 item，左边是 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.61508em;vertical-align:0em;\"></span><span>s</span><span>t</span><span>a</span><span style=\"margin-right:0.02778em;\">r</span><span>t</span></span></span></span>，那么右边就是 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span><span style=\"margin-right:0.01389em;\">sizeAvg</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>start</span></span></span></span></span>，由此我们就能算第二个，第三个，第四个等等。</p>\n<p>如图所示：</p>\n<p><img src=\"/images/itemdecoration-实战之-girdspacingitemdecoration（一）/计算实例.png\" alt=\"计算实例\" /></p>\n<h2 id=\"_4-参考文章的算法失误\"> 4. 参考文章的算法失误</h2>\n<p>到这里你可能会说，问题不就是已经解决了吗？我就按照这样递归的计算下去不就行了吗？</p>\n<p>这也是为什么我说「参考文章性能糟糕」的原因，事实上，如果采用递归方式进行计算，在元素比较多，手机性能不好的情况下，会出现爆栈问题。</p>\n<p>其实，我们还可以进一步的挖掘其中的规律，规避掉性能较差的递归计算。</p>\n<p>首先，对于第一个元素，我们有如下公式：</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:7.500000000000002em;vertical-align:-3.5000000000000018em;\"></span><span><span><span><span><span><span style=\"height:4em;\"><span style=\"top:-6.16em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.07778em;\">lef</span><span><span>t</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-4.659999999999999em;\"><span style=\"height:3em;\"></span><span><span><span>righ</span><span><span>t</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.1599999999999984em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.07778em;\">lef</span><span><span>t</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-1.6599999999999984em;\"><span style=\"height:3em;\"></span><span><span>∴</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span style=\"margin-right:0.07778em;\">lef</span><span><span>t</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-0.15999999999999837em;\"><span style=\"height:3em;\"></span><span><span>∴</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span style=\"margin-right:0.07778em;\">lef</span><span><span>t</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:3.5000000000000018em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:4em;\"><span style=\"top:-6.16em;\"><span style=\"height:3em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span>start</span></span></span></span><span style=\"top:-4.659999999999999em;\"><span style=\"height:3em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span style=\"margin-right:0.01389em;\">sizeAvg</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>start</span></span></span></span><span style=\"top:-3.1599999999999984em;\"><span style=\"height:3em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span>center</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>righ</span><span><span>t</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-1.6599999999999984em;\"><span style=\"height:3em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span>center</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>(</span><span style=\"margin-right:0.01389em;\">sizeAvg</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>start</span><span>)</span></span></span></span><span style=\"top:-0.15999999999999837em;\"><span style=\"height:3em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span>start</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>center</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.01389em;\">sizeAvg</span></span></span></span></span><span>​</span></span><span><span style=\"height:3.5000000000000018em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>同理，对于 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span><span style=\"margin-right:0.07778em;\">lef</span><span><span>t</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> 有如下公式：</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:6em;vertical-align:-2.7500000000000004em;\"></span><span><span><span><span><span><span style=\"height:3.25em;\"><span style=\"top:-5.41em;\"><span style=\"height:3em;\"></span><span><span>∵</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span style=\"margin-right:0.07778em;\">lef</span><span><span>t</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.91em;\"><span style=\"height:3em;\"></span><span><span><span>righ</span><span><span>t</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-2.4099999999999993em;\"><span style=\"height:3em;\"></span><span><span>∴</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span style=\"margin-right:0.07778em;\">lef</span><span><span>t</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-0.9099999999999997em;\"><span style=\"height:3em;\"></span><span></span></span></span><span>​</span></span><span><span style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:3.25em;\"><span style=\"top:-5.41em;\"><span style=\"height:3em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span>center</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>righ</span><span><span>t</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.91em;\"><span style=\"height:3em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span style=\"margin-right:0.01389em;\">sizeAvg</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.07778em;\">lef</span><span><span>t</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-2.4099999999999993em;\"><span style=\"height:3em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span>center</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>(</span><span style=\"margin-right:0.01389em;\">sizeAvg</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.07778em;\">lef</span><span><span>t</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>)</span></span></span></span><span style=\"top:-0.9099999999999997em;\"><span style=\"height:3em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span style=\"margin-right:0.07778em;\">lef</span><span><span>t</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>(</span><span>center</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.01389em;\">sizeAvg</span><span>)</span></span></span></span></span><span>​</span></span><span><span style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>由于 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.61508em;vertical-align:0em;\"></span><span><span>center</span></span></span></span></span> 和 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span><span style=\"margin-right:0.01389em;\">sizeAvg</span></span></span></span></span> 都是<strong>常量</strong>，比较 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span><span style=\"margin-right:0.07778em;\">lef</span><span><span>t</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> 和 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span><span style=\"margin-right:0.07778em;\">lef</span><span><span>t</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span>，我们可以看出，实际上对于 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span><span style=\"margin-right:0.07778em;\">lef</span><span><span>t</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>x</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> 呈现出<strong>等差数列</strong>的趋势。</p>\n<p>因此，对于 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span><span style=\"margin-right:0.07778em;\">lef</span><span><span>t</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> 有如下公式（等差数列通项公式）：</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span><span style=\"margin-right:0.07778em;\">lef</span><span><span>t</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.69841em;vertical-align:-0.08333em;\"></span><span><span>start</span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>(</span><span>n</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>1</span><span>)</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>(</span><span><span>center</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.01389em;\">sizeAvg</span></span><span>)</span></span></span></span></span></p>\n<p>因此，我们可以通过这个公式，求出 <strong>任意的 <code>position</code> 的 <code>left</code> 值</strong>；</p>\n<p>同理，如果把方向反过来，那么我们就能求出 <strong>任意的 <code>position</code> 的 <code>right</code> 值</strong>；</p>\n<p>对于竖直方向上，也有这个规律，这样，我们就能求出<strong>任意 <code>position</code> 的四个方向的边距值</strong>；</p>\n<p>从而轻松解决问题，由于只涉及到了公式计算，规避了递归操作，相比来说性能得到了极大提升；</p>\n<p>同时，由于各个方向上的值我们都可以一视同仁无差别的计算，因此<strong>天然的适配 RTL 布局</strong>，相比很多实现都无法简单的处理 RTL 问题，要不就很多分支情况，要不就干脆不处理 RTL 来说是一个不错的优势。</p>\n<h2 id=\"_5-代码\"> 5. 代码</h2>\n<p>我知道很多人就只看这个，<a href=\"https://gist.github.com/wafer-li/8b0e6ebd98f799f21b9f9f90a69575a9\" target=\"_blank\" rel=\"noopener noreferrer\">源码</a></p>\n<h2 id=\"_6-参考文章与作者\"> 6. 参考文章与作者</h2>\n<p><a href=\"https://www.jianshu.com/u/3f3c4485b55a\" target=\"_blank\" rel=\"noopener noreferrer\">鸡汤程序员</a>——<a href=\"https://www.jianshu.com/p/f41db270d5fe\" target=\"_blank\" rel=\"noopener noreferrer\">《ItemDecoration深入解析与实战（二）—— 实际运用》</a></p>\n",
      "image": "https://wafer.li/images/itemdecoration-实战之-girdspacingitemdecoration（一）/itemdecoration-原理.png",
      "date_published": "2021-07-15T11:52:03.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Android"
      ]
    },
    {
      "title": "ItemDecoration 实战之 GirdSpacingItemDecoration（二）",
      "url": "https://wafer.li/blog-corners/tech/android/itemdecoration-%E5%AE%9E%E6%88%98%E4%B9%8B-girdspacingitemdecoration%EF%BC%88%E4%BA%8C%EF%BC%89/",
      "id": "https://wafer.li/blog-corners/tech/android/itemdecoration-%E5%AE%9E%E6%88%98%E4%B9%8B-girdspacingitemdecoration%EF%BC%88%E4%BA%8C%EF%BC%89/",
      "summary": "<p><a href=\"/blog-corners/tech/android/itemdecoration-%E5%AE%9E%E6%88%98%E4%B9%8B-girdspacingitemdecoration%EF%BC%88%E4%B8%80%EF%BC%89\">上文</a>说到，相等间距的 GridLayoutManager 的 ItemDecoration 可以使用 <strong>公式法</strong> 来对所有四个方向的 offset 进行计算，由此可以大大简化 <code>itemOffset</code> 的计算，同时也天然的支持 RTL。</p>\n<p>但是，很多时候我们的 item 由于布局的原因，会出现一个 item 占据多个 span 的情况；</p>\n<p>上文最后给出的代码并没能处理这种情况，本文在这里就这个问题再进行进一步的讨论。</p>\n",
      "content_html": "<p><a href=\"/blog-corners/tech/android/itemdecoration-%E5%AE%9E%E6%88%98%E4%B9%8B-girdspacingitemdecoration%EF%BC%88%E4%B8%80%EF%BC%89\">上文</a>说到，相等间距的 GridLayoutManager 的 ItemDecoration 可以使用 <strong>公式法</strong> 来对所有四个方向的 offset 进行计算，由此可以大大简化 <code>itemOffset</code> 的计算，同时也天然的支持 RTL。</p>\n<p>但是，很多时候我们的 item 由于布局的原因，会出现一个 item 占据多个 span 的情况；</p>\n<p>上文最后给出的代码并没能处理这种情况，本文在这里就这个问题再进行进一步的讨论。</p>\n\n<h2 id=\"_1-spansizelookup\"> 1. SpanSizeLookup</h2>\n<p>首先，为什么 GridLayoutManager 出现一个 item 占据多个格子的情况，实际上就是通过重载 <code>SpanSizeLookup</code> 这个类进行处理的。</p>\n<p><code>SpanSizeLookup</code> 是一个抽象类，通过重载它实现 <code>getSpanSize(position)</code> 方法，就可以指定元素所占的<strong>span 的数量</strong>。</p>\n<p>注意这个方法所返回的是 item <strong>所占的 span 的数量</strong>；</p>\n<p>如图所示，某个 <code>GirdLayoutManager</code> 的 <code>spanCount</code> 是 3</p>\n<p><img src=\"/images/不同-spansize-的-item.png\" alt=\"不同 spanSize 的 item\" /></p>\n<p>这里的第一个 <code>spanSize</code> 就是 <code>2</code>，第二个 <code>spanSize</code> 是 <code>1</code></p>\n<h2 id=\"_2-spanindex-和-spangroupindex\"> 2. spanIndex 和 spanGroupIndex</h2>\n<p>在允许了不等于 <code>1</code> 的 <code>spanSize</code> 之后，情况出现了变化，在水平方向上的数量不再是一致的，而竖直方向上，更不可能简单的通过 <code>position</code> 和 <code>spanCount</code> 算出现在是第几行；</p>\n<p>那么怎么办呢？<code>SpanSizeLookup</code> 为此提供了 <code>spanIndex</code> 和 <code>spanGroupIndex</code>。</p>\n<h3 id=\"_2-1-spangroupindex\"> 2.1 spanGroupIndex</h3>\n<p>先说说 <code>spanGroupIndex</code>，<code>spanIndex</code> 还有个潜在的坑；既然叫 <code>spanGroupIndex</code>，那肯定有一个 <code>group</code> 的概念，在这里很显然，就是「一行」。</p>\n<p>因此，「一行」就是一个 <code>spanGroup</code>，那么 <code>spanGroupIndex</code> 就是当前<strong>行</strong>的索引，也就是<strong>竖直方向上的 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>(</span><span><span>n</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>1</span></span><span>)</span></span></span></span></strong></p>\n<p>因此，我们只需要通过 <code>SpanSizeLookup</code> 类计算出当前 <code>position</code> 所在的行就能算出其上下的边距。</p>\n<h3 id=\"_2-2-spanindex\"> 2.2 spanIndex</h3>\n<p><code>spanIndex</code> 则稍微有点特殊，乍一眼看上去，会认为它和 <code>spanGroupIndex</code> 一样，是当前的 item 在这一行的位置，然而并不是。</p>\n<p>用上图来说，第二个 item 的 <code>spanIndex</code>，实际上是 <code>2</code>，而并不是当前 item 在这一行的索引。</p>\n<p>也就是说，<code>spanIndex</code>，是当前的 item 所在的 <strong>span</strong> 的索引，一行有 3 个 span，那么第二个 item 在第 3 个 span，其索引就是 2。</p>\n<h2 id=\"_3-使用-spansizelookup-计算-offset\"> 3. 使用 SpanSizeLookup 计算 Offset</h2>\n<p>现在，我们知道了 <code>spanGroupIndex</code> 就是竖直方向的 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span>n</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1</span></span></span></span>，可以直接进行对应计算。</p>\n<p>但是对于 <code>spanIndex</code> 则不然，我们又拿这幅图来说一下：</p>\n<p><img src=\"/images/不同-spansize-的-item.png\" alt=\"不同 spanSize 的 item\" /></p>\n<p>对第一个 item 来说，它左边的 offset 是第 <code>0</code> 个 item 的 <code>left</code>；</p>\n<p>但是它的右边的 offset 是<strong>第 <code>1</code> 个</strong> item 的 <code>right</code>；</p>\n<p>所以在水平方向上来说：</p>\n<ol>\n<li>startIndex = spanIndex</li>\n<li>endIndex = spanIndex + spanSize - 1</li>\n</ol>\n<p>这个坑需要非常注意，否则就会算错 offset</p>\n<h2 id=\"_4-总结\"> 4. 总结</h2>\n<p>那么到这里，我们就已经知道了如何使用 <code>SpanSizeLookup</code> 的相关属性来获取我们需要的 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span>n</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1</span></span></span></span> 这个值，而只要有了 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span>n</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1</span></span></span></span> 这个值，我们就可以通过等差数列的通项公式去计算各个 item 的各个方向上的 offset，那么一个动态 spanSize 的 GirdSpacingItemDecoration 就可以构建出来了。</p>\n<h2 id=\"_5-番外-精度问题\"> 5. 番外：精度问题</h2>\n<p>虽然具体原理已经讲完了，但是对于 offset 的计算还需要注意一个精度的问题；</p>\n<p>虽然各边的 offset 都是 <code>int</code> 值，但是我们的 <code>sizeAvg</code> 这个关键的量是需要通过除法计算的，所以如果 <code>sizeAvg</code> 使用 <code>int</code> 类型，就会丢失一部分的小数部分，导致最后计算出的 <code>offset</code> 和需求的不一致，或者宽了，或者窄了。</p>\n<p>因此，<code>sizeAvg</code> 必须使用较高精度的浮点数进行表示，例如 <code>double</code>，那么也就说明我们给进去的参数也要是 <code>double</code> 类型的，这点也需要特别注意。</p>\n<h2 id=\"_6-代码\"> 6. 代码</h2>\n<p>我知道大家就喜欢直入主题，代码<a href=\"https://gist.github.com/wafer-li/8b0e6ebd98f799f21b9f9f90a69575a9\" target=\"_blank\" rel=\"noopener noreferrer\">在此</a>；</p>\n<p>虽然和<a href=\"../itemdecoration-%E5%AE%9E%E6%88%98%E4%B9%8B-girdspacingitemdecoration%EF%BC%88%E4%B8%80%EF%BC%89\">上篇</a>的代码是同一个地址就是了。</p>\n",
      "image": "https://wafer.li/images/不同-spansize-的-item.png",
      "date_published": "2021-07-15T11:52:03.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Android"
      ]
    },
    {
      "title": "音视频开发基础概念",
      "url": "https://wafer.li/blog-corners/tech/android/media-dev/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/",
      "id": "https://wafer.li/blog-corners/tech/android/media-dev/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/",
      "summary": "<p>最近准备入门音视频开发，就学习内容做一下笔记吧</p>\n",
      "content_html": "<p>最近准备入门音视频开发，就学习内容做一下笔记吧</p>\n\n<h2 id=\"_1-声音的物理相关概念\"> 1. 声音的物理相关概念</h2>\n<p>声音是纵波，是由波源振动产生的，声波在介质中传播，是通过波源振动引起介质分子的周期性振动进行的</p>\n<h3 id=\"_1-1-声音相关-n-要素解析\"> 1.1 声音相关 n 要素解析</h3>\n<ul>\n<li>声波三要素\n<ol>\n<li>频率</li>\n<li>振幅</li>\n<li>波形</li>\n</ol>\n</li>\n<li>语音四要素\n<ol>\n<li>音高</li>\n<li>音强</li>\n<li>音长</li>\n<li>音色</li>\n</ol>\n</li>\n<li>声音三要素\n<ol>\n<li>音调</li>\n<li>响度</li>\n<li>音色</li>\n</ol>\n</li>\n</ul>\n<p>几要素之间的关系：</p>\n<div><pre><code>频率 &lt;-&gt; 音高 = 音调\n振幅 &lt;-&gt; 音强 &lt;-&gt; 响度\n波形 &lt;-&gt; 音色\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>具体来说，声音的音高就是音调，与声波的频率相关\n声音的音强和响度相关，两者和声波的振幅有关\n声音的音色与声波的波形相关，但也和其他要素有关</p>\n<p>音长是一个音的持续时间长短，在语音学等有研究意义，但不属于声音的物理性质</p>\n<p>下面对几个概念进行解析</p>\n<h4 id=\"_1-1-1-音调与频率\"> 1.1.1 音调与频率</h4>\n<p>音调或者音高是衡量人类心理对标准音高的感受，通常使用字母和升降调符号（如 <code>A#</code>）来对音高进行标记，和声波的频率相关。</p>\n<p>标准音高记为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span></span></span></span>，其频率为 <strong>440Hz</strong></p>\n<p>事实上，根据不同的标准可以列出频率和音调之间的函数关系，如广为使用的 MIDI 标准规定了一个线性的音高空间，其函数表达式为：</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span>p</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span>69</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span>12</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:2.40003em;vertical-align:-0.95003em;\"></span><span><span>lo<span style=\"margin-right:0.01389em;\">g</span></span><span><span><span><span style=\"height:0.20696799999999996em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span><span style=\"top:0em;\"><span>(</span></span><span><span></span><span><span><span><span style=\"height:1.3714399999999998em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>440</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.10764em;\">f</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"top:0em;\"><span>)</span></span></span></span></span></span></span></span></p>\n<p>其中，标准音高 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>A</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>69</span></span></span></span></p>\n<p>与音调相关的常见概念还有：</p>\n<ol>\n<li>音阶：按照音高排列的一系列音符，有多种组合方式，例如常见的 Do-Re-Mi 就是七声音阶</li>\n<li>音程：两个音的音高之间的相对关系，在频率上表现为两个音的频率差距，通过调律系统确定，目前最常用的为十二平均律</li>\n<li>八度：音程的一种，指的是两个音的频率关系为 <strong>2:1</strong></li>\n<li>半音：采用十二平均律的一种音程划分，一个八度分为十二个半音，半音之间的频率<strong>比值</strong>为： <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.0879250000000003em;vertical-align:-0.08390500000000001em;\"></span><span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span><span><span><span><span style=\"height:0.845534em;\"><span style=\"top:-3.023314em;\"><span style=\"height:2.5em;\"></span><span><span><span>12</span></span></span></span></span></span></span></span><span><span><span style=\"height:0.956095em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span style=\"padding-left:0.833em;\"><span>2</span></span></span><span style=\"top:-2.916095em;\"><span style=\"height:3em;\"></span><span style=\"min-width:0.853em;height:1.08em;\"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span>​</span></span><span><span style=\"height:0.08390500000000001em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span>2</span><span><span><span><span style=\"height:1.0040200000000001em;\"><span style=\"top:-3.4130000000000003em;margin-right:0.05em;\"><span style=\"height:3em;\"></span><span><span><span><span></span><span><span><span><span style=\"height:0.8443142857142858em;\"><span style=\"top:-2.656em;\"><span style=\"height:3em;\"></span><span><span><span>12</span></span></span></span><span style=\"top:-3.2255000000000003em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.049em;\"></span></span><span style=\"top:-3.384em;\"><span style=\"height:3em;\"></span><span><span><span>1</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.344em;\"><span></span></span></span></span></span><span></span></span></span></span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≈</span><span style=\"margin-right:0.16666666666666666em;\"></span></span><span><span>1.0594630943593</span></span><span><span>1.0594630943593</span></span></span></span></span></li>\n<li>全音：两个半音的距离为一个全音</li>\n</ol>\n<h4 id=\"_1-1-2-音强、声压和响度\"> 1.1.2 音强、声压和响度</h4>\n<p>音强、声压响度都与声波的振幅相关，都是描述声音能量大小的一个度量，其中：</p>\n<p>音强又称声强，是<strong>客观量</strong>，定义为单位面积的声音功率，单位为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span><span>W/</span><span><span>m</span><span><span><span><span style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>声压也是<strong>客观量</strong>，是指声波通过介质时，由振动产生的<strong>压强改变量</strong>，单位为帕斯卡(<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.13889em;\">P</span><span>a</span></span></span></span>)</p>\n<p>响度是<strong>主观量</strong>，指的是人类感觉声音大小的知觉量，响度不仅和音强有关，也和<strong>频率</strong>有关</p>\n<h5 id=\"_1-1-2-1-音强和声压\"> 1.1.2.1 音强和声压</h5>\n<p>音强和声压具有换算关系，设 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.07847em;\">I</span></span></span></span> 为声强，<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span>p</span></span></span></span>为声压，<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span style=\"margin-right:0.03588em;\">v</span></span></span></span>为声音在介质中的速度，则：</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.07847em;\">I</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.63889em;vertical-align:-0.19444em;\"></span><span>p</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>⋅</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span style=\"margin-right:0.03588em;\">v</span></span></span></span></span></p>\n<blockquote>\n<p>上面的计算式可以通过单位制运算进行验证：</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:23.846536em;vertical-align:-11.673268000000002em;\"></span><span><span><span><span><span><span style=\"height:12.173268em;\"><span style=\"top:-14.73616em;\"><span style=\"height:3.427em;\"></span><span><span style=\"margin-right:0.13889em;\">P</span><span>a</span></span></span><span style=\"top:-13.23616em;\"><span style=\"height:3.427em;\"></span><span><span style=\"margin-right:0.03588em;\">v</span></span></span><span style=\"top:-11.21583em;\"><span style=\"height:3.427em;\"></span><span><span>∴</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span style=\"margin-right:0.07847em;\">I</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-8.869499999999999em;\"><span style=\"height:3.427em;\"></span><span></span></span><span style=\"top:-7.019391999999998em;\"><span style=\"height:3.427em;\"></span><span><span>∵</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.07847em;\">I</span></span></span><span style=\"top:-5.519391999999998em;\"><span style=\"height:3.427em;\"></span><span><span style=\"margin-right:0.13889em;\">P</span></span></span><span style=\"top:-4.019391999999998em;\"><span style=\"height:3.427em;\"></span><span></span></span><span style=\"top:-2.519391999999999em;\"><span style=\"height:3.427em;\"></span><span></span></span><span style=\"top:-0.4990619999999989em;\"><span style=\"height:3.427em;\"></span><span><span>∴</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span style=\"margin-right:0.07847em;\">I</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:1.913938em;\"><span style=\"height:3.427em;\"></span><span></span></span><span style=\"top:4.260268000000003em;\"><span style=\"height:3.427em;\"></span><span></span></span><span style=\"top:6.086268000000002em;\"><span style=\"height:3.427em;\"></span><span><span>∵</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span style=\"margin-right:0.07847em;\">I</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:7.586268000000002em;\"><span style=\"height:3.427em;\"></span><span><span>∴</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.07153em;\">C</span></span></span></span><span>​</span></span><span><span style=\"height:11.673268000000002em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:12.173268em;\"><span style=\"top:-14.73616em;\"><span style=\"height:3.427em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.10903em;\">N</span><span>/</span><span><span>m</span><span><span><span><span style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-13.23616em;\"><span style=\"height:3.427em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>m</span><span>/</span><span>s</span></span></span><span style=\"top:-11.21583em;\"><span style=\"height:3.427em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.36033em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span><span>m</span><span><span><span><span style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.10903em;\">N</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>⋅</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span></span><span><span><span><span style=\"height:1.10756em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>s</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>m</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span></span></span><span style=\"top:-8.869499999999999em;\"><span style=\"height:3.427em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.36033em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>m</span><span>s</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.10903em;\">N</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span></span></span><span style=\"top:-7.019391999999998em;\"><span style=\"height:3.427em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.13889em;\">W</span><span>/</span><span><span>m</span><span><span><span><span style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-5.519391999999998em;\"><span style=\"height:3.427em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.13889em;\">F</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>⋅</span><span style=\"margin-right:0.2222222222222222em;\"></span><span style=\"margin-right:0.03588em;\">v</span></span></span><span style=\"top:-4.019391999999998em;\"><span style=\"height:3.427em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.10903em;\">N</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>⋅</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>m</span><span>/</span><span>s</span></span></span><span style=\"top:-2.519391999999999em;\"><span style=\"height:3.427em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.13889em;\">W</span></span></span><span style=\"top:-0.4990619999999989em;\"><span style=\"height:3.427em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.36033em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span><span>m</span><span><span><span><span style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.13889em;\">W</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span></span></span><span style=\"top:1.913938em;\"><span style=\"height:3.427em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span><span>m</span><span><span><span><span style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.10903em;\">N</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>⋅</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>m</span><span>/</span><span>s</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span></span></span><span style=\"top:4.260268000000003em;\"><span style=\"height:3.427em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span></span><span><span><span><span style=\"height:1.36033em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span>m</span><span>s</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.10903em;\">N</span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span></span></span><span style=\"top:6.086268000000002em;\"><span style=\"height:3.427em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span style=\"margin-right:0.07847em;\">I</span><span><span><span><span style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:7.586268000000002em;\"><span style=\"height:3.427em;\"></span><span><span></span><span>orrec</span><span>t</span></span></span></span><span>​</span></span><span><span style=\"height:11.673268000000002em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n</blockquote>\n<h5 id=\"_1-1-2-2-声压和声压级\"> 1.1.2.2 声压和声压级</h5>\n<p>声压的变化范围很广，因此，通常使用声压级(SPL)对声音的大小进行描述，声压级是以对数尺度衡量有效声压对一个基准值的大小，单位为分贝(<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span><span>dB</span></span></span></span></span>)</p>\n<p>声压级基准值：人类对于 <strong>1kHz</strong> 的听阈，即产生听觉的最小压强，为<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span>20</span><span>μ</span><span><span>Pa</span></span></span></span></span>，也被定义为 0 分贝</p>\n<p>声压级换算公式：</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span><span>L</span><span><span><span><span style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>p</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:2.40003em;vertical-align:-0.95003em;\"></span><span>20</span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span>lo<span style=\"margin-right:0.01389em;\">g</span></span><span><span><span><span style=\"height:0.20696799999999996em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>10</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span style=\"top:0em;\"><span>(</span></span><span><span><span></span><span><span><span><span style=\"height:1.1075599999999999em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span><span>p</span><span><span><span><span style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span><span style=\"margin-right:0.07778em;\">ref</span></span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span><span>p</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span><span>rms</span></span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:0.8804400000000001em;\"><span></span></span></span></span></span><span></span></span></span><span style=\"top:0em;\"><span>)</span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span><span>dB</span></span></span></span></span></span></span></p>\n<p>其中，<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span><span>p</span><span><span><span><span style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span style=\"margin-right:0.07778em;\">ref</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 即为声压级基准值</p>\n<blockquote>\n<p>分贝，是两个量度相同的单位的<strong>比值的度量</strong>，任何的两个相同单位的量的比值都可以是分贝，因此分贝的使用范围非常广泛，除了在这里的声学领域使用到以外，在通信领域，例如 WIFI 的信号强度也是使用分贝进行度量</p>\n</blockquote>\n<h5 id=\"_1-1-2-3-响度、声压值和频率的关系\"> 1.1.2.3 响度、声压值和频率的关系</h5>\n<p>响度不仅和声压级相关，同时和频率也有关系，这三者的关系可以制作出一张著名的<strong>等响曲线</strong></p>\n<p><img src=\"/images/音视频开发基础知识/等响曲线.png\" alt=\"等响曲线\" /></p>\n<p>其中，里面的 1kHz 标准音声级即为响度的单位</p>\n<p>从图中我们可以看到，曲线在 <strong>3kHz-4kHz</strong> 范围内<strong>最凹</strong>，说明在这个频率范围，达到同样响度所需要的声压级比其他范围要少，即人对 3kHz-4kHz 的声音<strong>更敏感</strong></p>\n<h5 id=\"_1-1-2-3-响度的单位\"> 1.1.2.3 响度的单位</h5>\n<p>响度的单位有两个，分别为<strong>方(Phon)</strong> 和 <strong>宋(Sone)</strong></p>\n<p>方是响度的客观度量，定义为 1kHz 下的声压级，称为响度级，如 1kHz 下的 60dB 的声音响度级为 60 方；\n方不具备数量之间的关系，两个方的数量的不同仅代表两个声音的大小不同，不能对这两个声音进行量化，如 60 方的声音比 40 方的声音大，但是不能说 60 方的响度大小为 40 方的 1.5 倍，双方不具备这种关系</p>\n<p>宋是响度的主观度量，<strong>表示人耳在自然状态下，根据声压级的变化所表现出的对于响度听感的变化</strong>；\n宋具有数量关系，2 宋的声音一定比 1 宋的声音大两倍</p>\n<p>宋和方之间的关系是非线性的</p>\n<h4 id=\"_1-1-3-波形、基波和谐波\"> 1.1.3 波形、基波和谐波</h4>\n<p>声波总是可以分解为不同频率、不同振幅的正弦波的叠加，这种分解过程就称为傅里叶变换；</p>\n<p>基波：一个标准的正弦波，称为基波\n谐波：比基波的频率高<strong>整数倍</strong>的波被称作谐波</p>\n<p>如果一个复合音由基波和它的谐波相叠加构成，那么这个过程就叫做<strong>谐波叠加</strong></p>\n<h3 id=\"_1-2-声速、反射与透射\"> 1.2 声速、反射与透射</h3>\n<p>传播声音的介质有很多，如空气、水等，声音在不同介质的传播速度也不同：</p>\n<ol>\n<li>空气：<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>340</span><span><span>m/s</span></span></span></span></span></li>\n<li>蒸馏水：<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>1497</span><span><span>m/s</span></span></span></span></span></li>\n<li>铁棒：<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>5200</span><span><span>m/s</span></span></span></span></span></li>\n</ol>\n<p>声音是纵波，遇到阻碍就会发生反射与透射；</p>\n<p>反射是声波在遇到阻碍之后，改变传播方向的一种特性\n透射则是声波在遇到阻碍之后，穿越阻碍的一种特性</p>\n<p>根据这两个声波的传播特点，人们开发出了两个对应的产品：吸音棉和隔音棉</p>\n<p>吸音主要是为了减少声音反射引起的嘈杂感，吸音棉可以衰减声音的反射能量，从而达到原有声音的保真效果，在录音棚常用；</p>\n<p>隔音主要是为了减少声音的穿透，保证主体空间的相对安静，隔音棉可以减少声音的透射能量，从而保证主体空间的安静，在 KTV 常用。</p>\n<h3 id=\"_1-3-回音\"> 1.3 回音</h3>\n<p>回音或回声是声音遇到阻碍后反射，再次被人听到的一种现象，通常在高山和空旷山地常常出现</p>\n<p>人耳无时无刻不在接收回音，但是如果人耳接收到两种声音的时间差小于 <strong>80 毫秒</strong>，那么人耳就无法分辨出回声</p>\n<h3 id=\"_1-4-共鸣\"> 1.4 共鸣</h3>\n<p>共鸣是一个物品发声导致另一个物品发声的现象，说明声波的传播可以导致另一个物品发生振动，本质上是能量的传播过程；</p>\n<p>吉他等乐器常常利用共鸣现象达到较好的音频效果</p>\n<h3 id=\"_1-5-与人相关的一些值\"> 1.5 与人相关的一些值</h3>\n<ol>\n<li>人耳的能听到的最小声压级为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span>0</span><span><span>dB</span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span>20</span><span>μ</span><span><span>Pa</span></span></span></span></span></li>\n<li>人类的听觉频率范围：<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>20</span><span><span>Hz</span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∼</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span>20</span><span><span>kHz</span></span></span></span></span></li>\n<li>人类的敏感频率：<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span>3</span><span><span>kHz</span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∼</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span>4</span><span><span>kHz</span></span></span></span></span></li>\n<li>宽频的音乐，较佳的声压级为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>80</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∼</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span>90</span><span><span>dB</span></span></span></span></span></li>\n<li>损伤人耳的声压级：高于 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span>90</span><span><span>dB</span></span></span></span></span></li>\n<li>人耳极限：<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span>105</span><span><span>dB</span></span></span></span></span></li>\n<li>人耳痛阈：120 方</li>\n<li>人耳回音的分辨最小时差：<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>80</span><span><span>ms</span></span></span></span></span></li>\n</ol>\n<h2 id=\"_2-数字音频\"> 2. 数字音频</h2>\n<p>声音经过麦克风采集之后变成模拟信号，要将模拟进行数字化，转换为现今时代的数字音频，主要需要经历如下的三个步骤：</p>\n<ol>\n<li>采样</li>\n<li>量化</li>\n<li>编码</li>\n</ol>\n<h3 id=\"_2-1-采样\"> 2.1 采样</h3>\n<p>采样就是在<strong>时间轴</strong>上对信号进行离散数字化，根据奈奎斯特定理，应按照比声音的最高频率高两倍以上的频率对声音进行采样即可保持声音的原有质量。</p>\n<p>由于人耳的听觉频率范围为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>20</span><span><span>Hz</span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∼</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span>20</span><span><span>kHz</span></span></span></span></span>，所以一般采用 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span>44.1</span><span><span>kHz</span></span></span></span></span> 作为采样频率可以保持数字化后的声音质量。</p>\n<p><img src=\"http://static.oschina.net/uploads/img/201306/03145436_bTNr.gif\" alt=\"声音的采样\" /></p>\n<h3 id=\"_2-2-量化\"> 2.2 量化</h3>\n<p>具体到每个采样值如何表示就是量化，可以使用 8bit、16bit、32bit 等表示一个采样值，使用的 bit 越多，所能表达的采样值就越精确。</p>\n<p>比如目前最常用的 16bit 量化格式，就是在将振幅分成了 66535 层，这样量化的声音显然会比 8 bit 的更为精确。</p>\n<h3 id=\"_2-3-编码\"> 2.3 编码</h3>\n<p>将声音信号进行数字化之后，就需要对这些采样进行存储，而编码就是这些存储的格式，有顺序存储和压缩存储等等。</p>\n<p>其中，通常所说的音频裸数据为 PCM 格式，而最常用的压缩格式为 MP3，当然还有一些其他的格式如 WAV、OGG、FLAC 等。</p>\n<h3 id=\"_2-4-pcm-数据的描述参数\"> 2.4 PCM 数据的描述参数</h3>\n<p>对于直接录制得到的音频数据，PCM，有一些关于它的描述参数：</p>\n<ul>\n<li>量化格式（位深度）</li>\n<li>采样频率</li>\n<li>声道数</li>\n<li>比特率</li>\n</ul>\n<p>量化格式，也叫位深度，指的是一个采样采用多少 bit 进行表示，目前普遍使用的是 16bit。</p>\n<p>采样频率即一秒钟采样的次数，单位为赫兹(<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span><span>Hz</span></span></span></span></span>)</p>\n<p>声道数，为录制的声道的数量，通常为双声道立体声</p>\n<p>比特率，为音频数据一秒钟的数据量大小，单位为 bit/s</p>\n<p>其中比特率的计算公式如下：</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span>bi</span><span>t</span><span style=\"margin-right:0.02778em;\">r</span><span>a</span><span>t</span><span>e</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span>s</span><span>am</span><span style=\"margin-right:0.01968em;\">pl</span><span>e</span><span> </span><span style=\"margin-right:0.02778em;\">r</span><span>a</span><span>t</span><span>e</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span>s</span><span>am</span><span style=\"margin-right:0.01968em;\">pl</span><span>e</span><span> </span><span style=\"margin-right:0.10764em;\">f</span><span style=\"margin-right:0.02778em;\">or</span><span>ma</span><span>t</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span>c</span><span>hann</span><span>e</span><span style=\"margin-right:0.01968em;\">l</span><span>s</span></span></span></span></span></p>\n<p>例如，一个采样率为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>44100</span><span><span>Hz</span></span></span></span></span>，量化格式为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span>16</span><span><span>bit</span></span></span></span></span>，声道数为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>2</span></span></span></span> 的 CD 的比特率为：</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span>44100</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span>16</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>2</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span>1378.125</span><span><span>kbps</span></span></span></span></span></span></p>\n<p>那么一分钟内这类 CD 音质的数据大小为：</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span>1378.125</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span>60</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>÷</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span>8</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>÷</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1024</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>10.09</span><span><span>MB</span></span></span></span></span></span></p>\n<p>如果量化格式更为精确，如 32bit 表示一个采样，或者采样频率更为密集，则所占的存储空间就越大。</p>\n<h3 id=\"_2-5-音频编码\"> 2.5 音频编码</h3>\n<p>这里来介绍几种常见的音频编码格式</p>\n<ol>\n<li>WAV\n<blockquote>\n<p>有多种实现方式，但都不对 PCM 进行压缩，其中一种是在 PCM 数据之前加上 44 字节的文件头信息</p>\n</blockquote>\n</li>\n<li>MP3\n<blockquote>\n<p>具有不错的压缩比，应用最为普遍的有损压缩声音编码格式，适用于 128 kbps 以上的音频</p>\n</blockquote>\n</li>\n<li>AAC\n<blockquote>\n<p>有损压缩格式，在 128 kbps 以下码率表现优异，通常用于视频中音频轨的编码</p>\n</blockquote>\n</li>\n<li>OGG\n<blockquote>\n<p>可以使用更小的码率实现比 MP3 更好的音质，但兼容性不够好，流媒体特性不支持，通常用于语音通信的音频消息场景</p>\n</blockquote>\n</li>\n<li>FLAC\n<blockquote>\n<p>无损压缩形式，FLAC 可实时播放已经压缩了的音频数据，同时具有抗损伤能力</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"_3-图像的物理概念\"> 3. 图像的物理概念</h2>\n<p>图像，实际上就是光线进入人眼后，在视网膜中形成的物体概念，根据棱镜实验，光线都是由不同的三原色光——红、绿、蓝复合而成的。</p>\n<p>屏幕上的图像，实际上是由很多个带颜色的点构成的，每个点称为一个 <strong>像素</strong>，一个像素由三个 <strong>子像素</strong> 组成，分别为红、绿、蓝，通常我们将这三个子像素分别称为 <strong>通道</strong>；\n而一个屏幕一共有多少个像素点，我们称为这个屏幕的 <strong>分辨率</strong>，通常由一个乘式表示，例如：1280 * 720 则表示，这个屏幕在水平方向上有 1280 个像素点，在竖直方向上有 720 个像素点。</p>\n<p>现在的屏幕显像原理稍有不同，但是都是由屏幕背后的光源照亮前方的像素点实现的显像，因此通常屏幕是 <strong>自发光</strong> 的，而不是通过光的反射让人看到图像。</p>\n<h2 id=\"_4-图像的数值表示\"> 4. 图像的数值表示</h2>\n<h3 id=\"_4-1-rgb-表示\"> 4.1 RGB 表示</h3>\n<p>根据图像的物理原理，我们可以知道任何一种光都可以由红（R） 、绿（G）、蓝（B）表示，因此我们就有了第一种图像表示方法——RGB 表示法。</p>\n<p>但对于每个通道如何表示，则有不同的格式：</p>\n<ul>\n<li>浮点表示\n<blockquote>\n<p>取值范围为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0.0</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∼</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1.0</span></span></span></span>，OpenGL ES 中就采用这种表示形式</p>\n</blockquote>\n</li>\n<li>整数表示\n<blockquote>\n<p>取值范围为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∼</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>255</span></span></span></span>，8 bit 表示一个子像素，32 bit 表示一个像素，例如 Android 中的 <code>ARGB_8888</code> 表示格式即为 RGB 通道加 Alpha 通道（表示透明度），每个通道采用 8 bit 表示，一共 32 bit 表示一个像素</p>\n</blockquote>\n</li>\n</ul>\n<p>对于一副 1280 * 720 的图像，如果采用 <code>ARGB_8888</code> 表示法进行表示，那么这张图片的大小为：</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span>1280</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span>720</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>4</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>3.516</span><span><span>MB</span></span></span></span></span></span></p>\n<p>所以图像的裸数据都是很大的，通常要进行编码之后才能在网络上传输。</p>\n<h3 id=\"_4-2-yuv-表示法\"> 4.2 YUV 表示法</h3>\n<p>虽然我们知道色光由 RGB 组成，但是在彩色电视机发明之前，人们通常使用的都是老式的黑白电视机，为了保持和老式黑白电视机的兼容性，我们有另一种图像的表示方式，即 YUV 表示法。</p>\n<p>其中，Y 表示明亮度，也称作灰阶值，UV 则表示图像的色度，包括色调和饱和度，分别用 Cr 和 Cb 表示，所以 YUV 表示法也被称作 YCrCb 表示法；\n其中 Cr 反应了 RGB 输入信号的红色部分与 RGB 亮度之间的差异，Cb 反应的则是 RGB 蓝色部分和 RGB 亮度值之间的关系。</p>\n<p>YUV 色彩空间相对于 RGB 空间而言，优势在于 Y 通道和 UV 通道之间是可以分离的，如果只传输 Y 通道，那么这样的图像就是黑白灰度图像，因此也解决了彩色电视机和黑白电视机的兼容问题。</p>\n<p>YUV 最常用的表示法是 Y、U、V 都采用一个字节(8bit) 来表示，取值范围为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>0</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∼</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>255</span></span></span></span>；\n但是在广播电视系统中，不传输很低或者很高的值，因此无论是 Rec.601 还是 BT.709 标准中，Y 的取值范围都是 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>16</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∼</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>255</span></span></span></span>，UV 的取值范围都是 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>16</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∼</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>240</span></span></span></span>。</p>\n<p>YUV 在采样中也有不同的采样格式，有 YUV444、YUV422、YUV420 这三种大类，三者的区别如下图表示：</p>\n<p><img src=\"/images/音视频开发基础知识/yuv444、yuv422、yuv420-的区别.png\" alt=\"yuv444、yuv422、yuv420 的区别\" /></p>\n<p>YUV444 指的是一个 Y 通道拥有独立的 UV 通道\nYUV422 指的是两个 Y 通道共用一个 UV 通道\nYUV420 指的是四个 Y 通道共用一个 UV 通道</p>\n<p>为什么可以这样采样，主要是因为人眼对于图像的亮度更为敏感，而对图像的色度信息并不那么敏感，因此我们就可以减少图像的 UV 信息达到相同的显示效果。</p>\n<p><img src=\"/images/音视频开发基础知识/Barn-yuv.png\" alt=\"人眼对 Y 通道更敏感\" /></p>\n<p>其中，最常用的采样格式为 YUV 420，所谓 4、2、0 指的是，每四行像素中，有 4 行 Y 通道，2 行 UV 通道；\n并不是只有 U 通道或者只有 V 通道，实际采样过程中，会每两行只采样一行 U 数据，而下一个两行只采样一行 V 数据。</p>\n<p>同理 422 采样指的是，每 4 行像素中，有 4 行 Y 通道，2 行 U 通道，2 行 V 通道；\n具体采样过程来说，就是第一个像素只采样 U 通道，第二个像素只采样 V 通道；\nYUV 422 还有不少子类型，根据格式不同，其采样和数据存储的格式也不同。</p>\n<p>YUV 模型就存储的内存模型上来说还有两种不同的区别，分别为：压缩存储(packed) 和平面存储(planer)；\n所谓压缩存储指的是在内存中 Y、U、V 数据挤在一起存储，如下面的三个像素：</p>\n<p>YUV|YUV|YUV</p>\n<p>所谓平面存储指的是先存储一个通道，再存储另一个通道：</p>\n<p>YYY\nUUU\nVVV</p>\n<p>图像裸数据的大小是非常惊人，拿最常用的 YUV420 来说，如果是一张 1920 * 1080 分辨率的图片，色深为 8bit，那么它的大小为：</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span>1920</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span>1080</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span>1</span><span>b</span><span style=\"margin-right:0.03588em;\">y</span><span>t</span><span>e</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>(</span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>1/4</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>1/4</span><span>)</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>2.97</span><span><span>MB</span></span></span></span></span></span></p>\n<p>假如是上面这个分辨率的一个 30 帧的视频，一分钟的数据量会达到：</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span>2.97</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span>30</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>60</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>5.22</span><span><span>GB</span></span></span></span></span></span></p>\n<h3 id=\"_4-3-yuv-与-rgb-的转换\"> 4.3 YUV 与 RGB 的转换</h3>\n<p>我们知道，图像的实际物理成像还是要依靠 RGB 模型进行的，所以 YUV 数据要显示到屏幕上，就必须转换为 RGB 数据才能显示。</p>\n<p>这两个模型，根据不同的标准，有不同的转换公式进行转换，这些不同的转换公式，我们可以将其写成矩阵模式，即不同的转换矩阵：</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:3.60004em;vertical-align:-1.55002em;\"></span><span><span><span><span><span><span style=\"height:2.05002em;\"><span style=\"top:-2.2500000000000004em;\"><span style=\"height:3.1550000000000002em;\"></span><span><span>⎣</span></span></span><span style=\"top:-3.3970000000000002em;\"><span style=\"height:3.1550000000000002em;\"></span><span style=\"height:0.016em;width:0.667em;\"><svg width='0.667em' height='0.016em' style='width:0.667em' viewBox='0 0 667 16' preserveAspectRatio='xMinYMin'><path d='M319 0 H403 V16 H319z M319 0 H403 V16 H319z'/></svg></span></span><span style=\"top:-4.05002em;\"><span style=\"height:3.1550000000000002em;\"></span><span><span>⎡</span></span></span></span><span>​</span></span><span><span style=\"height:1.55002em;\"><span></span></span></span></span></span></span><span><span><span><span><span><span style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.00773em;\">R</span></span></span><span style=\"top:-3.0099999999999993em;\"><span style=\"height:3em;\"></span><span><span>G</span></span></span><span style=\"top:-1.8099999999999994em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.05017em;\">B</span></span></span></span><span>​</span></span><span><span style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span></span></span><span><span><span><span><span style=\"height:2.05002em;\"><span style=\"top:-2.2500000000000004em;\"><span style=\"height:3.1550000000000002em;\"></span><span><span>⎦</span></span></span><span style=\"top:-3.3970000000000002em;\"><span style=\"height:3.1550000000000002em;\"></span><span style=\"height:0.016em;width:0.667em;\"><svg width='0.667em' height='0.016em' style='width:0.667em' viewBox='0 0 667 16' preserveAspectRatio='xMinYMin'><path d='M263 0 H347 V16 H263z M263 0 H347 V16 H263z'/></svg></span></span><span style=\"top:-4.05002em;\"><span style=\"height:3.1550000000000002em;\"></span><span><span>⎤</span></span></span></span><span>​</span></span><span><span style=\"height:1.55002em;\"><span></span></span></span></span></span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span style=\"margin-right:0.10903em;\">M</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>×</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:3.60004em;vertical-align:-1.55002em;\"></span><span><span><span><span><span><span style=\"height:2.05002em;\"><span style=\"top:-2.2500000000000004em;\"><span style=\"height:3.1550000000000002em;\"></span><span><span>⎣</span></span></span><span style=\"top:-3.3970000000000002em;\"><span style=\"height:3.1550000000000002em;\"></span><span style=\"height:0.016em;width:0.667em;\"><svg width='0.667em' height='0.016em' style='width:0.667em' viewBox='0 0 667 16' preserveAspectRatio='xMinYMin'><path d='M319 0 H403 V16 H319z M319 0 H403 V16 H319z'/></svg></span></span><span style=\"top:-4.05002em;\"><span style=\"height:3.1550000000000002em;\"></span><span><span>⎡</span></span></span></span><span>​</span></span><span><span style=\"height:1.55002em;\"><span></span></span></span></span></span></span><span><span><span><span><span><span style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.22222em;\">Y</span><span><span><span><span style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>′</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.0099999999999993em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.07153em;\">C</span><span>b</span></span></span><span style=\"top:-1.8099999999999994em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.07153em;\">C</span><span style=\"margin-right:0.02778em;\">r</span></span></span></span><span>​</span></span><span><span style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span></span></span><span><span><span><span><span style=\"height:2.05002em;\"><span style=\"top:-2.2500000000000004em;\"><span style=\"height:3.1550000000000002em;\"></span><span><span>⎦</span></span></span><span style=\"top:-3.3970000000000002em;\"><span style=\"height:3.1550000000000002em;\"></span><span style=\"height:0.016em;width:0.667em;\"><svg width='0.667em' height='0.016em' style='width:0.667em' viewBox='0 0 667 16' preserveAspectRatio='xMinYMin'><path d='M263 0 H347 V16 H263z M263 0 H347 V16 H263z'/></svg></span></span><span style=\"top:-4.05002em;\"><span style=\"height:3.1550000000000002em;\"></span><span><span>⎤</span></span></span></span><span>​</span></span><span><span style=\"height:1.55002em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>其中 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">M</span></span></span></span> 即为不同的转换矩阵，通过转换矩阵就能得到对应标准下的 RGB 模型。</p>\n<p>这里需要注意的一点是，RGB 通道和 YUV 通道都是有取值范围的，而且不同的转换标准中，各个通道的取值范围也是不尽相同的。</p>\n<p>这里有个小坑点，上面所写的是 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:3.60004em;vertical-align:-1.55002em;\"></span><span><span><span><span><span><span style=\"height:2.05002em;\"><span style=\"top:-2.2500000000000004em;\"><span style=\"height:3.1550000000000002em;\"></span><span><span>⎣</span></span></span><span style=\"top:-3.3970000000000002em;\"><span style=\"height:3.1550000000000002em;\"></span><span style=\"height:0.016em;width:0.667em;\"><svg width='0.667em' height='0.016em' style='width:0.667em' viewBox='0 0 667 16' preserveAspectRatio='xMinYMin'><path d='M319 0 H403 V16 H319z M319 0 H403 V16 H319z'/></svg></span></span><span style=\"top:-4.05002em;\"><span style=\"height:3.1550000000000002em;\"></span><span><span>⎡</span></span></span></span><span>​</span></span><span><span style=\"height:1.55002em;\"><span></span></span></span></span></span></span><span><span><span><span><span><span style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.22222em;\">Y</span><span><span><span><span style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>′</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.0099999999999993em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.07153em;\">C</span><span>b</span></span></span><span style=\"top:-1.8099999999999994em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.07153em;\">C</span><span style=\"margin-right:0.02778em;\">r</span></span></span></span><span>​</span></span><span><span style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span></span></span><span><span><span><span><span style=\"height:2.05002em;\"><span style=\"top:-2.2500000000000004em;\"><span style=\"height:3.1550000000000002em;\"></span><span><span>⎦</span></span></span><span style=\"top:-3.3970000000000002em;\"><span style=\"height:3.1550000000000002em;\"></span><span style=\"height:0.016em;width:0.667em;\"><svg width='0.667em' height='0.016em' style='width:0.667em' viewBox='0 0 667 16' preserveAspectRatio='xMinYMin'><path d='M263 0 H347 V16 H263z M263 0 H347 V16 H263z'/></svg></span></span><span style=\"top:-4.05002em;\"><span style=\"height:3.1550000000000002em;\"></span><span><span>⎤</span></span></span></span><span>​</span></span><span><span style=\"height:1.55002em;\"><span></span></span></span></span></span></span></span></span></span></span>，并不是<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:3.60004em;vertical-align:-1.55002em;\"></span><span><span><span><span><span><span style=\"height:2.05002em;\"><span style=\"top:-2.2500000000000004em;\"><span style=\"height:3.1550000000000002em;\"></span><span><span>⎣</span></span></span><span style=\"top:-3.3970000000000002em;\"><span style=\"height:3.1550000000000002em;\"></span><span style=\"height:0.016em;width:0.667em;\"><svg width='0.667em' height='0.016em' style='width:0.667em' viewBox='0 0 667 16' preserveAspectRatio='xMinYMin'><path d='M319 0 H403 V16 H319z M319 0 H403 V16 H319z'/></svg></span></span><span style=\"top:-4.05002em;\"><span style=\"height:3.1550000000000002em;\"></span><span><span>⎡</span></span></span></span><span>​</span></span><span><span style=\"height:1.55002em;\"><span></span></span></span></span></span></span><span><span><span><span><span><span style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.22222em;\">Y</span><span><span><span><span style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>′</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.0099999999999993em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.10903em;\">U</span></span></span><span style=\"top:-1.8099999999999994em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.22222em;\">V</span></span></span></span><span>​</span></span><span><span style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span></span></span><span><span><span><span><span style=\"height:2.05002em;\"><span style=\"top:-2.2500000000000004em;\"><span style=\"height:3.1550000000000002em;\"></span><span><span>⎦</span></span></span><span style=\"top:-3.3970000000000002em;\"><span style=\"height:3.1550000000000002em;\"></span><span style=\"height:0.016em;width:0.667em;\"><svg width='0.667em' height='0.016em' style='width:0.667em' viewBox='0 0 667 16' preserveAspectRatio='xMinYMin'><path d='M263 0 H347 V16 H263z M263 0 H347 V16 H263z'/></svg></span></span><span style=\"top:-4.05002em;\"><span style=\"height:3.1550000000000002em;\"></span><span><span>⎤</span></span></span></span><span>​</span></span><span><span style=\"height:1.55002em;\"><span></span></span></span></span></span></span></span></span></span></span>，实际上，涉及到这个转换运算，这两者还是有点区别的：</p>\n<p><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span style=\"margin-right:0.07153em;\">C</span><span>b</span></span></span></span> 和 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.07153em;\">C</span><span style=\"margin-right:0.02778em;\">r</span></span></span></span> 的取值范围为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>[</span><span>−</span><span>128</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>127</span><span>]</span></span></span></span> ，但是 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.10903em;\">U</span><span style=\"margin-right:0.22222em;\">V</span></span></span></span> 的取值范围为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>[</span><span>0</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>255</span><span>]</span></span></span></span>，所以实际上需要做一个转换操作：</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:3.0000000000000004em;vertical-align:-1.2500000000000002em;\"></span><span><span><span><span><span><span style=\"height:1.7500000000000002em;\"><span style=\"top:-3.91em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.07153em;\">C</span><span>b</span></span></span><span style=\"top:-2.41em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.07153em;\">C</span><span style=\"margin-right:0.02778em;\">r</span></span></span></span><span>​</span></span><span><span style=\"height:1.2500000000000002em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:1.7500000000000002em;\"><span style=\"top:-3.91em;\"><span style=\"height:3em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.10903em;\">U</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>128</span></span></span><span style=\"top:-2.41em;\"><span style=\"height:3em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span style=\"margin-right:0.22222em;\">V</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>128</span></span></span></span><span>​</span></span><span><span style=\"height:1.2500000000000002em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>所以，如果需要得到黑白图像，需要将 UV 置为 128；</p>\n<p>如果 UV 置为 0，那么得到的就是绿色。</p>\n<p>如果计算得到的值超出了这个范围，那么就要进行 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span>c</span><span style=\"margin-right:0.01968em;\">l</span><span>am</span><span>p</span></span></span></span> 操作，将它们强制限定在这个范围之内。</p>\n<p>同时，只有 YUV444 才能和 RGB 空间进行相互转化，如果采样格式不是 YUV444，那么就需要先拉升到 YUV444 平面才能和 RGB 进行相互转化。</p>\n<h2 id=\"_5-视频的编解码相关概念\"> 5. 视频的编解码相关概念</h2>\n<p>上面我们已经看到，图像的裸数据的数据量是非常大的，因此，对视频图像进行压缩编码是很有必要的。</p>\n<p>所有的压缩编码技术都是通过去除冗余信息来降低数据量，比如音频的压缩就是通过去除超出人类听觉范围的频率信息进行冗余信息的剔除；\n就视频来说，由于视频是运动的，所以同时拥有时间上的冗余信息和空间上的冗余信息。</p>\n<p>使用 <strong>帧间编码技术</strong> 能去除时间上的冗余信息，具体包括以下部分：</p>\n<ul>\n<li>运动补偿\n<blockquote>\n<p>通过先前的局部图像来预测、补偿当前的局部图像</p>\n</blockquote>\n</li>\n<li>运动表示\n<blockquote>\n<p>不同区域的图像使用不同的运动矢量来描述运动信息</p>\n</blockquote>\n</li>\n<li>运动估计\n<blockquote>\n<p>从视频序列中抽取运动信息的技术</p>\n</blockquote>\n</li>\n</ul>\n<p>使用帧内编码技术能去除空间上的冗余信息</p>\n<h3 id=\"_5-1-视频编解码技术\"> 5.1 视频编解码技术</h3>\n<p>视频的编解码技术有两套标准，一套是 ISO 制定的 MPEG 标准，另一套是 ITU-T 指定的 <span>H.xxx</span> 标准。</p>\n<p>其中，Mpeg4 AVC 标准和 H.264 标准实际上是一套技术，只不过叫不同的名字罢了。</p>\n<h3 id=\"_5-2-视频格式和编解码技术\"> 5.2 视频格式和编解码技术</h3>\n<p>在这里要厘清一个很关键的概念，就是视频文件的格式和它使用的编解码技术没有任何关系。</p>\n<p>例如，我们熟知的 MP4 视频，实际上 MP4 只是一个 <strong>视频容器的格式(Container Format)</strong>，它可以承载不同编码的视频轨和音频轨道。</p>\n<p>理论上，MP4 文件也可以承载 H.265 编码的视频，而 MKV 文件也可以承载 H.264 编码的视频。</p>\n<p>所以不能一看 MP4 视频就认为其质量一定很差。</p>\n<h3 id=\"_5-3-ipb-帧\"> 5.3 IPB 帧</h3>\n<p>IPB 帧是常用的一种视频压缩算法的概念，其中分为：</p>\n<ul>\n<li>I 帧：帧内编码帧(intra picture)\n<blockquote>\n<p>I 帧通常是每个 GOP(MPEG 采用的一种视频压缩技术，下面会介绍) 的第一个帧，经过适度压缩之后，作为随机访问的参考点；\nI 帧可以得到 6:1 的压缩比而不会产生任何的模糊现象，使用 I 帧可以去除视频的空间冗余信息</p>\n</blockquote>\n</li>\n<li>P 帧：前向预测编码帧(predictrive-frame)\n<blockquote>\n<p>通过将图像序列中前面已经编码的帧的时间冗余信息充分去除来压缩得到的编码图像，也称为预测帧</p>\n</blockquote>\n</li>\n<li>B 帧：双向预测内插编码帧(bi-directrional interpolated prediction frame)\n<blockquote>\n<p>既考虑源图像序列前面的已编码帧，又估计源图像序列后面的已编码帧之间的时间冗余信息来压缩传输数据量的编码信息，也称为双向预测帧</p>\n</blockquote>\n</li>\n</ul>\n<p>从解码的角度来理解 IPB 帧：</p>\n<p>I 帧自身可以通过视频解压算法解压成单独的一张完整视频画面，去除的是空间上的冗余信息（类似于动画的 Cut）</p>\n<p>P 帧需要参考前面的一个 I 帧或者 P 帧来解码成一张完整的视频画面</p>\n<p>B 帧需要参考其前一个 I 帧或者 P 帧及其后面的一个 P 帧来生成一张完整的视频画面（类似于动画的中间张）</p>\n<p>因此 P 帧和 B 帧去除的是视频帧在时间上的冗余信息。</p>\n<h3 id=\"_5-4-idr-帧\"> 5.4 IDR 帧</h3>\n<p>H.264 中除了上述的 IPB 帧以外还有一个特殊的 IDR 帧。</p>\n<p>我们首先看一下 IDR 帧的英文全称：instantaneous decoding refresh picture，直译为『瞬间解码刷新图像』。</p>\n<p>如何理解呢？其实 H.264 中采用了多帧预测技术，一个 P 帧很有可能会参考 I 帧之前的帧，所以不能以找到 I 帧作为参考条件。</p>\n<p>但是 IDR 帧是一种特殊的 I 帧，在这一帧之后的所有参考帧都只会参考到这个 IDR 帧，而不会再往前参考。</p>\n<p>在解码器中，一旦收到一个 IDR 帧，那么就会立即『刷新』参考帧缓冲区，并将 IDR 帧作为被参考的帧。</p>\n<h3 id=\"_5-5-pts-和-dts\"> 5.5 PTS 和 DTS</h3>\n<p>DTS 全称为 Decoding Time Stamp，指的是某个帧解码的时间戳；\nPTS 全称为 Presentation Time Stamp，指的是某个帧显示的时间戳。</p>\n<p>如果没有 B 帧，那么 DTS 和 PTS 就是一样的，但是 B 帧是插入帧，需要参考前后的帧进行解码，所以会打乱解码和显示的顺序，因此就需要有这两个值来调整某一个帧的解码和显示的时间。</p>\n<p>某帧图像什么时候显示给用户，取决于它的 PTS；\n某帧图像什么时候进行解码，取决于它的 DTS。</p>\n<h3 id=\"_5-6-gop\"> 5.6 GOP</h3>\n<p>上面提到了 GOP ，那么什么是 GOP 呢？</p>\n<p>其实两个 I 帧之间形成的一组图片，就是 GOP(Group Of Pictures)。</p>\n<p>在为编码器设置参数的时候设置的 <code>gop_size</code> 实际上就是设置两个 I 帧之间帧的数量。</p>\n<p>一般来说， I 帧的压缩率为 7，P 帧为 20， B 帧可以达到 50。</p>\n<p>因此，多采用 B 帧可以节省大量空间，同时可以用它来多保存 I 帧，这样可以在相同的码率下提供更好的画质。</p>\n<p>最后，结合上述概念，给出一幅解码和显示顺序的图：</p>\n<p><img src=\"/images/音视频开发基础知识/gop-内的解码顺序和显示顺序.png\" alt=\"GOP 内的解码顺序和显示顺序\" /></p>\n",
      "image": "https://wafer.li/images/音视频开发基础知识/等响曲线.png",
      "date_published": "2021-07-15T11:52:03.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "音视频开发"
      ]
    },
    {
      "title": "AndroidX 测试坑点详解（一）",
      "url": "https://wafer.li/blog-corners/tech/android/traps/android-%E6%B5%8B%E8%AF%95%E5%9D%91%E7%82%B9%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89/",
      "id": "https://wafer.li/blog-corners/tech/android/traps/android-%E6%B5%8B%E8%AF%95%E5%9D%91%E7%82%B9%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89/",
      "summary": "<p>最近在迁移到 AndroidX 之后一直折腾 TDD 的事情，也遇到了大的小的不少坑点；</p>\n<p>鉴于 AndroidX 在测试方面还没有太多的文档，就写一篇博文来总结一下折腾的经验，也给后来人做一些参考。</p>\n",
      "content_html": "<p>最近在迁移到 AndroidX 之后一直折腾 TDD 的事情，也遇到了大的小的不少坑点；</p>\n<p>鉴于 AndroidX 在测试方面还没有太多的文档，就写一篇博文来总结一下折腾的经验，也给后来人做一些参考。</p>\n\n<h2 id=\"_1-国产-rom-的坑\"> 1. 国产 ROM 的坑</h2>\n<p><code>ActivityScenario</code> 和 <code>ActivityScenarioRule</code> 是新推出的操作 Activity 生命周期的类。</p>\n<p>当构建 <code>ActivityScenario</code> 时，它便会自动启动你指定的 Activity 并让它处于 <code>RESUMED</code> 状态。</p>\n<p>使用示例如下：</p>\n<div><pre><code><span>@RunWith</span><span>(</span>AndroidJunit4<span>::</span><span>class</span><span>)</span>\n<span>class</span> MainActivityTest <span>{</span>\n  <span>@get:Rule</span>\n  <span>val</span> mainActivityScenarioRule <span>=</span> ActivityScenarioRule<span>&lt;</span>MainActivity<span>></span><span>(</span>MainActivity<span>::</span><span>class</span><span>.</span>java<span>)</span>\n\n    <span>@Test</span>\n    <span>fun</span> <span>onCreate_saveInstanceNull</span><span>(</span><span>)</span> <span>{</span>\n        mainActivityScenarioRule<span>.</span>scenario\n                <span>.</span><span>onActivity</span> <span>{</span> activity <span>-></span>\n                  <span>// 在这里获取 Activity 实例</span>\n                <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>但是，当我在手机上跑这个测试的时候，却遇到了下面的问题：</p>\n<div><pre><code>java.lang.AssertionError: Activity never becomes requested state <span>\"[RESUMED]\"</span>\n<span>(</span>last lifecycle transition <span>=</span> <span>\"PRE_ON_CREATE\"</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>也就是说，我这个 Activity 实际上并没有真正的 <code>onCreate</code> 而是一直处于被创建之前的状态，随后因为超时导致了报错退出。</p>\n<blockquote>\n<p>具体的超时时间是 45 秒</p>\n</blockquote>\n<p>但是到底是什么东西导致我的 Activity 启动不了却没有什么头绪，直到我用模拟器运行测试代码的时候，我发现： <strong>居然测试通过了！</strong></p>\n<p>原来，Android 的仪器测试(Instrumented Test)都会构建一个独立的 <code>test.apk</code> 并自动安装和运行。</p>\n<p>而国产的手机系统对于应用自启动的管理非常激进（例如华为），而我也没有对 <code>test.apk</code> 设置白名单，于是系统就一直禁止 <code>tesk.apk</code> 的启动，导致测试失败。</p>\n<p>在华为的手机应用管家中为 <code>test.apk</code> 设置白名单，测试就可以通过了。</p>\n<h2 id=\"_2-fragment-testing-的坑\"> 2. Fragment Testing 的坑</h2>\n<h3 id=\"_2-1-编译依赖的坑\"> 2.1 编译依赖的坑</h3>\n<p>和 <code>ActivityScenario</code> 一样，Google 也提供了一个 <code>FragmentScenario</code> 方便在测试中获取 <code>Fragment</code> 实例和对 <code>Fragment</code> 进行操作。</p>\n<p>但是需要引入 <code>fragment-testing</code> 库，按照 Google 的文档是下面的这条语句:</p>\n<div><pre><code>debugImplementation <span>'androidx.fragment:fragment-testing:1.1.0-alpha07'</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>这里就是它的第一个坑，如果你只引入上面的这条语句，实际上根本不可能成功 Build。</p>\n<p>主要有以下两点原因：</p>\n<ol>\n<li>\n<p><code>fragment-testing</code> 需要依赖 <code>androidx.test.core</code>，而 debugImplementation 并没有引入 <code>androidx.text.core</code></p>\n</li>\n<li>\n<p>我们需要在 Instrumented Test 中使用 <code>fragment-testing</code>，而上面并没有在 <code>androidTestImplementation</code> 引入</p>\n</li>\n</ol>\n<p>于是乎，正确的引入方式是：</p>\n<div><pre><code><span>debugImplementation</span><span>(</span>Libs<span>.</span>androidx_test_core<span>)</span>\n<span>debugImplementation</span><span>(</span>Libs<span>.</span>fragment_testing<span>)</span>\n<span>androidTestImplementation</span><span>(</span>Libs<span>.</span>androidx_test_core<span>)</span>\n<span>androidTestImplementation</span><span>(</span>Libs<span>.</span>fragment_testing<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>那么能不能把 <code>debugImplementation</code> 换成普通的 <code>implementation</code> 呢？</p>\n<p>很可惜，这是不行的，不过至于为什么不行，我目前并没有对此进行深入研究。</p>\n<h3 id=\"_2-2-主题的坑\"> 2.2 主题的坑</h3>\n<p>导入和依赖的坑解决之后就到了如何使用的环节了。</p>\n<p>具体的用法为：</p>\n<div><pre><code><span>@Test</span>\n<span>fun</span> <span>testFragment</span><span>(</span><span>)</span> <span>{</span>\n  launchFragmentScenario<span>&lt;</span>LoginFragment<span>></span><span>(</span><span>)</span> <span>{</span> fragment <span>-></span>\n    <span>// 使用 fragment</span>\n  <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>但是，这么使用也是不行的。</p>\n<p>如果你使用了 Material 的组件，例如 <code>TextInputLayout</code>，那么它会报如下错误：</p>\n<div><pre><code>Caused by: android.view.InflateException: Binary XML file line\n#9: Error inflating class\n**com.google.android.material.textfield.TextInputLayout**\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>在查阅相关资料之后，发现了<a href=\"https://issuetracker.google.com/issues/119054431\" target=\"_blank\" rel=\"noopener noreferrer\">一个相关的 Issue</a></p>\n<p>其中 Google 的人指出：</p>\n<blockquote>\n<p>You need to tell FragmentScenario <strong>what theme you want</strong> if you want something <strong>other than the default Theme.WithActionBar</strong>, that's correct.</p>\n</blockquote>\n<p>也就是说，如果你使用了 Material 相关的主题，比如说常见的 <code>Theme.Appcompat</code> 等，那么就需要向 <code>FragmentScenario</code> 明确指出你使用的主题样式。</p>\n<p>也就是说，上面的代码需要写成：</p>\n<div><pre><code><span>fun</span> <span>testFragment</span><span>(</span><span>)</span> <span>{</span>\n  launchFragmentScenario<span>&lt;</span>LoginFragment<span>></span><span>(</span>\n    themeResId <span>=</span> R<span>.</span>style<span>.</span>Your_App_Theme\n    <span>)</span> <span>{</span> fragment <span>-></span>\n    <span>// 使用 fragment</span>\n  <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>程序才能正常运行。</p>\n<h2 id=\"_3-onfragment-onactivity-和-check-的坑\"> 3. onFragment/onActivity 和 check 的坑</h2>\n<p><code>ActivityScenario</code> 和 <code>FragmentScenario</code> 都提供了一个相应的高阶函数 <code>onActivity()</code> 和 <code>onFragment()</code>，可以在其中获取到对应的 <code>Activity</code> 和 <code>Fragment</code> 的实例，并用它做相应的操作。</p>\n<blockquote>\n<p>实际上 <code>onFragment()</code> 内部也是调用了 <code>onActivity()</code></p>\n</blockquote>\n<p>但是！需要注意的是，这两个 <code>on</code> 方法都是运行在主线程的，而 Espresso 的 <code>check()</code> 函数是一个耗时操作，如果你在 <code>onFragment()</code> 中调用 <code>check()</code>，那么就会 <strong>阻塞 UI 线程</strong>。</p>\n<p>也就是说，需要将 <code>onView()</code> 相关的内容放到 <code>onFragment/onActivity</code> 的外面：</p>\n<div><pre><code>launchFragmentInContainer<span>&lt;</span>LoginFragment<span>></span><span>(</span>\n    themeResId <span>=</span> R<span>.</span>style<span>.</span>Theme_Shrine\n<span>)</span><span>.</span><span>onFragment</span> <span>{</span>\n    tintColorRes <span>=</span> typedValue<span>.</span>resourceId\n<span>}</span>\n\n<span>onView</span><span>(</span><span>withContentDescription</span><span>(</span>R<span>.</span>string<span>.</span>shr_logo_content_description<span>)</span><span>)</span>\n    <span>.</span><span>check</span><span>(</span><span>matches</span><span>(</span><span>withDrawable</span><span>(</span>R<span>.</span>drawable<span>.</span>shr_logo<span>,</span> tintColorRes<span>)</span><span>)</span><span>)</span>\n    <span>.</span><span>check</span><span>(</span><span>matches</span><span>(</span><span>isCompletelyDisplayed</span><span>(</span><span>)</span><span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>等等，放到外面就不会阻塞 UI 线程了吗？难道不会阻塞 <code>test.apk</code> 的 UI 线程？</p>\n<p>经过反编译 <code>tesk.apk</code> 之后发现，实际上 <code>test.apk</code> <strong>只包含测试用例相关的内容</strong>，甚至没有一个 <code>Activity</code>，而真正的被测试的内容实际上还是在我们原来的 apk 之中，<code>test.apk</code> 实际上是通过启动被测试的 apk 的相关内容来实现仪器测试的。</p>\n<p>也就是说，如果将 <code>onView</code> 相关的代码放到外面，实际上是在 <code>test.apk</code> 里面跑的，也就不会对被测试的 apk 进行阻塞。</p>\n<h2 id=\"_4-动画的坑\"> 4. 动画的坑</h2>\n<p>Android 官方的 Espresso 测试框架不能兼容动画效果，在跑测试，特别是点击、输入等 UI 测试时，需要进入开发者模式把能显示动画的都关掉：</p>\n<p><img src=\"/images/android-espresso-坑点详解（一）/turn-off-animation.png\" alt=\"Turn Off Animation\" /></p>\n<p>不然 Espresso 会报 <code>PerformException</code>。</p>\n<h2 id=\"_5-测试-imageview-的-drawable-的坑\"> 5. 测试 ImageView 的 Drawable 的坑</h2>\n<h3 id=\"_5-1-android-tint-的坑\"> 5.1 android:tint 的坑</h3>\n<p>对于 <code>ImageView</code>，我们需要测试它是否展示出了我们传入的 Drawable，不过比较可惜的是，Espresso 自身并没有提供 <code>withDrawable()</code> 方法，幸运的是，我们可以通过 Kotlin 的扩展函数实现这个功能：</p>\n<div><pre><code><span>fun</span> <span>withDrawable</span><span>(</span><span>@DrawableRes</span> id<span>:</span> Int<span>,</span> <span>@ColorRes</span> tint<span>:</span> Int<span>?</span> <span>=</span> <span>null</span><span>,</span> tintMode<span>:</span> PorterDuff<span>.</span>Mode <span>=</span> SRC_IN<span>)</span> <span>=</span> <span>object</span> <span>:</span> TypeSafeMatcher<span>&lt;</span>View<span>></span><span>(</span><span>)</span> <span>{</span>\n    <span>override</span> <span>fun</span> <span>describeTo</span><span>(</span>description<span>:</span> Description<span>)</span> <span>{</span>\n        description<span>.</span><span>appendText</span><span>(</span><span>\"ImageView with drawable same as drawable with id <span>$id</span>\"</span><span>)</span>\n    <span>}</span>\n\n    <span>override</span> <span>fun</span> <span>matchesSafely</span><span>(</span>view<span>:</span> View<span>)</span><span>:</span> Boolean <span>{</span>\n        <span>val</span> context <span>=</span> view<span>.</span>context\n        <span>val</span> expectedBitmap <span>=</span> context<span>.</span><span>getDrawable</span><span>(</span>id<span>)</span><span>?</span><span>.</span><span>toBitmap</span><span>(</span><span>)</span>\n\n        <span>return</span> view <span>is</span> ImageView <span>&amp;&amp;</span> view<span>.</span>drawable<span>.</span><span>toBitmap</span><span>(</span><span>)</span><span>.</span><span>sameAs</span><span>(</span>expectedBitmap<span>)</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>但是，<code>ImageView</code> 支持着色 (tint) 功能，真正显示出来的 Drawable 和我们从 <code>Context</code> 里面拿到的 Drawable 很可能是不一样的，因此，我们也需要给 <code>expectedBitmap</code> 进行着色：</p>\n<div><pre><code><span>private</span> <span>fun</span> Int<span>.</span><span>toColor</span><span>(</span>context<span>:</span> Context<span>)</span> <span>=</span> ContextCompat<span>.</span><span>getColor</span><span>(</span>context<span>,</span> <span>this</span><span>)</span>\n\n<span>private</span> <span>fun</span> Drawable<span>.</span><span>tinted</span><span>(</span><span>@ColorInt</span> tintColor<span>:</span> Int<span>?</span> <span>=</span> <span>null</span><span>,</span> tintMode<span>:</span> PorterDuff<span>.</span>Mode <span>=</span> SRC_IN<span>)</span> <span>=</span>\n        apply <span>{</span>\n            <span>setTintList</span><span>(</span>tintColor<span>?</span><span>.</span><span>toColorStateList</span><span>(</span><span>)</span><span>)</span>\n            <span>setTintMode</span><span>(</span>tintMode<span>)</span>\n        <span>}</span>\n\n<span>private</span> <span>fun</span> Int<span>.</span><span>toColorStateList</span><span>(</span><span>)</span> <span>=</span> ColorStateList<span>.</span><span>valueOf</span><span>(</span><span>this</span><span>)</span>\n\n<span>fun</span> <span>withDrawable</span><span>(</span><span>@DrawableRes</span> id<span>:</span> Int<span>,</span> <span>@ColorRes</span> tint<span>:</span> Int<span>?</span> <span>=</span> <span>null</span><span>,</span> tintMode<span>:</span> PorterDuff<span>.</span>Mode <span>=</span> SRC_IN<span>)</span> <span>=</span> <span>object</span> <span>:</span> TypeSafeMatcher<span>&lt;</span>View<span>></span><span>(</span><span>)</span> <span>{</span>\n    <span>override</span> <span>fun</span> <span>describeTo</span><span>(</span>description<span>:</span> Description<span>)</span> <span>{</span>\n        description<span>.</span><span>appendText</span><span>(</span><span>\"ImageView with drawable same as drawable with id <span>$id</span>\"</span><span>)</span>\n        tint<span>?</span><span>.</span><span>let</span> <span>{</span> description<span>.</span><span>appendText</span><span>(</span><span>\", tint color id: <span>$tint</span>, mode: <span>$tintMode</span>\"</span><span>)</span> <span>}</span>\n    <span>}</span>\n\n    <span>override</span> <span>fun</span> <span>matchesSafely</span><span>(</span>view<span>:</span> View<span>)</span><span>:</span> Boolean <span>{</span>\n        <span>val</span> context <span>=</span> view<span>.</span>context\n        <span>val</span> tintColor <span>=</span> tint<span>?</span><span>.</span><span>toColor</span><span>(</span>context<span>)</span>\n        <span>val</span> expectedBitmap <span>=</span> context<span>.</span><span>getDrawable</span><span>(</span>id<span>)</span><span>?</span><span>.</span><span>tinted</span><span>(</span>tintColor<span>,</span> tintMode<span>)</span><span>?</span><span>.</span><span>toBitmap</span><span>(</span><span>)</span>\n\n        <span>return</span> view <span>is</span> ImageView <span>&amp;&amp;</span> view<span>.</span>drawable<span>.</span><span>toBitmap</span><span>(</span><span>)</span><span>.</span><span>sameAs</span><span>(</span>expectedBitmap<span>)</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><h3 id=\"_5-2-vectordrawable-的坑\"> 5.2 VectorDrawable 的坑</h3>\n<p>从 5.0 之后， Android 支持矢量图，即 <code>VectorDrawable</code>，在 <code>ImageView</code> 中使用 <code>app:srcCompat</code> 进行显示。</p>\n<p>但是，虽然在普通的 apk 中可以正常显示矢量图，但是在运行仪器测试时仅仅这样是显示不了的，还需要在代码中使用 <code>setImageResource()</code> 才能在测试中显示出矢量图。</p>\n<p>目前来看这是 Android 测试框架的一个 Bug，如果不想改代码的话可以不进行这方面的测试，毕竟图能不能显示出来，用眼睛看看就行了。</p>\n<h3 id=\"_5-3-vectordrawable-和-tint-的坑\"> 5.3 VectorDrawable 和 tint 的坑</h3>\n<p>上面说到了 Drawable 需要 tint，如果我们的 <code>ImageView</code> 显示的是 <code>VectorDrawable</code>，那就要小心了，因为 <code>VectorDrawable</code> 可以在它自己的 xml 文件中进行着色：</p>\n<div><pre><code><span><span><span>&lt;</span>vector</span> <span><span>xmlns:</span>android</span><span><span>=</span><span>\"</span>http://schemas.android.com/apk/res/android<span>\"</span></span>\n  <span><span>android:</span>height</span><span><span>=</span><span>\"</span>152dp<span>\"</span></span>\n  <span><span>android:</span>tint</span><span><span>=</span><span>\"</span>?attr/colorControlNormal<span>\"</span></span>\n  <span><span>android:</span>viewportHeight</span><span><span>=</span><span>\"</span>152<span>\"</span></span>\n  <span><span>android:</span>viewportWidth</span><span><span>=</span><span>\"</span>149<span>\"</span></span>\n  <span><span>android:</span>width</span><span><span>=</span><span>\"</span>149dp<span>\"</span></span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>注意上面的 <strong><code>android:tint=&quot;?attr/colorControlNormal&quot;</code></strong>，这是在 <code>vector</code> 中定义的。</p>\n<p>如果你给这个 <code>tint</code> 设定的是一个 <code>&lt;selector&gt;</code>，那么就需要注意了：</p>\n<p>如果你的 <code>&lt;selector&gt;</code> 的第一个 <code>&lt;item&gt;</code> 不是默认颜色，而是 <code>state_enable:false</code> 之类的有状态的颜色，那么就需要在测试代码中获取 <code>R.attr.colorControlNormal</code> 并对 Drawable 重新进行着色，否则即使你没有对这个 Drawable 进行过任何修改，测试依旧会报错失败。</p>\n<p>如果你的 <code>&lt;selector&gt;</code> 的第一个 <code>&lt;item&gt;</code> 是默认的不带有状态限定的颜色，那么就不需要重新着色。</p>\n<p>鉴于默认的 <code>colorControlNormal</code> 是 <code>&lt;selector&gt;</code> 颜色，我建议在测试 Drawable 的时候都统一进行重新着色。</p>\n<p>而如何在运行时取到 <code>colorControlNormal</code> 的真正的颜色资源 ID，可以参照以下代码：</p>\n<div><pre><code><span>val</span> typedValue <span>=</span> <span>TypedValue</span><span>(</span><span>)</span>\nit<span>.</span>activity<span>?</span><span>.</span>theme<span>?</span><span>.</span><span>resolveAttribute</span><span>(</span>R<span>.</span>attr<span>.</span>colorControlNormal<span>,</span> typedValue<span>,</span> <span>true</span><span>)</span>\ntintColorRes <span>=</span> typedValue<span>.</span>resourceId\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>最后拿到的 <code>tintColorRes</code> 即为颜色资源 ID。</p>\n<p>关于其中具体原理，可以参照我的<a href=\"/Android/android-测试坑点详解（二）——-vectordrawable-和-tint-问题解析/\">下一篇文章</a>。</p>\n",
      "image": "https://wafer.li/images/android-espresso-坑点详解（一）/turn-off-animation.png",
      "date_published": "2021-07-15T11:52:03.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Android"
      ]
    },
    {
      "title": "AndroidX 测试坑点详解（二）—— VectorDrawable 和 tint 问题解析",
      "url": "https://wafer.li/blog-corners/tech/android/traps/android-%E6%B5%8B%E8%AF%95%E5%9D%91%E7%82%B9%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94-vectordrawable-%E5%92%8C-tint-%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90/",
      "id": "https://wafer.li/blog-corners/tech/android/traps/android-%E6%B5%8B%E8%AF%95%E5%9D%91%E7%82%B9%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94-vectordrawable-%E5%92%8C-tint-%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90/",
      "summary": "<p><a href=\"/blog-corners/tech/android/android-测试坑点详解（一）/\">上篇文章</a>我们说到如果你的 VectorDrawable 如果采用一个带 <code>&lt;selector&gt;</code> 的颜色进行着色，那么就需要在测试代码中对 Drawable 进行重新着色，而不是直接比较。</p>\n<p>本篇文章就来着重说说其中的原理。</p>\n",
      "content_html": "<p><a href=\"./../android-测试坑点详解（一）/\">上篇文章</a>我们说到如果你的 VectorDrawable 如果采用一个带 <code>&lt;selector&gt;</code> 的颜色进行着色，那么就需要在测试代码中对 Drawable 进行重新着色，而不是直接比较。</p>\n<p>本篇文章就来着重说说其中的原理。</p>\n\n<h2 id=\"_1-测试-drawable-的主要流程\"> 1. 测试 Drawable 的主要流程</h2>\n<p>首先，我们来看看整个测试程序经历的流程，自顶向下才能更好的把握是什么地方什么阶段出现了问题。</p>\n<p>运行 Drawable 的测试的过程大体如下：</p>\n<ol>\n<li><code>ImageView</code> 将 Drawable 在界面中展示</li>\n<li><code>TestRunner</code> 从 Context 中获取期望值</li>\n<li>将两者进行比较</li>\n</ol>\n<p>接下来，我们就分步来看具体流程，最后来定位到底是什么地方出现了问题。</p>\n<h2 id=\"_2-imageview-展示-drawable-的流程\"> 2. ImageView 展示 Drawable 的流程</h2>\n<p>在测试中，我们采用 <code>imageView.setImageResource()</code> 的方法来展示 Drawable，由于代码比较长，就不贴出全部代码了，仅仅对流程和某些关键语句和行进行介绍。</p>\n<p>首先，<code>ImageView</code> 会将原先的 Drawable 置为空，然后在 <code>resolveUri()</code> 方法中，会对我们传入的资源 ID 进行解析，然后通过 <code>Context</code> 获取这个 Drawable：</p>\n<div><pre><code>Drawable d <span>=</span> <span>null</span><span>;</span>\n<span>if</span> <span>(</span>mResource <span>!=</span> <span>0</span><span>)</span> <span>{</span>\n  <span>try</span> <span>{</span>\n    d <span>=</span> mContext<span>.</span><span>getDrawable</span><span>(</span>mResource<span>)</span><span>;</span>\n    <span>..</span><span>.</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>获取到 Drawable 之后，<code>ImageView</code> 就会调用 <code>updateDrawable()</code> 更新自身的 Drawable：</p>\n<div><pre><code><span>private</span> void <span>updateDrawable</span><span>(</span>Drawable d<span>)</span> <span>{</span>\n    <span>if</span> <span>(</span>d <span>!=</span> mRecycleableBitmapDrawable <span>&amp;&amp;</span> mRecycleableBitmapDrawable <span>!=</span> <span>null</span><span>)</span> <span>{</span>\n        mRecycleableBitmapDrawable<span>.</span><span>setBitmap</span><span>(</span><span>null</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    boolean sameDrawable <span>=</span> <span>false</span><span>;</span>\n\n    <span>if</span> <span>(</span>mDrawable <span>!=</span> <span>null</span><span>)</span> <span>{</span>\n       sameDrawable <span>=</span> mDrawable <span>==</span> d<span>;</span>\n       mDrawable<span>.</span><span>setCallback</span><span>(</span><span>null</span><span>)</span><span>;</span>\n       <span>unscheduleDrawable</span><span>(</span>mDrawable<span>)</span><span>;</span>\n       <span>if</span> <span>(</span><span>!</span>sCompatDrawableVisibilityDispatch <span>&amp;&amp;</span> <span>!</span>sameDrawable <span>&amp;&amp;</span> <span>isAttachedToWindow</span><span>(</span><span>)</span><span>)</span> <span>{</span>\n         mDrawable<span>.</span><span>setVisible</span><span>(</span><span>false</span><span>,</span> <span>false</span><span>)</span><span>;</span>\n       <span>}</span>\n     <span>}</span>\n     mDrawable <span>=</span> d<span>;</span>\n\n     <span>if</span> <span>(</span>d <span>!=</span> <span>null</span><span>)</span> <span>{</span>\n       d<span>.</span><span>setCallback</span><span>(</span><span>this</span><span>)</span><span>;</span>\n       d<span>.</span><span>setLayoutDirection</span><span>(</span><span>getLayoutDirection</span><span>(</span><span>)</span><span>)</span><span>;</span>\n       <span>if</span> <span>(</span>d<span>.</span><span>isStateful</span><span>(</span><span>)</span><span>)</span> <span>{</span>\n         d<span>.</span><span>setState</span><span>(</span><span>getDrawableState</span><span>(</span><span>)</span><span>)</span><span>;</span>\n       <span>}</span>\n       <span>..</span><span>.</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><p>其中，比较重要的是 <code>d.setState()</code>，正是它根据当前 <code>ImageView</code> 所处的状态（State）来对其 Drawable 进行着色的。</p>\n<p>那么，我们看到，实际上 <code>ImageView</code> 在展示 Drawable 的时候，实际上大体上分成了两个步骤：</p>\n<ol>\n<li>通过 <code>Context</code> 获取 Drawable 实例</li>\n<li>根据 <code>ImageView</code> 所处状态和相应属性对获取得到的 Drawable 做出相应改变</li>\n<li>展示</li>\n</ol>\n<p>所以问题是不是出现在 <code>Context</code> 获取 Drawable 的时候呢？我们来继续看看 Context 获取 Drawable 的过程。</p>\n<h2 id=\"_3-context-获取-drawable-的过程\"> 3. Context 获取 Drawable 的过程</h2>\n<p>所有的测试，实际上都是拿期望值和实际结果进行比较，而对于 Drawable 来说，期望值实际上就是我们本地存储的 Drawable，而获取这个期望值实际上还是通过 Context 来获取得到的。</p>\n<p>要想深入了解这个问题的成因，我们就要首先看看 Context 获取 Drawable 的过程。</p>\n<p>首先，<code>Context</code> 调用 <code>getDrawable()</code> 最终会调用到 <code>ResourceImpl</code> 的 <code>loadDrawable()</code> 方法，这个方法的流程大致如下：</p>\n<ol>\n<li>查找 Drawable 缓存</li>\n<li>若缓存命中，则直接返回缓存值</li>\n<li>若未命中，则创建 Drawable</li>\n<li>使用传入的 <code>theme</code> 对新创建的 Drawable 进行相关调整（如着色等）</li>\n<li>将 Drawable 写入缓存</li>\n<li>返回</li>\n</ol>\n<p>这个流程本身没什么问题，但是在经过 <code>applyTheme()</code> 方法之后，我们发现此时的 Drawable 出现了变化：</p>\n<p>在 <code>applyTheme()</code> 之前，Drawable 的 <code>mTintFilter</code> 和 <code>mVectorState</code> 中的 <code>mTint</code> 都是空的：</p>\n<p><img src=\"/images/android-测试坑点详解（二）——-vectordrawable-和-tint-问题解析/applytheme-之前.png\" alt=\"applyTheme 之前\" /></p>\n<p>而在经过 <code>applyTheme()</code> 之后，Drawable 的 <code>mTintFilter</code> 和 <code>mVectorState</code> 中的 <code>mTint</code> 都被赋上了值：</p>\n<p><img src=\"/images/android-测试坑点详解（二）——-vectordrawable-和-tint-问题解析/applytheme-之后.png\" alt=\"applyTheme 之后\" /></p>\n<p>其中更重要的一点就是这个 <code>mColor</code> 值和我们后面从 <code>ImageView</code> 的 Drawable 中得到的 <code>mColor</code> 并不一样：</p>\n<p><img src=\"/images/android-测试坑点详解（二）——-vectordrawable-和-tint-问题解析/imageview-drawable-中的-mcolor.png\" alt=\"ImageView Drawable 中的 mColor\" /></p>\n<p>进一步的分析可以看到，在 <code>mVectorState</code> 中的 <code>mTint</code> 实际上保留了两个 <code>mColor</code> 值，其中一个是 <code>Context</code> 获取的 Drawable 的 <code>mColor</code>，另一个则是在 <code>ImageView</code> 中获取到的 <code>mColor</code>。</p>\n<p>所以说，极有可能是在 <code>applyTheme()</code> 方法中出现了什么问题，导致其赋予 Drawable 一个错误的 <code>mTint</code> 从而导致 BUG 的出现。</p>\n<h2 id=\"_4-深入-applytheme-方法\"> 4. 深入 applyTheme 方法</h2>\n<p>在上面的分析中，我们知道，在 <code>applyTheme()</code> 方法中，系统会赋予 Drawable 一个着色，但是这个着色是有问题的，那么我们只要找到哪条代码会导致着色变化即可。</p>\n<p>经过不断的步进，我终于找到了对着色进行更改的方法——<code>updateLocalState()</code> 方法：</p>\n<div><pre><code><span>private</span> <span>void</span> <span>updateLocalState</span><span>(</span><span>Resources</span> res<span>)</span> <span>{</span>\n  <span>final</span> <span>int</span> density <span>=</span> <span>Drawable</span><span>.</span><span>resolveDensity</span><span>(</span>res<span>,</span> mVectorState<span>.</span>mDensity<span>)</span><span>;</span>\n  <span>if</span> <span>(</span>mTargetDensity <span>!=</span> density<span>)</span> <span>{</span>\n    mTargetDensity <span>=</span> density<span>;</span>\n    mDpiScaledDirty <span>=</span> <span>true</span><span>;</span>\n  <span>}</span>\n\n  mTintFilter <span>=</span> <span>updateTintFilter</span><span>(</span>mTintFilter<span>,</span> mVectorState<span>.</span>mTint<span>,</span> mVectorState<span>.</span>mTintMode<span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>我们可以看到，这个方法最后会调用 <code>updateTintFilter()</code> 使用 <code>mVectorState</code> 中的着色值对 Drawable 进行着色，而这个着色值正是我们在上面看到的那个具有两个 Int 的数组，包含了两种不同的颜色。</p>\n<p>深入进去，我们可以发现：</p>\n<div><pre><code><span>@Nullable</span> <span>PorterDuffColorFilter</span> <span>updateTintFilter</span><span>(</span><span>@Nullable</span> <span>PorterDuffColorFilter</span> tintFilter<span>,</span>\n        <span>@Nullable</span> <span>ColorStateList</span> tint<span>,</span> <span>@Nullable</span> <span>PorterDuff<span>.</span>Mode</span> tintMode<span>)</span> <span>{</span>\n    <span>if</span> <span>(</span>tint <span>==</span> <span>null</span> <span>||</span> tintMode <span>==</span> <span>null</span><span>)</span> <span>{</span>\n        <span>return</span> <span>null</span><span>;</span>\n    <span>}</span>\n\n    <span>final</span> <span>int</span> color <span>=</span> tint<span>.</span><span>getColorForState</span><span>(</span><span>getState</span><span>(</span><span>)</span><span>,</span> <span>Color</span><span>.</span>TRANSPARENT<span>)</span><span>;</span>\n    <span>if</span> <span>(</span>tintFilter <span>==</span> <span>null</span><span>)</span> <span>{</span>\n        <span>return</span> <span>new</span> <span>PorterDuffColorFilter</span><span>(</span>color<span>,</span> tintMode<span>)</span><span>;</span>\n    <span>}</span>\n\n    tintFilter<span>.</span><span>setColor</span><span>(</span>color<span>)</span><span>;</span>\n    tintFilter<span>.</span><span>setMode</span><span>(</span>tintMode<span>)</span><span>;</span>\n    <span>return</span> tintFilter<span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>实际上，这个方法是通过 Drawable 的 State 在 <code>mVectorState.mTint</code> 中获取对应的颜色，然后对 <code>mTintFilter</code> 进行赋值的。</p>\n<p>到这里，关键点就来了，由于我们是第一次通过 <code>Context</code> 获取 Drawable，此时，Drawable 还不具备状态，那么 <code>getState()</code> 的结果实际上是一个 <strong>空数组！</strong></p>\n<p>我们紧接着看 <code>getColorForState()</code> 方法：</p>\n<div><pre><code><span>public</span> <span>int</span> <span>getColorForState</span><span>(</span><span>@Nullable</span> <span>int</span><span>[</span><span>]</span> stateSet<span>,</span> <span>int</span> defaultColor<span>)</span> <span>{</span>\n  <span>final</span> <span>int</span> setLength <span>=</span> mStateSpecs<span>.</span>length<span>;</span>\n  <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> setLength<span>;</span> i<span>++</span><span>)</span> <span>{</span>\n    <span>final</span> <span>int</span><span>[</span><span>]</span> stateSpec <span>=</span> mStateSpecs<span>[</span>i<span>]</span><span>;</span>\n    <span>if</span> <span>(</span><span>StateSet</span><span>.</span><span>stateSetMatches</span><span>(</span>stateSpec<span>,</span> stateSet<span>)</span><span>)</span> <span>{</span>\n      <span>return</span> mColors<span>[</span>i<span>]</span><span>;</span>\n    <span>}</span>\n  <span>}</span>\n  <span>return</span> defaultColor<span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>经过调试结果，我们可以看到：</p>\n<p><img src=\"/images/android-测试坑点详解（二）——-vectordrawable-和-tint-问题解析/getcolorstate-调试结果.png\" alt=\"getColorState 调试结果\" /></p>\n<p>这里面的 <code>mColor</code> 正是 <code>mVectorState.mTint</code> 的两个值，并且，第一个就是 Context Drawable 的 <code>mTint</code> 值。</p>\n<p>那么也就说明：<code>stateSetMatches()</code> 方法第一次就通过了。</p>\n<p>所以，问题应该就是出在 <code>stateSetMatches()</code> 方法中。</p>\n<h2 id=\"_5-statesetmatches-方法流程\"> 5. stateSetMatches 方法流程</h2>\n<p>这里先上一个调试结果：</p>\n<p><img src=\"/images/android-测试坑点详解（二）——-vectordrawable-和-tint-问题解析/statesetmatches调试结果.png\" alt=\"stateSetMatches调试结果\" /></p>\n<p>从调试中我们可以看到，<code>stateSpec</code> 有一个负数值，而 <code>stateSet</code> 是空的。</p>\n<p>下面是这个方法的部分源码：</p>\n<div><pre><code><span>public</span> <span>static</span> <span>boolean</span> <span>stateSetMatches</span><span>(</span><span>int</span><span>[</span><span>]</span> stateSpec<span>,</span> <span>int</span><span>[</span><span>]</span> stateSet<span>)</span> <span>{</span>\n     <span>if</span> <span>(</span>stateSet <span>==</span> <span>null</span><span>)</span> <span>{</span>\n         <span>return</span> <span>(</span>stateSpec <span>==</span> <span>null</span> <span>||</span> <span>isWildCard</span><span>(</span>stateSpec<span>)</span><span>)</span><span>;</span>\n     <span>}</span>\n     <span>int</span> stateSpecSize <span>=</span> stateSpec<span>.</span>length<span>;</span>\n     <span>int</span> stateSetSize <span>=</span> stateSet<span>.</span>length<span>;</span>\n     <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> stateSpecSize<span>;</span> i<span>++</span><span>)</span> <span>{</span>\n         <span>int</span> stateSpecState <span>=</span> stateSpec<span>[</span>i<span>]</span><span>;</span>\n         <span>if</span> <span>(</span>stateSpecState <span>==</span> <span>0</span><span>)</span> <span>{</span>\n             <span>// We've reached the end of the cases to match against.</span>\n             <span>return</span> <span>true</span><span>;</span>\n         <span>}</span>\n         <span>final</span> <span>boolean</span> mustMatch<span>;</span>\n         <span>if</span> <span>(</span>stateSpecState <span>></span> <span>0</span><span>)</span> <span>{</span>\n             mustMatch <span>=</span> <span>true</span><span>;</span>\n         <span>}</span> <span>else</span> <span>{</span>\n             <span>// We use negative values to indicate must-NOT-match states.</span>\n             mustMatch <span>=</span> <span>false</span><span>;</span>\n             stateSpecState <span>=</span> <span>-</span>stateSpecState<span>;</span>\n         <span>}</span>\n         <span>boolean</span> found <span>=</span> <span>false</span><span>;</span>\n         <span>for</span> <span>(</span><span>int</span> j <span>=</span> <span>0</span><span>;</span> j <span>&lt;</span> stateSetSize<span>;</span> j<span>++</span><span>)</span> <span>{</span>\n           <span>.</span><span>.</span><span>.</span>\n         <span>}</span>\n         <span>if</span> <span>(</span>mustMatch <span>&amp;&amp;</span> <span>!</span>found<span>)</span> <span>{</span>\n             <span>// We've reached the end of states to match and we didn't</span>\n             <span>// find a must-match state.</span>\n             <span>return</span> <span>false</span><span>;</span>\n         <span>}</span>\n     <span>}</span>\n     <span>return</span> <span>true</span><span>;</span>\n <span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br></div></div><p>从中我们可以看到，实际上这个函数就是对比状态是否相等，由于我们的 <code>stateSet</code> 是空数组，所以就隐去了其相关的 <code>for</code> 循环部分，因为这个循环实际上是会被跳过的。</p>\n<p>从外部的 <code>for</code> 循环中来看，我们发现由于 <code>stateSpecState</code> 是一个负数，所以 <code>mustMatch</code> 为 <code>false</code>，而由于我们又没有找到相应的符合规范的状态，因此 <code>found</code> 也是 <code>false</code>。</p>\n<p>此时，外层的第一次也是唯一一次的 <code>for</code> 循环就结束了，那么循环跳出，<strong>最后返回 true！</strong></p>\n<p><img src=\"/images/android-测试坑点详解（二）——-vectordrawable-和-tint-问题解析/statesetmatches-返回-true.png\" alt=\"stateSetMatches 返回 true\" /></p>\n<p>也就是说，当 Drawable 没有状态时，系统会默认其 <strong>符合任何状态！</strong></p>\n<p>于是，<code>mColors</code> 的第一个颜色值会被返回，但实际上它并不是 <code>ColorStateList</code> 的默认值：</p>\n<p><img src=\"/images/android-测试坑点详解（二）——-vectordrawable-和-tint-问题解析/第一个-mcolor-并不是默认值.png\" alt=\"第一个 mColor 并不是默认值\" /></p>\n<p>而由于 <code>ImageView</code> 会在拿到 Drawable 之后通过其状态来更新着色，因此就会导致着色的不相同。</p>\n<h2 id=\"_6-案件重现\"> 6. 案件重现</h2>\n<p>到这里，问题的成因就已经水落石出了，侦探推理完成后都会进行一下案件重演，那么在这里也重新回顾一下整个流程和问题的原因：</p>\n<ol>\n<li>ImageView 展示 Drawable 调用了 <code>Context</code></li>\n<li><code>Context</code> 第一次创建 Drawable 并不带有状态</li>\n<li>空状态导致系统着色判断错误</li>\n<li><code>Context</code> 随即将错误的着色 Drawable 进行缓存</li>\n<li><code>ImageView</code> 获取到 Drawable 之后根据其状态给予了正确的着色</li>\n<li>测试程序再次通过 <code>Context</code> 获取 Drawable 由于缓存命中，返回了错误着色的 Drawable</li>\n<li>由于测试程序获取的期望值和 <code>ImageView</code> 的真实值不相同，因此测试报错不通过</li>\n</ol>\n<p>其中，我们看到，问题的关键在于系统在 Drawable 初次创建完成时错误判断了其着色颜色，从而返回颜色列表的第一个值而忽略其真正的默认值。</p>\n<p>由于我们再次通过 <code>Context</code> 取 Drawable 会因为缓存而拿到错误着色的 Drawable，所以我们需要对拿到的 Drawable 根据运行环境进行重新着色。</p>\n<p>但是如果你的 <code>&lt;selector&gt;</code> 的第一个 <code>&lt;item&gt;</code> 就是默认的话，那么就没有这个问题，不需要重新着色了。</p>\n<h2 id=\"_7-附-默认的-colorcontrolnormal-值\"> 7. 附：默认的 colorControlNormal 值</h2>\n<p>在调试之余我还翻了一下默认的 <code>colorControlNormal</code> 值，结果是根据你设定的根主题的不同，可能会有下面的两个值：</p>\n<ol>\n<li><code>?android:attr/textColorPrimary</code></li>\n<li><code>?android:attr/textColorSecondary</code></li>\n</ol>\n<p>但无一例外它们都是 <code>&lt;selector&gt;</code>，而且有状态的颜色值处在第一个。</p>\n<div><pre><code><span>&lt;!-- textColorPrimary --></span>\n<span><span><span>&lt;</span>selector</span> <span><span>xmlns:</span>android</span><span><span>=</span><span>\"</span>http://schemas.android.com/apk/res/android<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>item</span> <span><span>android:</span>state_enabled</span><span><span>=</span><span>\"</span>false<span>\"</span></span>\n        <span><span>android:</span>alpha</span><span><span>=</span><span>\"</span>?attr/disabledAlpha<span>\"</span></span>\n        <span><span>android:</span>color</span><span><span>=</span><span>\"</span>?attr/colorForeground<span>\"</span></span><span>/></span></span>\n    <span><span><span>&lt;</span>item</span> <span><span>android:</span>alpha</span><span><span>=</span><span>\"</span>?attr/primaryContentAlpha<span>\"</span></span>\n        <span><span>android:</span>color</span><span><span>=</span><span>\"</span>?attr/colorForeground<span>\"</span></span><span>/></span></span>\n<span><span><span>&lt;/</span>selector</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><div><pre><code><span>&lt;!-- textColorSecondary --></span>\n<span><span><span>&lt;</span>selector</span> <span><span>xmlns:</span>android</span><span><span>=</span><span>\"</span>http://schemas.android.com/apk/res/android<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>item</span> <span><span>android:</span>state_enabled</span><span><span>=</span><span>\"</span>false<span>\"</span></span>\n        <span><span>android:</span>alpha</span><span><span>=</span><span>\"</span>?attr/disabledAlpha<span>\"</span></span>\n        <span><span>android:</span>color</span><span><span>=</span><span>\"</span>?attr/colorForeground<span>\"</span></span><span>/></span></span>\n    <span><span><span>&lt;</span>item</span> <span><span>android:</span>alpha</span><span><span>=</span><span>\"</span>?attr/secondaryContentAlpha<span>\"</span></span>\n        <span><span>android:</span>color</span><span><span>=</span><span>\"</span>?attr/colorForeground<span>\"</span></span><span>/></span></span>\n<span><span><span>&lt;/</span>selector</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div>",
      "image": "https://wafer.li/images/android-测试坑点详解（二）——-vectordrawable-和-tint-问题解析/applytheme-之前.png",
      "date_published": "2021-07-15T11:52:03.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Android"
      ]
    },
    {
      "title": "Android 语言和本地化",
      "url": "https://wafer.li/blog-corners/tech/android/traps/android-%E8%AF%AD%E8%A8%80%E5%92%8C%E6%9C%AC%E5%9C%B0%E5%8C%96/",
      "id": "https://wafer.li/blog-corners/tech/android/traps/android-%E8%AF%AD%E8%A8%80%E5%92%8C%E6%9C%AC%E5%9C%B0%E5%8C%96/",
      "summary": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>虽然 Android 已经内置了 <code>string.xml</code> 来进行本地化和国际化的功能；</p>\n<p>但是，由于在 7.0 以前，<code>string.xml</code> 的 fallback 存在较大问题；</p>\n<p>所以，即使拥有了一个 i18n 的机制，也还是需要谨慎规划 Locale 的 fallback 问题。</p>\n<p>本文就来提出一些最佳实践。</p>\n",
      "content_html": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>虽然 Android 已经内置了 <code>string.xml</code> 来进行本地化和国际化的功能；</p>\n<p>但是，由于在 7.0 以前，<code>string.xml</code> 的 fallback 存在较大问题；</p>\n<p>所以，即使拥有了一个 i18n 的机制，也还是需要谨慎规划 Locale 的 fallback 问题。</p>\n<p>本文就来提出一些最佳实践。</p>\n\n<h2 id=\"_2-默认-string-xml-设置为英语\"> 2. 默认 <code>string.xml</code> 设置为英语</h2>\n<p>英语作为世界使用范围最广的语言，是名副其实的通用语。</p>\n<p>当应用没有为地区提供本地化内容时，系统就会自动 fallback 到默认的 <code>string.xml</code>；</p>\n<p>只要有些文化的人就能看懂大部分的英语；</p>\n<p>所以，<code>string.xml</code> 设置为英语是最为妥当的。</p>\n<h2 id=\"_3-地区语言-默认覆盖范围最广的语种\"> 3. 地区语言-默认覆盖范围最广的语种</h2>\n<p>对于地区语言，则应该使用覆盖范围最广的语种作为此 Language 的默认本地化内容。</p>\n<p>例如，对于中文地区(zh)，香港、澳门、台湾采用繁体中文，中国和新加坡采用简体中文；</p>\n<p>那么，就应该采用覆盖范围最广的 <strong>繁体中文</strong> 作为地区默认语言；</p>\n<p>而 <strong>单独</strong> 给 中国和新加坡 设置简体中文内容。</p>\n<p>整体设置如下：</p>\n<div><pre><code>res/value-zh: 繁体中文\nres/value-zh-rCN: 简体中文\nres/value-zh-rSG: 简体中文\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>原因自然是 Android 的 Buggy 语言 fallback 机制；</p>\n<p>在 7.0 以前，如果用户语言区域和内置的本地化内容匹配失败；</p>\n<p>那么就会直接 fallback 到 <strong>默认配置</strong>(<code>/res/value/string.xml</code>)；</p>\n<p>如果我们上面只提供 <code>zh-rCN</code> 的话，那么港澳台地区的同胞就只能看英语界面了。</p>\n<blockquote>\n<p>7.0 以后，Android 修复了这一问题；\nAPI 24 之后可以匹配到和语言最为接近的本地化内容；\n例如上面的例子，在没有繁体的应用，在 7.0 上，港澳台地区就可以看到简体中文。</p>\n<p>但是由于 7.0 目前使用人数过于低下，还是得进行上面所讲的 workaround</p>\n</blockquote>\n<h2 id=\"_4-android-studio-设置语言地区\"> 4. Android Studio 设置语言地区</h2>\n<p>虽然目前 Android Studio 中内置了 Translation Editor；</p>\n<p>但是，目前这个好用的工具还不能实现对语言地区(region) 的设定。</p>\n<p>例如，对于中文，有简体中文(zh-CN) 和 繁体中文(zh-{HK, TW})；</p>\n<p>但是， Translation Editor 目前并不能指定语言的 Region；</p>\n<p>只能选择默认的 <code>value-zh</code>。</p>\n<p>对于这种情况，我们不得不暂时抛弃这个好用的工具；</p>\n<p>自行在 Project Window (就是最左边的窗口):</p>\n<p>New -&gt; Value Resource -&gt; Choose Locale -&gt; Select Region；</p>\n<p>例如选择 <code>zh</code>，然后地区选择 <code>CN</code>，创建 <code>strings.xml</code>；</p>\n<p>此时，Android Studio 就创建了 <code>value-zh-rCN/strings.xml</code>；</p>\n<p>然后，我们把默认的 <code>string.xml</code> 复制到 <code>string.xml(zh-rCN)</code>  中；</p>\n<p>这样，我们就能够在 Translation Editor 中编辑简体中文了。</p>\n<h2 id=\"_5-获取当前使用的语言\"> 5. 获取当前使用的语言</h2>\n<p>一般来说，这个需求可以通过直接取 <code>Preference</code> 的值来实现；</p>\n<p>但是，对于应用第一次安装时，则不能通过直接取 <code>Preference</code>；</p>\n<p>因为应用可能会在多个国家和地区使用，在提供了本地化资源的情况下，Android 会自动匹配到这些本地化资源；</p>\n<p>那么，我们如何能确保设置里面的语言和应用第一次启动时默认显示的语言是一致的呢？</p>\n<p>首先，不能通过 <code>Configuration</code> 取到的 <code>Locale</code>  来实现；</p>\n<blockquote>\n<p>应用可以通过 <code>Resource.getConfiguration()</code> 来获取到 <code>Configuration</code>；\n在这里就可以查看和修改应用的各项设置，包括 <code>Locale</code></p>\n</blockquote>\n<p>原因有两个：</p>\n<ol>\n<li>\n<p>不适用于多地区，少语言的情况</p>\n<blockquote>\n<p>例如大陆和新加坡使用简体中文，港澳台使用繁体中文；\n使用 <code>getDisplayLanguageTag()</code> 则会得到 『中文（香港）』、『中文（台湾）』之类的内容；\n但是，我们只需要提供 <strong>两门语言选项</strong> 就足够了</p>\n</blockquote>\n</li>\n<li>\n<p><code>getDisplayLanguageTag()</code> 在 API 24 (6.0) 以上才被引入，不能兼容老版本</p>\n</li>\n</ol>\n<p>真正的做法，是在每个本地化资源 <code>strings.xml</code> 里面，写上该资源的 <code>locale_code</code>，如：</p>\n<div><pre><code><span>&lt;!-- filename: value-zh-rCN/strings.xml --></span>\n<span><span><span>&lt;</span>resource</span><span>></span></span>\n    <span><span><span>&lt;</span>string</span> <span>name</span><span><span>=</span><span>\"</span>locale_code<span>\"</span></span><span>></span></span>zh-CN<span><span><span>&lt;/</span>string</span><span>></span></span>\n\n    <span>&lt;!-- 剩下的资源 --></span>\n<span><span><span>&lt;/</span>resource</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>通过利用 Android 自身的适配机制，获取到 <strong>真正显示的</strong> 语言类型。</p>\n<div><pre><code><span>String</span> localeCode <span>=</span> <span>getString</span><span>(</span><span>R</span><span>.</span>string<span>.</span>locale_code<span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>也就是说，<code>locale_code</code> 实际上就 <strong>对应了</strong> 语言类型；</p>\n<p>这样，我们只要在 <code>zh-HK</code> 和 <code>zh-TW</code> 都写入同一个 <code>locale-code</code>；</p>\n<p>然后通过 <code>locale-code</code> 来进行设置页面的语言类型显示；</p>\n<p>这样就实现了显示语言和设置中的语言的同步。</p>\n",
      "date_published": "2017-03-16T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Android"
      ]
    },
    {
      "title": "Android 高德地图轨迹回放",
      "url": "https://wafer.li/blog-corners/tech/android/traps/android-%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BE%E8%BD%A8%E8%BF%B9%E5%9B%9E%E6%94%BE/",
      "id": "https://wafer.li/blog-corners/tech/android/traps/android-%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BE%E8%BD%A8%E8%BF%B9%E5%9B%9E%E6%94%BE/",
      "summary": "<p>最近公司要求实现一个轨迹回放功能，想着 JS 都有 demo 的功能，Android 实现起来不还是小菜一碟？</p>\n<p>结果显然是我太拿衣服了</p>\n",
      "content_html": "<p>最近公司要求实现一个轨迹回放功能，想着 JS 都有 demo 的功能，Android 实现起来不还是小菜一碟？</p>\n<p>结果显然是我太拿衣服了</p>\n\n<h2 id=\"_0-太长不看\"> 0. 太长不看</h2>\n<p>全篇都采用高德 API 实现，基于 <a href=\"https://bintray.com/bintray/jcenter/com.amap.api%3A3dmap/6.9.2\" target=\"_blank\" rel=\"noopener noreferrer\"><code>3dmap 6.9.2</code></a> 包</p>\n<p>使用 <code>MovingPointOverlay</code> 实现点的平滑移动</p>\n<p>使用 <code>AMap.setCustomRenderer</code> 获取每帧回调，绘制走过的线路</p>\n<h2 id=\"_1-需求分析\"> 1. 需求分析</h2>\n<p>轨迹回放的功能在高德的 <a href=\"https://lbs.amap.com/api/javascript-api/example/marker/replaying-historical-running-data/?sug_index=1\" target=\"_blank\" rel=\"noopener noreferrer\">JS Demo</a> 上有，具体来说就是点按照既定路线去移动，同时绘制其走过的路线。</p>\n<p>那么我们可以将功能拆解为移动点和绘制线路</p>\n<p>本来我想着这种常见的功能在网上随便搜搜就能找到的，然而显然是我太 Naive 了。</p>\n<p>搜到的唯二相关的内容，其中一个排版很差，而且估计是公司内部代码，没有给出 demo，第二个则是硬怼一个自定义 View，但是地图肯定是要移动放大之类的，自定义 View 也需要做手势控制，实现难度相对较大。</p>\n<p>所以最好还是在高德内部框架上实现这个需求。</p>\n<h2 id=\"_2-api-调研\"> 2. API 调研</h2>\n<p>经过一番查找之后，我找到了 <code>SmoothMoveMarker</code> 可以实现点的平滑移动功能，然而：</p>\n<p><img src=\"/images/android-高德地图轨迹回放/smoothmovemarker-deprecated.png\" alt=\"SmoothMoveMarker Deprecated\" /></p>\n<p>这里不得不吐槽一下高德的混淆策略，它不仅混淆了代码，同时还把文档混淆了，明明各部分文档都是公开的，将其保留在源代码里面也不会增大多少空间，然而这样全部删掉，导致我不得不切一个网页去看它的 API doc，开发效率急剧下降</p>\n<p>在查看了高德地图的 API doc 之后，发现这个类是被 <code>MovingPointOverlay</code> 替代了，也就是说我们需要采用 <code>MovingPointOverlay</code>  实现点的平滑移动</p>\n<h2 id=\"_3-获取点位置回调\"> 3. 获取点位置回调</h2>\n<p>在 <code>MovingPointOverlay</code> 的 <a href=\"\">API doc</a> 中，有一个方法叫 <code>setMovingListener</code>，当时的我想当然的认为这个就是点移动时的回调设置方法，因此把画线的逻辑放到了里面去。</p>\n<p>原先我将动画的总时间设置为 10 秒，此时点跑得比较快，乍一看没什么问题；\n但是当我将动画的时间拉长，点跑得很慢的时候，问题就出现了—— <code>setMovingListener</code> <strong>并不是每帧回调！</strong></p>\n<p>也就是说，只有当 Marker 跑到下一个路径点的时候，才能绘制上经过的路线！</p>\n<p>这显然会导致线路绘制不平滑，达不到需求的要求。</p>\n<p>那怎么办呢？这时候我就进入了一段瞎糊弄的时间，尝试着通过自行实现动画效果来完成需求，然而无论是经纬度计算、屏幕像素计算都存在误差，不太可能在短时间能将需求实现。</p>\n<p>正当我想着『万策尽きた！』，无聊浏览高德地图 API doc 的时候，突然发现 <code>AMap</code> 有个 <code>runOnDrawFrame()</code> 方法，是用来触发高德地图的重绘的；</p>\n<p>既然有这个方法，那就一定有绘制的回调方法！功夫不负有心人，在往下看了几行之后，我终于发现了这个重要的方法 <code>setCustomRenderer()</code>，而且两者意外的离的很近：</p>\n<p><img src=\"/images/android-高德地图轨迹回放/runondrawframe-and-setcustomrenderer.png\" alt=\"runOnDrawFrame And setCustomRenderer\" /></p>\n<p>这个方法接受一个 <code>CustomRenderer</code> 参数，那么什么是 <code>CustomRenderer</code> 呢？</p>\n<p><img src=\"/images/android-高德地图轨迹回放/customrenderer.png\" alt=\"CustomRenderer\" /></p>\n<p>从这里看，它有一个 <code>onDrawFrame()</code>，正是绘制每一帧的回调接口，那么我们只要将画线逻辑放到里面去就可以了。</p>\n<p>当然，我们也不能抛弃 <code>setMovingListener</code>，因为我们需要它来判断是否已经到达终点。</p>\n<h2 id=\"_4-实现逻辑\"> 4. 实现逻辑</h2>\n<ol>\n<li>使用 <code>MovingPointOverlay</code> 实现点的平滑移动</li>\n<li>使用 <code>AMap.setCustomRenderer</code> 获取每帧回调，绘制经过的线路</li>\n<li>使用 <code>MovingPointOverlay.setMovingListener</code> 判断是否已经到达终点，如果到达终点，则清除经过线路的点</li>\n</ol>\n<h2 id=\"_5-坑点\"> 5. 坑点</h2>\n<p>无论是 <code>setCustomRenderer</code> 还是 <code>setMovingListener</code>，它们的回调都是在 OPEN GL 线程回调，而<strong>不是在主线程回调</strong></p>\n<p>因此，如果需要在动画完毕之后更改 UI，就必须使用 <code>runOnUiThread</code>，否则无论你怎么在里面更改 UI，都不会有任何效果</p>\n<h2 id=\"_6-demo\"> 6. Demo</h2>\n<p><a href=\"https://github.com/wafer-li/AMapReplayDemo\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/wafer-li/AMapReplayDemo</a></p>\n",
      "image": "https://wafer.li/images/android-高德地图轨迹回放/smoothmovemarker-deprecated.png",
      "date_published": "2021-07-15T11:52:03.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Android"
      ]
    },
    {
      "title": "Comparison method violates its general contract! 崩溃分析",
      "url": "https://wafer.li/blog-corners/tech/android/traps/comparison-method-violates-its-general-contract-%E5%B4%A9%E6%BA%83%E5%88%86%E6%9E%90/",
      "id": "https://wafer.li/blog-corners/tech/android/traps/comparison-method-violates-its-general-contract-%E5%B4%A9%E6%BA%83%E5%88%86%E6%9E%90/",
      "summary": "<p>最近，公司产品中经常发现有用户报告各种列表突然不见的问题，后来发现是子线程报  <code>IllegalStateException</code>，其中的 <code>message</code> 就是我们的标题。</p>\n<p>这个问题还得从 JDK 1.7 开始说起。</p>\n",
      "content_html": "<p>最近，公司产品中经常发现有用户报告各种列表突然不见的问题，后来发现是子线程报  <code>IllegalStateException</code>，其中的 <code>message</code> 就是我们的标题。</p>\n<p>这个问题还得从 JDK 1.7 开始说起。</p>\n\n<h2 id=\"_1-timsort\"> 1. TimSort</h2>\n<p>JDK 1.7 之后，<code>Collections.sort</code> 的内部实现从 <strong>归并排序</strong> 修改成了 <strong>Tim排序</strong>；</p>\n<p>TimSort 简单的来说，就是一个优化的归并排序，它结合了插入排序和归并排序，使得每次算法在归并的时候，避免归并数量相差过大的数组片段（我们称之为 <code>run</code>）以提高性能。</p>\n<p>首先，为了找到或者构造出这个 <code>run</code>，我们需要找到一个 <strong>升序</strong> 或者 <strong>严格递减</strong> 的序列；</p>\n<p>而在归并过程中，为了提高归并效率，算法提出了一个 <strong>Galloping Mode</strong>：</p>\n<p>首先，基于我们寻找到的 <code>run</code> 都是有序的，那么我们就可以尝试将一个 <code>run</code> 中的元素插入到另一个 <code>run</code> 中，如果找到了该元素，那么在另一个 <code>run</code> 中，该元素之前的元素都满足我们的排序要求。</p>\n<p>例如，如果要将 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.07847em;\">X</span></span></span></span> 和 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.22222em;\">Y</span></span></span></span> 两个 <code>run</code> 进行归并：</p>\n<blockquote>\n<p>其中的 <code>temporary</code> 是一个临时存储数组，它是通过较短的那个 <code>run</code> 复制得到的\n这里的 <code>temporary</code> 实际上就是 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.07847em;\">X</span></span></span></span></p>\n</blockquote>\n<p><img src=\"/images/尝试将x-0-插入到y中.png\" alt=\"尝试将X[0]插入到Y中\" /></p>\n<p>我们会在 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.22222em;\">Y</span></span></span></span> 中，尝试将 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.22222em;\">Y</span><span>[</span><span>0</span><span>]</span></span></span></span> 插入到 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.07847em;\">X</span></span></span></span> 中，那么在 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.22222em;\">Y</span><span>[</span><span>0</span><span>]</span></span></span></span> 的插入位置之前的 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span>x</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>∈</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.07847em;\">X</span></span></span></span> 都满足 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span>x</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>≤</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.22222em;\">Y</span><span>[</span><span>0</span><span>]</span></span></span></span>;</p>\n<p>同时，在寻找这个插入位置时，并不是一个一个的寻找，而是间隔寻找，寻找索引为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span>2</span><span style=\"margin-right:0.03148em;\">k</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.64444em;vertical-align:0em;\"></span><span>1</span></span></span></span> 的元素，这样比较次数就是 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span>lo<span style=\"margin-right:0.01389em;\">g</span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.07847em;\">X</span></span></span></span>，减少比较次数，有时候能比二分查找更快。</p>\n<p>经过这样的查找之后，我们寻找到 <code>4</code> 这个元素，将其插入结果中；</p>\n<p>随后，我们反转查找目标，在 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.07847em;\">X</span></span></span></span> 中尝试将 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.07847em;\">X</span><span>[</span><span>0</span><span>]</span></span></span></span> 插入到 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.22222em;\">Y</span></span></span></span> 中：</p>\n<p><img src=\"/images/将-x-0-插入到-y-中.png\" alt=\"将X\\[0\\]插入到Y中\" /></p>\n<p>随后又反转查找目标，不断进行，直到当次归并完成为止。</p>\n<h2 id=\"_2-出现问题的原因\"> 2. 出现问题的原因</h2>\n<p>那么 TimSort 和这个崩溃有什么关系呢？</p>\n<p>我们看到，在这个 Galloping 的过程中，我们需要将 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.07847em;\">X</span></span></span></span> 中的元素和 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.22222em;\">Y</span></span></span></span> 中进行比较，又要拿 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.22222em;\">Y</span></span></span></span> 中的元素和 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.07847em;\">X</span></span></span></span> 中的元素进行比较；</p>\n<p>因此，对于 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.07847em;\">X</span></span></span></span> 和 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.22222em;\">Y</span></span></span></span> 中的 <code>Comparator</code> 的要求就比较严格，它需要满足以下三条 <code>Comparator</code> 的合约：</p>\n<div><pre><code>1. compare(a, b) = -compare(b, a) （自反性）\n2. compare(a, b) &gt; 0 &amp;&amp; compare(b, c) &gt; 0 then compare(a, c) &gt; 0 （传递性）\n3. if compare(a, b) == 0 then compare(a, x) == compare(b, x)，其中 x 为任意值\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>如果 <code>Comparator</code> 不满足上面的合约，就会导致这个算法在归并的时候，明明还没归并完，但是某一个 <code>run</code> 已经耗尽了，这说明这两个 <code>run</code> 不是均衡的，不符合这个算法的初衷，因此它就会报错。</p>\n<p>所以，在升级到 JDK 1.7 之后，需要着重注意 <code>Comparator</code> 的设计，下面会列出几种造成 <code>Comparator</code> 不符合合约的典型情况。</p>\n<h2 id=\"_3-造成崩溃的典型情况\"> 3. 造成崩溃的典型情况</h2>\n<h3 id=\"_3-1-没有考虑相等的情况\"> 3.1 没有考虑相等的情况</h3>\n<p>特别是使用 <code>?:</code> 三目运算符计算出的 compare 结果，尤其会造成这种情况，例如:</p>\n<div><pre><code>a &lt; b ? 1 : -1\n</code></pre>\n<div><span>1</span><br></div></div><p>在这里，如果 <code>a == b</code>，那就会出现 <code>compare(a, b) = 1</code> 而且 <code>compare(b, a) == 1</code>，违反自反性。</p>\n<p>解决办法：\n一定要遍历 <code>a</code> 和 <code>b</code> 可能的比较关系的三种情况。</p>\n<h3 id=\"_3-2-使用四则计算、强制转换\"> 3.2 使用四则计算、强制转换</h3>\n<p>这种 <code>Comparator</code> 很多书上都会这么写：</p>\n<div><pre><code>return o1 - o2\n</code></pre>\n<div><span>1</span><br></div></div><p>但是这个写法是不安全的，它会存在 <strong>溢出问题</strong>，例如 <code>Int.MAX_VAL</code> 和 <code>-1</code>，我们知道，<code>Int.MAX_VAL</code> 是一定大于 <code>-1</code> 的，但是如果使用这种计算方式，那么就会有：</p>\n<div><pre><code>compare(Int.MAX_VAL, -1) = Int.MAX_VAL - (-1) = -2147483648 &lt; 0\n\ncompare(-1, Int.MAX_VAL) = -1 - Int.MAX_VAL = -2147483648 &lt; 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>违反自反性。</p>\n<p>同理，如果将一个 <code>Long</code> 值强制转换到 <code>Int</code> 值也会出现这样的问题，因为强制转换的过程中丢失了精度，会导致溢出问题。</p>\n<p>解决办法：\n对于数值型的比较问题，我们可以将这个工作委托给对应的类进行，例如 <code>Integer</code> 就有一个 <code>compare()</code> 方法用于比较两个 <code>int</code> 值。</p>\n<h3 id=\"_3-3-线程安全问题\"> 3.3 线程安全问题</h3>\n<p>当然，在比较的过程中，我们还要注意线程安全问题，如果线程不安全，那很可能在归并过程中，元素的值被改动了，因此就会导致比较的结果不正确。</p>\n<p>解决办法：\n对于线程安全，可以用传统的解决线程安全的办法进行解决，也可以让所有的元素都是 <strong>不变量</strong>，如果一个量永远都不会变，那么它无论多少个线程进行操作，都是安全的。</p>\n<h2 id=\"_4-系统兼容性\"> 4. 系统兼容性</h2>\n<p>这里要特别注意的是，如果上述的解决办法难以实施，也可以通过参数配置使用原先的归并排序，归并排序不要求两个 <code>run</code> 是均衡的，因此就不会出现这个崩溃问题；</p>\n<p>但是，只有 JVM 系统才能使用这个 workaround，如果是 Android，它内置的源码就已经去除掉了原先的归并排序，只能迎难而上处理这个问题。</p>\n<h2 id=\"_5-参考资料\"> 5. 参考资料</h2>\n<p><a href=\"https://medium.com/@rscheiwe\" target=\"_blank\" rel=\"noopener noreferrer\">Richard Scheiwe</a>——<a href=\"https://medium.com/@rscheiwe/the-case-for-timsort-349d5ce1e414\" target=\"_blank\" rel=\"noopener noreferrer\">The Case for Timsort\n</a></p>\n",
      "image": "https://wafer.li/images/尝试将x-0-插入到y中.png",
      "date_published": "2021-07-15T11:52:03.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": []
    },
    {
      "title": "ConnectedDevice: No Test Found 调试过程",
      "url": "https://wafer.li/blog-corners/tech/android/traps/connecteddevice-no-test-found-%E8%B0%83%E8%AF%95%E8%BF%87%E7%A8%8B/",
      "id": "https://wafer.li/blog-corners/tech/android/traps/connecteddevice-no-test-found-%E8%B0%83%E8%AF%95%E8%BF%87%E7%A8%8B/",
      "summary": "<p>之前又稍微折腾着想尝试一下 TDD，并在每次构建的时候加入测试环节，当测试不通过就不允许 build。</p>\n<p>当一切都配置好，点下 build App 的时候，却出现了 <code>There were failing tests.</code>。</p>\n<p>我心想，不会啊，现在我就根本没写几个测试用例，为什么会通不过？</p>\n<p>于是，就开始了艰难的调试过程</p>\n",
      "content_html": "<p>之前又稍微折腾着想尝试一下 TDD，并在每次构建的时候加入测试环节，当测试不通过就不允许 build。</p>\n<p>当一切都配置好，点下 build App 的时候，却出现了 <code>There were failing tests.</code>。</p>\n<p>我心想，不会啊，现在我就根本没写几个测试用例，为什么会通不过？</p>\n<p>于是，就开始了艰难的调试过程</p>\n\n<h2 id=\"_0-更新\"> 0. 更新</h2>\n<p>2019-05-27 更新： Google 回复：Instant Run 在新版本已经不被支持了，他们开发了一个更好的功能叫 Apply Change。</p>\n<p><img src=\"/images/connecteddevice-no-test-found-调试过程/google-response-instant-run-deprecated.png\" alt=\"Google Response Instant Run Deprecated\" /></p>\n<blockquote>\n<p>Instant Run has been deprecated in Android Studio 3.5 and instead we've implemented a brand new solution called Apply Changes that is more stable and doesn't modify your APK on build.\n...\nWe recommend <strong>turning off Instant Run</strong> in the settings for earlier versions of Android Studio</p>\n</blockquote>\n<p>尝试了一下 2019-05-23 编译的 Android Studio 3.6 Canary 1 ，问题的确已经被修复了。</p>\n<p><img src=\"/images/connecteddevice-no-test-found-调试过程/build-success-with-as-3-6-1.png\" alt=\"Build Success with AS 3.6.1\" /></p>\n<p>所以还在使用 3.4 稳定版的，直接把 Instant Run 关掉吧。</p>\n<h2 id=\"_1-connecteddevice-no-tests-found\"> 1. ConnectedDevice No tests found</h2>\n<p>打开测试结果，就得到了下面这张图</p>\n<p><img src=\"/images/connecteddevice-no-test-found-调试过程/connecteddevice-no-test-found.png\" alt=\"ConnectedDevice No test found\" /></p>\n<p>再点进去一看：\n<img src=\"/images/connecteddevice-no-test-found-调试过程/connecteddevice-no-tests-found-detail.png\" alt=\"ConnectedDevice No Test found detail\" /></p>\n<p>它说我没有按照 JUnit 的方式编写测试用例，但是我的测试用例都是加了 <code>@Test</code> 的啊</p>\n<div><pre><code><span>@RunWith</span><span>(</span>AndroidJUnit4<span>::</span><span>class</span><span>)</span>\n<span>class</span> ApplicationTest <span>{</span>\n    <span>@Test</span>\n    <span>fun</span> <span>useAppContext</span><span>(</span><span>)</span> <span>{</span>\n        <span>// Context of the app under test.</span>\n        <span>val</span> appContext <span>=</span> InstrumentationRegistry<span>.</span><span>getInstrumentation</span><span>(</span><span>)</span><span>.</span>targetContext\n\n        <span>assertEquals</span><span>(</span><span>\"aaa.bbb.ccc.ddd\"</span><span>,</span> appContext<span>.</span>packageName<span>)</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>于是就陷入了困境，问题到这里就消失了，到底应该怎样才能定位到问题呢？</p>\n<h2 id=\"_2-使用-gradle-命令行进行构建尝试\"> 2. 使用 gradle 命令行进行构建尝试</h2>\n<p>Android Studio 的 Run App 实际上就是先执行 <code>assemble[Build-Variant]</code> 然后再将生成的 apk 安装到手机的过程。</p>\n<p>而这个 <code>assemble</code> 实际上是通过 <code>gradle</code> 执行的，于是可以尝试通过 gradle 命令行进行编译，看看是不是 gradle 导致的问题。</p>\n<p>然而，gradle 单独进行编译并没有这个问题：</p>\n<p><img src=\"/images/connecteddevice-no-test-found-调试过程/gradle-build-successful.png\" alt=\"gradle build successful\" /></p>\n<p>所以很有可能是 Android Studio 自身的构建出现了问题，但是，目前的构建信息并不足以让我们定位到问题，所以需要获取更多的构建信息。</p>\n<h2 id=\"_3-instrument-process-crashed\"> 3. INSTRUMENT: Process Crashed</h2>\n<p>首先，我们在 <code>Build, Execution, Deployment -&gt; Compiler</code> 开启 <code>gradle --scan</code></p>\n<p><img src=\"/images/connecteddevice-no-test-found-调试过程/gradle-scan-in-android-studio.png\" alt=\"Gradle Scan In Android Studio\" /></p>\n<p>然后，点击红框里面的小图标让 Build 信息变成文字：</p>\n<p><img src=\"/images/connecteddevice-no-test-found-调试过程/build-output-text.png\" alt=\"Build Output Text\" /></p>\n<p>之后，就看到了 build 失败的详细信息了：</p>\n<p><img src=\"/images/connecteddevice-no-test-found-调试过程/fail-due-to-process-crash.png\" alt=\"Fail due to Process Crashed\" /></p>\n<p>原来是在测试的时候程序崩溃了，这才导致了测试的失败。</p>\n<p>经过一番 StackOverflow 之后，<a href=\"https://stackoverflow.com/a/21611370\" target=\"_blank\" rel=\"noopener noreferrer\">这个答案</a> 提醒了我：</p>\n<p><img src=\"/images/connecteddevice-no-test-found-调试过程/stackoverflow-see-logcat.png\" alt=\"StackOverflow See LogCat\" /></p>\n<p>由于 Instrument Test 实际上是安装了一个 <code>test.apk</code>，所以它的报错信息会在 Log Cat 而不是 Build Output 中。</p>\n<h2 id=\"_4-didn-t-find-class-corecomponentfactory\"> 4. Didn't find class CoreComponentFactory</h2>\n<p>打开 Log Cat，首先映入眼帘的是 <code>Unable to instantiate application</code></p>\n<p><img src=\"/images/connecteddevice-no-test-found-调试过程/unable-to-instantiate-application.png\" alt=\"Unable to instantiate application\" /></p>\n<p>原来在执行测试的时候，没有办法实例化 <code>Application</code> 导致 Instrument Test 无法找到 <code>Context</code>，于是程序就崩溃导致测试失败了。</p>\n<p>再往上看，可以看到导致无法实例化 <code>Application</code> 的原因：</p>\n<p><img src=\"/images/connecteddevice-no-test-found-调试过程/didn-t-find-class-corecomponentfactory.png\" alt=\"Didn't find class CoreComponentFactory\" /></p>\n<p>原来是构建 <code>Application</code> 的工厂找不到了，从而造成它无法实例化。</p>\n<h2 id=\"_5-罪魁祸首-instant-run\"> 5. 罪魁祸首 Instant Run</h2>\n<p><code>Didn't find class CoreComponentFactory</code> 这个问题之前也遇到过，是因为 R8 将其混淆了，导致在 release 模式下找不到这个类，但是现在是 debug 模式，并没有启用混淆，但是依然还是找不到这个类。</p>\n<p>在经过又一阵子的 StackOverflow 之后，我找到了<a href=\"https://stackoverflow.com/a/56186821\" target=\"_blank\" rel=\"noopener noreferrer\">这么一个答案</a>：</p>\n<p><img src=\"/images/connecteddevice-no-test-found-调试过程/answer-disable-instant-run.png\" alt=\"Answer Disable Instant Run\" /></p>\n<p>虽然它被减成了负分，但是也不妨碍我尝试一下它的可用性。</p>\n<p>于是我将 Instant Run 取消掉，奇迹发生了，程序竟然就编译通过并成功安装在了模拟器上。</p>\n<p><img src=\"/images/connecteddevice-no-test-found-调试过程/build-success.png\" alt=\"Build Success\" /></p>\n<p><img src=\"/images/connecteddevice-no-test-found-调试过程/run-success.png\" alt=\"Run Success\" /></p>\n<h2 id=\"_6-总结\"> 6. 总结</h2>\n<p>到这里，整个调试过程就结束了，也给 Google 提了这个 bug。</p>\n<p>虽然不敢肯定一定是 Instant Run 的问题，但是目前（AS 3.4.1）来看，取消 Instant Run 就可以运行成功。</p>\n<p>这个问题本身可能有一些特异性，不过倒是从中学到了一个知识：</p>\n<p>类似的 Instrument Test 的失败最好先去 Log Cat 寻找原因。</p>\n<p>也希望大家能从这篇博客中能学到一些什么吧。</p>\n",
      "image": "https://wafer.li/images/connecteddevice-no-test-found-调试过程/google-response-instant-run-deprecated.png",
      "date_published": "2021-07-15T11:52:03.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Android"
      ]
    },
    {
      "title": "记一次 CameraX SurfaceCombination 的折腾",
      "url": "https://wafer.li/blog-corners/tech/android/traps/%E8%AE%B0%E4%B8%80%E6%AC%A1-camerax-surfacecombination-%E7%9A%84%E6%8A%98%E8%85%BE/",
      "id": "https://wafer.li/blog-corners/tech/android/traps/%E8%AE%B0%E4%B8%80%E6%AC%A1-camerax-surfacecombination-%E7%9A%84%E6%8A%98%E8%85%BE/",
      "summary": "<p>CameraX 是 Google 新推出的相机操作库，用起来倒是很好用的，用各种 UseCase 对相机的使用目的进行区分，同时也加入了生命周期的处理。</p>\n<p>但是，CameraX 似乎对现今设备的性能估计太过保守了，所以就有一些不是很必要的限制。</p>\n<p>这里就来谈一下我在最近开发遇到的一个 SurfaceCombination 的限制问题。</p>\n",
      "content_html": "<p>CameraX 是 Google 新推出的相机操作库，用起来倒是很好用的，用各种 UseCase 对相机的使用目的进行区分，同时也加入了生命周期的处理。</p>\n<p>但是，CameraX 似乎对现今设备的性能估计太过保守了，所以就有一些不是很必要的限制。</p>\n<p>这里就来谈一下我在最近开发遇到的一个 SurfaceCombination 的限制问题。</p>\n\n<h2 id=\"_1-产品需求\"> 1. 产品需求</h2>\n<p>最近在公司接手了智能设备的开发，就是非手机的 Android 设备的开发工作；该智能设备具有前后两个屏幕，以及一个摄像头。</p>\n<p>在使用此智能设备开发图像识别功能的时候，产品需求摄像头所拍摄到的图像要在两个屏幕上都显示，同时还需要对图像进行智能分析。</p>\n<h2 id=\"_2-坑点来了\"> 2. 坑点来了</h2>\n<p>那么我在采用 CameraX 进行开发的时候，想当然的就是开两个 <code>Preview</code> UseCase 加上一个 <code>ImageAnalysis</code> UseCase，然后直接各自处理就完事了。</p>\n<p>但是很奇怪的是，它们三个并不能同时开！经过多重排列组合的测试之后，我发现：</p>\n<ol>\n<li>只有 2 <code>Preview</code> 是正常的</li>\n<li>1 <code>Preview</code> + 1 <code>ImageAnalysis</code> 也是正常的</li>\n<li>1 <code>Preview</code> + 1 <code>ImageAnalysis</code> + 1 <code>Preview</code>，后来开的 <code>Preview</code> 直接黑屏无法显示</li>\n</ol>\n<p>然后我尝试先开两个 <code>Preview</code>，再开 <code>ImageAnalysis</code>；</p>\n<p>乍一眼看上去两个 <code>Preview</code> 都打开，能够正常显示了，但是图像预览一点也不卡，图像分析一点结果都没有；</p>\n<p>这引起了我的怀疑，查看日志之后发现：</p>\n<div><pre><code>java.lang.IllegalArgumentException:\nNo supported surface combination is found for camera device - Id : 0.\nMay be attempting to bind too many use cases.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>好家伙，结果最后还是没绑上去嘛！</p>\n<p>于是，我就不得不踏上了漫漫的踩坑之路。</p>\n<h2 id=\"_3-源码摸索\"> 3. 源码摸索</h2>\n<p>既然有特定的报错信息，而且看起来还是 Java 层报的错误，所以可以初步的去寻找报错的位；</p>\n<p>在经过一番查找之后，我找到了：</p>\n<details><summary>代码有点长这里就折叠一下</summary>\n<div><div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div>&nbsp;</div><br><br><br><br><br><br><br><br><br><br><br><br></div><pre><code><span>// androidx.camera.camera2.internal.Camera2DeviceSurfaceManager.java</span>\n\n    <span>public</span> <span>Map</span><span><span>&lt;</span><span>UseCaseConfig</span><span>&lt;</span><span>?</span><span>></span><span>,</span> <span>Size</span><span>></span></span> <span>getSuggestedResolutions</span><span>(</span>\n            <span>@NonNull</span> <span>String</span> cameraId<span>,</span>\n            <span>@NonNull</span> <span>List</span><span><span>&lt;</span><span>SurfaceConfig</span><span>></span></span> existingSurfaces<span>,</span>\n            <span>@NonNull</span> <span>List</span><span><span>&lt;</span><span>UseCaseConfig</span><span>&lt;</span><span>?</span><span>></span><span>></span></span> newUseCaseConfigs<span>)</span> <span>{</span>\n        <span>Preconditions</span><span>.</span><span>checkArgument</span><span>(</span><span>!</span>newUseCaseConfigs<span>.</span><span>isEmpty</span><span>(</span><span>)</span><span>,</span> <span>\"No new use cases to be bound.\"</span><span>)</span><span>;</span>\n\n        <span>// Use the small size (640x480) for new use cases to check whether there is any possible</span>\n        <span>// supported combination first</span>\n        <span>List</span><span><span>&lt;</span><span>SurfaceConfig</span><span>></span></span> surfaceConfigs <span>=</span> <span>new</span> <span>ArrayList</span><span><span>&lt;</span><span>></span></span><span>(</span>existingSurfaces<span>)</span><span>;</span>\n\n        <span>for</span> <span>(</span><span>UseCaseConfig</span><span><span>&lt;</span><span>?</span><span>></span></span> useCaseConfig <span>:</span> newUseCaseConfigs<span>)</span> <span>{</span>\n            surfaceConfigs<span>.</span><span>add</span><span>(</span>\n                    <span>transformSurfaceConfig</span><span>(</span>cameraId<span>,</span>\n                            useCaseConfig<span>.</span><span>getInputFormat</span><span>(</span><span>)</span><span>,</span>\n                            <span>new</span> <span>Size</span><span>(</span><span>640</span><span>,</span> <span>480</span><span>)</span><span>)</span><span>)</span><span>;</span>\n        <span>}</span>\n\n        <span>SupportedSurfaceCombination</span> supportedSurfaceCombination <span>=</span>\n                mCameraSupportedSurfaceCombinationMap<span>.</span><span>get</span><span>(</span>cameraId<span>)</span><span>;</span>\n\n        <span>if</span> <span>(</span>supportedSurfaceCombination <span>==</span> <span>null</span><span>)</span> <span>{</span>\n            <span>throw</span> <span>new</span> <span>IllegalArgumentException</span><span>(</span><span>\"No such camera id in supported combination list: \"</span>\n                    <span>+</span> cameraId<span>)</span><span>;</span>\n        <span>}</span>\n\n        <span>if</span> <span>(</span><span>!</span>supportedSurfaceCombination<span>.</span><span>checkSupported</span><span>(</span>surfaceConfigs<span>)</span><span>)</span> <span>{</span>\n            <span>throw</span> <span>new</span> <span>IllegalArgumentException</span><span>(</span>\n                    <span>\"No supported surface combination is found for camera device - Id : \"</span>\n                            <span>+</span> cameraId <span>+</span> <span>\".  May be attempting to bind too many use cases. \"</span>\n                            <span>+</span> <span>\"Existing surfaces: \"</span> <span>+</span> existingSurfaces <span>+</span> <span>\" New configs: \"</span>\n                            <span>+</span> newUseCaseConfigs<span>)</span><span>;</span>\n        <span>}</span>\n\n        <span>return</span> supportedSurfaceCombination<span>.</span><span>getSuggestedResolutions</span><span>(</span>existingSurfaces<span>,</span>\n                newUseCaseConfigs<span>)</span><span>;</span>\n    <span>}</span>\n\n</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br></div></div></details>\n<p>从这里我们可以知道，是因为 <code>supportedSurfaceCombination.checkSupported()</code> 没有通过，所以才会报错。</p>\n<p>那么继续往下看，我们可以发现，实际上 Camera2 自定义了一套各种级别的相机设备所支持的 <code>SurfaceCombination</code>。</p>\n<details><summary>`checkSupported` 源码</summary>\n<div><pre><code><span>// SupportedSurfaceCombination.java</span>\n<span>boolean</span> <span>checkSupported</span><span>(</span><span>List</span><span><span>&lt;</span><span>SurfaceConfig</span><span>></span></span> surfaceConfigList<span>)</span> <span>{</span>\n    <span>boolean</span> isSupported <span>=</span> <span>false</span><span>;</span>\n\n    <span>for</span> <span>(</span><span>SurfaceCombination</span> surfaceCombination <span>:</span> mSurfaceCombinations<span>)</span> <span>{</span>\n        isSupported <span>=</span> surfaceCombination<span>.</span><span>isSupported</span><span>(</span>surfaceConfigList<span>)</span><span>;</span>\n\n        <span>if</span> <span>(</span>isSupported<span>)</span> <span>{</span>\n            <span>break</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n\n    <span>return</span> isSupported<span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div></details>\n<p><img src=\"/images/记一次-camerax-surfacecombination-的折腾/camera2-支持的-surfacecombination.png\" alt=\"Camera2 支持的 SurfaceCombination\" /></p>\n<p>断点查询了一下，这里我所使用的相机设备是最低级的 Legacy 设备，那么 Legacy 所支持的 SurfaceCombination 有哪些呢？</p>\n<details><summary>Legacy 所支持的 `SurfaceCombination`</summary>\n<div><pre><code>    <span>List</span><span><span>&lt;</span><span>SurfaceCombination</span><span>></span></span> <span>getLegacySupportedCombinationList</span><span>(</span><span>)</span> <span>{</span>\n        <span>List</span><span><span>&lt;</span><span>SurfaceCombination</span><span>></span></span> combinationList <span>=</span> <span>new</span> <span>ArrayList</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>\n\n        <span>// (PRIV, MAXIMUM)</span>\n        <span>SurfaceCombination</span> surfaceCombination1 <span>=</span> <span>new</span> <span>SurfaceCombination</span><span>(</span><span>)</span><span>;</span>\n        surfaceCombination1<span>.</span><span>addSurfaceConfig</span><span>(</span>\n                <span>SurfaceConfig</span><span>.</span><span>create</span><span>(</span><span>ConfigType</span><span>.</span>PRIV<span>,</span> <span>ConfigSize</span><span>.</span>MAXIMUM<span>)</span><span>)</span><span>;</span>\n        combinationList<span>.</span><span>add</span><span>(</span>surfaceCombination1<span>)</span><span>;</span>\n\n        <span>// (JPEG, MAXIMUM)</span>\n        <span>SurfaceCombination</span> surfaceCombination2 <span>=</span> <span>new</span> <span>SurfaceCombination</span><span>(</span><span>)</span><span>;</span>\n        surfaceCombination2<span>.</span><span>addSurfaceConfig</span><span>(</span>\n                <span>SurfaceConfig</span><span>.</span><span>create</span><span>(</span><span>ConfigType</span><span>.</span>JPEG<span>,</span> <span>ConfigSize</span><span>.</span>MAXIMUM<span>)</span><span>)</span><span>;</span>\n        combinationList<span>.</span><span>add</span><span>(</span>surfaceCombination2<span>)</span><span>;</span>\n\n        <span>// (YUV, MAXIMUM)</span>\n        <span>SurfaceCombination</span> surfaceCombination3 <span>=</span> <span>new</span> <span>SurfaceCombination</span><span>(</span><span>)</span><span>;</span>\n        surfaceCombination3<span>.</span><span>addSurfaceConfig</span><span>(</span>\n                <span>SurfaceConfig</span><span>.</span><span>create</span><span>(</span><span>ConfigType</span><span>.</span>YUV<span>,</span> <span>ConfigSize</span><span>.</span>MAXIMUM<span>)</span><span>)</span><span>;</span>\n        combinationList<span>.</span><span>add</span><span>(</span>surfaceCombination3<span>)</span><span>;</span>\n\n        <span>// Below two combinations are all supported in the combination</span>\n        <span>// (PRIV, PREVIEW) + (JPEG, MAXIMUM)</span>\n        <span>SurfaceCombination</span> surfaceCombination4 <span>=</span> <span>new</span> <span>SurfaceCombination</span><span>(</span><span>)</span><span>;</span>\n        surfaceCombination4<span>.</span><span>addSurfaceConfig</span><span>(</span>\n                <span>SurfaceConfig</span><span>.</span><span>create</span><span>(</span><span>ConfigType</span><span>.</span>PRIV<span>,</span> <span>ConfigSize</span><span>.</span>PREVIEW<span>)</span><span>)</span><span>;</span>\n        surfaceCombination4<span>.</span><span>addSurfaceConfig</span><span>(</span>\n                <span>SurfaceConfig</span><span>.</span><span>create</span><span>(</span><span>ConfigType</span><span>.</span>JPEG<span>,</span> <span>ConfigSize</span><span>.</span>MAXIMUM<span>)</span><span>)</span><span>;</span>\n        combinationList<span>.</span><span>add</span><span>(</span>surfaceCombination4<span>)</span><span>;</span>\n\n        <span>// (YUV, PREVIEW) + (JPEG, MAXIMUM)</span>\n        <span>SurfaceCombination</span> surfaceCombination5 <span>=</span> <span>new</span> <span>SurfaceCombination</span><span>(</span><span>)</span><span>;</span>\n        surfaceCombination5<span>.</span><span>addSurfaceConfig</span><span>(</span>\n                <span>SurfaceConfig</span><span>.</span><span>create</span><span>(</span><span>ConfigType</span><span>.</span>YUV<span>,</span> <span>ConfigSize</span><span>.</span>PREVIEW<span>)</span><span>)</span><span>;</span>\n        surfaceCombination5<span>.</span><span>addSurfaceConfig</span><span>(</span>\n                <span>SurfaceConfig</span><span>.</span><span>create</span><span>(</span><span>ConfigType</span><span>.</span>JPEG<span>,</span> <span>ConfigSize</span><span>.</span>MAXIMUM<span>)</span><span>)</span><span>;</span>\n        combinationList<span>.</span><span>add</span><span>(</span>surfaceCombination5<span>)</span><span>;</span>\n\n        <span>// (PRIV, PREVIEW) + (PRIV, PREVIEW)</span>\n        <span>SurfaceCombination</span> surfaceCombination6 <span>=</span> <span>new</span> <span>SurfaceCombination</span><span>(</span><span>)</span><span>;</span>\n        surfaceCombination6<span>.</span><span>addSurfaceConfig</span><span>(</span>\n                <span>SurfaceConfig</span><span>.</span><span>create</span><span>(</span><span>ConfigType</span><span>.</span>PRIV<span>,</span> <span>ConfigSize</span><span>.</span>PREVIEW<span>)</span><span>)</span><span>;</span>\n        surfaceCombination6<span>.</span><span>addSurfaceConfig</span><span>(</span>\n                <span>SurfaceConfig</span><span>.</span><span>create</span><span>(</span><span>ConfigType</span><span>.</span>PRIV<span>,</span> <span>ConfigSize</span><span>.</span>PREVIEW<span>)</span><span>)</span><span>;</span>\n        combinationList<span>.</span><span>add</span><span>(</span>surfaceCombination6<span>)</span><span>;</span>\n\n        <span>// (PRIV, PREVIEW) + (YUV, PREVIEW)</span>\n        <span>SurfaceCombination</span> surfaceCombination7 <span>=</span> <span>new</span> <span>SurfaceCombination</span><span>(</span><span>)</span><span>;</span>\n        surfaceCombination7<span>.</span><span>addSurfaceConfig</span><span>(</span>\n                <span>SurfaceConfig</span><span>.</span><span>create</span><span>(</span><span>ConfigType</span><span>.</span>PRIV<span>,</span> <span>ConfigSize</span><span>.</span>PREVIEW<span>)</span><span>)</span><span>;</span>\n        surfaceCombination7<span>.</span><span>addSurfaceConfig</span><span>(</span>\n                <span>SurfaceConfig</span><span>.</span><span>create</span><span>(</span><span>ConfigType</span><span>.</span>YUV<span>,</span> <span>ConfigSize</span><span>.</span>PREVIEW<span>)</span><span>)</span><span>;</span>\n        combinationList<span>.</span><span>add</span><span>(</span>surfaceCombination7<span>)</span><span>;</span>\n\n        <span>// (PRIV, PREVIEW) + (PRIV, PREVIEW) + (JPEG, MAXIMUM)</span>\n        <span>SurfaceCombination</span> surfaceCombination8 <span>=</span> <span>new</span> <span>SurfaceCombination</span><span>(</span><span>)</span><span>;</span>\n        surfaceCombination8<span>.</span><span>addSurfaceConfig</span><span>(</span>\n                <span>SurfaceConfig</span><span>.</span><span>create</span><span>(</span><span>ConfigType</span><span>.</span>PRIV<span>,</span> <span>ConfigSize</span><span>.</span>PREVIEW<span>)</span><span>)</span><span>;</span>\n        surfaceCombination8<span>.</span><span>addSurfaceConfig</span><span>(</span>\n                <span>SurfaceConfig</span><span>.</span><span>create</span><span>(</span><span>ConfigType</span><span>.</span>YUV<span>,</span> <span>ConfigSize</span><span>.</span>PREVIEW<span>)</span><span>)</span><span>;</span>\n        surfaceCombination8<span>.</span><span>addSurfaceConfig</span><span>(</span>\n                <span>SurfaceConfig</span><span>.</span><span>create</span><span>(</span><span>ConfigType</span><span>.</span>JPEG<span>,</span> <span>ConfigSize</span><span>.</span>MAXIMUM<span>)</span><span>)</span><span>;</span>\n        combinationList<span>.</span><span>add</span><span>(</span>surfaceCombination8<span>)</span><span>;</span>\n\n        <span>return</span> combinationList<span>;</span>\n    <span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br></div></div></details>\n<p>查看之后发现，它最多只支持两个 <code>Preview</code>，或者一个 <code>Preview</code> 一个 <code>YUV</code>（即 <code>ImageAnalysis</code> 所使用的格式）。</p>\n<p>于是，这就解释了为什么之前我死活不能完成两个 <code>Preview</code> + <code>ImageAnalysis</code>。</p>\n<h2 id=\"_4-解决办法\"> 4. 解决办法</h2>\n<p>问题的成因是找到了，那么我们就可以对症下药；</p>\n<p>有没有什么办法能改写掉这个 Legacy 的默认支持列表，让它能支持我们需求所需要的三个 Surface 呢？</p>\n<p>首先，我们可以将 Camera2 的源码自己拷贝一份，然后重新编译。这个办法当然是万金油，但是侵入性太大了，于是我就摸索起了 CameraX 库针对 <code>SupportedSurfaceCombination</code> 的导入形式。</p>\n<p><img src=\"/images/记一次-camerax-surfacecombination-的折腾/camerax-中-supportedsurfacecombination-的调用方.png\" alt=\"CameraX 中 SupportedSurfaceCombination 的调用方\" /></p>\n<p>从这里，我们可以发现，实际上 <code>SupportedSurfaceCombination</code> 是由 <code>Camera2DeviceSurfaceManager</code></p>\n<p>然而，<code>Camera2DeviceSurfaceManager</code> 是通过 <code>CameraXConfig</code> 进行 <strong>配置</strong> 的！</p>\n<div><pre><code><span>// Camera2Config.java</span>\n<span>CameraXConfig<span>.</span>Builder</span> appConfigBuilder <span>=</span>\n                <span>new</span> <span>CameraXConfig<span>.</span>Builder</span><span>(</span><span>)</span>\n                        <span>.</span><span>setCameraFactoryProvider</span><span>(</span>cameraFactoryProvider<span>)</span>\n                        <span>.</span><span>setDeviceSurfaceManagerProvider</span><span>(</span>surfaceManagerProvider<span>)</span>\n                        <span>.</span><span>setUseCaseConfigFactoryProvider</span><span>(</span>configFactoryProvider<span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>那么，我们如果有办法配置 <code>CameraXConfig</code>，就可以配置 <code>Camera2DeviceSurfaceManager</code>，进而可以配置 <code>SupportedSurfaceCombination</code>。</p>\n<p>那么我们怎么样可以配置 <code>CameraXConfig</code> 呢？</p>\n<p>通过查询<a href=\"https://developer.android.com/reference/androidx/camera/core/CameraXConfig\" target=\"_blank\" rel=\"noopener noreferrer\">文档</a>，我们可以通过将 <code>Application</code> 继承 <code>CameraXConfig.Provider</code> 来配置我们自己的 <code>CameraXConfig</code> ！</p>\n<p>那么解决办法就自然而然的出炉了：</p>\n<ol>\n<li><code>Application</code> 继承 <code>CameraXConfig.Provider</code></li>\n<li>构造新的 <code>CameraXConfig</code>，指定一个修改过的 <code>Camera2DeviceSurfaceManager</code></li>\n<li>修改过后的 <code>Camera2DeviceSurfaceManager</code> 使用一个修改过的 <code>SupportedSurfaceCombination</code></li>\n<li>修改过后的 <code>SupportedSurfaceCombination</code> 增加我们所需要的 <code>SurfaceCombination</code> 即可。</li>\n</ol>\n<p>经过修改之后，发现确实可行，三个 <code>Surface</code> 都成功的绑定上了。</p>\n<h2 id=\"_5-代码\"> 5. 代码</h2>\n<p>这里附上修改过后的<a href=\"https://gist.github.com/wafer-li/5c2c5565dbfea669174341fb5567a2df\" target=\"_blank\" rel=\"noopener noreferrer\">源码</a>。</p>\n<p>使用 <a href=\"https://opensource.org/licenses/MIT\" target=\"_blank\" rel=\"noopener noreferrer\">MIT 协议</a>分发。</p>\n",
      "image": "https://wafer.li/images/记一次-camerax-surfacecombination-的折腾/camera2-支持的-surfacecombination.png",
      "date_published": "2021-07-15T11:52:03.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Android"
      ]
    },
    {
      "title": "使用 buildSrcVersions 轻松管理 gradle 依赖",
      "url": "https://wafer.li/blog-corners/tech/android/%E4%BD%BF%E7%94%A8-buildsrcversions-%E8%BD%BB%E6%9D%BE%E7%AE%A1%E7%90%86-gradle-%E4%BE%9D%E8%B5%96/",
      "id": "https://wafer.li/blog-corners/tech/android/%E4%BD%BF%E7%94%A8-buildsrcversions-%E8%BD%BB%E6%9D%BE%E7%AE%A1%E7%90%86-gradle-%E4%BE%9D%E8%B5%96/",
      "summary": "<p>如果你开发过稍微有点体量的 Android App，都会因为越来越多的 Gradle 依赖而头疼。</p>\n<p>一个 App 的编译依赖少则十几项，多则几十项，如果再加上多 module，那么依赖的统一管理就很重要了。</p>\n<p>但是，如何高效统一管理，则是一个难题。今天就来说说如何使用 buildSrcVersions 轻松管理 gradle 依赖。</p>\n",
      "content_html": "<p>如果你开发过稍微有点体量的 Android App，都会因为越来越多的 Gradle 依赖而头疼。</p>\n<p>一个 App 的编译依赖少则十几项，多则几十项，如果再加上多 module，那么依赖的统一管理就很重要了。</p>\n<p>但是，如何高效统一管理，则是一个难题。今天就来说说如何使用 buildSrcVersions 轻松管理 gradle 依赖。</p>\n\n<h2 id=\"_1-ext-的弊端\"> 1. Ext 的弊端</h2>\n<p>在介绍 buildSrcVersions 之前，我们先来看看 Google 官方推荐的统一管理方式，即使用 <code>ext</code> 进行管理，例如：</p>\n<div><pre><code>ext <span>{</span>\n    <span>// The following are only a few examples of the types of properties you can define.</span>\n    compileSdkVersion <span>=</span> <span>28</span>\n    buildToolsVersion <span>=</span> <span>\"28.0.3\"</span>\n\n    <span>// You can also use this to specify versions for dependencies. Having consistent</span>\n    <span>// versions between modules can avoid behavior conflicts.</span>\n    supportLibVersion <span>=</span> <span>\"28.0.0\"</span>\n    <span>...</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>然后在 <code>build.gradle</code> 中</p>\n<div><pre><code>android <span>{</span>\n  <span>// Use the following syntax to access properties you defined at the project level:</span>\n  <span>// rootProject.ext.property_name</span>\n  compileSdkVersion rootProject<span>.</span>ext<span>.</span>compileSdkVersion\n  buildToolsVersion rootProject<span>.</span>ext<span>.</span>buildToolsVersion\n  <span>...</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>但是！这种方式有很大的问题：</p>\n<ol>\n<li>由于多 module 工程需要共享一些变量，<code>ext</code> 定义的位置可能在其他地方</li>\n<li>最大的问题在于，IDE 不能跳转到这些变量的定义</li>\n</ol>\n<p>在日常使用中，如果你对工程不是很熟悉，那么在依赖版本需要更改的时候就要翻箱倒柜找一阵，这不免令人烦躁，影响工作效率。</p>\n<p>那么除了 <code>ext</code> 之外有没有更好的统一管理依赖的方式呢？</p>\n<p>有的，Gradle 提供了一个 <code>buildSrc</code> 方式。</p>\n<h2 id=\"_2-kotlin-buildsrc-管理-gradle-依赖\"> 2. Kotlin + buildSrc 管理 gradle 依赖</h2>\n<p>时至今日，Kotlin 不仅可以作为源文件用于开发目的，而且也可以当成脚本运行，这就是 <code>.kts</code> 文件，而且 Gradle 系统也支持使用 <code>kts</code> 文件作为 build 脚本。</p>\n<p>废话不多说，使用 Kotlin 和 buildSrc 进行依赖管理主要需要以下步骤：</p>\n<ol>\n<li>在根目录建立 <code>buildSrc</code> 文件夹</li>\n<li>在 <code>buildSrc</code> 中创建 <code>build.gradle.kts</code>，并加上如下语句</li>\n</ol>\n<div><pre><code>plugins <span>{</span>\n  `kotlin<span>-</span>dsl`\n<span>}</span>\n\nrepositories <span>{</span>\n  <span>jcenter</span><span>(</span><span>)</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><ol start=\"3\">\n<li>在 <code>buildSrc/src/main/java</code> 中创建 <code>Versions.kt</code> 和 <code>Libs.kt</code></li>\n</ol>\n<div><pre><code><span>object</span> Versions <span>{</span>\n  <span>const</span> <span>val</span> compileSdkVersion <span>=</span> <span>28</span>\n  <span>const</span> <span>val</span> targetSdkVersion <span>=</span> <span>28</span>\n  <span>..</span><span>.</span>\n  <span>const</span> <span>val</span> retrofit <span>=</span> <span>\"2.8.6\"</span>\n<span>}</span>\n\n<span>object</span> Libs <span>{</span>\n  <span>const</span> <span>val</span> retrofit <span>=</span> \"com<span>.</span>squareup<span>.</span>retrofit2<span>:</span>retrofit<span>:</span>$<span>{</span>Versions<span>.</span>retrofit<span>}</span>”\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><ol start=\"4\">\n<li>最后，在 <code>app/build.gradle</code> 中</li>\n</ol>\n<div><pre><code>android <span>{</span>\n  <span>compileSdkVersion</span><span>(</span>Versions<span>.</span>compileSdkVersion<span>)</span>\n<span>}</span>\ndependencies <span>{</span>\n  <span>implementation</span><span>(</span>Libs<span>.</span>retrofit<span>)</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>这样，我们既能实现依赖的统一管理，也能使用到 IDE 的自动补全和定义跳转功能，迅速定位到需要改动的版本。</p>\n<p>但是！上面我们还是要自己去编写 <code>buildSrc</code>，不免有些麻烦。</p>\n<p>而于此同时，我们也丢失了原先 gradle 会自动提示依赖的版本升级特性。</p>\n<p>那么有没有一种东西能够把这两个东西结合在一起实现文体两开花呢？</p>\n<p>到这里终于进入本篇主题：使用 <code>buildSrcVersions</code> 插件</p>\n<h2 id=\"_3-buildsrcversions-自动生成-buildsrc-目录\"> 3. buildSrcVersions 自动生成 buildSrc 目录</h2>\n<p><a href=\"https://github.com/jmfayard/buildSrcVersions\" target=\"_blank\" rel=\"noopener noreferrer\"><code>buildSrcVersions</code> 插件的项目地址</a></p>\n<p>首先，我们在根目录的 <code>build.gradle</code> 中引入插件：</p>\n<div><pre><code>buildscript <span>{</span>\n    <span>//...</span>\n<span>}</span>\nplugins <span>{</span>\n  <span>id</span><span>(</span><span>\"de.fayard.buildSrcVersions\"</span><span>)</span> version <span>\"0.3.2\"</span>\n<span>}</span>\n<span>// Don't put any code before the buildscripts {} and plugins {} block</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>这个插件增加了 <code>buildSrcVersions</code> 这个 gradle task。</p>\n<p>运行这个 task，它就会扫描并读取你的依赖项，并以此自动生成 <code>buildSrc</code> 目录。</p>\n<p>运行的结果如下：\n<img src=\"https://pic2.superbed.cn/item/5ce99625451253d178df7b87.jpg\" alt=\"buildSrcVersions Result\" /></p>\n<p>接下来，我们就可以将 <code>build.gradle</code> 中的依赖换成使用 <code>Libs</code> 进行引用</p>\n<p><img src=\"https://pic.superbed.cn/item/5ce9971a451253d178df821a.jpg\" alt=\"build.gradle with buildSrc\" /></p>\n<p>可以看到，上面这些依赖都是染了色的，也就是说它们可以直接跳转到对应的定义，而且也可以进行补全。</p>\n<p>同时，<code>buildSrcVersions</code> 还具备检查更新的能力，如果你已经生成过 <code>buildSrc</code> 了，那么再次运行 <code>buildSrcVersions</code> task 就会对你的依赖项进行更新检查，可用的新版本会以注释的形式附在对应依赖项字符串的后面。</p>\n<p><img src=\"https://pic.superbed.cn/item/5ce99890451253d178df8c1e.jpg\" alt=\"buildSrcVersions Update\" /></p>\n<p>当然，它是不会随便改你的代码的，这个更新它只是进行一下提示，到底要不要使用新版本还是根据项目情况来决定。</p>\n<p>不过，这个好用的插件也是有缺陷的：</p>\n<p>首先，它会生成一个空的 <code>settings.gradle.kts</code> 文件，因为工程中只能有一个 <code>settings.gradle</code>，所以当它为空时还好，但是如果你往里面填东西，就会让 gradle 摸不着头脑，导致编译不稳定</p>\n<p>对此，我们需要让它自动将 <code>settings.gradle</code> 文件删掉，为 <code>buildSrcVersions</code> task 增加一个 <code>doLast()</code> 即可：</p>\n<div><pre><code>tasks<span>[</span><span>\"buildSrcVersions\"</span><span>]</span><span>.</span>doLast <span>{</span> <span>delete</span><span>(</span><span>\"<span><span>$</span><span>{</span>rootDir<span>.</span>path<span>}</span></span>/buildSrc/settings.gradle.kts\"</span><span>)</span> <span>}</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>其次，它会导致 <code>build configuration</code> 失败，如图：</p>\n<p><img src=\"https://pic.superbed.cn/item/5ce99ac2451253d178df9b03.jpg\" alt=\"\" /></p>\n<p>其原因在于它的进程会占用 <code>build/dependenciesUpdate</code> 导致 <code>task(&quot;clean&quot;)</code> 无法创建。</p>\n<p>虽然不影响工程的 Sync 和构建，但是有这个黄条总归是看的不爽的。</p>\n<p>最后，它并不能自动的帮你改你的 <code>build.gradle</code>，需要你手动修改，当第一次使用这个东西的时候需要打的字还挺多的。</p>\n<p>不过，比起它能自动快速构建 <code>buildSrc</code> 来说，也还算得上是瑕不掩瑜。</p>\n<h2 id=\"_4-一些潜在的坑\"> 4. 一些潜在的坑</h2>\n<p>如果你选择使用 <code>buildSrcVersions</code> 插件，那么请将 Android 构建相关的版本号单独放置在一个新文件中：</p>\n<div><pre><code><span>// AndroidVersions.kt</span>\n\n<span>object</span> AndroidVersions <span>{</span>\n  <span>const</span> <span>val</span> compileSdkVersion <span>=</span> <span>28</span>\n  <span>const</span> <span>val</span> targetSdkVersion <span>=</span> <span>28</span>\n  <span>const</span> <span>val</span> minSdkVersiosn <span>=</span> <span>20</span>\n  <span>..</span><span>.</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>因为每次 <code>buildSrcVersions</code> 运行都有可能会替换掉它生成的 <code>Versions.kt</code> 和 <code>Libs.kt</code></p>\n<p>如果你选择自己编写 <code>buildSrc</code> 目录，务必注意以下几件事情：</p>\n<ol>\n<li>使用正确的目录结构</li>\n</ol>\n<blockquote>\n<p><code>buildSrc</code> 遵循默认的 Java/Kotlin 目录结构，即 <code>buildSrc/src/main/java/...</code></p>\n</blockquote>\n<ol start=\"2\">\n<li>不要忘记加 <code>jcenter()</code></li>\n</ol>\n<blockquote>\n<p>不要忘记在 <code>buildSrc/build.gradle.kts</code> 中增加 <code>jcenter()</code>，否则 <code>kotlin-dsl</code> 插件是加载不成功的</p>\n</blockquote>\n<p>最后，也希望我的这篇文章能给大家提高劳动生产率吧，毕竟谁都想偷懒不是？😆</p>\n",
      "image": "https://pic2.superbed.cn/item/5ce99625451253d178df7b87.jpg",
      "date_published": "2021-07-15T11:52:03.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Android"
      ]
    },
    {
      "title": "翻译文章——在 Android Studio 3.3 中迁移 Gradle 到 Kotlin DSL",
      "url": "https://wafer.li/blog-corners/tech/android/%E7%BF%BB%E8%AF%91%E6%96%87%E7%AB%A0%E2%80%94%E2%80%94%E5%9C%A8-android-studio-3-3-%E4%B8%AD%E8%BF%81%E7%A7%BB-gradle-%E5%88%B0-kotlin-dsl/",
      "id": "https://wafer.li/blog-corners/tech/android/%E7%BF%BB%E8%AF%91%E6%96%87%E7%AB%A0%E2%80%94%E2%80%94%E5%9C%A8-android-studio-3-3-%E4%B8%AD%E8%BF%81%E7%A7%BB-gradle-%E5%88%B0-kotlin-dsl/",
      "summary": "<p>这是一篇翻译文章，目前可以作为迁移 Gradle 到 Kotlin DSL 的备忘录，译者在 Android Studio 3.5 RC-1 上也迁移成功。</p>\n<p>原文：<a href=\"https://medium.com/@stoltmanjan/migrating-gradle-to-kotlin-dsl-in-android-studio-3-3-18651f37227f\" target=\"_blank\" rel=\"noopener noreferrer\">Migrating Gradle to Kotlin DSL in Android Studio 3.3</a></p>\n",
      "content_html": "<p>这是一篇翻译文章，目前可以作为迁移 Gradle 到 Kotlin DSL 的备忘录，译者在 Android Studio 3.5 RC-1 上也迁移成功。</p>\n<p>原文：<a href=\"https://medium.com/@stoltmanjan/migrating-gradle-to-kotlin-dsl-in-android-studio-3-3-18651f37227f\" target=\"_blank\" rel=\"noopener noreferrer\">Migrating Gradle to Kotlin DSL in Android Studio 3.3</a></p>\n\n<blockquote>\n<p>注意：在本文中我认为你应该了解了<a href=\"https://blog.gradle.org/kotlin-meets-gradle\" target=\"_blank\" rel=\"noopener noreferrer\">Kotlin 可以应用于 Gradle 中</a>，同时你想寻找一个快速备忘录或者一个直接复制粘贴就能用的解决方案。如果你想寻找一个完整的文档，请到<a href=\"https://docs.gradle.org/current/userguide/kotlin_dsl.html\" target=\"_blank\" rel=\"noopener noreferrer\">这里</a>查看。</p>\n</blockquote>\n<h2 id=\"第一步-gradle-wrapper-版本\"> 第一步：Gradle Wrapper 版本</h2>\n<p>迁移 Gradle 到 Kotlin DSL 推荐使用 5.0 以上的 Gradle 版本，但不巧的是，在 Android 工程中，它也同时强烈建议当你没有使用 Android Gradle Plugin 3.4 时，不要使用 Gradle 5.0。在这种情况下，请确认你使用了目前支持的最新 Gradle 版本（本文撰写时该版本为 4.10.1）</p>\n<div><pre><code>//gradle.properties\n<span>distributionBase</span><span>=</span><span>GRADLE_USER_HOME</span>\n<span>distributionPath</span><span>=</span><span>wrapper/dists</span>\n<span>zipStoreBase</span><span>=</span><span>GRADLE_USER_HOME</span>\n<span>zipStorePath</span><span>=</span><span>wrapper/dists</span>\n<span>distributionUrl</span><span>=</span><span>https\\://services.gradle.org/distributions/gradle-4.10.1-all.zip</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id=\"第二步-更改所有的单引号为双引号\"> 第二步：更改所有的单引号为双引号</h2>\n<p>使用查找和替换(在 Android Studio 中使用 <kbd>ctrl + R</kbd>)工具将 Gradle 文件中所有的单引号(<code>'</code>)改为双引号(<code>&quot;</code>)</p>\n<p>对于一个新建的工程，你要修改以下的三个文件：</p>\n<ul>\n<li>settings.gradle</li>\n<li>build.gradle (根目录)</li>\n<li>build.gradle (模块目录)</li>\n</ul>\n<h2 id=\"第三步-将所有的隐式赋值和函数调用修改为显式的\"> 第三步：将所有的隐式赋值和函数调用修改为显式的</h2>\n<p>然后，所有的 Gradle 式的赋值和函数调用都要转换为 Koltin 式的。像下面这个例子这样将它们进行转换：</p>\n<div><pre><code>// Groovy assignment\napplicationId &quot;com.yggdralisk.githubbrowser&quot;\n// Kotlin assignment\napplicationId = &quot;com.yggdralisk.githubbrowser&quot;\n// Groovy function call\nimplementation &quot;androidx.constraintlayout:constraintlayout:2.0.0-alpha3&quot;\n// Kotlin function call\nimplementation(&quot;androidx.constraintlayout:constraintlayout:2.0.0-alpha3&quot;)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>如果你不知道在这一步该如何修改，甚至不知道该修改什么，你可以通过文章底部的示例文件链接查看一下实例文件。</p>\n<h2 id=\"第四步-迁移-settings-gradle-文件\"> 第四步：迁移 settings.gradle 文件</h2>\n<blockquote>\n<p>注意：在开始这一步之前，你应该要关掉 Gradle 的 auto-sync 功能，否则它会让你十分抓狂。当你完成了整个工程的迁移工作之后，可以将其再次打开。</p>\n</blockquote>\n<blockquote>\n<p>译者注：其实 Gradle 官方并不推荐开启 auto-sync 功能，官方推荐的是开启 auto-load，但是最好是开发者自己去 sync<sup></sup></p>\n</blockquote>\n<p>使用重命名文件(<kbd>shift + F6</kbd>)功能将 settings.gradle 文件重命名为 settings.gradle.kts。</p>\n<p>对于一个新建的工程，如下所示：</p>\n<div><pre><code><span>//settings.gradle.kts</span>\n<span>include</span><span>(</span><span>\":app\"</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h2 id=\"第五步-迁移根目录-build-gradle-文件\"> 第五步：迁移根目录 build.gradle 文件</h2>\n<p>对根目录的 build.gradle 文件进行类似上一步的操作，将它的文件名修改为 build.gradle.kts</p>\n<div><pre><code><span>//build.gradle.kts (Project)</span>\n<span>// Top-level build file where you can add configuration options common to all sub-projects/modules.</span>\nbuildscript <span>{</span>\n    <span>val</span> kotlinVersion <span>=</span> <span>\"1.3.11\"</span>\n    repositories <span>{</span>\n        <span>google</span><span>(</span><span>)</span>\n        <span>jcenter</span><span>(</span><span>)</span>\n    <span>}</span>\n    dependencies <span>{</span>\n        <span>classpath</span><span>(</span><span>\"com.android.tools.build:gradle:3.3.0\"</span><span>)</span>\n        <span>classpath</span><span>(</span><span>kotlin</span><span>(</span><span>\"gradle-plugin\"</span><span>,</span> kotlinVersion<span>)</span><span>)</span>\n\n        <span>// NOTE: Do not place your application dependencies here; they belong</span>\n        <span>// in the individual module build.gradle files</span>\n    <span>}</span>\n<span>}</span>\n\nallprojects <span>{</span>\n    repositories <span>{</span>\n        <span>google</span><span>(</span><span>)</span>\n        <span>jcenter</span><span>(</span><span>)</span>\n    <span>}</span>\n<span>}</span>\n\ntasks <span>{</span>\n    <span>val</span> clean <span>by</span> <span>registering</span><span>(</span>Delete<span>::</span><span>class</span><span>)</span> <span>{</span>\n        <span>delete</span><span>(</span>buildDir<span>)</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div><h2 id=\"第六步-迁移模块的-settings-gradle-文件\"> 第六步：迁移模块的 settings.gradle 文件</h2>\n<p>对于模块的 settings.gradle 文件，我们也执行同样的操作，将它的文件名修改为 build.gradle.kts</p>\n<div><pre><code><span>import</span> org<span>.</span>jetbrains<span>.</span>kotlin<span>.</span>config<span>.</span>KotlinCompilerVersion\n\nplugins <span>{</span>\n    <span>id</span><span>(</span><span>\"com.android.application\"</span><span>)</span>\n    <span>kotlin</span><span>(</span><span>\"android\"</span><span>)</span>\n    <span>kotlin</span><span>(</span><span>\"android.extensions\"</span><span>)</span>\n<span>}</span>\n\nandroid <span>{</span>\n    <span>compileSdkVersion</span><span>(</span><span>28</span><span>)</span>\n    defaultConfig <span>{</span>\n        applicationId <span>=</span> <span>\"com.yggdralisk.githubbrowser\"</span>\n        <span>minSdkVersion</span><span>(</span><span>21</span><span>)</span>\n        <span>targetSdkVersion</span><span>(</span><span>28</span><span>)</span>\n        versionCode <span>=</span> <span>1</span>\n        versionName <span>=</span> <span>\"1.0\"</span>\n        testInstrumentationRunner <span>=</span> <span>\"android.support.test.runner.AndroidJUnitRunner\"</span>\n    <span>}</span>\n    buildTypes <span>{</span>\n        <span>getByName</span><span>(</span><span>\"release\"</span><span>)</span> <span>{</span>\n            isMinifyEnabled <span>=</span> <span>false</span>\n            <span>proguardFiles</span><span>(</span><span>getDefaultProguardFile</span><span>(</span><span>\"proguard-android.txt\"</span><span>)</span><span>,</span> <span>\"proguard-rules.pro\"</span><span>)</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n\ndependencies <span>{</span>\n    <span>implementation</span><span>(</span><span>fileTree</span><span>(</span><span>mapOf</span><span>(</span><span>\"dir\"</span> <span>to</span> <span>\"libs\"</span><span>,</span> <span>\"include\"</span> <span>to</span> <span>listOf</span><span>(</span><span>\"*.jar\"</span><span>)</span><span>)</span><span>)</span><span>)</span>\n    <span>implementation</span><span>(</span><span>kotlin</span><span>(</span><span>\"stdlib-jdk7\"</span><span>,</span> KotlinCompilerVersion<span>.</span>VERSION<span>)</span><span>)</span>\n    <span>implementation</span><span>(</span><span>\"com.android.support:appcompat-v7:28.0.0\"</span><span>)</span>\n    <span>testImplementation</span><span>(</span><span>\"junit:junit:4.12\"</span><span>)</span>\n    <span>androidTestImplementation</span><span>(</span><span>\"com.android.support.test:runner:1.0.2\"</span><span>)</span>\n    <span>androidTestImplementation</span><span>(</span><span>\"com.android.support.test.espresso:espresso-core:3.0.2\"</span><span>)</span>\n<span>}</span>\n\nrepositories <span>{</span>\n    <span>mavenCentral</span><span>(</span><span>)</span>\n    <span>maven</span><span>(</span><span>\"http://repository.jetbrains.com/all\"</span><span>)</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br></div></div><h2 id=\"示例文件链接\"> 示例文件链接</h2>\n<p>你可以在我的 GitHub 仓库中找到能用的 Gradle 示例文件，你也可以在任何时间随意地分叉和复制这些文件。</p>\n<ul>\n<li><a href=\"https://github.com/JanStoltman/GithubBrowser/blob/master/settings.gradle.kts\" target=\"_blank\" rel=\"noopener noreferrer\">settings.gradle.kts</a></li>\n<li><a href=\"https://github.com/JanStoltman/GithubBrowser/blob/master/build.gradle.kts\" target=\"_blank\" rel=\"noopener noreferrer\">根目录 build.gradle.kts</a></li>\n<li><a href=\"https://github.com/JanStoltman/GithubBrowser/blob/master/app/build.gradle.kts\" target=\"_blank\" rel=\"noopener noreferrer\">模块 build.gradle.kts</a></li>\n</ul>\n<p>如果你在迁移中遇到了任何问题，记住要查看 <strong>build/sync logs</strong> 里面的错误提示，而不是看 Android Studio 弹出的错误提示，因为 Android Studio 对于 Gradle Kotlin DSL 的支持还远远称不上完美。</p>\n<hr>\n<section>\n<ol>\n<li id=\"footnote1\"><p>https://docs.gradle.org/current/userguide/kotlin_dsl.html#automatic_build_import_vs_automatic_reloading_of_script_dependencies </p>\n</li>\n</ol>\n</section>\n",
      "date_published": "2021-07-15T11:52:03.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Android"
      ]
    },
    {
      "title": "技术开发",
      "url": "https://wafer.li/blog-corners/tech/",
      "id": "https://wafer.li/blog-corners/tech/",
      "content_html": "<p>技术开发</p>\n<p>记录我的技术开发生涯的各种想法、踩坑和折腾。</p>\n",
      "date_published": "2021-07-09T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": []
    },
    {
      "title": "GPG + Yubikey 4 折腾手记",
      "url": "https://wafer.li/blog-corners/tech/tinkering/gpg/GPG%20+%20Yubikey%204%20%E6%8A%98%E8%85%BE%E6%89%8B%E8%AE%B0/",
      "id": "https://wafer.li/blog-corners/tech/tinkering/gpg/GPG%20+%20Yubikey%204%20%E6%8A%98%E8%85%BE%E6%89%8B%E8%AE%B0/",
      "summary": "<p>GPG 相信很多人都折腾过，Yubikey 也有很多人买过；</p>\n<p>但是好像只有老外折腾过 Yubikey + GPG 的；</p>\n<p>最近刚折腾完毕，因为自己不慎还把一个老钥匙搞丢了，现在只能随它去了；</p>\n<p>这里就写写我折腾过程中遇到的坑，前车之鉴，后事之师。</p>\n",
      "content_html": "<p>GPG 相信很多人都折腾过，Yubikey 也有很多人买过；</p>\n<p>但是好像只有老外折腾过 Yubikey + GPG 的；</p>\n<p>最近刚折腾完毕，因为自己不慎还把一个老钥匙搞丢了，现在只能随它去了；</p>\n<p>这里就写写我折腾过程中遇到的坑，前车之鉴，后事之师。</p>\n\n<h2 id=\"准备-yubikey\"> 准备 Yubikey</h2>\n<p>Yubikey 买不就行了，为什么要单开一个 section 来说呢？</p>\n<p>其实 Yubikey 目前主要有两个系列，一个是 Yubikey 4，一个是 Yubikey NEO。</p>\n<p>这两者有什么区别呢？</p>\n<ol>\n<li>Yubikey 4 不支持 NFC，但是可以支持 4096 bit 的密钥</li>\n<li>Yubikey NEO 支持 NFC，但是只能支持 2048 bit 的密钥</li>\n</ol>\n<p>也就是说，如果你想在手机上用，那么就只能使用 2048 bit 的密钥；</p>\n<p>如果你想更长的密钥，就不能在手机上用。</p>\n<p>当然，除了用于 GPG 的 Smartcard 以外，Yubikey 还可以用于两步验证等其他方面，这就要看你的需求的取舍了，这个东西在你买的时候就要考虑好。</p>\n<h2 id=\"安装-gpg\"> 安装 GPG</h2>\n<p>折腾 GPG 的第一步当然就是安装 GPG，我使用的是 Mac，所以直接安装 <a href=\"https://gpgtools.org/\" target=\"_blank\" rel=\"noopener noreferrer\">GPGSuite</a>，然后再用 <code>brew</code> 安装 <code>gnupg</code> 就行了。</p>\n<p>不过，如果你使用 4096 bit 的密钥，那么你需要使用 <code>gpg2</code> 而不是 <code>gpg</code></p>\n<h2 id=\"编辑卡的信息\"> 编辑卡的信息</h2>\n<p>把 Yubikey 拿到手之后我们先别忙着生成密钥，首先，我们要配置一下卡的信息，其实主要就是设置卡的 PIN 和 Admin PIN，而这个在要把密钥导入卡的时候需要。</p>\n<p>将卡插入 USB，然后执行 <code>gpg2 --card-edit</code>；</p>\n<p>然后你就会看到卡的相关信息：</p>\n<div><pre><code>Reader <span>..</span><span>..</span><span>..</span><span>..</span><span>..</span>.: Yubico Yubikey <span>4</span> OTP U2F CCID\nApplication ID <span>..</span>.: D2760001240102010006046218630000\nVersion <span>..</span><span>..</span><span>..</span><span>..</span><span>..</span>: <span>2.1</span>\nManufacturer <span>..</span><span>..</span>.: Yubico\nSerial number <span>..</span><span>..</span>: 04621863\nName of cardholder: Wafer Li\nLanguage prefs <span>..</span>.: zh\nSex <span>..</span><span>..</span><span>..</span><span>..</span><span>..</span><span>..</span><span>..</span>: 男性\nURL of public key <span>:</span> hkp://keys.gnupg.net\nLogin data <span>..</span><span>..</span><span>..</span>.: omyshokami@gmail.com\nSignature PIN <span>..</span><span>..</span>: 必须\nKey attributes <span>..</span>.: rsa4096 rsa4096 rsa4096\nMax. PIN lengths .: <span>127</span> <span>127</span> <span>127</span>\nPIN retry counter <span>:</span> <span>3</span> <span>0</span> <span>3</span>\nSignature counter <span>:</span> <span>43</span>\nSignature key <span>..</span><span>..</span>: E219 29F0 DEC5 FAEC 434A  91D7 E22B 63C2 E449 298F\n      created <span>..</span><span>..</span>: <span>2018</span>-01-21 09:31:56\nEncryption key<span>..</span><span>..</span>: 20F2 E95E 0107 <span>1097</span> A853  A5CC E6AB <span>1330</span> 6FE4 E5D9\n      created <span>..</span><span>..</span>: <span>2018</span>-01-21 09:31:56\nAuthentication key: C1A4 <span>2561</span> 3A5D E7D5 4CBF  CD4B <span>7440</span> <span>5003</span> FFA1 <span>4684</span>\n      created <span>..</span><span>..</span>: <span>2018</span>-01-21 09:32:39\nGeneral key info<span>..</span>: pub  rsa4096/E22B63C2E449298F <span>2018</span>-01-21 Wafer Li <span>(</span>Gmail. Mainly used <span>in</span> <span>git</span><span>)</span> <span>&lt;</span>omyshokami@gmail.com<span>></span>\nsec<span>></span>  rsa4096/E22B63C2E449298F  创建于：2018-01-21  有效至：2020-01-21\n                                卡号：0006 04621863\nssb<span>></span>  rsa4096/E6AB13306FE4E5D9  创建于：2018-01-21  有效至：2020-01-21\n                                卡号：0006 04621863\nssb<span>></span>  rsa4096/74405003FFA14684  创建于：2018-01-21  有效至：2020-01-21\n                                卡号：0006 04621863\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div><p>然后输入 <code>admin</code>，再输入 <code>help</code>，就可以使用管理员命令并看到相关帮助：</p>\n<div><pre><code>gpg/card<span>></span> admin\n允许使用管理员命令\n\ngpg/card<span>></span> <span>help</span>\nquit           离开这个菜单\nadmin          显示管理员命令\n<span>help</span>           显示这份在线说明\nlist           列出所有可用数据\nname           更改卡持有人的姓名\nurl            更改获取密钥的 URL\nfetch          根据卡中指定的 URL 获取密钥\nlogin          更改登录名\nlang           更改首选语言首选\nsex            更改卡持有人的性别\ncafpr          更改一个 CA 指纹\nforcesig       设定 PIN 签名是否必须\ngenerate       生成新的密钥\n<span>passwd</span>         更改或解锁 PIN 的菜单\nverify         验证 PIN 并列出所有数据\nunblock        unblock the PIN using a Reset Code\nfactory-reset  destroy all keys and data\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p>最近 <code>gpg2</code> 的中文化做的不错，相信你已经看懂大概了，要修改密码，我们输入 <code>passwd</code>：</p>\n<div><pre><code>gpg/card<span>></span> <span>passwd</span>\ngpg: 检测到 OpenPGP 卡号 D2760001240102010006046218630000\n\n<span>1</span> - change PIN\n<span>2</span> - unblock PIN\n<span>3</span> - change Admin PIN\n<span>4</span> - <span>set</span> the Reset Code\nQ - quit\n\n您的选择？\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>然后我们分别输入 <code>1</code>  和 <code>2</code> 去修改 PIN 和 Admin PIN。</p>\n<p>接着会弹出一个框让你输入原来的 PIN，那么原来的 PIN 是什么呢？</p>\n<p>根据 Yubikey 的文档，<strong>PIN 和 Admin PIN 的出厂设置都是 12345678</strong>。</p>\n<p>记住这个密码，如果你接下来把东西搞炸了，你还可以把 Yubikey 恢复出厂设置，这时你就需要它了。</p>\n<p>改完密码之后我们选择 <code>Q</code> 和 <code>quit</code> 退出卡的编辑界面，注意不要 <code>Ctrl + C</code>，可能会丢失修改，最好还是使用它的退出来退出。</p>\n<h2 id=\"生成密钥\"> 生成密钥</h2>\n<p>现在我们终于要生成密钥了，生成密钥这个很多人都讲过了，操作也就那些，这里就不再细讲，说点要注意的地方。</p>\n<p>首先就是密钥的长度，如果你使用 Yubikey 4 的话，使用 4096 bit 的，如果你使用 Yubikey NEO 的话，那么就只能使用默认的 2048 bit 了。</p>\n<p>但是，如果你以后想换成 Yubikey NEO 的话，那么还是用 2048 的，不要用 4096 的。</p>\n<p>然后在生成密钥的时候为了让它得到更多的熵，多动动鼠标就行了，不需要敲键盘，否则就敲到什么命令了。</p>\n<p>生成完毕之后，输入 <code>gpg2 --expert --edit-key KEYID</code> 进入下一个步骤。</p>\n<h3 id=\"生成子密钥\"> 生成子密钥</h3>\n<p>这个可能很多人没讲过，实际上 Yubikey 可以存储 3 种密钥，签名、加密和认证；</p>\n<p>默认生成的只有签名密钥和加密密钥，并不会生成认证密钥。</p>\n<p>认证密钥有什么用呢？我查到主要还是用于 SSH 登录，不过这次我没有折腾出来，之后可能会写另外一篇关于这个的文章。</p>\n<p>刚才我们进入了 <code>--edit-key</code> 的界面，在这里我们输入 <code>addkey</code> 就可以增加一个子密钥了。</p>\n<div><pre><code>gpg<span>></span> addkey\n主钥的私钥部分存储在卡上。\n请选择您要使用的密钥种类：\n   <span>(</span><span>3</span><span>)</span> DSA <span>(</span>仅用于签名<span>)</span>\n   <span>(</span><span>4</span><span>)</span> RSA <span>(</span>仅用于签名<span>)</span>\n   <span>(</span><span>5</span><span>)</span> ElGamal <span>(</span>仅用于加密<span>)</span>\n   <span>(</span><span>6</span><span>)</span> RSA <span>(</span>仅用于加密<span>)</span>\n   <span>(</span><span>7</span><span>)</span> DSA <span>(</span>自定义用途<span>)</span>\n   <span>(</span><span>8</span><span>)</span> RSA <span>(</span>自定义用途<span>)</span>\n  <span>(</span><span>10</span><span>)</span> ECC <span>(</span>sign only<span>)</span>\n  <span>(</span><span>11</span><span>)</span> ECC <span>(</span>set your own capabilities<span>)</span>\n  <span>(</span><span>12</span><span>)</span> ECC <span>(</span>encrypt only<span>)</span>\n  <span>(</span><span>13</span><span>)</span> Existing key\n您的选择？\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>这里之所以出现这么多选项是因为我们上面使用了 <code>--expert</code> 模式，如果你要创建认证密钥，那么就必须使用这种模式。</p>\n<p>在这里我们选择 8，用 RSA 算法来生成认证子密钥。</p>\n<div><pre><code>RSA 密钥可能的操作：签名 加密 认证\n目前允许的操作：签名 加密\n\n   <span>(</span>S<span>)</span> 选择是否用于签名\n   <span>(</span>E<span>)</span> 选择是否用于加密\n   <span>(</span>A<span>)</span> 选择是否用于认证\n   <span>(</span>Q<span>)</span> 已完成\n\n您的选择？\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>这里给你的选项是个开关选项，像现在的状态，我如果选择 S，上面的 <em>目前允许的操作</em> 就会变成只有加密。</p>\n<div><pre><code>您的选择？ s\n\nRSA 密钥可能的操作：签名 加密 认证\n目前允许的操作：加密\n\n   <span>(</span>S<span>)</span> 选择是否用于签名\n   <span>(</span>E<span>)</span> 选择是否用于加密\n   <span>(</span>A<span>)</span> 选择是否用于认证\n   <span>(</span>Q<span>)</span> 已完成\n\n您的选择？\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>然后我们让这个密钥只能进行认证，然后生成它就行了。</p>\n<p>最后输入 <code>save</code> 保存并退出。</p>\n<h2 id=\"备份密钥\"> 备份密钥</h2>\n<p>注意！</p>\n<p><strong>这个操作必须在将密钥传入 Yubikey 之前进行！</strong></p>\n<p>备份是很重要的，一旦你将密钥传入 Yubikey 中，那么就再也取不出来了！</p>\n<p style=\"font-weight: bold; font-size: x-large\">而且尤其注意要备份你的主密钥！<p>\n<p>你的主密钥不仅具有签名功能，而且还代表了你的身份，如果丢失了主密钥，就意味着你的身份就此丢失，你只能创建一个新的密钥，并把原来的吊销掉。</p>\n<p>这里尤其要注意：</p>\n<p style=\"font-weight: bold; font-size: xx-large\">请记住你的密钥 passphrase<p>\n<p>因为 GPG 在导入一个私钥的时候会要求它的密码，如果你把它忘记了，那么你就丢失了你的密钥。</p>\n<p>使用下面的命令来导出你的私钥：</p>\n<div><pre><code>gpg2 --armor --export-secret-keys KEYID &gt;&gt; private.asc\n</code></pre>\n<div><span>1</span><br></div></div><p>请好好保存它，并记住它的密码。</p>\n<h2 id=\"转移密钥到-yubikey\"> 转移密钥到 Yubikey</h2>\n<p>当你备份并保存好你的主私钥之后，就可以将密钥传入 Yubikey 了。</p>\n<p>当然其实也可以不将主密钥传到 Yubikey 中，不过在有了良好备份的情况下，我们就可以追求更高的安全性，毕竟把你的私钥保存在电脑里面总是不好的。</p>\n<p>进入密钥编辑模式：</p>\n<div><pre><code>gpg2 --edit-key KEYID\n</code></pre>\n<div><span>1</span><br></div></div><p>输入 <code>toggle</code>，然后输入 <code>keytocard</code>，输入 <code>y</code> 确认将主密钥传入 Yubikey 中，然后选择 <code>1</code>，将主密钥作为签名密钥。</p>\n<p>这时就会把你的主密钥传到 Yubikey 中，这时它就会问你密钥的密码，还有 Yubikey 的 Admin PIN。</p>\n<p>输入 <code>key 1</code> 选择<strong>第二个</strong>密钥：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/006tNc79ly1fnppmejbx9j307b06ft8m.jpg\" alt=\"\" /></p>\n<p>这时候你的第二个密钥就会有个 <code>*</code>，如上图所示。</p>\n<p>然后继续输入 <code>keytocard</code> 将密钥传入，接着选择对应的密钥类型就行了。</p>\n<p>第二个密钥传入完成之后，我们输入 <code>key 1</code> <strong>取消选择第二个密钥</strong>。</p>\n<p><img src=\"https://ws4.sinaimg.cn/large/006tNc79ly1fnpppmud1vj307b061q2u.jpg\" alt=\"\" /></p>\n<p>接着，我们再输入 <code>key 2</code> 选择第三个密钥。</p>\n<p><img src=\"https://ws4.sinaimg.cn/large/006tNc79ly1fnppq8ms3xj308105lq2u.jpg\" alt=\"\" /></p>\n<p>接着再输入 <code>keytocard</code> 传入 Yubikey，选择对应的密钥类型就行了。</p>\n<h2 id=\"关于-keytocard-的说明\"> 关于 keytocard 的说明</h2>\n<p>当你使用了 keytocard 之后会发现，好像你的密钥并没有传出去啊？</p>\n<p>如果你使用 <code>gpg2 --export-secret-keys</code> 也能正常导出，这是怎么回事呢？</p>\n<p>其实，<code>keytocard</code> 的确将你的密钥导出了，但是它在电脑里面留下了一个 stub，这个实际上是没有什么用的。</p>\n<p>使用 <code>gpg2 --export-secret-keys</code> 可以将你的密钥导出，但是，并没有什么卵用，它不是真的私钥，如果你将你的 Yubikey 恢复出厂设置，删掉你的私钥并将这个新导出的导入。</p>\n<p>然后你就会发现你<strong>并没有导入私钥</strong>，在你的钥匙链里面显示的你的密钥是<strong>公钥</strong>，并不是密钥对。</p>\n<p>这也是为什么我一再强调必须备份私钥并记住密码的原因了；</p>\n<p>假如你随便乱搞，没有备份私钥又将 Yubikey 恢复出厂设置，那么你的私钥就彻底丢失了。</p>\n<h2 id=\"使用密钥\"> 使用密钥</h2>\n<p>GPG 能干嘛呢？可以给邮件加密，给 Git Commit 签名之类的。</p>\n<p>或者你可以直接用 <code>gpg2 --clearsign</code> 签名一段信息；</p>\n<p>如果你没用 Yubikey，那么 GPG 会直接询问你的密钥 passphrase；</p>\n<p>但是如果你使用了 Yubikey，那么它就不会问你 passphrase，而是问你的 Yubikey PIN 作为密码。</p>\n<p>如果你在 Yubikey 拔掉的时候进行 GPG 签名或者加密操作，那么它就会要求你插入智能卡。</p>\n<p>如果你遇见了上面的情况，那么就说明你的配置成功了。</p>\n<h2 id=\"yubikey-的支持性\"> Yubikey 的支持性</h2>\n<p>目前来看，PC 端(Mac)和 Android 都支持使用 Yubikey；</p>\n<p>但是 Chrome 插件就不行了，还是只能使用 passphrase 解锁私钥。</p>\n<p>这也是为什么要让你记住 passphrase 的原因。</p>\n<h2 id=\"最后\"> 最后</h2>\n<p>说了这么多，最后欢迎大家导入我的公钥给我发加密邮件。</p>\n<p>我的密钥是 E449298F\n指纹：E219 29F0 DEC5 FAEC 434A  91D7 E22B 63C2 E449 298F</p>\n<p>你应该会至少看到 3 个标识，两个邮箱，一个 PhotoID；</p>\n<p>其中邮箱有 Tsanie Lily(1701D0C1) 的签名。</p>\n",
      "image": "https://ws1.sinaimg.cn/large/006tNc79ly1fnppmejbx9j307b06ft8m.jpg",
      "date_published": "2021-07-15T11:52:03.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "GPG"
      ]
    },
    {
      "title": "Hexo Experience",
      "url": "https://wafer.li/blog-corners/tech/tinkering/hexo/Hexo%20Experience/",
      "id": "https://wafer.li/blog-corners/tech/tinkering/hexo/Hexo%20Experience/",
      "summary": "<h2 id=\"_1-简介\"> 1. 简介</h2>\n<p>这是我折腾 Hexo 博客框架的经验；</p>\n<p>希望能给后来者以启迪。</p>\n",
      "content_html": "<h2 id=\"_1-简介\"> 1. 简介</h2>\n<p>这是我折腾 Hexo 博客框架的经验；</p>\n<p>希望能给后来者以启迪。</p>\n\n<h2 id=\"_2-我所需要的功能\"> 2. 我所需要的功能</h2>\n<p>虽然，现今，网上已经很多教你如何一步一步地搭建 Hexo 博客，也有很多人踩过很多坑；</p>\n<p>不过，对于我的一些要求，仍然有很多的方面未能解决。</p>\n<p>我主要需要的功能一共有四个：</p>\n<ol>\n<li>数学公式渲染</li>\n<li>PlantUML 图</li>\n<li>TODO List</li>\n<li>Footnotes</li>\n</ol>\n<h2 id=\"_3-数学公式渲染\"> 3. 数学公式渲染</h2>\n<p>这个倒是有很多人发了很多博客，然后也解决了一些问题。</p>\n<p>主要就是 <a href=\"https://www.npmjs.com/package/hexo-renderer-marked\" target=\"_blank\" rel=\"noopener noreferrer\"><code>hexo-renderer-marked</code></a> 中，把 MathJax 中的 <code>_</code> 解析渲染成了斜体；</p>\n<p>这样，就造成了解析错误；</p>\n<p>同时，对于多行的数学公式，也存在很多问题。</p>\n<p>经过一番倒腾，我的最终决定是使用 <a href=\"https://www.npmjs.com/package/hexo-renderer-kramed\" target=\"_blank\" rel=\"noopener noreferrer\"><code>hexo-renderer-karmed</code></a> 代替原先官方自带的 <a href=\"https://www.npmjs.com/package/hexo-renderer-marked\" target=\"_blank\" rel=\"noopener noreferrer\"><code>hexo-renderer-marked</code></a></p>\n<p>对于另外的渲染器，它们主要的缺点有：</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/hexo-renderer-pandoc\" target=\"_blank\" rel=\"noopener noreferrer\"><code>hexo-renderer-pandoc</code></a> 过于沉重</li>\n<li><a href=\"https://www.npmjs.com/package/hexo-renderer-markdown-it\" target=\"_blank\" rel=\"noopener noreferrer\"><code>hexo-renderer-markdown-it</code></a> 不支持 NexT 主题的 『Read More』</li>\n</ul>\n<p>所以，最后选择使用 <a href=\"https://www.npmjs.com/package/hexo-renderer-markdown-it\" target=\"_blank\" rel=\"noopener noreferrer\"><code>hexo-renderer-karmed</code></a>；</p>\n<p>不过这个插件在某些时候也存在问题；</p>\n<p>在<a href=\"http://xudongyang.coding.me/math-in-hexo/\" target=\"_blank\" rel=\"noopener noreferrer\">这里</a>有一个 workaround</p>\n<h2 id=\"_4-plantuml\"> 4. PlantUML</h2>\n<p>平时我主要使用的 UML 绘图工具就是这个；</p>\n<p>主要是因为我用 Atom 上面的 <code>markdown-preview-enhanced</code> 能够实时展现 PlantUML 图。</p>\n<p>Hexo 插件列表中，也存在一个 PlantUML 的插件，<code>hexo-tag-plantuml</code>；</p>\n<p>不过这个是 <code>tag</code> 插件，如果使用这个的话，我就需要使用标签来定义 UML；</p>\n<p>而不能使用 markdown 原生的 code fence；</p>\n<p>此时，我的 <code>markdown-preview-enhanced</code> 也会不起作用；</p>\n<p>所以就只能自造轮子：自己实现了一个 <code>filter</code> 插件，用来将 code fence 转换成 PlantUML 图。</p>\n<p>插件源码在<a href=\"https://github.com/wafer-li/hexo-filter-plantuml\" target=\"_blank\" rel=\"noopener noreferrer\">这里</a></p>\n<h2 id=\"_5-todo-list\"> 5. TODO List</h2>\n<p>这个是比较神奇的：</p>\n<p>之前选择的 <code>kramed</code> 没有这个功能，而 <code>marked</code> 有这个功能；</p>\n<p>不过幸好代码量不多，可以直接将 <a href=\"https://github.com/hexojs/hexo-renderer-marked/pull/32\" target=\"_blank\" rel=\"noopener noreferrer\">PR</a> 中的改动合并到 <code>kramed</code> 中。</p>\n<h2 id=\"_6-footnotes\"> 6. Footnotes</h2>\n<p>这个实际上是一个 Reference 的功能；</p>\n<p>这个是目前最容易而且也没有坑的；</p>\n<p>直接安装 <a href=\"https://www.npmjs.com/package/hexo-reference\" target=\"_blank\" rel=\"noopener noreferrer\"><code>hexo-reference</code></a> 插件即可。</p>\n<h2 id=\"参考链接\"> 参考链接</h2>\n<p><a href=\"http://ijiaober.github.io/categories/hexo/\" target=\"_blank\" rel=\"noopener noreferrer\">Goon X 的 Hexo 合集</a></p>\n<p><a href=\"http://2wildkids.com/2016/10/06/%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86Hexo%E5%92%8CMathJax%E7%9A%84%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/\" target=\"_blank\" rel=\"noopener noreferrer\">如何处理Hexo和MathJax的兼容问题</a></p>\n",
      "date_published": "2021-07-15T11:52:03.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Hexo"
      ]
    },
    {
      "title": "Hexo 集成 Travis CI 自动部署博文",
      "url": "https://wafer.li/blog-corners/tech/tinkering/hexo/Hexo%20%E9%9B%86%E6%88%90%20Travis%20CI%20%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%8D%9A%E6%96%87/",
      "id": "https://wafer.li/blog-corners/tech/tinkering/hexo/Hexo%20%E9%9B%86%E6%88%90%20Travis%20CI%20%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%8D%9A%E6%96%87/",
      "summary": "<p>这个想法是我在折腾 Hexo Next 6.0 的时候发现的，有位仁兄在 Next 的新 repo 问如何处理 CI 问题，受到他的启发，我就开始折腾使用 Travis CI 进行博客的自动部署了。</p>\n",
      "content_html": "<p>这个想法是我在折腾 Hexo Next 6.0 的时候发现的，有位仁兄在 Next 的新 repo 问如何处理 CI 问题，受到他的启发，我就开始折腾使用 Travis CI 进行博客的自动部署了。</p>\n\n<h2 id=\"_1-为什么要用-ci-来部署博客\"> 1. 为什么要用 CI 来部署博客</h2>\n<p>遇到一项新技术，一个好习惯就是问一下自己 <strong>为什么要用这个新技术</strong>，它带来了什么好处，解决了什么问题？否则就会陷入为了使用新技术而使用新技术的陷阱之中。</p>\n<p>那么为什么要用 CI 来部署呢？好处是显而易见的：</p>\n<p>在未采用 CI 的时候，编写完博客总需要自己手动 <code>hexo g -d</code>，这种工作是重复性的、枯燥的，那么就应当尽量寻找让重复性的工作进行自动化的方法；</p>\n<p>在使用 CI 之后，我只需要执行 <code>git push</code>，将博客的 markdown source 推到远端仓库，剩下的静态页面构建过程就由 CI 接手进行，而不需要我手动打字，而且还占用我的 CPU。</p>\n<p>这虽然方便，但是不禁会有人担心：如果每 push 一次就会自己构建，博客会不会因为 push 上去了一些不好的东西而搞炸了？</p>\n<p>其实这种担心是多余的，只需要在进行了大面积更改的时候先在本地查看一下，如果没有问题就再 push 就行了，这时候虽然需要本地生成，但是你不可能整天重构你的博客，所以 CI 的效率提升还是存在的。</p>\n<h2 id=\"_2-travis-ci-的配置流程\"> 2. Travis CI 的配置流程</h2>\n<p>本博客采用 Travis CI 作为持续集成工具，下面就介绍一下基本的配置流程。</p>\n<p>由于 Travis CI 比较流行，注册和关联 repo 这种操作就不介绍了。</p>\n<h3 id=\"_2-1-获取相关权限\"> 2.1 获取相关权限</h3>\n<p>在配置和使用 Travis CI 之前，我们首先要做的就是为 Travis CI 获取其所需要的权限。</p>\n<p>当然，获取所需要的权限有很多种方法，这里推荐两种，分别为 Access Token和 Deploy Key</p>\n<p>这两种各有好处，Deploy Key 的好处在于安全性比较高，Access Token 的好处是较为灵活。</p>\n<p>下面每种都写了推荐使用的 repo，你可以根据你的 repo 的实际情况来选择。</p>\n<h4 id=\"_2-1-1-使用-depoly-key-进行部署\"> 2.1.1 使用 Depoly Key 进行部署</h4>\n<blockquote>\n<p><strong>本方法适用于大多数的公有博客仓库</strong>\n<strong>同时，仓库内不具备私有的子模块</strong>\n<strong>建议首选</strong></p>\n</blockquote>\n<p>Deploy Key 是一个 SSH Key，区别于个人 SSH Key 的是，它仅对配置了它的仓库有效；</p>\n<p>也就是说，如果应用使用了 Deploy Key，那么应用的权限就仅限于 repo 之中，准确的来说，是仅限于 repo 的 <strong>文件读写权限</strong>。</p>\n<p>这就给 Deploy Key 带来了很高的安全度，即使 Key 泄漏了，威胁到的也只是设置了它的仓库，而不会威胁帐号本身。</p>\n<p>使用了 SSH Key 也就意味着我们是使用 SSH 和 GitHub 进行连接，那么对 SSH 的配置是必不可少的；</p>\n<h5 id=\"_2-1-1-1-密钥生成\"> 2.1.1.1 密钥生成</h5>\n<p>首先我们要生成一对公钥和私钥，这个在很多地方都有操作介绍了，这里就不多讲。</p>\n<div><pre><code>ssh-keygen -t rsa -b <span>4096</span> -C <span>\"email\"</span> -f key_file -N <span>''</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>接着，到 repo 的 Settings 里面创建一个 Deploy Key，把公钥的内容粘贴进去。</p>\n<blockquote>\n<p>如果是 coding.net 的话，是配置在 <code>部署公钥</code> 之中。</p>\n</blockquote>\n<p>然后我们把公钥删掉，避免你误把它加入了 git 中。</p>\n<div><pre><code><span>rm</span> -f key_file.pub\n</code></pre>\n<div><span>1</span><br></div></div><h5 id=\"_2-1-1-2-使用-travis-命令行程序进行加密\"> 2.1.1.2 使用 Travis 命令行程序进行加密</h5>\n<p>密钥显然是不能给别人看的，因此，我们就要把密钥通过 <code>travis</code> 程序加密。</p>\n<p>首先，我们要安装 <code>travis</code></p>\n<div><pre><code>gem <span>install</span> travis\n</code></pre>\n<div><span>1</span><br></div></div><blockquote>\n<p>如果你的 <code>ruby</code> 版本太旧，可能还需要先升级一下。\n<strong>最好在你的 repo 目录下执行 <code>travis</code> 命令</strong>\n方便 <code>travis</code> 自动识别仓库。</p>\n</blockquote>\n<p>然后，我们通过 <code>travis</code> 来登录：</p>\n<div><pre><code>travis login\n</code></pre>\n<div><span>1</span><br></div></div><p>这是为了让 <code>travis</code> 自动将加密好的东西上传到 Settings 的环境变量中，这样就不用我们配置 <code>.travis.yml</code> 文件了。</p>\n<p>接着，我们对文件进行加密：</p>\n<div><pre><code>travis encrypt key_file\n</code></pre>\n<div><span>1</span><br></div></div><p>随后，我们把生成的 <code>.enc</code> 文件加入 git 中，并把私钥删掉。</p>\n<div><pre><code><span>rm</span> -f key_file\n<span>git</span> <span>add</span> key_file.enc\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h5 id=\"_2-1-1-3-配置-known-hosts-和-ssh\"> 2.1.1.3 配置 Known Hosts 和 SSH</h5>\n<p>接下来，我们就进行 SSH 的相关配置；</p>\n<p><strong>首先需要配置的是 Known Hosts，否则 CI 就会卡在问你是否要继续那里。</strong></p>\n<p>然后，我们使用 <code>openssl</code> 把之前加密的文件解压成私钥，最后把私钥配置上就行了。</p>\n<div><pre><code><span>addons</span><span>:</span>\n    <span>ssh_known_hosts</span><span>:</span>\n        <span>-</span> github.com\n        <span>-</span> git.coding.net\n\n<span>before_install</span><span>:</span>\n    <span># SSH Setup</span>\n    <span>-</span> openssl aes<span>-</span>256<span>-</span>cbc <span>-</span>K $encrypted_693585a97b8c_key <span>-</span>iv $encrypted_693585a97b8c_iv <span>-</span>in blog_deploy_key.enc <span>-</span>out blog_deploy_key <span>-</span>d\n    <span>-</span> eval \"$(ssh<span>-</span>agent <span>-</span>s)\"\n    <span>-</span> chmod 600 ./blog_deploy_key\n    <span>-</span> ssh<span>-</span>add ./blog_deploy_key\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h4 id=\"_2-1-2-获取-access-token\"> 2.1.2 获取 Access Token</h4>\n<blockquote>\n<p><strong>本方法适用于具有私有 Submodule 的仓库的情况</strong></p>\n</blockquote>\n<p>GitHub 获取 Access Token 的步骤如下：</p>\n<div><pre><code>Settings -&gt; Developer settings -&gt; Personal access token\n-&gt; Generate new token\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>接着就进入创建 Access Token 的页面了，对于一个博客的 CI 来说，我们需要的权限比较少，我尝试了一下只需要 <code>public_repo</code> 的权限即可；</p>\n<p>为了尽量保证我们 GitHub 帐号的安全，能少给权限就少给。</p>\n<p>然后我们选择生成，此时会返回到 <code>Personal access token</code> 的页面，并显示我们刚才生成的 access token。</p>\n<blockquote>\n<p>需要注意的是，这个 access token <strong>只会在这一个页面显示一次</strong>，切记要复制下来，否则就只能 <strong>重新生成</strong>。</p>\n</blockquote>\n<p>然后我们到博客 repo 的 Travis CI 设置页面中新建一个环境变量，将这个 Access Token 粘贴到环境变量的 value 中。</p>\n<blockquote>\n<p>这里要注意一定要关掉 <code>Display in log</code> 的选项，否则你的 Access Token 就泄漏了。</p>\n</blockquote>\n<h3 id=\"_2-2-只构建含有-travis-yml-文件的分支\"> 2.2 只构建含有 <code>.travis.yml</code> 文件的分支</h3>\n<p>对于本博客而言，我采用单 repo 双分支管理，即一个 <code>source</code> 分支保存原始的 markdown 文件，另一个 <code>master</code> 分支保存用于部署的 HTML。</p>\n<p>对于这种情况，我们就 <strong>必须要</strong> 在 Travis CI 的 <strong>repo 设置页面</strong> 中勾选 <strong>只构建含有 <code>.travis.yml</code> 文件的分支</strong>；</p>\n<p>由于 Travis CI 会侦听 commit 事件进行自动构建，而对于 master 上的 commit，是不含有 <code>.travis.yml</code> 文件也不需要构建的。</p>\n<p>为了防止 Travis CI 构建 master 分支，我们就必须要勾选这个选项。</p>\n<p>有些教程提到使用</p>\n<div><pre><code><span>branches</span><span>:</span>\n    <span>only</span><span>:</span>\n        <span>-</span> source\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>也可以起到只构建 <code>source</code> 的功能；\n不过在我这里这种方法行不通，最后还是使用了只构建含有 <code>.travis,yml</code> 文件的方法。</p>\n<h3 id=\"_2-3-travis-yml-文件的基本配置\"> 2.3 <code>.travis.yml</code> 文件的基本配置</h3>\n<p>本博客使用的 Hexo 框架是采用 Node.js 技术编写的，所以可以直接套用 Node.js 的 Travis CI 流程。</p>\n<p>下面是一些基本的 Node.js <code>.travis.yml</code> 的配置</p>\n<div><pre><code><span># 环境变量，注意一个 item 就会构建一次</span>\n<span># 所以一次构建中需要多个环境变量的，也要写到一行里</span>\n<span>env</span><span>:</span>\n    <span>-</span> ENV_1=xxxxxx ENV_2=yyyyyy\n\n<span>language</span><span>:</span> node_js   <span># 构建的编程语言</span>\n<span>node_js</span><span>:</span> node       <span># Node.js 的版本，node 表示最新版</span>\n\n<span># 缓存的目录</span>\n<span># Node.js 项目一般缓存 node_modules</span>\n<span># 用于加快构建速度</span>\n<span>cache</span><span>:</span>\n  <span>directories</span><span>:</span>\n    <span>-</span> <span>\"node_modules\"</span>\n\n<span># 在 install 阶段之前执行的命令</span>\n<span>before_install</span><span>:</span>\n\n<span># Install 阶段，在这里是 npm install</span>\n<span>install</span><span>:</span> npm install\n\n<span># 在 script 之前执行的命令</span>\n<span>before_script</span><span>:</span>\n\n<span># Script 阶段，执行 hexo 相关命令</span>\n<span>script</span><span>:</span>\n    <span>-</span> hexo clean\n    <span>-</span> hexo g <span>-</span>d <span>-</span><span>-</span>config source/_data/next.yml\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div><p>在拥有 <code>.travis.yml</code> 文件后，每次 commit 之后 Travis CI 就会读取这个文件用来进行自动化构建工作</p>\n<h2 id=\"_3-相关的坑\"> 3. 相关的坑</h2>\n<p>当然，Travis CI 的配置不可能这么一帆风顺，还存在着非常多的坑。</p>\n<p>下面就来介绍一下我所遇到的坑，希望给大家以前车之鉴。</p>\n<h3 id=\"_3-1-git-submodule-的坑\"> 3.1 Git Submodule 的坑</h3>\n<p>如果你的 GitHub 使用了两步验证，那么你平时肯定是使用 ssh 的地址进行 git 的相关操作；</p>\n<p>但是对于 Travis CI 的虚拟机来说，它不具备你的 SSH key，当然也就不能使用 ssh 地址进行 clone 和 push。</p>\n<p>特别是对于 git submodule，由于 Travis CI 自己可以处理 https 地址的 submodule，但是如果采用 ssh 方式，它根本就无法 clone 下来。</p>\n<p>此时，我们就需要自己手动管理 git submodule，在 <code>.travis.yml</code> 中增加如下选项：</p>\n<div><pre><code><span>git</span><span>:</span>\n    <span>submodules</span><span>:</span> <span>false</span>\n\n<span>before_install</span><span>:</span>\n    <span>-</span> sed <span>-</span>i 's/git@github.com<span>:</span>/https<span>:</span>\\/\\/github.com\\//' .gitmodules\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>上面的 <code>sed</code> 命令就是将 ssh 地址替换成 https 地址的。</p>\n<p>不过，对于后面的部署阶段，由于要 push 到自己的仓库，所以 deploy 的地址需要修改为 <code>https://&lt;username&gt;:&lt;ACCESS_TOKEN&gt;@github.com/&lt;username&gt;/repo.git</code></p>\n<p>所以，如果使用 <code>hexo-deploy</code> 插件的话，还需要以下的命令：</p>\n<div><pre><code><span>before_script</span><span>:</span>\n    <span>-</span> sed i \"s/git@github.com<span>:</span>/https<span>:</span>\\/\\/yourusername<span>:</span>$<span>{</span>ACCESS_TOKEN<span>}</span>@github.com\\//\" you_config_file.yml\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>把上面的 <code>yourusername</code> 和 <code>your_config_file.yml</code> 作出相应修改即可。</p>\n<h3 id=\"_3-2-安装某些额外程序包\"> 3.2 安装某些额外程序包</h3>\n<p>如果你使用 <code>hexo-all-minifier</code> 来进行 HTML 的相关文件压缩，那么你就需要额外安装一个系统程序包 <code>nasm</code>。</p>\n<p>Travis CI 对此推出了 <code>addons</code> 选项来方便你配置：</p>\n<div><pre><code><span>addons</span><span>:</span>\n  <span>apt</span><span>:</span>\n    <span>packages</span><span>:</span>\n        <span>-</span> nasm\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>这个问题比较难暴露，我查看了很久的 log，最后在 <code>npm install</code> 的 log 里面发现了某个依赖没办法安装；</p>\n<p>最后才发现是缺了一个系统的程序包。</p>\n<h3 id=\"_3-3-patch-某些-hexo-插件\"> 3.3 Patch 某些 Hexo 插件</h3>\n<p>有时候你使用的 Hexo 插件有些问题，虽然有人提出了 PR，但是久久没有合并；</p>\n<p>在本地生成的时代，你需要自己手动 patch 这个插件，然而我们现在使用 CI，当然不可能由你进去复制粘贴。</p>\n<p>这时候，我们可以使用 <code>curl</code> 把 patch 文件下载下来，并覆写相关文件。</p>\n<p>通过下面的命令可以进行覆写操作：</p>\n<div><pre><code><span>curl</span> <span>{</span>raw-path-file-url<span>}</span> <span>>|</span> <span>{</span>problem_file<span>}</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>其中 <code>&gt;|</code> 符号可以使后面的文件清空，类似于文件操作的 <code>w</code> 选项。</p>\n<h3 id=\"_3-4-安装-hexo-next-主题的插件\"> 3.4 安装 Hexo Next 主题的插件</h3>\n<p>Hexo Next 在 6.0 之后，把一些原本在 <code>source/lib</code> 中的 js 文件移到了新的 repo 中，以减少 next 本身 repo 的复杂度。</p>\n<p>但是由于 Next 把 <code>source/lib</code> 这个路径 ignore 了，所以我们要手动将插件 clone 到 <code>source/lib</code> 里面。</p>\n<p>在使用 CI 时，我们需要在 <code>hexo g -d</code> 之前将插件装好：</p>\n<div><pre><code><span>before_script</span><span>:</span>\n  <span>## Theme Dependencies</span>\n  <span>-</span> cd themes/next<span>-</span>reloaded\n  <span># canvas-nest</span>\n  <span>-</span> git clone https<span>:</span>//github.com/theme<span>-</span>next/theme<span>-</span>next<span>-</span>canvas<span>-</span>nest source/lib/canvas<span>-</span>nest\n  <span># fancybox3</span>\n  <span>-</span> git clone https<span>:</span>//github.com/theme<span>-</span>next/theme<span>-</span>next<span>-</span>fancybox3 source/lib/fancybox\n  <span># reading_progress</span>\n  <span>-</span> git clone https<span>:</span>//github.com/theme<span>-</span>next/theme<span>-</span>next<span>-</span>reading<span>-</span>progress source/lib/reading_progress\n  <span>-</span> cd ../..\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>这里需要注意一下当前工作路径的问题，记得切换回原目录。</p>\n<h3 id=\"_3-5-时区问题\"> 3.5 时区问题</h3>\n<p>Travis CI 好像默认使用的是美国的时区，这样就会让你的 master commit 历史变得很乱。</p>\n<p>所以，我们有必要让 Travis CI 和你的本机时区进行统一</p>\n<p>这个配置比较简单，通过设置 <code>TZ</code> 环境变量即可。</p>\n<div><pre><code><span>env</span><span>:</span>\n    <span>global</span><span>:</span>\n        <span>-</span> TZ=Asia/Tokyo\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><blockquote>\n<p>别吐槽我为什么用日本时区，玩游戏需要。</p>\n</blockquote>\n<p>这里需要多说一点的是，如果只有 <code>env</code>，如：</p>\n<div><pre><code><span>env</span><span>:</span>\n    <span>-</span> ENV1=xxxx\n    <span>-</span> ENV2=yyyy\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>此时，Travis CI 就会进行 <strong>两次</strong> 构建，分别采用 <code>ENV1</code> 和 <code>ENV2</code></p>\n<p>而对于 <code>global</code> 的环境变量，就会采取所有的环境变量，只构建一次。</p>\n<h2 id=\"_4-总结\"> 4. 总结</h2>\n<p>经过一段时间的奋战，Travis CI 的集成终于做好了；\n虽然花费了点时间，不过在折腾的过程中还接触了一下 Travis CI 的配置流程，想必还是有些收获的；</p>\n<p>要不人们总说折腾博客比写博客有趣呢？</p>\n",
      "date_published": "2021-07-15T11:52:03.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Hexo"
      ]
    },
    {
      "title": "解决 Travis CI 总是更新旧博客的问题",
      "url": "https://wafer.li/blog-corners/tech/tinkering/hexo/%E8%A7%A3%E5%86%B3%20Travis%20CI%20%E6%80%BB%E6%98%AF%E6%9B%B4%E6%96%B0%E6%97%A7%E5%8D%9A%E5%AE%A2%E7%9A%84%E9%97%AE%E9%A2%98/",
      "id": "https://wafer.li/blog-corners/tech/tinkering/hexo/%E8%A7%A3%E5%86%B3%20Travis%20CI%20%E6%80%BB%E6%98%AF%E6%9B%B4%E6%96%B0%E6%97%A7%E5%8D%9A%E5%AE%A2%E7%9A%84%E9%97%AE%E9%A2%98/",
      "summary": "<p>本文着重介绍一下如何解决 Travis CI 在进行自动集成的时候，总是会更新旧博客的问题。</p>\n<p>之前有想过要把这篇文章合并到上一篇里面，不过这个问题比较隐蔽，而且较难解决，最后还是新开一篇文章来详细讲一下该怎么做，防止以后有人再被这个问题困扰。</p>\n",
      "content_html": "<p>本文着重介绍一下如何解决 Travis CI 在进行自动集成的时候，总是会更新旧博客的问题。</p>\n<p>之前有想过要把这篇文章合并到上一篇里面，不过这个问题比较隐蔽，而且较难解决，最后还是新开一篇文章来详细讲一下该怎么做，防止以后有人再被这个问题困扰。</p>\n\n<h2 id=\"_1-初级症状-master-的-commit-只有两个\"> 1. 初级症状——master 的 commit 只有两个</h2>\n<p>在经过上一篇文章的折腾之后，Travis CI 总算是能够正常执行脚本并提交到 GitHub 上进行；</p>\n<p>不过，如果你查看 master 的 commit 情况就会发现，你原本满满当当的页面构建历史突然就只有两个了。</p>\n<p>博客最重要的就是积累，现在一个构建你的博客就变成新博客了，简直不能忍。</p>\n<p>这个问题的原因在于你的博客目录下没有之前 deploy 会生成的 <code>.deploy_git</code> 这个目录；</p>\n<p>这个目录实际上也就是你的 master 分支，在没有这个目录的情况下，<code>hexo-deploy-git</code> 插件会自动生成 <code>.deploy_git</code>，并将 <code>public</code> 复制到这个目录下；</p>\n<p>然后插件会进行 <strong>force push</strong>！这就是你的 commit 历史会丢失的原因！</p>\n<p>解决方法也很简单，首先你需要在本地进行一次 deploy，来恢复你的 commit 历史</p>\n<p>然后，只需要在每次构建的时候都 <code>clone</code> 一下这个目录，这样你的历史就不会丢失了。</p>\n<p>往 <code>.travis.yml</code> 加入如下脚本即可：</p>\n<div><pre><code><span>before_install</span><span>:</span>\n    <span>-</span> git clone <span>-</span><span>-</span>branch=master <span>{</span>your_blog_repo_git_url<span>}</span> .deploy_git\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h2 id=\"_2-高级症状-旧博客总是被更新\"> 2. 高级症状——旧博客总是被更新</h2>\n<p>这个症状是本文的重点，也是本文最终要解决的问题。</p>\n<p>症状的具体表现在于，博客的更新时间总是最新的；</p>\n<p><strong>就连你没有更新过的旧博客也一样！</strong></p>\n<p>如图所示，图片中的更新时间全部都一样，按常理来说这是不可能的。</p>\n<p><img src=\"https://ws2.sinaimg.cn/large/006tNc79ly1fnedchdb50j30jn0dg0ta.jpg\" alt=\"\" /></p>\n<p>这到底是什么原因呢？</p>\n<h3 id=\"_2-1-症状原因\"> 2.1 症状原因</h3>\n<p>经过一番查询之后，我查到了<a href=\"https://blog.jamespan.me/2016/04/24/restore-files-modification-time-in-git\" target=\"_blank\" rel=\"noopener noreferrer\">这篇博文</a>；</p>\n<p>里面提到，Hexo 并不识别文章的更新时间，而是将这个更新时间交给了系统进行；</p>\n<p>实际上 Hexo 的文章更改时间就是 markdown 文件的 <strong>最后修改时间</strong>；</p>\n<p>到这里，原因已经很明显了：</p>\n<p>由于 Travis CI 在构建的时候，总是 <strong>重新 clone repo</strong>，这就造成了 <strong>所有文件的最后修改时间都是最新的 clone 时间</strong>；</p>\n<p>实际上，这并不是 Travis CI 的问题，而是 git 的问题，git 由于分布式的原因，并不会保留文件的最后修改时间；</p>\n<p>不过，作为一个博客系统来说，我们可以采用 git 的最后 commit 时间来替代，这样子就能恢复文件的修改时间了。</p>\n<h3 id=\"_2-2-解决办法\"> 2.2 解决办法</h3>\n<p>解决方案清楚之后我就开始寻找相关的实现，不过网上现有的一步到位修改文件 last modified time 的实现都不能解决 non-ASCII 的问题；</p>\n<blockquote>\n<p>所谓 non-ASCII 的问题就是当你的文件名含有中文或者其他的字符的时候，脚本就会炸掉，执行不下去。</p>\n</blockquote>\n<p>最后面还是毛主席说得好，自己动手丰衣足食，在参照了<a href=\"https://serverfault.com/a/774574\" target=\"_blank\" rel=\"noopener noreferrer\">这个 StackOverflow 的答案</a>之后，我编写了下面的脚本，终于解决了 non-ASCII 文件名的问题：</p>\n<div><pre><code><span># -*- coding: utf-8 -*-</span>\n\n<span>import</span> subprocess\n<span>import</span> os\n<span>import</span> shlex\n\n<span>if</span> __name__ <span>!=</span> <span>'__main__'</span><span>:</span>\n    <span>raise</span> ImportError<span>(</span><span>\"%s should not be used as a module.\"</span> <span>%</span> __name__<span>)</span>\n\n<span># 'git ls-files -z | xargs -0 -n1 -I{} -- git log -1 --format=\"%ct {}\" {} | sort'</span>\ngit_ls_cmd <span>=</span> <span>'git ls-files -z'</span>\nxargs_cmd <span>=</span> <span>'xargs -0 -n1 -I{} -- git log -1 --format=\"%ct {}\" {}'</span>\nsort_cmd <span>=</span> <span>'sort'</span>\n\nwork_dir <span>=</span> os<span>.</span>getcwd<span>(</span><span>)</span>\n\ngit_ls_result <span>=</span> subprocess<span>.</span>Popen<span>(</span>shlex<span>.</span>split<span>(</span>git_ls_cmd<span>)</span><span>,</span> stdout<span>=</span>subprocess<span>.</span>PIPE<span>)</span>\nxargs_result <span>=</span> subprocess<span>.</span>Popen<span>(</span>shlex<span>.</span>split<span>(</span>xargs_cmd<span>)</span><span>,</span> stdin<span>=</span>git_ls_result<span>.</span>stdout<span>,</span> stdout<span>=</span>subprocess<span>.</span>PIPE<span>)</span>\nresult <span>=</span> subprocess<span>.</span>check_output<span>(</span><span>'sort'</span><span>,</span> stdin<span>=</span>xargs_result<span>.</span>stdout<span>)</span>\n\ntimestamp_file_list <span>=</span> <span>[</span><span>tuple</span><span>(</span>it<span>.</span>split<span>(</span><span>' '</span><span>,</span> <span>1</span><span>)</span><span>)</span> <span>for</span> it <span>in</span> result<span>.</span>decode<span>(</span><span>'utf-8'</span><span>)</span><span>.</span>split<span>(</span><span>'\\n'</span><span>)</span><span>]</span><span>[</span><span>:</span><span>-</span><span>1</span><span>]</span>\n\n<span>for</span> timestamp<span>,</span> file_path <span>in</span> timestamp_file_list<span>:</span>\n    os<span>.</span>utime<span>(</span>os<span>.</span>path<span>.</span>join<span>(</span>work_dir<span>,</span> file_path<span>)</span><span>,</span> <span>(</span><span>int</span><span>(</span>timestamp<span>)</span><span>,</span> <span>int</span><span>(</span>timestamp<span>)</span><span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><p>你也可以在<a href=\"https://gist.github.com/wafer-li/a7a62a4423cf39c43dc56d628ff4c365\" target=\"_blank\" rel=\"noopener noreferrer\">这个 gist</a>里面获取其代码；</p>\n<p>在你把 repo 克隆下来，进行了 <code>user.name</code> 和 <code>user.email</code> 的配置之后，用 <code>python3</code> 执行一下这个脚本，就能恢复文件的最后修改时间。</p>\n<p>相关的 <code>.travis.yml</code> 配置：</p>\n<div><pre><code><span>before_install</span><span>:</span>\n    <span># Git Config</span>\n    <span>-</span> git config <span>-</span><span>-</span>global user.name \"your_user_name\"\n    <span>-</span> git config <span>-</span><span>-</span>global user.email \"your_email\"\n<span># Restore last modified time</span>\n    <span>-</span> chmod +x git_reset_mtime.py\n    <span>-</span> python3 ./git_reset_mtime.py\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><blockquote>\n<p>特别注意！<strong>必须使用 <code>python3</code> 执行</strong>，本脚本目前最低支持到 python 3.4</p>\n</blockquote>\n<blockquote>\n<p>之所以是 3.4 是因为 Travis CI 的 python3 的最新版本就只到 3.4；\n不能采用 3.5 之后才能使用的 <code>subprocess.run()</code></p>\n</blockquote>\n<h3 id=\"_2-3-clone-depth-导致的问题\"> 2.3 Clone Depth 导致的问题</h3>\n<p>在经过上面的一番折腾之后，你会发现一个奇怪的现象：在本地测试脚本完全成功，但是把脚本放到 Travis CI 去运行却不行， <strong>最多只能恢复几天前的修改时间</strong>。</p>\n<p>在查看了一下 Travis CI 的 log 之后，我发现：</p>\n<p>Travis CI 默认会采用 <code>--depth=50</code> 这个参数，也就是说，它之后克隆 <strong>前 50 个 commit</strong>；</p>\n<p>而我们的脚本需要<strong>完整的 git 历史记录</strong>才能正确的恢复文件的修改时间；</p>\n<p>所以，我们还需要取消 Travis CI 的默认 <code>depth</code> 参数，让它克隆我们完整的 git 仓库:</p>\n<div><pre><code><span>git</span><span>:</span>\n    <span>depth</span><span>:</span> <span>false</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h2 id=\"_3-最终的-travis-ci-脚本\"> 3. 最终的 Travis CI 脚本</h2>\n<p>这里给出我最终测试成功的 Travis CI 脚本给大家参考：</p>\n<div><pre><code><span>dist</span><span>:</span> trusty\n<span>sudo</span><span>:</span> required\n\n<span>addons</span><span>:</span>\n    <span>ssh_known_hosts</span><span>:</span>\n        <span>-</span> github.com\n        <span>-</span> git.coding.net\n    <span>apt</span><span>:</span>\n        <span>packages</span><span>:</span>\n            <span>-</span> nasm\n\n<span>env</span><span>:</span>\n    <span>global</span><span>:</span>\n        <span>-</span> ATOM_WRITER_PATCH_URL=https<span>:</span>//raw.githubusercontent.com/wafer<span>-</span>li/hexo<span>-</span>generator<span>-</span>atom<span>-</span>markdown<span>-</span>writer<span>-</span>meta/9f8ab23d42a60a9fa7ef8eed161f216a7716d14d/lib/generator.js\n        <span>-</span> ATOM_WRITER_DIR=node_modules/hexo<span>-</span>generator<span>-</span>atom<span>-</span>markdown<span>-</span>writer<span>-</span>meta/\n        <span>-</span> TZ=Asia/Tokyo\n\n<span>language</span><span>:</span> node_js\n<span>node_js</span><span>:</span> node\n\n<span>branches</span><span>:</span>\n    <span>only</span><span>:</span>\n        <span>-</span> source\n\n<span>git</span><span>:</span>\n    <span>depth</span><span>:</span> <span>false</span>\n    <span>submodules</span><span>:</span> <span>false</span>\n\n<span>cache</span><span>:</span>\n    <span>apt</span><span>:</span> <span>true</span>\n    <span>directories</span><span>:</span>\n        <span>-</span> node_modules\n\n\n<span>before_install</span><span>:</span>\n    <span># Git Config</span>\n    <span>-</span> sed <span>-</span>i 's/git@github.com<span>:</span>/https<span>:</span>\\/\\/github.com\\//' .gitmodules\n    <span>-</span> git config <span>-</span><span>-</span>global user.name \"wafer<span>-</span>li\"\n    <span>-</span> git config <span>-</span><span>-</span>global user.email \"omyshokami@gmail.com\"\n\n    <span># Restore last modified time</span>\n    <span>-</span> <span>\"git ls-files -z | while read -d '' path; do touch -d \\\"$(git log -1 --format=\\\"@%ct\\\" \\\"$path\\\")\\\" \\\"$path\\\"; done\"</span>\n\n    <span># Submodules</span>\n    <span>-</span> git submodule update <span>-</span><span>-</span>recursive <span>-</span><span>-</span>remote <span>-</span><span>-</span>init\n\n    <span># Deploy history</span>\n    <span>-</span> git clone <span>-</span><span>-</span>branch=master <span>-</span><span>-</span>single<span>-</span>branch https<span>:</span>//github.com/wafer<span>-</span>li/wafer<span>-</span>li.github.io.git .deploy_git\n\n    <span># SSH Setup</span>\n    <span>-</span> openssl aes<span>-</span>256<span>-</span>cbc <span>-</span>K $encrypted_XXXXXXXXX_key <span>-</span>iv $encrypted_XXXXXXXXX_iv <span>-</span>in blog_deploy_key.enc <span>-</span>out blog_deploy_key <span>-</span>d\n    <span>-</span> eval \"$(ssh<span>-</span>agent <span>-</span>s)\"\n    <span>-</span> chmod 600 ./blog_deploy_key\n    <span>-</span> ssh<span>-</span>add ./blog_deploy_key\n\n<span>install</span><span>:</span> npm install\n\n<span>before_script</span><span>:</span>\n    <span># Patch atom writer generator</span>\n    <span>-</span> curl $ATOM_WRITER_PATCH_URL <span>></span><span>|</span> $<span>{</span>ATOM_WRITER_DIR<span>}</span>/lib/generator.js\n\n    <span>## Theme Dependencies</span>\n    <span>-</span> cd themes/next<span>-</span>reloaded\n    <span># canvas-nest</span>\n    <span>-</span> git clone https<span>:</span>//github.com/theme<span>-</span>next/theme<span>-</span>next<span>-</span>canvas<span>-</span>nest source/lib/canvas<span>-</span>nest\n    <span># fancybox3</span>\n    <span>-</span> git clone https<span>:</span>//github.com/theme<span>-</span>next/theme<span>-</span>next<span>-</span>fancybox3 source/lib/fancybox\n    <span># reading_progress</span>\n    <span>-</span> git clone https<span>:</span>//github.com/theme<span>-</span>next/theme<span>-</span>next<span>-</span>reading<span>-</span>progress source/lib/reading_progress\n\n    <span>-</span> cd ../..\n\n<span>script</span><span>:</span>\n    <span>-</span> hexo clean\n    <span>-</span> hexo g <span>-</span>d <span>-</span><span>-</span>config source/_data/next.yml\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br></div></div><h2 id=\"_4-参考资料\"> 4. 参考资料</h2>\n<p><a href=\"https://blog.jamespan.me/2016/04/24/restore-files-modification-time-in-git\" target=\"_blank\" rel=\"noopener noreferrer\">从 Git 提交历史中「恢复」文件修改时间</a></p>\n<p><a href=\"https://serverfault.com/a/774574\" target=\"_blank\" rel=\"noopener noreferrer\">How to retrieve the last modification date of all files in a git repository</a></p>\n<p><a href=\"https://github.com/MestreLion/git-tools/blob/master/git-restore-mtime\" target=\"_blank\" rel=\"noopener noreferrer\">git-tools/git-restore-mtime at master · MestreLion/git-tools</a></p>\n",
      "image": "https://ws2.sinaimg.cn/large/006tNc79ly1fnedchdb50j30jn0dg0ta.jpg",
      "date_published": "2021-07-15T11:52:03.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Hexo"
      ]
    },
    {
      "title": "解决脚注中数学公式不能渲染的问题",
      "url": "https://wafer.li/blog-corners/tech/tinkering/hexo/%E8%A7%A3%E5%86%B3%E8%84%9A%E6%B3%A8%E4%B8%AD%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E4%B8%8D%E8%83%BD%E6%B8%B2%E6%9F%93%E7%9A%84%E9%97%AE%E9%A2%98/",
      "id": "https://wafer.li/blog-corners/tech/tinkering/hexo/%E8%A7%A3%E5%86%B3%E8%84%9A%E6%B3%A8%E4%B8%AD%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E4%B8%8D%E8%83%BD%E6%B8%B2%E6%9F%93%E7%9A%84%E9%97%AE%E9%A2%98/",
      "summary": "<p>最近，鉴于性能考量，我从 MathJax 迁移到了 Katex，但是随之而来出现了一个问题，就是脚注里面的数学公式没办法渲染出来。</p>\n",
      "content_html": "<p>最近，鉴于性能考量，我从 MathJax 迁移到了 Katex，但是随之而来出现了一个问题，就是脚注里面的数学公式没办法渲染出来。</p>\n\n<p>如图：\n<img src=\"https://user-images.githubusercontent.com/12459199/34936577-4bafd6de-fa25-11e7-972d-6f165f2e94ab.png\" alt=\"Math Cannot Render In Footnote\" /></p>\n<p>但是，如果我仅仅使用 <code>node</code> 的 REPL 和用于 markdown 渲染的 <code>markdown-it</code> 以及它的两个插件 <code>markdown-it-katex</code> 和 <code>markdonw-it-footnote</code> 分别用于提供 Katex 和脚注功能的话；</p>\n<p>是可以渲染出 Katex 和脚注的 HTML 结构的：</p>\n<p><img src=\"https://user-images.githubusercontent.com/12459199/34937236-7d5a1652-fa27-11e7-9601-8ca331a00cde.png\" alt=\"\" /></p>\n<p>这是怎么回事呢？</p>\n<p>经过辛苦的研究之后发现，我的原本的 <code>_config.yml</code> 写的就比较有毒，很多自定义的配置都插在了原来配置的中间，而且缩进格式也不规范。</p>\n<p>后来重新将所有配置都写在原来配置的后面，规范了一下缩进问题就解决了。</p>\n<p>所以大家遇到这种问题的时候最好检查一下自己的 <code>_config.yml</code> 文件有没有格式上的错误，特别是缩进的错误。</p>\n",
      "image": "https://user-images.githubusercontent.com/12459199/34936577-4bafd6de-fa25-11e7-972d-6f165f2e94ab.png",
      "date_published": "2021-07-15T11:52:03.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Hexo"
      ]
    },
    {
      "title": "macOS 如何 B 站直播",
      "url": "https://wafer.li/blog-corners/tech/tinkering/live/macos-%E5%A6%82%E4%BD%95-b-%E7%AB%99%E7%9B%B4%E6%92%AD/",
      "id": "https://wafer.li/blog-corners/tech/tinkering/live/macos-%E5%A6%82%E4%BD%95-b-%E7%AB%99%E7%9B%B4%E6%92%AD/",
      "summary": "<p>之前由于给 B 站交了身份证，因此就想稍微利用一下，直播写一下代码；</p>\n<p>不过 macOS 没有 B 站的一键开播客户端，这里来介绍一下我的折腾成果。</p>\n",
      "content_html": "<p>之前由于给 B 站交了身份证，因此就想稍微利用一下，直播写一下代码；</p>\n<p>不过 macOS 没有 B 站的一键开播客户端，这里来介绍一下我的折腾成果。</p>\n\n<h2 id=\"_1-前期准备\"> 1. 前期准备</h2>\n<ol>\n<li>实名认证（手持身份证）的 B 站账户</li>\n<li>OBS（录屏）</li>\n<li>Soundflower（录制桌面声音）</li>\n<li>弹幕库（弹幕管理）</li>\n</ol>\n<h2 id=\"_2-安装\"> 2. 安装</h2>\n<p>OBS 和 Soundflower 都可以使用 <code>brew</code> 安装</p>\n<div><pre><code>brew cask <span>install</span> obs\nbrew cask <span>install</span> soundflower\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>弹幕库在其<a href=\"http://bilibili.danmaku.live\" target=\"_blank\" rel=\"noopener noreferrer\">官网</a>安装</p>\n<h2 id=\"_3-配置来源捕获\"> 3. 配置来源捕获</h2>\n<p>现在 OBS 安装之后已经有一个配置向导了，跟着配置向导走就可以配置完成。</p>\n<p>随后在来源中建立一个捕获，如图所示：</p>\n<p><img src=\"/images/建立捕获.png\" alt=\"建立捕获\" /></p>\n<p>这里建立的是显示捕获，也就是将一个显示屏的图像全部捕获</p>\n<p>在上方的区域会显示当前捕获的内容。</p>\n<p>除了显示捕获之外，还可以创建窗口捕获，同时上方区域可以调整各个来源图像的大小，可以捕获多个来源并将它们统一显示到上方区域。</p>\n<p>上方的显示区域就是你最终直播出去的图像了。</p>\n<h2 id=\"_4-捕捉桌面音频\"> 4. 捕捉桌面音频</h2>\n<p>通常来说，我们直播的同时也希望让观众能听到我们电脑里面播放的音乐，有时候还需要设置自动点歌功能；</p>\n<p>但是，OBS 在 macOS 下不能捕捉桌面音频，需要一些其他的软件进行这个工作。</p>\n<p>macOS 下的桌面音频捕捉工具有很多，但是大部分不是收费的就是配置比较复杂，经过一番对比之后，决定使用 <a href=\"https://github.com/mattingalls/Soundflower\" target=\"_blank\" rel=\"noopener noreferrer\">Soundflower</a> 进行音频捕捉。</p>\n<p>安装它之后，会多出两个声音输出设备，如图所示：</p>\n<p><img src=\"/images/soundflower-音频输出设备.png\" alt=\"Soundflower 音频输出设备\" /></p>\n<p>同时，OBS 中的音频配置选项中的桌面音频也终于可以配置了。</p>\n<p>将 mac 的声音输出设备如上图选择，然后在 OBS 的桌面音频中选择相同的输出，即可将桌面音频进行推流。</p>\n<p>到这里，我们会发现 mac 很意料之中的没有了声音，听众能听到声音，但是我们听不到也不行啊；</p>\n<p>不过，好在 OBS 的音频具有一个 <strong>监听并输出</strong> 的选项，在音频的高级属性中可以设置；</p>\n<p>我们将监听设备设置为能让我们听到声音的输出，如内置的音频输出或者喇叭，然后将对应的音频轨道设置为监听并输出；</p>\n<p>这样，我们和观众就都能听到声音了。</p>\n<h2 id=\"_5-开始推流\"> 5. 开始推流</h2>\n<p>在音频和视频准备完毕，本地测试没有问题之后，我们就可以开始直播了。</p>\n<p>首先，打开弹幕库的快速开播，点击开始直播获得 RTMP 地址和密码；</p>\n<p>然后在 OBS 的推流选项中选择『自定义推流』，并填入获取到的 RTMP 地址和密码；</p>\n<p>最后，在 OBS 主界面的右下角点击『开始推流』，你的直播就开始了！</p>\n<h2 id=\"_6-题外话\"> 6. 题外话</h2>\n<p>为了给我们的直播间能有点流量，我们最好给直播间设置一个封面。</p>\n<p>不过封面这个东西和 B 站的政策有关，这里来介绍一下目前 (2019.10.01) 的 B 站的封面政策。</p>\n<p>B 站的封面分为正方形和长方形两种，其中：</p>\n<ol>\n<li>正方形为『颜值封面』，也就是这个封面必须是『<strong>真人的脸</strong>』，注意不要把不是真人脸的图传到这里面去</li>\n<li>长方形为普通封面，也就是可以上传普通的图片，但是也不是什么图都行，例如大面积留白，全部都是字的封面就不行</li>\n</ol>\n<p>B 站封面是审核制的，通不通过实际上也有一定的运气成分。</p>\n<p>最后祝大家直播愉快(?)</p>\n",
      "image": "https://wafer.li/images/建立捕获.png",
      "date_published": "2021-07-15T11:52:03.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Live"
      ]
    },
    {
      "title": "windows 自动更新走代理",
      "url": "https://wafer.li/blog-corners/tech/tinkering/windows%20%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0%E8%B5%B0%E4%BB%A3%E7%90%86/",
      "id": "https://wafer.li/blog-corners/tech/tinkering/windows%20%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0%E8%B5%B0%E4%BB%A3%E7%90%86/",
      "summary": "<p>本部校园网 v4 收费，windows 更新又是刚需，那么如何让 windows 自动更新走代理呢？</p>\n<p>其实只需要一条命令</p>\n<div><pre><code>netsh winhttp <span>set</span> proxy proxy-server<span>=</span><span>\"proxyserver:8080\"</span>\n</code></pre>\n<div><span>1</span><br></div></div>",
      "content_html": "<p>本部校园网 v4 收费，windows 更新又是刚需，那么如何让 windows 自动更新走代理呢？</p>\n<p>其实只需要一条命令</p>\n<div><pre><code>netsh winhttp <span>set</span> proxy proxy-server<span>=</span><span>\"proxyserver:8080\"</span>\n</code></pre>\n<div><span>1</span><br></div></div>\n<p>即可让 windows 的“设置”走代理。</p>\n<p><strong>注意，设置中的代理选项对其本身是不起作用的。</strong></p>\n<p>这点还是 *nix 好啊。</p>\n<p>当然，也有想要直连的时候，使用如下命令即可恢复直连</p>\n<div><pre><code>netsh winhttp reset proxy\n</code></pre>\n<div><span>1</span><br></div></div>",
      "date_published": "2016-10-14T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": []
    },
    {
      "title": "好用的工具",
      "url": "https://wafer.li/blog-corners/tech/tinkering/%E5%A5%BD%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7/",
      "id": "https://wafer.li/blog-corners/tech/tinkering/%E5%A5%BD%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7/",
      "content_html": "<p>这里收集一些好用的 WEB 生产力工具和网站。</p>\n<p><a href=\"http://madebyevan.com/fsm/\" target=\"_blank\" rel=\"noopener noreferrer\">自动机绘图</a></p>\n<blockquote>\n<p>这是一个绘制自动机状态转移图的工具，做编译解析的一般都会用到。</p>\n<p>使用上一般没什么问题，需要注意的就是<strong>拖动箭头</strong>，可以使它弯曲。</p>\n</blockquote>\n<p><a href=\"https://www.processon.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Processon</a></p>\n<blockquote>\n<p>一个在线的流程图、UML 图、UI 图等等的绘图工具。具有不错的界面，而且支持的图例也很多。强烈建议使用。</p>\n<p>不过对于 UML 的类图方面的支持不是很好。但是对于流程图来说已经是很不错的了。</p>\n</blockquote>\n<p><a href=\"http://www.planttext.com/planttext\" target=\"_blank\" rel=\"noopener noreferrer\">PlantText</a></p>\n<blockquote>\n<p>一个绘制 PlantUML 的在线网站，还支持导出 PNG 和 LaTex。</p>\n<p>虽然不能实时渲染，不过 UML 对实时渲染的要求也不是很高。</p>\n</blockquote>\n<p><a href=\"https://itpro.cz/juniconv/\" target=\"_blank\" rel=\"noopener noreferrer\">JuniConv</a></p>\n<blockquote>\n<p>一个可以将 Unicode 字符串，如阿拉伯文等转成 Java 的 &quot;\\u200a&quot; 的 Unicode 编码序列的网站</p>\n<p>很适合于调整阿拉伯文和英文混排的情况。</p>\n</blockquote>\n<p><a href=\"https://regexr.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Regexer</a></p>\n<blockquote>\n<p>一个正则表达式检测和替换网站，虽然是 JS 系的正则，但是也可以做一些简单的匹配检查和替换工作。</p>\n</blockquote>\n",
      "date_published": "2016-11-14T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "Tools"
      ]
    },
    {
      "title": "局域网内网服务器简易开启方法",
      "url": "https://wafer.li/blog-corners/tech/tinkering/%E5%B1%80%E5%9F%9F%E7%BD%91%E5%86%85%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AE%80%E6%98%93%E5%BC%80%E5%90%AF%E6%96%B9%E6%B3%95/",
      "id": "https://wafer.li/blog-corners/tech/tinkering/%E5%B1%80%E5%9F%9F%E7%BD%91%E5%86%85%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AE%80%E6%98%93%E5%BC%80%E5%90%AF%E6%96%B9%E6%B3%95/",
      "summary": "<h2 id=\"_1-windows\"> 1. Windows</h2>\n<div><pre><code># python3\npython -m http.server\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>Windows 虽说自带局域网功能，但需要配置一大堆东西甚是麻烦。</p>\n<p>装上 python，直接一条指令搞定。</p>\n",
      "content_html": "<h2 id=\"_1-windows\"> 1. Windows</h2>\n<div><pre><code># python3\npython -m http.server\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>Windows 虽说自带局域网功能，但需要配置一大堆东西甚是麻烦。</p>\n<p>装上 python，直接一条指令搞定。</p>\n\n<h2 id=\"_2-unix-like\"> 2. Unix-like</h2>\n<p>*.nix 系统的同学应该很熟悉了，使用 <code>darkhttpd</code> 命令行工具就可以开启本地服务器。</p>\n<p>当然也可以使用 python 的方法。</p>\n",
      "date_published": "2016-10-14T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": []
    },
    {
      "title": "博客主页",
      "url": "https://wafer.li/",
      "id": "https://wafer.li/",
      "content_html": "",
      "date_published": "2021-07-15T11:52:03.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": []
    },
    {
      "title": "生成器模式(Builder Pattern)",
      "url": "https://wafer.li/blog-corners/learning-notes/head-first-design-pattern/%E7%94%9F%E6%88%90%E5%99%A8%E6%A8%A1%E5%BC%8F(Builder%20Pattern)/",
      "id": "https://wafer.li/blog-corners/learning-notes/head-first-design-pattern/%E7%94%9F%E6%88%90%E5%99%A8%E6%A8%A1%E5%BC%8F(Builder%20Pattern)/",
      "summary": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>生成器模式(Builder Pattern) 听起来很像 工厂模式(Factory Pattern)，不过两者有着很大的不同。</p>\n<p>工厂模式的目标是利用多态，减少类之间的耦合度；</p>\n<p>而生成器模式的目标在于， 一步一步地构建一个复杂产品，同时解决由于复杂参数造成的构造器数量爆炸。</p>\n<p>同时，生成器需要一个指导者来一步一步地指定产品构建的参数或者产品构建的步骤；</p>\n<p>而工厂模式不需要指导者。</p>\n",
      "content_html": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>生成器模式(Builder Pattern) 听起来很像 工厂模式(Factory Pattern)，不过两者有着很大的不同。</p>\n<p>工厂模式的目标是利用多态，减少类之间的耦合度；</p>\n<p>而生成器模式的目标在于， 一步一步地构建一个复杂产品，同时解决由于复杂参数造成的构造器数量爆炸。</p>\n<p>同时，生成器需要一个指导者来一步一步地指定产品构建的参数或者产品构建的步骤；</p>\n<p>而工厂模式不需要指导者。</p>\n\n<h2 id=\"_2-结构类图\"> 2. 结构类图</h2>\n<p><img src=\"https://ww4.sinaimg.cn/large/006tNc79ly1fdk1a55zpqj309j0a2wep.jpg\" alt=\"\" /></p>\n<h2 id=\"_3-构造复杂产品\"> 3. 构造复杂产品</h2>\n<p>所谓的复杂产品就是一个产品中有很多子类，而且每个子类都有相应的构造流程。</p>\n<p>例如，一个蛤蜊比萨，拥有面饼，酱料，芝士，蛤蜊等其他食材。</p>\n<div><pre><code><span>public</span> <span>class</span> <span>ClamPizza</span> <span>{</span>\n    <span>Dough</span> dough<span>;</span>\n    <span>Sauce</span> sauce<span>;</span>\n    <span>Cheese</span> cheese<span>;</span>\n    <span>Clam</span> clam<span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>对于这样一个复杂产品，我们就将其构造的过程委派给一个建造者(Builder)来完成。</p>\n<div><pre><code><span>public</span> <span>interface</span> <span>ClamPizzaBuilder</span> <span>{</span>\n    <span>ClamPizzaBuilder</span> <span>prepareDough</span><span>(</span><span>)</span><span>;</span>\n    <span>ClamPizzaBuilder</span> <span>prepareSauce</span><span>(</span><span>)</span><span>;</span>\n    <span>ClamPizzaBuilder</span> <span>prepareCheese</span><span>(</span><span>)</span><span>;</span>\n    <span>ClamPizzaBuilder</span> <span>prepareClam</span><span>(</span><span>)</span><span>;</span>\n\n    <span>ClamPizza</span> <span>build</span><span>(</span><span>)</span><span>;</span>\n<span>}</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>然后，我们对接口进行实现。</p>\n<p>注意，这里有两种具体类的实现方法：</p>\n<ol>\n<li>\n<p>在构建实际建造者时，就 <strong>立即</strong> 创建一个 <strong>默认的产品对象</strong>；</p>\n</li>\n<li>\n<p>由实际建造者储存创建产品的参数，当调用 <code>build()</code> 方法时，才返回产品对象</p>\n</li>\n</ol>\n<p>在这里，需要指明的就是方法二更好；</p>\n<p>因为方法二符合语义，只有调用 <code>build()</code> 才真正的构建了对象；</p>\n<p>而且也适合于不可变对象（构造之后对象的属性不能发生改变）。</p>\n<p>方法一：</p>\n<div><pre><code><span>public</span> <span>class</span> <span>ConcreteClamPizzaBuilder</span> <span>implements</span> <span>ClamPizzaBuilder</span>\n<span>{</span>\n    <span>ClamPizza</span> clamPizza <span>=</span> <span>null</span><span>;</span>\n\n    <span>public</span> <span>ConcreteClamPizzaBuilder</span><span>(</span><span>)</span> <span>{</span>\n        clamPizza <span>=</span> <span>new</span> <span>ClamPizza</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>@Override</span>\n    <span>public</span> <span>ClamPizzaBuilder</span> <span>prepareDough</span><span>(</span><span>Dough</span> dough<span>)</span> <span>{</span>\n        <span>// 准备面团，可以直接放入，也可以进行处理后放入</span>\n        <span>return</span> <span>this</span><span>;</span>\n    <span>}</span>\n\n    <span>//  剩下的 prepare 方法</span>\n\n    <span>@Override</span>\n    <span>public</span> <span>ClamPizza</span> <span>build</span><span>(</span><span>)</span> <span>{</span>\n        <span>return</span> clamPizza<span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p>方法二：</p>\n<div><pre><code><span>public</span> <span>class</span> <span>ClamPizza</span> <span>{</span>\n    <span>// fields</span>\n\n    <span>public</span> <span>ClamPizza</span><span>(</span><span>ClamPizzaBuilder</span> builder<span>)</span> <span>{</span>\n        <span>this</span><span>.</span>dough <span>=</span> builder<span>.</span>dough<span>;</span>\n        <span>// etc.</span>\n    <span>}</span>\n<span>}</span>\n\n<span>public</span> <span>class</span> <span>ConcreteClamPizzaBuilder</span> <span>implements</span> <span>ClamPizzaBuilder</span>\n<span>{</span>\n    <span>// fields</span>\n\n    <span>public</span> <span>ConcreteClamPizzaBuilder</span><span>(</span><span>)</span> <span>{</span>\n        clamPizza <span>=</span> <span>new</span> <span>ClamPizza</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>@Override</span>\n    <span>public</span> <span>ClamPizzaBuilder</span> <span>prepareDough</span><span>(</span><span>Dough</span> dough<span>)</span> <span>{</span>\n        <span>this</span><span>.</span>dough <span>=</span> dough<span>;</span>\n        <span>return</span> <span>this</span><span>;</span>\n    <span>}</span>\n\n    <span>//  剩下的 prepare 方法</span>\n\n    <span>@Override</span>\n    <span>public</span> <span>ClamPizza</span> <span>build</span><span>(</span><span>)</span> <span>{</span>\n        <span>return</span> <span>ClamPizza</span><span>(</span><span>this</span><span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div><p>生成器模式和工厂模式最大的不同就是拥有一个指挥者来指挥产品的构建过程；</p>\n<div><pre><code><span>public</span> <span>class</span> <span>ClamPizzaDirector</span> <span>{</span>\n    <span>private</span> <span>ClamPizzaBuilder</span> builder<span>;</span>\n\n    <span>// 指挥者用于指定产品建造的步骤</span>\n    <span>public</span> <span>ClamPizza</span> <span>construct</span><span>(</span><span>)</span> <span>{</span>\n        builder<span>.</span><span>prepareDough</span><span>(</span><span>)</span><span>;</span>\n        builder<span>.</span><span>prepareCheese</span><span>(</span><span>)</span><span>;</span>\n        builder<span>.</span><span>prepareClam</span><span>(</span><span>)</span><span>;</span>\n        builder<span>.</span><span>prepareSauce</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>当然，有些比萨并不需要芝士，这个时候，我们就可以去除掉 <code>prepareCheese()</code> 的这一个步骤。</p>\n<h2 id=\"_4-内部生成器减少构造器\"> 4. 内部生成器减少构造器</h2>\n<p>生成器模式除了能构造复杂产品以外，一个很重要的作用就是能解决由于构造参数的组合过多所导致的构造器爆炸。</p>\n<h3 id=\"_4-1-构造器爆炸\"> 4.1 构造器爆炸</h3>\n<p>假如一个类拥有 4 个属性，那么它 <strong>理想状态</strong> 下的构造函数就有 0 个参数，一个参数，两个参数，三个参数和四个参数。</p>\n<p>也就是说，它的构造器数量</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.13889em;\">W</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:1.1111079999999998em;vertical-align:-0.247em;\"></span><span><span style=\"margin-right:0.07153em;\">C</span><span><span><span><span style=\"height:0.8641079999999999em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>4</span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>0</span></span></span></span><span>​</span></span><span><span style=\"height:0.247em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1.1111079999999998em;vertical-align:-0.247em;\"></span><span><span style=\"margin-right:0.07153em;\">C</span><span><span><span><span style=\"height:0.8641079999999999em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>4</span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.247em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1.1111079999999998em;vertical-align:-0.247em;\"></span><span><span style=\"margin-right:0.07153em;\">C</span><span><span><span><span style=\"height:0.8641079999999999em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>4</span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.247em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1.1111079999999998em;vertical-align:-0.247em;\"></span><span><span style=\"margin-right:0.07153em;\">C</span><span><span><span><span style=\"height:0.8641079999999999em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>4</span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style=\"height:0.247em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1.1111079999999998em;vertical-align:-0.247em;\"></span><span><span style=\"margin-right:0.07153em;\">C</span><span><span><span><span style=\"height:0.8641079999999999em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>4</span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>4</span></span></span></span><span>​</span></span><span><span style=\"height:0.247em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<p>当类的属性为 <span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.43056em;vertical-align:0em;\"></span><span>n</span></span></span></span> 时，有</p>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:3.024108em;vertical-align:-1.262054em;\"></span><span><span><span><span><span><span style=\"height:1.762054em;\"><span style=\"top:-3.897946em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.13889em;\">W</span></span></span><span style=\"top:-2.397946em;\"><span style=\"height:3em;\"></span><span></span></span></span><span>​</span></span><span><span style=\"height:1.262054em;\"><span></span></span></span></span></span><span><span><span><span style=\"height:1.762054em;\"><span style=\"top:-3.897946em;\"><span style=\"height:3em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span style=\"margin-right:0.07153em;\">C</span><span><span><span><span style=\"height:0.8641079999999999em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>0</span></span></span></span><span>​</span></span><span><span style=\"height:0.247em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span style=\"margin-right:0.07153em;\">C</span><span><span><span><span style=\"height:0.8641079999999999em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style=\"height:0.247em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span style=\"margin-right:0.07153em;\">C</span><span><span><span><span style=\"height:0.8641079999999999em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style=\"height:0.247em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>⋯</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span style=\"margin-right:0.07153em;\">C</span><span><span><span><span style=\"height:0.8641079999999999em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>n</span><span>−</span><span>1</span></span></span></span></span><span>​</span></span><span><span style=\"height:0.247em;\"><span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span style=\"margin-right:0.07153em;\">C</span><span><span><span><span style=\"height:0.7143919999999999em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.247em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-2.397946em;\"><span style=\"height:3em;\"></span><span><span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span><span><span>2</span><span><span><span><span style=\"height:0.7143919999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:1.262054em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>所以，类的属性和理想状态下的构造器数量为 <strong>指数关系</strong></p>\n<h3 id=\"_4-2-实现\"> 4.2 实现</h3>\n<div><pre><code><span>public</span> <span>class</span> <span>Pizza</span> <span>{</span>\n    <span>Dough</span> dough<span>;</span>\n    <span>Cheese</span> cheese<span>;</span>\n    <span>Sauce</span> sauce<span>;</span>\n\n    <span>private</span> <span>Pizza</span><span>(</span><span>Pizza<span>.</span>Builder</span> builder<span>)</span> <span>{</span>\n        <span>this</span><span>.</span>dough <span>=</span> builder<span>.</span>dough<span>;</span>\n        <span>this</span><span>.</span>cheese <span>=</span> builder<span>.</span>cheese<span>;</span>\n        <span>this</span><span>.</span>sauce <span>=</span> builder<span>.</span>sauce<span>;</span>\n    <span>}</span>\n\n    <span>public</span> <span>static</span> <span>class</span> <span>Builder</span> <span>{</span>\n        <span>private</span> <span>Dough</span> dough <span>=</span> defaultDough<span>;</span>\n        <span>private</span> <span>Cheese</span> cheese <span>=</span> <span>null</span><span>;</span>\n        <span>private</span> <span>Sauce</span> sauce <span>=</span> <span>null</span><span>;</span>\n\n        <span>public</span> <span>Builder</span> <span>prepareDough</span><span>(</span><span>Dough</span> dough<span>)</span> <span>{</span>\n            <span>this</span><span>.</span>dough <span>=</span> dough<span>;</span>\n            <span>return</span> <span>this</span><span>;</span>\n        <span>}</span>\n\n        <span>public</span> <span>Builder</span> <span>prepareCheese</span><span>(</span><span>Cheese</span> cheese<span>)</span> <span>{</span>\n            <span>this</span><span>.</span>cheese <span>=</span> cheese<span>;</span>\n            <span>return</span> <span>this</span><span>;</span>\n        <span>}</span>\n\n        <span>public</span> <span>Builder</span> <span>prepareSauce</span><span>(</span><span>Sauce</span> sauce<span>)</span> <span>{</span>\n            <span>this</span><span>.</span>sauce <span>=</span> sauce<span>;</span>\n            <span>return</span> <span>this</span><span>;</span>\n        <span>}</span>\n\n        <span>public</span> <span>Pizza</span> <span>build</span><span>(</span><span>)</span> <span>{</span>\n            <span>return</span> <span>new</span> <span>Pizza</span><span>(</span><span>this</span><span>)</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br></div></div><p>这样，即使 <code>Pizza</code> 有三个属性，但是我们通过使用一个内置的 <code>Builder</code>，成功地将构造器限制在了一个；</p>\n<p>同时，由于每个 <code>prepare</code> 方法都会返回 <code>Builder</code>；</p>\n<p>也就是说，我们可以在任何一个准备阶段进行 <code>build()</code>；</p>\n<p>这样，也就满足了不同的参数组合的需求；</p>\n<p>同时，由于 <code>Pizza</code> 的构造函数是 <code>private</code> 的，所以这就限定了只能通过生成器来建造对象。</p>\n<p>使用：</p>\n<div><pre><code><span>public</span> <span>static</span> <span>void</span> <span>main</span><span>(</span><span>String</span><span>[</span><span>]</span> args<span>)</span> <span>{</span>\n    <span>Pizza</span> <span>Pizza</span> <span>=</span> <span>new</span> <span>Pizza<span>.</span>Builder</span><span>(</span><span>)</span>\n                    <span>.</span><span>prepareDough</span><span>(</span>dough<span>)</span>\n                    <span>.</span><span>prepareSauce</span><span>(</span>sauce<span>)</span>\n                    <span>.</span><span>prepareCheese</span><span>(</span>cheese<span>)</span>\n                    <span>.</span><span>build</span><span>(</span><span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id=\"_5-模式扩展\"> 5. 模式扩展</h2>\n<p>当只有一个具体建造者时，可以直接省略生成器接口；</p>\n<p>例如上面的静态内部生成器。</p>\n<p>有时候可以直接省略指挥者对象，而由 <strong>客户</strong> 直接充当指导者；</p>\n<p>例如，客户自己冲泡咖啡。</p>\n<h2 id=\"_6-与抽象工厂的不同\"> 6. 与抽象工厂的不同</h2>\n<p>抽象工厂模式生产的是一个产品族，而生成器模式所生产的 <strong>一个</strong> 复杂产品；</p>\n<p>形象的说明就是，抽象工厂生产的是 <strong>汽车的零部件</strong>；</p>\n<p>而生成器是将零部件 <strong>组装</strong> 成为一辆汽车。</p>\n<h2 id=\"_7-优缺点\"> 7. 优缺点</h2>\n<h3 id=\"_7-1-优点\"> 7.1 优点</h3>\n<ol>\n<li>\n<p>良好的封装性，客户端不必知道产品的内部细节</p>\n</li>\n<li>\n<p>建造者是独立的，容易扩展</p>\n</li>\n<li>\n<p>可以使用其他的对象进行构造辅助，而普通的产品构造方式不容易获取到</p>\n</li>\n</ol>\n<h3 id=\"_7-2-缺点\"> 7.2 缺点</h3>\n<ol>\n<li>\n<p>产生多余的 <code>Builder</code>  对象</p>\n</li>\n<li>\n<p>建造的过程暴露在外</p>\n</li>\n</ol>\n",
      "image": "https://ww4.sinaimg.cn/large/006tNc79ly1fdk1a55zpqj309j0a2wep.jpg",
      "date_published": "2017-03-12T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "《Head First 设计模式》笔记"
      ]
    },
    {
      "title": "工厂模式",
      "url": "https://wafer.li/blog-corners/learning-notes/head-first-design-pattern/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/",
      "id": "https://wafer.li/blog-corners/learning-notes/head-first-design-pattern/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/",
      "summary": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>工厂模式，是将构造类的责任从类或者子类本身委托到一个新的类进行的模式；</p>\n<p>通过将类的构建转移到一个新的类，减少了耦合度，在具体的产品需要进行修改时，只需要修改该类即可。</p>\n<p>这个新的类被称为工厂，或者创建者(Creator)</p>\n<p>它分为三种：</p>\n<ol>\n<li>简单工厂</li>\n<li>工厂方法</li>\n<li>抽象工厂</li>\n</ol>\n",
      "content_html": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>工厂模式，是将构造类的责任从类或者子类本身委托到一个新的类进行的模式；</p>\n<p>通过将类的构建转移到一个新的类，减少了耦合度，在具体的产品需要进行修改时，只需要修改该类即可。</p>\n<p>这个新的类被称为工厂，或者创建者(Creator)</p>\n<p>它分为三种：</p>\n<ol>\n<li>简单工厂</li>\n<li>工厂方法</li>\n<li>抽象工厂</li>\n</ol>\n\n<h2 id=\"_2-简单工厂\"> 2. 简单工厂</h2>\n<p>简单工厂，顾名思义，就是 <strong>简单地</strong> 将构建产品的步骤搬到另一个类中去。</p>\n<p>需要说明的是，简单工厂在 GOF 《设计模式》中不被视为一个独立的设计模式；</p>\n<p>但是，由于实际编程中十分常用，所以依旧有需要说明一下；</p>\n<p>例如，一个比萨店，原来需要做比萨，烤比萨，切比萨和包装比萨：</p>\n<div><pre><code><span>public</span> <span>class</span> <span>PizzaStore</span> <span>{</span>\n\n    <span>public</span> <span>Pizza</span> <span>orderPizza</span><span>(</span><span>String</span> type<span>)</span> <span>{</span>\n        <span>Pizza</span> pizza<span>;</span>\n\n        <span>// 创建比萨</span>\n        <span>if</span> <span>(</span>type<span>.</span><span>equals</span><span>(</span><span>\"cheese\"</span><span>)</span><span>)</span> <span>{</span>\n            pizza <span>=</span> <span>new</span> <span>CheesePizza</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n        <span>else</span> <span>if</span> <span>(</span>type<span>.</span><span>equals</span><span>(</span><span>\"pepperoni\"</span><span>)</span><span>)</span> <span>{</span>\n            pizza <span>=</span> <span>new</span> <span>PepperoniPizza</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n\n        <span>// 其余剩下工作</span>\n        pizza<span>.</span><span>prepare</span><span>(</span><span>)</span><span>;</span>\n        pizza<span>.</span><span>bake</span><span>(</span><span>)</span><span>;</span>\n        pizza<span>.</span><span>cut</span><span>(</span><span>)</span><span>;</span>\n        pizza<span>.</span><span>box</span><span>(</span><span>)</span><span>;</span>\n\n        <span>return</span> pizza<span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><p>现在，我们使用一个简单工厂，来承接创建比萨的职能：</p>\n<div><pre><code><span>public</span> <span>class</span> <span>PizzaStore</span> <span>{</span>\n    <span>SimpleFactory</span> simpleFactory<span>;</span>\n\n    <span>public</span> <span>PizzaStore</span><span>(</span><span>SimpleFactor</span> simpleFactor<span>)</span> <span>{</span>\n        <span>this</span><span>.</span>simpleFactor <span>=</span> simpleFactor<span>;</span>\n    <span>}</span>\n\n    <span>public</span> <span>Pizza</span> <span>orderPizza</span><span>(</span><span>String</span> type<span>)</span> <span>{</span>\n        <span>Pizza</span> pizza<span>;</span>\n\n        <span>// 通过工厂创建比萨</span>\n        pizza <span>=</span> simpleFactory<span>.</span><span>createPizza</span><span>(</span>type<span>)</span><span>;</span>\n\n        pizza<span>.</span><span>prepare</span><span>(</span><span>)</span><span>;</span>\n        pizza<span>.</span><span>bake</span><span>(</span><span>)</span><span>;</span>\n        pizza<span>.</span><span>cut</span><span>(</span><span>)</span><span>;</span>\n        pizza<span>.</span><span>box</span><span>(</span><span>)</span><span>;</span>\n\n        <span>return</span> pizza<span>;</span>\n    <span>}</span>\n<span>}</span>\n\n<span>public</span> <span>class</span> <span>SimpleFactory</span> <span>{</span>\n    <span>public</span> <span>Pizza</span> <span>createPizza</span><span>(</span><span>String</span> type<span>)</span> <span>{</span>\n        <span>Pizza</span> pizza <span>=</span> <span>null</span><span>;</span>\n\n        <span>if</span> <span>(</span>type<span>.</span><span>equals</span><span>(</span><span>\"cheese\"</span><span>)</span><span>)</span> <span>{</span>\n            pizza <span>=</span> <span>new</span> <span>CheesePizza</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n        <span>else</span> <span>if</span> <span>(</span>type<span>.</span><span>equals</span><span>(</span><span>\"pepperoni\"</span><span>)</span><span>)</span> <span>{</span>\n            pizza <span>=</span> <span>new</span> <span>PepperoniPizza</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n\n        <span>return</span> pizza<span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br></div></div><h2 id=\"_3-静态工厂\"> 3. 静态工厂</h2>\n<p>事实上，如果工厂方法无需改变；</p>\n<p>那么我们可以将其设置为静态的：</p>\n<div><pre><code><span>public</span> <span>class</span> <span>Pizza</span><span>{</span>\n\n    <span>public</span> <span>static</span> <span>Pizza</span> <span>createPizza</span><span>(</span><span>String</span> type<span>)</span> <span>{</span>\n        <span>Pizza</span> pizza <span>=</span> <span>null</span><span>;</span>\n\n        <span>if</span> <span>(</span>type<span>.</span><span>equals</span><span>(</span><span>\"cheese\"</span><span>)</span><span>)</span> <span>{</span>\n            pizza <span>=</span> <span>new</span> <span>CheesePizza</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n        <span>else</span> <span>if</span> <span>(</span>type<span>.</span><span>equals</span><span>(</span><span>\"pepperoni\"</span><span>)</span><span>)</span> <span>{</span>\n            pizza <span>=</span> <span>new</span> <span>PepperoniPizza</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n\n        <span>return</span> pizza<span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>实际上，静态工厂是 《Effective Java》中推荐使用的对象创建方式；</p>\n<p>由于静态工厂拥有更为语义化的命名方式；</p>\n<p>而且这里可以看出，静态工厂可以根据参数生成相应的子类；</p>\n<p>而如果使用 <code>new</code> 关键字，则不能实例化子类。</p>\n<h2 id=\"_4-工厂方法\"> 4. 工厂方法</h2>\n<p>简单工厂虽然将产品的构建过程从客户中分离了出去；</p>\n<p>但是，并没有解决根本问题；</p>\n<p>比萨店还是依赖于具体的比萨类，当我们需要不同风味的比萨时，会让我们的简单工厂臃肿不堪：</p>\n<div><pre><code><span>public</span> <span>class</span> <span>SimpleFactory</span> <span>{</span>\n    <span>public</span> <span>Pizza</span> <span>createPizza</span><span>(</span><span>String</span> style<span>,</span> <span>String</span> type<span>)</span> <span>{</span>\n        <span>Pizza</span> pizza <span>=</span> <span>null</span><span>;</span>\n\n        <span>if</span> <span>(</span>style<span>.</span><span>equals</span><span>(</span><span>\"NewYork\"</span><span>)</span><span>)</span> <span>{</span>\n            <span>if</span> <span>(</span>type<span>.</span><span>equals</span><span>(</span><span>\"cheese\"</span><span>)</span><span>)</span> <span>{</span>\n                pizza <span>=</span> <span>new</span> <span>NYCheesePizza</span><span>(</span><span>)</span><span>;</span>\n            <span>}</span>\n            <span>else</span> <span>if</span> <span>(</span>type<span>.</span><span>equals</span><span>(</span><span>\"pepperoni\"</span><span>)</span><span>)</span> <span>{</span>\n                pizza <span>=</span> <span>new</span> <span>NYPepperoniPizza</span><span>(</span><span>)</span><span>;</span>\n            <span>}</span>\n\n        <span>}</span>\n        <span>else</span> <span>if</span> <span>(</span>style<span>.</span><span>equals</span><span>(</span><span>\"Chicago\"</span><span>)</span><span>)</span> <span>{</span>\n            <span>if</span> <span>(</span>type<span>.</span><span>equals</span><span>(</span><span>\"cheese\"</span><span>)</span><span>)</span> <span>{</span>\n                pizza <span>=</span> <span>new</span> <span>ChicagoCheesePizza</span><span>(</span><span>)</span><span>;</span>\n            <span>}</span>\n            <span>else</span> <span>if</span> <span>(</span>type<span>.</span><span>equals</span><span>(</span><span>\"pepperoni\"</span><span>)</span><span>)</span> <span>{</span>\n                pizza <span>=</span> <span>new</span> <span>ChicagoPepperoniPizza</span><span>(</span><span>)</span><span>;</span>\n            <span>}</span>\n        <span>}</span>\n        <span>return</span> pizza<span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><p>一个更好的方法是，通过派生出不同的工厂子类，让子类来实例化相应的产品：</p>\n<p>首先，我们将 <code>PizzaStore</code> 设置为抽象的，并将 <code>createPizza()</code> 设置为抽象方法：</p>\n<div><pre><code><span>public</span> <span>abstract</span> <span>class</span> <span>PizzaStore</span> <span>{</span>\n    <span>public</span> <span>Pizza</span> <span>orderPizza</span><span>(</span><span>String</span> type<span>)</span> <span>{</span>\n        <span>Pizza</span> pizza<span>;</span>\n\n        pizza <span>=</span> <span>createPizza</span><span>(</span>type<span>)</span><span>;</span>\n\n        pizza<span>.</span><span>prepare</span><span>(</span><span>)</span><span>;</span>\n        pizza<span>.</span><span>bake</span><span>(</span><span>)</span><span>;</span>\n        pizza<span>.</span><span>cut</span><span>(</span><span>)</span><span>;</span>\n        pizza<span>.</span><span>box</span><span>(</span><span>)</span><span>;</span>\n\n        <span>return</span> pizza<span>;</span>\n    <span>}</span>\n\n    <span>abstract</span> <span>Pizza</span> <span>createPizza</span><span>(</span><span>String</span> type<span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>这样，<code>PizzaStore</code> 类就成为了 <strong>抽象的</strong> 创造者；</p>\n<p>我们就可以通过继承 <code>PizzaStore</code> 来实现不同的比萨创建方式。</p>\n<p><img src=\"https://ww1.sinaimg.cn/large/006tNc79ly1fdjc0v569wj308905h0sq.jpg\" alt=\"\" /></p>\n<p>工厂方法模式定义了一个创建对象的接口，然后由子类来决定要实例化的类。</p>\n<p>工厂方法让类把实例化推迟到 <strong>子类</strong></p>\n<p><img src=\"https://ww4.sinaimg.cn/large/006tNc79ly1fdjcj2iu7uj308308e3ym.jpg\" alt=\"\" /></p>\n<h2 id=\"_5-依赖倒置原则\"> 5. 依赖倒置原则</h2>\n<p>工厂方法显著地减少了代码对于具体类的依赖；</p>\n<p>事实上，我们应该尽量减少对具体类的依赖，由此得到新的设计原则：</p>\n<p><strong>要依赖抽象，不要依赖具体类</strong></p>\n<p>这个原则听起来很像 『针对接口编程』，不过与之不同的是，该原则更强调 <strong>抽象</strong>；</p>\n<p>也就是说，不能让高层组件(比萨店)依赖于低层组件(具体的比萨)；</p>\n<p>而是要让高层组件和低层组件 <strong>都依赖于抽象</strong>(抽象的 <code>Pizza</code> 类)</p>\n<p>这里的 <strong>倒置</strong> 指的就是高层和低层组件都依赖于一个抽象类形成的依赖图倒置情况。</p>\n<p>当我们考虑类设计时，可以先从低层组件开始设计，然后考虑抽象层，最后再考虑高层组件。</p>\n<p>由于高层和低层组件都共同依赖于一个抽象类，所以高低层组件得到了解耦。</p>\n<h2 id=\"_6-执行倒置原则的方针\"> 6. 执行倒置原则的方针</h2>\n<ol>\n<li>\n<p>变量不可以持有具体类的引用</p>\n<blockquote>\n<p>使用工厂来代替持有的具体类</p>\n</blockquote>\n</li>\n<li>\n<p>不要让类派生自具体类</p>\n<blockquote>\n<p>如果派生自具体类就会产生依赖\n请派生自一个接口或者抽象类</p>\n</blockquote>\n</li>\n<li>\n<p>不要覆盖基类中已经实现的方法</p>\n<blockquote>\n<p>基类的方法是所有具体子类共享的</p>\n</blockquote>\n</li>\n</ol>\n<p>例外：对于 <strong>不可变类</strong>(immutable)，可以使用 <code>new</code> 来进行具体类的实例化；</p>\n<p>这是因为 <strong>不可变类</strong> 不具备改变的能力。</p>\n<h2 id=\"_7-抽象工厂\"> 7. 抽象工厂</h2>\n<h3 id=\"_7-1-定义\"> 7.1 定义</h3>\n<p>抽象工厂模式提供一个 <strong>接口</strong>，用于创建相关或依赖对象的 <strong>家族</strong>，而不需要明确指明具体类。</p>\n<p>简单的来说，抽象工厂就是 <strong>工厂的工厂</strong>；</p>\n<p>通过创造具体的工厂来创建不同的产品家族；</p>\n<p>然后将这个产品家族提供给客户使用。</p>\n<h3 id=\"_7-2-产品族\"> 7.2 产品族</h3>\n<p>产品族指的是位于不同的产品等级结构中， <strong>功能相关联</strong> 的产品组成的家族。</p>\n<p>就比萨店的这里例子来说，我们具有 酱汁、面团、芝士和蛤蜊 四种不同的配料；</p>\n<p>这 <strong>四种不同的配料</strong> 共同组成了配料产品族。</p>\n<blockquote>\n<p>对于某一种配料本身，有不同的风味；\n如芝加哥风味和纽约风味</p>\n</blockquote>\n<h3 id=\"_7-3-使用条件\"> 7.3 使用条件</h3>\n<p>系统或者客户一次只能使用 <strong>一个</strong> 产品族；</p>\n<p>产品之间具有良好的分级和产品族分类</p>\n<h3 id=\"_7-4-重写比萨店\"> 7.4 重写比萨店</h3>\n<p>事实上，不同风味的比萨只是使用了不同的原料；</p>\n<p>所以，我们只需要使用某一个地区的原料产品族就可以做出那个地区风味的比萨；</p>\n<p>所以，我们可以使用抽象工厂重写比萨店。</p>\n<p><img src=\"https://ww4.sinaimg.cn/large/006tNc79ly1fdjyygkaizj30yf0ffjsv.jpg\" alt=\"\" /></p>\n<p>首先，重写 <code>Pizza</code> 类，让其采用原料产品族。</p>\n<div><pre><code><span>public</span> <span>abstract</span> <span>class</span> <span>Pizza</span> <span>{</span>\n    <span>String</span> name<span>;</span>\n\n    <span>// 原料产品族</span>\n    <span>Dough</span> dough<span>;</span>\n    <span>Sauce</span> sauce<span>;</span>\n    <span>Veggies</span> veggies<span>[</span><span>]</span><span>;</span>\n    <span>Cheese</span> cheese<span>;</span>\n    <span>Peppperoni</span> pepperoni<span>;</span>\n    <span>Clams</span> clam<span>;</span>\n\n    <span>// 不同的比萨品种具有不同的准备方法</span>\n    <span>abstract</span> <span>void</span> <span>prepare</span><span>(</span><span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>在具体的比萨类中，采用原料工厂。</p>\n<div><pre><code><span>public</span> <span>class</span> <span>CheesePizza</span> <span>extends</span> <span>Pizza</span> <span>{</span>\n    <span>PizzaIngredientFactory</span> ingredientFactory<span>;</span>\n\n    <span>@Override</span>\n    <span>public</span> <span>void</span> <span>prepare</span><span>(</span><span>)</span> <span>{</span>\n        dough <span>=</span> ingredientFactory<span>.</span><span>createDough</span><span>(</span><span>)</span><span>;</span>\n        sauce <span>=</span> ingredientFactory<span>.</span><span>createSause</span><span>(</span><span>)</span><span>;</span>\n        cheese <span>=</span> ingredientFactory<span>.</span><span>createCheese</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>在比萨店客户中，我们只需要指定某个原料工厂，即可制造出不同风味的比萨。</p>\n<div><pre><code><span>public</span> <span>class</span> <span>NYPizzaStore</span> <span>extends</span> <span>PizzaStore</span> <span>{</span>\n    <span>protected</span> <span>Pizza</span> <span>createPizza</span><span>(</span><span>String</span> item<span>)</span> <span>{</span>\n        <span>Pizza</span> pizza <span>=</span> <span>null</span><span>;</span>\n        <span>PizzaIngredientFactory</span> ingredientFactory <span>=</span>\n            <span>new</span> <span>NYPizzaIngredientFactory</span><span>(</span><span>)</span><span>;</span>\n\n        <span>if</span> <span>(</span>item<span>.</span><span>equals</span><span>(</span><span>\"cheese\"</span><span>)</span><span>)</span> <span>{</span>\n            pizza <span>=</span> <span>new</span> <span>CheesePizza</span><span>(</span>ingredientFactory<span>)</span><span>;</span>\n            pizza<span>.</span><span>setName</span><span>(</span><span>\"New York Style Cheese Pizza\"</span><span>)</span><span>;</span>\n        <span>}</span>\n        <span>else</span> <span>if</span> <span>(</span>item<span>.</span><span>equals</span><span>(</span><span>\"veggie\"</span><span>)</span><span>)</span> <span>{</span>\n            pizza <span>=</span> <span>new</span> <span>VeggiePizza</span><span>(</span>ingredientFactory<span>)</span><span>;</span>\n            pizza<span>.</span><span>setName</span><span>(</span><span>\"New York Style Veggie Pizza\"</span><span>)</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><h2 id=\"_8-总结\"> 8. 总结</h2>\n<p>工厂模式是常用的对高低层平行组件进行解耦的设计模式；</p>\n<p>通过使用 <strong>工厂</strong> 和 <strong>抽象产品</strong>，使得客户类（高层组件）不再需要依赖于具体的产品（低层组件），而依赖于抽象产品（抽象层）；</p>\n<p>同时，低层组件通过工厂，也依赖于抽象产品，实现高低层组件的解耦。</p>\n<p>其中，工厂方法是通过将 <strong>方法</strong> 视为工厂，将具体产品的创建职责交给子类解决；</p>\n<p>而抽象工厂则是抽象出 <strong>工厂接口</strong>，通过不同的 <strong>具体工厂</strong> 来制作 <strong>产品族</strong>；</p>\n<p>有趣的是，工厂接口和具体工厂之间，也是使用了工厂方法模式。</p>\n",
      "image": "https://ww1.sinaimg.cn/large/006tNc79ly1fdjc0v569wj308905h0sq.jpg",
      "date_published": "2017-03-12T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "《Head First 设计模式》笔记"
      ]
    },
    {
      "title": "命令模式",
      "url": "https://wafer.li/blog-corners/learning-notes/head-first-design-pattern/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/",
      "id": "https://wafer.li/blog-corners/learning-notes/head-first-design-pattern/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/",
      "summary": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>命令模式将『请求』封装成对象，以便使用不同的请求，队列或者日志系统。</p>\n<p>命令模式也可以支持可撤销和回滚操作。</p>\n<p>命令模式通过将请求进行封装，成功地将客户和具体的低层组件进行解耦；</p>\n<p>客户只需要知道要加载命令，而不需要知道如何进行命令的具体执行操作。</p>\n",
      "content_html": "<h2 id=\"_1-概述\"> 1. 概述</h2>\n<p>命令模式将『请求』封装成对象，以便使用不同的请求，队列或者日志系统。</p>\n<p>命令模式也可以支持可撤销和回滚操作。</p>\n<p>命令模式通过将请求进行封装，成功地将客户和具体的低层组件进行解耦；</p>\n<p>客户只需要知道要加载命令，而不需要知道如何进行命令的具体执行操作。</p>\n\n<h2 id=\"_2-类图结构\"> 2. 类图结构</h2>\n<Mermaid id=\"mermaid-382ee14e\" data-code=\"classDiagram%0A%20%20%20%20class%20Client%0A%0A%20%20%20%20class%20Invoker%20%7B%0A%20%20%20%20%20%20%20%20%2B%20setCommand()%0A%20%20%20%20%7D%0A%0A%20%20%20%20class%20Receiver%20%7B%0A%20%20%20%20%20%20%20%20%2B%20action()%0A%20%20%20%20%7D%0A%0A%20%20%20%20class%20Command%20%7B%0A%20%20%20%20%20%20%20%20%2B%20%20execute()*%0A%20%20%20%20%20%20%20%20%2B%20%20undo()*%0A%20%20%20%20%7D%0A%0A%20%20%20%20%3C%3Cinterface%3E%3E%20Command%0A%0A%20%20%20%20class%20ConcreteCommand%20%7B%0A%20%20%20%20%20%20%20%20%2B%20execute()%0A%20%20%20%20%20%20%20%20%2B%20undo()%0A%20%20%20%20%7D%0A%0A%20%20%20%20Client%20--%3E%20Receiver%0A%20%20%20%20Client%20--%3E%20ConcreteCommand%0A%0A%20%20%20%20Invoker%20--%3E%20Command%0A%20%20%20%20ConcreteCommand%20--%7C%3E%20Command%0A\"></Mermaid><p>可以看到，<code>Client</code>  处于最高层，它不需要知道 <code>Command</code> 的执行过程；</p>\n<p>这就达到了客户和低层组件的解耦目的。</p>\n<h2 id=\"_3-封装请求调用者\"> 3. 封装请求调用者</h2>\n<p>一个很重要的地方就是我们的请求接收者 <code>Receiver</code> 和我们的命令对象 <code>Command</code> 是组合关系</p>\n<p>也就是说，<code>Command</code> 具有一个接收者的内部对象；</p>\n<p>否则，它无法真正地成为一个可以执行的命令。</p>\n<div><pre><code><span>public</span> <span>interface</span> <span>Command</span> <span>{</span>\n    <span>void</span> <span>execute</span><span>(</span><span>)</span><span>;</span>\n    <span>void</span> <span>undo</span><span>(</span><span>)</span><span>;</span>\n<span>}</span>\n\n<span>public</span> <span>class</span> <span>ConcreteCommand</span> <span>implements</span> <span>Command</span> <span>{</span>\n\n    <span>private</span> <span>Receiver</span> receiver<span>;</span>\n\n    <span>public</span> <span>ConcreteCommand</span><span>(</span><span>Receiver</span> receiver<span>)</span> <span>{</span>\n        <span>this</span><span>.</span>receiver <span>=</span> receiver<span>;</span>\n    <span>}</span>\n\n    <span>@Override</span>\n    <span>public</span> <span>void</span> <span>execute</span><span>(</span><span>)</span> <span>{</span>\n        receiver<span>.</span><span>action</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><h2 id=\"_4-支持撤销和回滚\"> 4. 支持撤销和回滚</h2>\n<p>通常的命令都会具有可撤销的属性要求；</p>\n<p>那么我们如何实现这个可撤销的需求呢？</p>\n<p>撤销实际上就是返回到命令执行前的一个状态中；</p>\n<p>所以在实际的命令对象类中，我们通过记住 <strong>上一个</strong> 命令时的状态，就能实现撤销功能。</p>\n<div><pre><code><span>public</span> <span>class</span> <span>CeilingFanHighCommand</span> <span>implements</span> <span>Command</span> <span>{</span>\n    <span>CeilingFan</span> ceilingFan<span>;</span>\n    <span>int</span> prevSpeed<span>;</span>  <span>// 前一个命令后风扇的转速</span>\n\n    <span>public</span> <span>CeilingFanHighCommand</span><span>(</span><span>CeilingFan</span> ceilingFan<span>)</span> <span>{</span>\n        <span>this</span><span>.</span>ceilingFan <span>=</span> ceilingFan<span>;</span>\n    <span>}</span>\n\n    <span>public</span> <span>void</span> <span>execute</span><span>(</span><span>)</span> <span>{</span>\n        prevSpeed <span>=</span> ceilingFan<span>.</span><span>getSpeed</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>public</span> <span>void</span> <span>undo</span><span>(</span><span>)</span> <span>{</span>\n        <span>if</span> <span>(</span>prevSpeed <span>==</span> <span>CeilingFan</span><span>.</span>HIGH<span>)</span> <span>{</span>\n            ceilingFan<span>.</span><span>high</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n        <span>else</span> <span>if</span> <span>(</span>prevSpeed <span>==</span> <span>CeilingFan</span><span>.</span>MEDIUM<span>)</span> <span>{</span>\n            ceilingFan<span>.</span><span>medium</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n        <span>else</span> <span>if</span> <span>(</span>prevSpeed <span>==</span> <span>CeilingFan</span><span>.</span>LOW<span>)</span> <span>{</span>\n            ceilingFan<span>.</span><span>low</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n        <span>else</span> <span>if</span> <span>(</span>prevSpeed <span>==</span> <span>CeilingFan</span><span>.</span>OFF<span>)</span> <span>{</span>\n            ceilingFan<span>.</span><span>off</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><h2 id=\"_5-使用空对象替代-null\"> 5. 使用空对象替代 <code>null</code></h2>\n<p>对于命令模式来说，它的客户类还是有一些细微的要求；</p>\n<p>我们可以使用一个队列或者数组来代表需要执行的命令插槽；</p>\n<p>当插槽没有加载命令时候，我们普通的做法是使用一个 <code>null</code> 来进行替代；</p>\n<p>但是，此时我们就需要对命令对象进行空检测：</p>\n<div><pre><code><span>public</span> <span>void</span> <span>onButtonWasPushed</span><span>(</span><span>int</span> slot<span>)</span> <span>{</span>\n    <span>if</span> <span>(</span>onCommand<span>[</span>slot<span>]</span> <span>!=</span> <span>null</span><span>)</span> <span>{</span>\n        onCommand<span>[</span>slot<span>]</span><span>.</span><span>execute</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>对此，我们可以使用一个 <code>NoCommand</code> 对象，它是一个命令对象，只不过什么都不做；</p>\n<p>这样，即使插槽没有加载命令，我们也可以直接使用 <code>NoCommand</code> 来替代，这样就不需要进行空检测了：</p>\n<div><pre><code><span>Command</span> noCommand <span>=</span> <span>new</span> <span>NoCommand</span><span>(</span><span>)</span><span>;</span>\n\n<span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>7</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>\n    onCommands<span>[</span>i<span>]</span> <span>=</span> noCommand<span>;</span>\n    offCommands<span>[</span>i<span>]</span> <span>=</span> noCommand<span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id=\"_6-宏命令\"> 6. 宏命令</h2>\n<p>命令模式的一个最大的优点就是能使用宏命令；</p>\n<p>也就是一次调用，执行多个命令；</p>\n<p>实际上，我们只需要将命令对象中包装的接收者变成命令对象数组即可：</p>\n<div><pre><code><span>public</span> clas <span>MacroCommand</span> <span>implements</span> <span>Command</span> <span>{</span>\n    <span>Command</span><span>[</span><span>]</span> commands<span>;</span>\n\n    <span>public</span> <span>MacroCommand</span><span>(</span><span>Command</span><span>[</span><span>]</span> commands<span>)</span> <span>{</span>\n        <span>this</span><span>.</span>commands <span>=</span> commands<span>;</span>\n    <span>}</span>\n\n    <span>public</span> <span>void</span> <span>execute</span><span>(</span><span>)</span> <span>{</span>\n        <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> commands<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>\n            commands<span>[</span>i<span>]</span><span>.</span><span>execute</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><h2 id=\"_7-队列请求\"> 7. 队列请求</h2>\n<p>除此之外，命令模式还可以使用于工作队列；</p>\n<p>也就是说我们可以构建一个接受命令对象的队列，它只是按照顺序进行命令的执行操作；</p>\n<p>当线程可用时，它就会将命令分配给线程，然后执行 <code>execute()</code>；</p>\n<p>队列并不需要关心命令究竟是什么，是如何完成的，只需要对命令进行调度即可。</p>\n<h2 id=\"_8-日志和恢复\"> 8. 日志和恢复</h2>\n<p>除了队列以外，我们另一个应用范围就是日志系统和崩溃恢复；</p>\n<p>为了完成这个功能，我们可以在命令接口中添加 <code>store()</code> 和 <code>load()</code> 方法；</p>\n<p>当调用者调用命令时候，同时调用 <code>store()</code> 将命令对象序列化到服务器中进行存储；</p>\n<p>当崩溃发生，需要恢复时，我们就可以将存储服务器中的命令对象进行反序列化，然后调用 <code>load()</code> 方法；</p>\n<h2 id=\"_9-优缺点\"> 9. 优缺点</h2>\n<p>命令模式的优点非常明显，就是可以完全实现客户类和低层组件的解耦；</p>\n<p>高层的调用者不需要知道命令执行的具体细节，只需要调用接口的方法就可以执行命令的调用。</p>\n<p>但是缺点是它需要创建不同的命令对象来进行不同的命令接收者的包装；</p>\n<p>这就会让我们的代码中出现很多的小型类。</p>\n",
      "date_published": "2017-03-25T00:00:00.000Z",
      "date_modified": "2021-07-15T11:52:03.000Z",
      "authors": [
        {
          "name": "Wafer Li"
        }
      ],
      "tags": [
        "《Head First 设计模式》笔记"
      ]
    }
  ]
}