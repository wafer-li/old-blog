(window.webpackJsonp=window.webpackJsonp||[]).push([[118],{822:function(s,t,a){"use strict";a.r(t);var n=a(1),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"_1-函数返回多个值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-函数返回多个值"}},[s._v("#")]),s._v(" 1. 函数返回多个值")]),s._v(" "),a("p",[s._v("函数可以通过返回一个"),a("strong",[s._v("元组")]),s._v("来达到返回多个值的目的。")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("get_error_details")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'second error details'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\nerrnum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" errstr "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" get_error_details"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("blockquote",[a("p",[s._v("上面运用到了"),a("strong",[s._v("元组解包")]),s._v("技术，通过使用逗号分隔变量，就可以分别取出对应位置的元组元素。")])]),s._v(" "),a("h2",{attrs:{id:"_2-特殊方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-特殊方法"}},[s._v("#")]),s._v(" 2. 特殊方法")]),s._v(" "),a("p",[s._v("Python 的类中有许多内置的特殊方法，例如 "),a("code",[s._v("__init__()")]),s._v(" 和 "),a("code",[s._v("__del__()")])]),s._v(" "),a("p",[s._v("可以在 Python 的参考手册中找到它们以及对应的作用。")]),s._v(" "),a("h2",{attrs:{id:"_3-单行语句块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-单行语句块"}},[s._v("#")]),s._v(" 3. 单行语句块")]),s._v(" "),a("p",[s._v("如果一个语句块只有一个逻辑行，则可以把它置于条件语句或者循环语句的同一行")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" flag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Yes'")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h2",{attrs:{id:"_4-lambda-表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-lambda-表达式"}},[s._v("#")]),s._v(" 4. Lambda 表达式")]),s._v(" "),a("p",[a("code",[s._v("lambda")]),s._v(" 语句用来创建新的"),a("strong",[s._v("函数对象")]),s._v("，并且在运行时返回它们。")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("make_repeater")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("lambda")]),s._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" s"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("blockquote",[a("p",[s._v("本质上, "),a("code",[s._v("lambda")]),s._v(" 需要一个参数,后面仅跟单个表达 式作为函数体,而表达式的值被这个新建的函数返回。注意,即便是 "),a("code",[s._v("print")]),s._v(" 语句也不 能用在 "),a("code",[s._v("lambda")]),s._v(" 形式中,只能使用表达式。")])]),s._v(" "),a("h2",{attrs:{id:"_5-列表综合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-列表综合"}},[s._v("#")]),s._v(" 5. 列表综合")]),s._v(" "),a("p",[s._v("通过列表综合，可以从一个已有的列表导出一个新的列表。")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/usr/bin/python")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Filename: list_comprehension.py")]),s._v("\n\nlistone "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nlisttwo "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" listone "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("blockquote",[a("p",[s._v("通过在列表中使用这样的语句就可以对符合条件的每个列表元素进行处理\n注意原有的列表并没有改变，这个操作实际上是"),a("strong",[s._v("生成了一个新列表")])])]),s._v(" "),a("h2",{attrs:{id:"_6-exec-和-eval"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-exec-和-eval"}},[s._v("#")]),s._v(" 6. "),a("code",[s._v("exec")]),s._v(" 和 "),a("code",[s._v("eval")])]),s._v(" "),a("p",[a("code",[s._v("exec")]),s._v(" 语句用来执行"),a("strong",[s._v("字符串形式")]),s._v("的 Python 语句")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v(">>> exec('print(\"Hello, World\")')\nHello, World\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[a("code",[s._v("eval")]),s._v(" 语句用来执行"),a("strong",[s._v("字符串形式")]),s._v("的 Python 表达式")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("eval")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'2*3'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("blockquote",[a("p",[s._v("两者看似相同，但是也有细微区别：")])]),s._v(" "),a("blockquote",[a("ol",[a("li",[a("code",[s._v("eval")]),s._v(" 只接受"),a("strong",[s._v("单行字符串表达式")]),s._v("，"),a("code",[s._v("exec")]),s._v(" 可以接受一个语句和语句块")])]),s._v(" "),a("blockquote",[a("p",[s._v("“表达式”所指的就是"),a("strong",[s._v("可以放在等号右边的东西")]),s._v("，"),a("code",[s._v("break")]),s._v(" "),a("code",[s._v("if")]),s._v(" "),a("code",[s._v("pass")]),s._v(" 等不是表达式")])])]),s._v(" "),a("blockquote",[a("ol",{attrs:{start:"2"}},[a("li",[a("code",[s._v("eval")]),s._v(" 会"),a("strong",[s._v("返回表达式的结果")]),s._v("，"),a("code",[s._v("exec")]),s._v(" 则会忽略该结果")])])]),s._v(" "),a("h2",{attrs:{id:"_7-assert-语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-assert-语句"}},[s._v("#")]),s._v(" 7. "),a("code",[s._v("assert")]),s._v(" 语句")]),s._v(" "),a("p",[s._v("同 Java 中的 "),a("code",[s._v("assert")]),s._v(" 语句一样，以调试为目的。\n但是 Python 的 "),a("code",[s._v("assert")]),s._v(" 语句功能是默认启动的\n当 "),a("code",[s._v("assert")]),s._v(" 失败时，会引发一个 "),a("code",[s._v("AssertionError")])]),s._v(" "),a("h2",{attrs:{id:"_8-repr-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-repr-函数"}},[s._v("#")]),s._v(" 8. repr 函数")]),s._v(" "),a("p",[s._v("该函数用来取得对象的规范字符串表示，实际上它的作用就是"),a("strong",[s._v("为对象包了一层"),a("code",[s._v('""')])])]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("append"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'item'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" i\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'item'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("repr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"['item']\"")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("eval")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("repr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'item'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("eval")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("repr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" i\n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])])])}),[],!1,null,null,null);t.default=e.exports}}]);