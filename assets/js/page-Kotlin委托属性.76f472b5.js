(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{802:function(s,a,t){"use strict";t.r(a);var n=t(1),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"_1-使用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-使用场景"}},[s._v("#")]),s._v(" 1. 使用场景")]),s._v(" "),t("p",[s._v("有些时候，对于一些特殊的变量，虽然我们每次都去手动生成它们，但是如果一次性生成它们，然后存进库中会更加方便，例如：")]),s._v(" "),t("ul",[t("li",[s._v("lazy 属性：只在第一次访问它们的时候计算它们。")]),s._v(" "),t("li",[s._v("observable 属性：当它被修改的时候，会通知它的监听者。")]),s._v(" "),t("li",[s._v("将属性储存在一个 Map 中，而不是用字段存储。")])]),s._v(" "),t("p",[s._v("对于这些使用场景，Kotlin 支持使用"),t("strong",[s._v("委托属性")])]),s._v(" "),t("h2",{attrs:{id:"_2-声明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-声明"}},[s._v("#")]),s._v(" 2. 声明")]),s._v(" "),t("div",{staticClass:"language-kotlin line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-kotlin"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" Example "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" p"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" String "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Delegate")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("声明委托属性的语法为："),t("code",[s._v("val/var <property name>: <Type> by <expression>")]),s._v("。")]),s._v(" "),t("p",[s._v("其中，在 "),t("code",[s._v("by")]),s._v(" 之后的表达式就是"),t("strong",[s._v("委托操作")]),s._v("。")]),s._v(" "),t("p",[s._v("上面的例子说明了 "),t("code",[s._v("p")]),s._v(" 变量的操作将会委托给 "),t("code",[s._v("Delegate")]),s._v(" 类来进行。")]),s._v(" "),t("p",[s._v("为了替代 "),t("code",[s._v("p")]),s._v(" 的 getter 和 setter，"),t("code",[s._v("Delegate")]),s._v(" 类必须提供 "),t("code",[s._v("getValue()")]),s._v(" 和 "),t("code",[s._v("setValue()")]),s._v(" 方法，委托之后，对 "),t("code",[s._v("p")]),s._v(" 的调用操作"),t("strong",[s._v("将会由这两个方法来完成")]),s._v("。")]),s._v(" "),t("div",{staticClass:"language-kotlin line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-kotlin"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" Delegate "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("operator")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getValue")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("thisRef"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Any"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" property"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" KProperty"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" String "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token interpolation variable"}},[s._v("$thisRef")]),s._v(", thank you for delegating '"),t("span",{pre:!0,attrs:{class:"token interpolation"}},[t("span",{pre:!0,attrs:{class:"token delimiter variable"}},[s._v("${")]),s._v("property"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token delimiter variable"}},[s._v("}")])]),s._v("' to me!\"")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("operator")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setValue")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("thisRef"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Any"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" property"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" KProperty"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" value"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" String"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token interpolation variable"}},[s._v("$value")]),s._v(" has been assigned to '"),t("span",{pre:!0,attrs:{class:"token interpolation"}},[t("span",{pre:!0,attrs:{class:"token delimiter variable"}},[s._v("${")]),s._v("property"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token delimiter variable"}},[s._v("}")])]),s._v(" in "),t("span",{pre:!0,attrs:{class:"token interpolation variable"}},[s._v("$thisRef")]),s._v(".'\"")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("那么当我们进行如下调用：")]),s._v(" "),t("div",{staticClass:"language-kotlin line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-kotlin"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" e "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Example")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("p"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("打印结果为")]),s._v(" "),t("div",{staticClass:"language-kotlin line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-kotlin"}},[t("code",[t("span",{pre:!0,attrs:{class:"token label symbol"}},[s._v("Example@")]),s._v("33a17727"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" thank you "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" delegating ‘p’ "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("to")]),s._v(" me"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("同理，进行如下操作")]),s._v(" "),t("div",{staticClass:"language-kotlin line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-kotlin"}},[t("code",[s._v("e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("p "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"NEW"')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("将会打印如下结果：")]),s._v(" "),t("div",{staticClass:"language-kotlin line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-kotlin"}},[t("code",[s._v("NEW has been assigned "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("to")]),s._v(" ‘p’ "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token label symbol"}},[s._v("Example@")]),s._v("33a17727"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h2",{attrs:{id:"_3-需要满足的条件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-需要满足的条件"}},[s._v("#")]),s._v(" 3. 需要满足的条件")]),s._v(" "),t("p",[s._v("对于只读属性("),t("code",[s._v("val")]),s._v(")，被委派的类必须提供 "),t("code",[s._v("getValue()")]),s._v(" 方法，该方法必须拥有如下参数")]),s._v(" "),t("ul",[t("li",[s._v("接收者：必须是"),t("strong",[s._v("当前属性的拥有者")]),s._v("（属性所属的类）或者其"),t("strong",[s._v("超类")]),s._v("的实例对象。")]),s._v(" "),t("li",[s._v("元数据：必须是 "),t("code",[s._v("KProperty<*>")]),s._v(" 或者它的超类")])]),s._v(" "),t("p",[t("code",[s._v("getValue()")]),s._v(" 必须拥有返回值，而且类型与当前委托的属性类型相同。")]),s._v(" "),t("p",[s._v("对于可变属性("),t("code",[s._v("var")]),s._v(")，被委托的类必须"),t("strong",[s._v("额外提供")]),s._v("一个 "),t("code",[s._v("setValue()")]),s._v(" 方法，该方法必须拥有如下参数：")]),s._v(" "),t("ul",[t("li",[s._v("接收者：和 "),t("code",[s._v("getValue()")]),s._v(" 相同")]),s._v(" "),t("li",[s._v("元数据：和 "),t("code",[s._v("getValue()")]),s._v(" 相同")]),s._v(" "),t("li",[s._v("新值：其类型必须和所委托的类型相同，或者是它的超类。")])]),s._v(" "),t("p",[t("code",[s._v("getValue()")]),s._v(" 和 "),t("code",[s._v("setValue()")]),s._v(" 方法既可以是被委托类的成员，也可以是它的"),t("strong",[s._v("扩展")]),s._v("。")]),s._v(" "),t("p",[t("strong",[s._v("两个方法都需要使用 "),t("code",[s._v("operator")]),s._v(" 来修饰。")])]),s._v(" "),t("h2",{attrs:{id:"_4-一般的委托场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-一般的委托场景"}},[s._v("#")]),s._v(" 4. 一般的委托场景")]),s._v(" "),t("p",[s._v("Kotlin 的标准库提供了一些工厂方法，用来实现篇头所说的几种场景。")]),s._v(" "),t("h3",{attrs:{id:"_4-1-lazy-变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-lazy-变量"}},[s._v("#")]),s._v(" 4.1 lazy 变量")]),s._v(" "),t("p",[s._v("Kotlin 提供了一个 "),t("code",[s._v("lazy()")]),s._v(" 方法用于 lazy 变量的生成。")]),s._v(" "),t("p",[t("code",[s._v("lazy()")]),s._v(" 方法接受一个 lambda 表达式，返回一个 "),t("code",[s._v("Lazy<T>")]),s._v(" 实例，用于委托属性。")]),s._v(" "),t("div",{staticClass:"language-kotlin line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-kotlin"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" lazyValue"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" String "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" lazy "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"computed!"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("args"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Array"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("String"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("lazyValue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("lazyValue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[t("code",[s._v("main")]),s._v(" 中的第一个调用会**触发 "),t("code",[s._v("lazy()")]),s._v("**进行 "),t("code",[s._v("lazyValue")]),s._v(" 的计算，而第二个调用只会返回 "),t("code",[s._v("lazyValue")]),s._v(" 的值。")]),s._v(" "),t("p",[s._v("结果为")]),s._v(" "),t("div",{staticClass:"language-kotlin line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-kotlin"}},[t("code",[s._v("computed"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\nHello\nHello\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("默认情况下，"),t("code",[s._v("lazy()")]),s._v(" 的调用是"),t("strong",[s._v("同步的")]),s._v("。也就是说，只有一个线程会进行变量的计算，完成后，所有的线程都能看到其结果。")]),s._v(" "),t("p",[s._v("如果不需要初始化同步，那么可以通过将 "),t("code",[s._v("LazyThreadSafetyMode.PUBLICATION")]),s._v(" 作为参数传给 "),t("code",[s._v("lazy()")]),s._v(" 方法来实现。")]),s._v(" "),t("p",[s._v("如果确保变量的初始化只会有一个线程来完成，那么可以将 "),t("code",[s._v("LazyThreadSafetyMode.NONE")]),s._v(" 作为参数传给 "),t("code",[s._v("lazy()")]),s._v("，这样一来，Kotlin 就不会对该变量的生成启用线程安全机制。")]),s._v(" "),t("h3",{attrs:{id:"_4-2-observable"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-observable"}},[s._v("#")]),s._v(" 4.2 Observable")]),s._v(" "),t("p",[s._v("Kotlin 标准库用 "),t("code",[s._v("Delegates.observable()")]),s._v(" 来实现可观察属性(observable property)。")]),s._v(" "),t("div",{staticClass:"language-kotlin line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-kotlin"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" kotlin"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("properties"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Delegates\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" User "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" String "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" Delegates"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("observable")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"<no name>"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        prop"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" old"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" new "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token interpolation variable"}},[s._v("$old")]),s._v(" -> "),t("span",{pre:!0,attrs:{class:"token interpolation variable"}},[s._v("$new")]),s._v('"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("args"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Array"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("String"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" user "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("User")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    user"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"first"')]),s._v("\n    user"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"second"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[t("code",[s._v("Delegates.observable()")]),s._v(" 接受两个参数：一个是"),t("strong",[s._v("初始化值")]),s._v("，另一个是 handler。")]),s._v(" "),t("p",[s._v("Handler 会在每次我们对变量进行"),t("strong",[s._v("赋值操作后")]),s._v("被调用。\n它具有三个参数：")]),s._v(" "),t("ul",[t("li",[s._v("被赋值的变量")]),s._v(" "),t("li",[s._v("旧的变量值")]),s._v(" "),t("li",[s._v("新的变量值")])]),s._v(" "),t("p",[s._v("上面的例子的打印结果为：")]),s._v(" "),t("div",{staticClass:"language-kotlin line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-kotlin"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("no name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" first\nfirst "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" second\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("使用 "),t("code",[s._v("vetoable()")]),s._v(" 代替 "),t("code",[s._v("observable()")]),s._v(" 方法可以对变量赋值进行"),t("strong",[s._v("拦截操作")]),s._v("。")]),s._v(" "),t("p",[t("code",[s._v("vetoable()")]),s._v(" 的 handler 会在每次"),t("strong",[s._v("赋值操作前")]),s._v("被调用。")]),s._v(" "),t("h3",{attrs:{id:"_4-3-在-map-中储存属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-在-map-中储存属性"}},[s._v("#")]),s._v(" 4.3 在 Map 中储存属性")]),s._v(" "),t("p",[s._v("这个场景通常在进行 JSON 解析或者对其他数据进行动态解析时常用的。")]),s._v(" "),t("p",[s._v("对于 JSON 数据，我们通常将其解析为一个 Map，所以，我们可以通过对 Map 进行委派，从而实现反序列化操作。")]),s._v(" "),t("div",{staticClass:"language-kotlin line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-kotlin"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("User")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" map"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Map"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("String"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Any"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" String "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" map\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" age"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Int     "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" map\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("一个调用的例子：")]),s._v(" "),t("div",{staticClass:"language-kotlin line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-kotlin"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" user "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("User")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("mapOf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"name"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("to")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"John Doe"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"age"')]),s._v("  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("to")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("25")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("div",{staticClass:"language-kotlin line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-kotlin"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("user"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// Prints "John Doe"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("user"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Prints 25")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[t("code",[s._v("User")]),s._v(" 类会通过 Map 将数据取出。")]),s._v(" "),t("p",[s._v("这个方法同样适用于 "),t("code",[s._v("var")]),s._v(" 变量，只要把 "),t("code",[s._v("Map")]),s._v(" 改成 "),t("code",[s._v("MutableMap")]),s._v(" 即可。")])])}),[],!1,null,null,null);a.default=e.exports}}]);