(window.webpackJsonp=window.webpackJsonp||[]).push([[101],{812:function(t,a,s){"use strict";s.r(a);var n=s(1),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"_1-概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述"}},[t._v("#")]),t._v(" 1. 概述")]),t._v(" "),s("p",[t._v("Kotlin 完美支持 Java，你可以无缝地在 Kotlin 中引入 Java 库，调用 Java 类等。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("demo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("source"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" List"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Int"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" list "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ArrayList"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Int"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'for'-loops work for Java collections:")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" source"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Operator conventions work as well:")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("..")]),t._v("source"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" source"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// get and set are called")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])]),t._v(" "),s("h2",{attrs:{id:"_2-调用-getter-和-setter"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-调用-getter-和-setter"}},[t._v("#")]),t._v(" 2. 调用 getter 和 setter")]),t._v(" "),s("p",[t._v("Java 中的 getter 和 setter 在 Kotlin 中都会被转换为 Kotlin 的格式，即只需要直接引用属性值即可。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Calendar\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("calendarDemo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" calendar "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Calendar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("calendar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstDayOfWeek "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" Calendar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("SUNDAY"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// call getFirstDayOfWeek()")]),t._v("\n        calendar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstDayOfWeek "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Calendar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MONDAY       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// call setFirstDayOfWeek()")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("h2",{attrs:{id:"_3-返回-void-的方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-返回-void-的方法"}},[t._v("#")]),t._v(" 3. 返回 "),s("code",[t._v("void")]),t._v(" 的方法")]),t._v(" "),s("p",[t._v("Java 中返回 "),s("code",[t._v("void")]),t._v(" 的方法，在 Kotlin 中会转换为返回 "),s("code",[t._v("Unit")])]),t._v(" "),s("h2",{attrs:{id:"_4-转义-java-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-转义-java-方法"}},[t._v("#")]),t._v(" 4. 转义 Java 方法")]),t._v(" "),s("p",[t._v("Kotlin 中拥有一些 Java 没有的关键字（比如 "),s("code",[t._v("is")]),t._v(" "),s("code",[t._v("in")]),t._v(" "),s("code",[t._v("object")]),t._v(" 等）。\n对于这些关键字，如果 Java 代码中有相同的方法名或变量名，可以通过对其进行转义来调用它。")]),t._v(" "),s("p",[t._v("使用 "),s("code",[t._v("``")]),t._v(" 来进行转义工作。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[t._v("foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("`is`")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h2",{attrs:{id:"_5-null-safety-和-platform-type"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-null-safety-和-platform-type"}},[t._v("#")]),t._v(" 5. Null Safety 和 Platform Type")]),t._v(" "),s("p",[t._v("在 Java 中，任何引用都有可能为空，但是在 Kotlin 中，严格的类型系统不允许空值。")]),t._v(" "),s("p",[t._v("对于这种冲突，Kotlin 采用 Platform Type，也就是说在 Java 代码中的引用，Kotlin 类型系统会对其放松限制。")]),t._v(" "),s("p",[t._v("所以它们的安全性保障就和在 Java 代码中一样。")]),t._v(" "),s("p",[t._v("对于 Platform Type，我们可以使用一个 nullable 的 Kotlin 类型来承接它，也可以使用 non-nullable 对象。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" nullable"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" item "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// allowed, always works")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" notNull"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" item "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// allowed, may fail at runtime")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("当我们使用 non-null 对象来承接 Platform Type 时，\nKotlin 会自动在赋值语句上方插入断言，来保证 Kotlin 变量的非空性。")]),t._v(" "),s("p",[t._v("同样的，当我们把 Platform Type 传个一个接受非空类型的函数参数时，\nKotlin 也会自动在函数调用前插入断言语句。")]),t._v(" "),s("p",[t._v("不过有时候也不一定会进行断言，特别是在使用泛型的时候。")]),t._v(" "),s("h2",{attrs:{id:"_6-platform-type-的符号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-platform-type-的符号"}},[t._v("#")]),t._v(" 6. Platform Type 的符号")]),t._v(" "),s("p",[t._v("由于 Platform Type 不能被显式确定，所以没有关于它们的语法。")]),t._v(" "),s("p",[t._v("但是有时候 IDE 需要生成函数提示，所以对于 Platfrom Type 也有一些符号用于说明。")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("T!")]),t._v(" 表示 "),s("code",[t._v("T")]),t._v(" 或者 "),s("code",[t._v("T?")])]),t._v(" "),s("li",[s("code",[t._v("(Mutable)Collection<T>!")]),t._v(" 表示关于 "),s("code",[t._v("T")]),t._v(" 的 Java 集合，可能会被修改，也可能不会；可能为空，也可能不会")]),t._v(" "),s("li",[s("code",[t._v("Array<(out) T>!")]),t._v("  表示关于 "),s("code",[t._v("T")]),t._v(" 或者其子类型的 Java 数组，有可能为空，也可能不为空。")])]),t._v(" "),s("h2",{attrs:{id:"_7-nullability-注解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-nullability-注解"}},[t._v("#")]),t._v(" 7. Nullability 注解")]),t._v(" "),s("p",[t._v("使用了注解表明 nullability 的 Platform Type 会被当做真正的 Kotlin 变量来处理。")]),t._v(" "),s("p",[t._v("Kotlin 目前支持以下注解：")]),t._v(" "),s("ul",[s("li",[t._v("JetBrains ("),s("code",[t._v("@Nullable")]),t._v(" and "),s("code",[t._v("@NotNull")]),t._v(" from the  "),s("code",[t._v("org.jetbrains.annotations package")]),t._v(")")]),t._v(" "),s("li",[t._v("Android ("),s("code",[t._v("com.android.annotations")]),t._v(" and "),s("code",[t._v("android.support.annotations")]),t._v(")")]),t._v(" "),s("li",[t._v("JSR-305 ("),s("code",[t._v("javax.annotation")]),t._v(")")]),t._v(" "),s("li",[t._v("FindBugs ("),s("code",[t._v("edu.umd.cs.findbugs.annotations")]),t._v(")")]),t._v(" "),s("li",[t._v("Eclipse ("),s("code",[t._v("org.eclipse.jdt.annotation")]),t._v(")")]),t._v(" "),s("li",[t._v("Lombok ("),s("code",[t._v("lombok.NonNull")]),t._v(").")])]),t._v(" "),s("h2",{attrs:{id:"_8-类型的对应关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-类型的对应关系"}},[t._v("#")]),t._v(" 8. 类型的对应关系")]),t._v(" "),s("p",[t._v("由于 Kotlin 中没有原始类型，所以对于 Java 的原始类型，会被自动转换成对应的 Kotlin 类。")]),t._v(" "),s("p",[t._v("这个转换只会发生在"),s("strong",[t._v("编译期间")]),t._v("，在运行期间是不变的，会保持 Platfrom Type。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Java type")]),t._v(" "),s("th",[t._v("Kotlin type")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("byte")])]),t._v(" "),s("td",[s("code",[t._v("kotlin.Byte")])])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("short")])]),t._v(" "),s("td",[s("code",[t._v("kotlin.Short")])])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("int")])]),t._v(" "),s("td",[s("code",[t._v("kotlin.Int")])])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("long")])]),t._v(" "),s("td",[s("code",[t._v("kotlin.Long")])])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("char")])]),t._v(" "),s("td",[s("code",[t._v("kotlin.Char")])])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("float")])]),t._v(" "),s("td",[s("code",[t._v("kotlin.Float")])])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("double")])]),t._v(" "),s("td",[s("code",[t._v("kotlin.Double")])])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("boolean")])]),t._v(" "),s("td",[s("code",[t._v("kotlin.Boolean")])])])])]),t._v(" "),s("p",[t._v("一些非原始类型的类也会被转换")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Java type")]),t._v(" "),s("th",[t._v("Kotlin type")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("java.lang.Object")])]),t._v(" "),s("td",[s("code",[t._v("kotlin.Any!")])])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("java.lang.Cloneable")])]),t._v(" "),s("td",[s("code",[t._v("kotlin.Cloneable!")])])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("java.lang.Comparable")])]),t._v(" "),s("td",[s("code",[t._v("kotlin.Comparable!")])])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("java.lang.Enum")])]),t._v(" "),s("td",[s("code",[t._v("kotlin.Enum!")])])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("java.lang.Annotation")])]),t._v(" "),s("td",[s("code",[t._v("kotlin.Annotation!")])])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("java.lang.Deprecated")])]),t._v(" "),s("td",[s("code",[t._v("kotlin.Deprecated!")])])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("java.lang.Void")])]),t._v(" "),s("td",[s("code",[t._v("kotlin.Nothing!")])])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("java.lang.CharSequence")])]),t._v(" "),s("td",[s("code",[t._v("kotlin.CharSequence!")])])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("java.lang.String")])]),t._v(" "),s("td",[s("code",[t._v("kotlin.String!")])])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("java.lang.Number")])]),t._v(" "),s("td",[s("code",[t._v("kotlin.Number!")])])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("java.lang.Throwable")])]),t._v(" "),s("td",[s("code",[t._v("kotlin.Throwable!")])])])])]),t._v(" "),s("p",[t._v("集合类型在 Kotlin 有可变和不可变两种类型，\n所以 Java 的集合类型也会进行相应的转换。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Java type")]),t._v(" "),s("th",[t._v("Kotlin read-only type")]),t._v(" "),s("th",[t._v("Kotlin mutable type")]),t._v(" "),s("th",[t._v("Loaded platform type")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("Iterator<T>")])]),t._v(" "),s("td",[s("code",[t._v("Iterator<T>")])]),t._v(" "),s("td",[s("code",[t._v("MutableIterator<T>")])]),t._v(" "),s("td",[s("code",[t._v("(Mutable)Iterator<T>!")])])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("Iterable<T>")])]),t._v(" "),s("td",[s("code",[t._v("Iterable<T>")])]),t._v(" "),s("td",[s("code",[t._v("MutableIterable<T>")])]),t._v(" "),s("td",[s("code",[t._v("(Mutable)Iterable<T>!")])])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("Collection<T>")])]),t._v(" "),s("td",[s("code",[t._v("Collection<T>")])]),t._v(" "),s("td",[s("code",[t._v("MutableCollection<T>")])]),t._v(" "),s("td",[s("code",[t._v("(Mutable)Collection<T>!")])])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("Set<T>")])]),t._v(" "),s("td",[s("code",[t._v("Set<T>")])]),t._v(" "),s("td",[s("code",[t._v("MutableSet<T>")])]),t._v(" "),s("td",[s("code",[t._v("(Mutable)Set<T>!")])])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("List<T>")])]),t._v(" "),s("td",[s("code",[t._v("List<T>")])]),t._v(" "),s("td",[s("code",[t._v("MutableList<T>")])]),t._v(" "),s("td",[s("code",[t._v("(Mutable)List<T>!")])])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("ListIterator<T>")])]),t._v(" "),s("td",[s("code",[t._v("ListIterator<T>")])]),t._v(" "),s("td",[s("code",[t._v("MutableListIterator<T>")])]),t._v(" "),s("td",[s("code",[t._v("(Mutable)ListIterator<T>!")])])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("Map<K, V>")])]),t._v(" "),s("td",[s("code",[t._v("Map<K, V>")])]),t._v(" "),s("td",[s("code",[t._v("MutableMap<K, V>")])]),t._v(" "),s("td",[s("code",[t._v("(Mutable)Map<K, V>!")])])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("Map.Entry<K, V>")])]),t._v(" "),s("td",[s("code",[t._v("Map.Entry<K, V>")])]),t._v(" "),s("td",[s("code",[t._v("MutableMap.MutableEntry<K,V>")])]),t._v(" "),s("td",[s("code",[t._v("(Mutable)Map.(Mutable)Entry<K, V>!")])])])])]),t._v(" "),s("p",[t._v("同样的，Java 的数组也会进行转换")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Java type")]),t._v(" "),s("th",[t._v("Kotlin type")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("int[]")])]),t._v(" "),s("td",[s("code",[t._v("kotlin.IntArray!")])])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("String[]")])]),t._v(" "),s("td",[s("code",[t._v("kotlin.Array<(out) String>!")])])])])]),t._v(" "),s("h2",{attrs:{id:"_9-java-泛型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-java-泛型"}},[t._v("#")]),t._v(" 9. Java 泛型")]),t._v(" "),s("p",[t._v("Kotlin 中的泛型系统和 Java 有些不同，所以当使用的 Java 代码存在泛型时，做如下转换：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("Java 泛型通配符被转换成类型预测")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("Foo<? extends Bar>")]),t._v("  转换为 "),s("code",[t._v("Foo<out Bar!>!")])]),t._v(" "),s("li",[s("code",[t._v("Foo<? super Bar>")]),t._v(" 转换为 "),s("code",[t._v("Foo<in Bar!>!")])])])]),t._v(" "),s("li",[s("p",[t._v("Java 的原始类型被转换成星形预测")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("List")]),t._v(" 转换为 "),s("code",[t._v("List<*>!")]),t._v("，也就是 "),s("code",[t._v("List<out Any?>!")])])])])]),t._v(" "),s("p",[t._v("和 Java 一样，Kotlin 的泛型在运行期间是不会保留的。\n也就是说对象在构建的时候不会携带泛型的真正类型的信息。\n也就说说 Kotlin 不能区分 "),s("code",[t._v("ArrayList<Integer>")]),t._v(" 和 "),s("code",[t._v("ArrayList<Character>")]),t._v("。")]),t._v(" "),s("p",[t._v("这限制了 "),s("code",[t._v("is")]),t._v(" 语句的使用，对于泛型，"),s("code",[t._v("is")]),t._v(" 只能用于星形预测类型的检查，而不能应用于其他普通泛型类型的检查。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" List"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Int"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Error: cannot check if it is really a List of Ints")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// but")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" List"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// OK: no guarantees about the contents of the list")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h2",{attrs:{id:"_10-java-数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-java-数组"}},[t._v("#")]),t._v(" 10. Java 数组")]),t._v(" "),s("p",[t._v("与 Java 不同，数组在 Kotlin 中是不可变的。\n也就是说 Kotlin 不允许将 "),s("code",[t._v("Array<Int>")]),t._v(" 赋予 "),s("code",[t._v("Array<Any>")]),t._v("，这避免了一些运行期间的错误。")]),t._v(" "),s("p",[t._v("同样的，Kotlin 也不允许一个子类的数组传入一个超类数组的形参中。")]),t._v(" "),s("p",[t._v("在 Java 平台中，使用原生类型的数组能避免装箱和拆箱所带来的性能损失；\n但是在 Kotlin 中，这些细节被隐藏了起来，所以在调用 Java 代码时就需要一些特殊方法来进行沟通。")]),t._v(" "),s("p",[t._v("Kotlin 对此为每个原始类型都提供了一个对应的数组类型，例如 "),s("code",[t._v("IntArray")]),t._v(" "),s("code",[t._v("LongArray")]),t._v(" "),s("code",[t._v("CharArray")]),t._v(" 等，这些类和 "),s("code",[t._v("Array")]),t._v(" 类"),s("strong",[t._v("没有关系")]),t._v("。")]),t._v(" "),s("p",[t._v("在编译时，这些数组类型会被编译为 Java 的原生类型数组，以提高性能。")]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("IntArray")]),t._v(" 和 "),s("code",[t._v("Array<Int>")]),t._v(" 的区别：")])]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("IntArray")]),t._v(" 相当于 Java 中的 "),s("code",[t._v("int[]")]),t._v("，不进行装箱和拆箱操作；\n"),s("code",[t._v("Array<Int>")]),t._v(" 相当于 Java 中的 "),s("code",[t._v("Integer[]")]),t._v("，进行装箱和拆箱操作。")])]),t._v(" "),s("blockquote",[s("p",[t._v("see "),s("a",{attrs:{href:"http://stackoverflow.com/a/35253626/5730641",target:"_blank",rel:"noopener noreferrer"}},[t._v("here"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("所以对于一个接受 "),s("code",[t._v("int[]")]),t._v(" 的 Java 方法")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("JavaArrayExample")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeIndices")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" indices"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// code here...")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("我们可以使用 "),s("code",[t._v("IntArray")]),t._v(" 将参数传入：")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" javaObj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("JavaArrayExample")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" array "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("intArrayOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\njavaObj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeIndices")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// passes int[] to method")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("当代码被编译为 JVM 字节码时，编译器会对以上类型进行优化，取消 getter 和 setter 的使用，而是"),s("strong",[t._v("直接取值赋值")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" array "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("arrayOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\narray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// no actual calls to get() and set() generated")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// no iterator created")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("同样，在遍历这样的一个数组时，不会创建 "),s("code",[t._v("iterator")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("indices"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// no iterator created")]),t._v("\n  array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("最后，在 "),s("code",[t._v("in")]),t._v(" 语句中，对于这样的数组也不会调用 "),s("code",[t._v("contains()")]),t._v(" 方法。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("indices"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// same as (i >= 0 && i < array.size)")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h2",{attrs:{id:"_11-java-不定参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-java-不定参数"}},[t._v("#")]),t._v(" 11. Java 不定参数")]),t._v(" "),s("p",[t._v("对于 Java 的不定参数，你需要像 Kotlin 中一样，使用 spread operator("),s("code",[t._v("*")]),t._v(") 来传入一个数组。")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("JavaArrayExample")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeIndices")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" indices"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// code here...")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" javaObj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("JavaArray")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" array "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("intArrayOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\njavaObj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeIndicesVarArg")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h2",{attrs:{id:"_12-操作符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12-操作符"}},[t._v("#")]),t._v(" 12. 操作符")]),t._v(" "),s("p",[t._v("由于 Java 没有操作符重载，所以 Kotlin 允许将任何的拥有正确命名和函数参数的 Java 方法"),s("strong",[t._v("当做操作符重载使用")]),t._v("。")]),t._v(" "),s("p",[t._v("不过不允许在中缀函数中调用 Java 方法。")]),t._v(" "),s("h2",{attrs:{id:"_13-已检查异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-已检查异常"}},[t._v("#")]),t._v(" 13. 已检查异常")]),t._v(" "),s("p",[t._v("由于 Kotlin 没有已检查异常，所以 Kotlin 不会强制要求你进行异常捕获；\n即使你调用的 Java 方法声明了已检查异常"),s("strong",[t._v("也一样")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"_14-java-object-类方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14-java-object-类方法"}},[t._v("#")]),t._v(" 14. Java Object 类方法")]),t._v(" "),s("p",[t._v("引用 Java 代码时，Java 的 "),s("code",[t._v("Object")]),t._v(" 类会被转换成 "),s("code",[t._v("Any")]),t._v("；\n但是 "),s("code",[t._v("Any")]),t._v(" 类只声明了 "),s("code",[t._v("toString()")]),t._v("，"),s("code",[t._v("hashCode()")]),t._v(" 和 "),s("code",[t._v("equals()")]),t._v("方法，\n所以，为了完整实现 "),s("code",[t._v("Object")]),t._v(" 类的功能，我们使用"),s("strong",[t._v("扩展")]),t._v("来实现。")]),t._v(" "),s("h3",{attrs:{id:"_14-1-wait-和-notify"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14-1-wait-和-notify"}},[t._v("#")]),t._v(" 14.1 "),s("code",[t._v("wait()")]),t._v(" 和 "),s("code",[t._v("notify()")])]),t._v(" "),s("p",[t._v("《Effective Java》第 69 条中强调：尽量使用多线程工具而不是使用 "),s("code",[t._v("wait()")]),t._v(" 和 "),s("code",[t._v("notify()")]),t._v(" 方法；\n所以 "),s("code",[t._v("Any")]),t._v(" 类中并没有实现这两个方法。")]),t._v(" "),s("p",[t._v("但是如果你真的需要使用这两个方法，可以把 "),s("code",[t._v("Any")]),t._v(" 造型为 "),s("code",[t._v("Object")]),t._v(" 来使用。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("foo "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lang"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("wait")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h3",{attrs:{id:"_14-2-getclass-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14-2-getclass-方法"}},[t._v("#")]),t._v(" 14.2 "),s("code",[t._v("getClass()")]),t._v(" 方法")]),t._v(" "),s("p",[t._v("在 Kotlin 中，我们使用 "),s("code",[t._v("javaClass")]),t._v(" 变量来获取对应的 "),s("code",[t._v("Class")]),t._v(" 变量。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" fooClass "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("javaClass\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("对于 Java 中的 "),s("code",[t._v("Foo.class")]),t._v("，Kotlin 中使用 "),s("code",[t._v("Foo::class.java")])]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" fooClass "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Foo"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("java\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h3",{attrs:{id:"_14-3-clone-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14-3-clone-方法"}},[t._v("#")]),t._v(" 14.3 "),s("code",[t._v("clone()")]),t._v(" 方法")]),t._v(" "),s("p",[t._v("要重载 "),s("code",[t._v("clone()")]),t._v(" 方法，你的类必须实现 "),s("code",[t._v("kotlin.Cloneable")]),t._v("：")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" Example "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Cloneable "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("override")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("clone")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Any "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("不要忘记 《Effective Java》的忠告，第 11 条："),s("strong",[t._v("明智地重载 "),s("code",[t._v("clone()")]),t._v(" 方法")])]),t._v(" "),s("h3",{attrs:{id:"_14-4-finalize-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14-4-finalize-方法"}},[t._v("#")]),t._v(" 14.4 "),s("code",[t._v("finalize()")]),t._v(" 方法")]),t._v(" "),s("p",[t._v("要重载 "),s("code",[t._v("finalize()")]),t._v(" 方法，你只需要声明它即可，而不需要使用 "),s("code",[t._v("override")]),t._v(" 。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" C "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("finalize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// finalization logic")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("注意，"),s("code",[t._v("finalize()")]),t._v(" 不能是 "),s("code",[t._v("private")]),t._v(" 的。")]),t._v(" "),s("h2",{attrs:{id:"_15-继承-java-类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_15-继承-java-类"}},[t._v("#")]),t._v(" 15. 继承 Java 类")]),t._v(" "),s("p",[t._v("只能继承一个基类；\n可以实现多个接口。")]),t._v(" "),s("h2",{attrs:{id:"_16-访问静态成员"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_16-访问静态成员"}},[t._v("#")]),t._v(" 16. 访问静态成员")]),t._v(" "),s("p",[t._v("Java 类的静态成员会被自动转换成这个类的伴生对象。")]),t._v(" "),s("p",[t._v("我们不能直接将这个伴生对象作为参数或者变量；\n但是我们依旧可以显式的调用它的静态成员。")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Character")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isLetter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h2",{attrs:{id:"_17-java-反射"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_17-java-反射"}},[t._v("#")]),t._v(" 17. Java 反射")]),t._v(" "),s("p",[t._v("Java 的反射机制可以应用于 Kotlin 上，反之亦然。\n刚才也提到，你可以使用 "),s("code",[t._v("instance.javaClass")]),t._v(" 或者 "),s("code",[t._v("ClassName::class.java")]),t._v(" 来使用 Java 的反射机制。")]),t._v(" "),s("p",[t._v("同样的，Kotlin 也支持使用 Java 方法来生成 getter、setter 和 backing field。\n"),s("code",[t._v("KProperty")]),t._v(" 指代 Java 的字段，"),s("code",[t._v("KFunction")]),t._v(" 指代 Java 方法，反之亦然。")]),t._v(" "),s("h2",{attrs:{id:"_18-sam-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_18-sam-方法"}},[t._v("#")]),t._v(" 18. SAM 方法")]),t._v(" "),s("p",[t._v("和 Java 8 一样，Kotlin 也支持 SAM 类型，这意味着 Kotlin 的直接函数定义（lambda 函数主体）可以被转换为一个只有单个方法的接口实现，只要函数接口能够对应的上的话，转换就能成功。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" runnable "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Runnable "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"This runs in a runnable"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("也可以应用于方法调用中：")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" executor "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ThreadPoolExecutor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Java signature: void execute(Runnable command)")]),t._v("\nexecutor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("execute")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"This runs in a thread pool"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("如果一个 Java 类有多个这种方法的重载，那么我们可以通过对 SAM 类型指定对应的转换器。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[t._v("executor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("execute")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Runnable "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"This runs in a thread pool"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("注意，SAM 只能应用于"),s("strong",[t._v("接口")]),t._v("，而不能应用于抽象类，即使这个类只有一个方法。")]),t._v(" "),s("p",[t._v("还有，这个特性只支持 Java 代码，\nKotlin 拥有相应的函数类型，所以将其转换为 Kotlin 接口的实现是非必须的，所以也没有实现这个特性。")]),t._v(" "),s("h2",{attrs:{id:"_19-使用-jni"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_19-使用-jni"}},[t._v("#")]),t._v(" 19. 使用 JNI")]),t._v(" "),s("p",[t._v("通过 "),s("code",[t._v("external")]),t._v(" 关键字来指明一个方法会调用 native 的 C 或者 C++ 代码。")]),t._v(" "),s("div",{staticClass:"language-kotlin line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("external")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Int"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Double\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h2",{attrs:{id:"_20-其他方面"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_20-其他方面"}},[t._v("#")]),t._v(" 20. 其他方面")]),t._v(" "),s("p",[t._v("在其他方面，Kotlin 和 Java 工作程序一致。")])])}),[],!1,null,null,null);a.default=e.exports}}]);