(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{949:function(e,v,_){"use strict";_.r(v);var t=_(1),i=Object(t.a)({},(function(){var e=this,v=e.$createElement,_=e._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("p",[e._v("Android App 的技术架构经过多年演进之后，形成了目前 Google 在 Jetpack 中推崇的 MVVM 架构。")]),e._v(" "),_("p",[e._v("但是 Google 官方推崇的 MVVM 是多界面的 MVVM，即多个界面在同一个功能模块中，UI、数据如何进行组合的问题；")]),e._v(" "),_("p",[e._v("而现在的 Android App 基本上是大而全的，特别是直播系的 App，有时候单单一个直播 Activity 就有十几二十个功能点，假如采用 Google 的 MVVM 解决方案，就会造成单个 Activity 过于臃肿的问题，这和 Google 多年来想解决的 Activity 膨胀问题是相互矛盾的。")]),e._v(" "),_("p",[e._v("因此，这里就来介绍一种我在之前的公司所使用的用于解决单个界面功能过于复杂的 MVVM 架构。")]),e._v(" "),_("h2",{attrs:{id:"_1-总体目标"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-总体目标"}},[e._v("#")]),e._v(" 1. 总体目标")]),e._v(" "),_("p",[e._v("对于这里的这个 MVVM 架构，它的总目标是清晰的，就是解决在直播系 App 中，单个界面所包含的功能点过于繁杂，导致代码结构不清晰的问题。")]),e._v(" "),_("p",[e._v("用比较高情商的话来说，就是 "),_("strong",[e._v("「分离关注点」")]),e._v("！")]),e._v(" "),_("h2",{attrs:{id:"_2-架构分层"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-架构分层"}},[e._v("#")]),e._v(" 2. 架构分层")]),e._v(" "),_("p",[e._v("对于 MVVM 架构来说，可以粗略的分为两层：")]),e._v(" "),_("ol",[_("li",[e._v("界面层")]),e._v(" "),_("li",[e._v("数据层")])]),e._v(" "),_("p",[e._v("然后 ViewModel 在这两层之中充当桥梁的作用。")]),e._v(" "),_("h2",{attrs:{id:"_3-界面层"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-界面层"}},[e._v("#")]),e._v(" 3. 界面层")]),e._v(" "),_("p",[e._v("本文所描述的架构需要重点解决的问题就在这一层中。")]),e._v(" "),_("p",[e._v("既然 Activity 的业务过于繁重，那么我们就需要对其进行拆分；")]),e._v(" "),_("p",[e._v("那么就需要使用一个新的概念来充当 Activity 各种功能点的业务容器，在这里我将其命名为 "),_("strong",[e._v("UseCase")]),e._v("。")]),e._v(" "),_("p",[e._v("在这一层中，主要涉及以下概念，下文会对它们和其职责进行详细介绍:")]),e._v(" "),_("ol",[_("li",[e._v("Activity")]),e._v(" "),_("li",[e._v("UseCase")]),e._v(" "),_("li",[e._v("ViewModel")])]),e._v(" "),_("h3",{attrs:{id:"_3-1-activity"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-activity"}},[e._v("#")]),e._v(" 3.1 Activity")]),e._v(" "),_("p",[e._v("将 Activity 划分为多个 UseCase，分为独立的功能块，达到关注点分离的目的。")]),e._v(" "),_("p",[e._v("对此，针对 Activity 有如下要求：")]),e._v(" "),_("ol",[_("li",[e._v("Activity xml 不包含实际控件，使用 "),_("code",[e._v("<include>")]),e._v(" 引入各个功能块视图")]),e._v(" "),_("li",[e._v("Activity 类包含各个 UseCase")]),e._v(" "),_("li",[e._v("Activity 包含例如"),_("code",[e._v("onBackPressed()")]),e._v("、"),_("code",[e._v("onKeyDown()")]),e._v("、"),_("code",[e._v("onActivityResult()")]),e._v(" 的相关处理")]),e._v(" "),_("li",[e._v("Activity 为其中的 UseCase 添加各种监听事件和注入生命周期。")])]),e._v(" "),_("h3",{attrs:{id:"_3-2-usecase"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-usecase"}},[e._v("#")]),e._v(" 3.2 UseCase")]),e._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[e._v("提示")]),e._v(" "),_("p",[e._v("UseCase 的名称受到 "),_("a",{attrs:{href:"https://github.com/KunMinX/Jetpack-MVVM-Best-Practice",target:"_blank",rel:"noopener noreferrer"}},[e._v("JetPack-MVVM-Best-Practice"),_("OutboundLink")],1),e._v(" 的启发")]),e._v(" "),_("p",[e._v("在此特地声明")])]),e._v(" "),_("p",[e._v("UseCase 在本架构中，实际上充当了一个功能点的角色，那么对于一个功能点来说，它应当具备以下的几个要件：")]),e._v(" "),_("ol",[_("li",[e._v("UseCase 应当具备界面")]),e._v(" "),_("li",[e._v("UseCase 应当具备操纵数据的 Handler")]),e._v(" "),_("li",[e._v("UseCase 应当具备 Activity 相关生命周期的处理能力")])]),e._v(" "),_("p",[e._v("针对这几个需求，可以设计 UseCase 的构造器的参数:")]),e._v(" "),_("ol",[_("li",[_("code",[e._v("ViewBinding")]),e._v("，是 UseCase 的界面操作的入口，通过它可以获取 UseCase 相关的界面元素；实际上就是"),_("code",[e._v("<include>")]),e._v("进来的各个 layout")]),e._v(" "),_("li",[_("code",[e._v("LifecycleOwner")]),e._v("，用于为 UseCase 提供生命周期，在这里由 Activity 承担")]),e._v(" "),_("li",[_("code",[e._v("ViewModelStoreProvider")]),e._v("，用于构建 UseCase 所需的 ViewModel，在这里也由 Activity 承担")])]),e._v(" "),_("p",[e._v("同时，为了让 UseCase 具备生命周期的监听特性，让 UseCase 实现 "),_("code",[e._v("LifecycleObserver")]),e._v("，通过它可以使用 "),_("code",[e._v("OnLifeCycleEvent")]),e._v(" 注解进行生命周期的相关相应和处理。")]),e._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[e._v("提示")]),e._v(" "),_("p",[e._v("这里利用了 "),_("a",{attrs:{href:"https://developer.android.com/topic/libraries/view-binding",target:"_blank",rel:"noopener noreferrer"}},[e._v("ViewBinding"),_("OutboundLink")],1),e._v(" 的一个特性")]),e._v(" "),_("p",[e._v("ViewBinding 针对 "),_("code",[e._v("<include>")]),e._v(" 标签会生成一个对应的 LayoutViewBinding 节点")]),e._v(" "),_("p",[e._v("使用这一特性，就可以对 UseCase 所使用到的界面元素进行隔离，防止其轻易的获取到与其不相关的 View 元素，从而能够减少复杂性和阅读代码的心智负担。")])]),e._v(" "),_("h3",{attrs:{id:"_3-3-架构关系和数据之间的通信"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-架构关系和数据之间的通信"}},[e._v("#")]),e._v(" 3.3 架构关系和数据之间的通信")]),e._v(" "),_("p",[e._v("到这里，我们介绍了界面层中两个比较关键的概念，由于我们想解决的是单界面，多个功能点的问题，因此它们之间的关系就比较重要了，这里来梳理一下：")]),e._v(" "),_("ol",[_("li",[e._v("Activity 和 UseCase 是一对多的包含关系")]),e._v(" "),_("li",[e._v("UseCase 不能包含 UseCase，它应当是扁平的，否则会使得架构进一步复杂")]),e._v(" "),_("li",[e._v("UseCase 可以持有多个 ViewModel，但仅限于兄弟之间和 Activity 的 ViewModel，不能持有其他 Activity 的 ViewModel")]),e._v(" "),_("li",[e._v("UseCase 之间以及 UseCase 和 Activity 之间使用 ViewModel 进行通信，UseCase 通过 LiveData 的 observe 接收通信内容")])]),e._v(" "),_("p",[e._v("整个通信框架类似电话线路：")]),e._v(" "),_("ol",[_("li",[e._v("总机可以拨分机")]),e._v(" "),_("li",[e._v("分机之间可以相互拨")]),e._v(" "),_("li",[e._v("打电话到外部(其他 Activity)必须通过总机")])]),e._v(" "),_("p",[e._v("同时，由于给各个 UseCase 传入的是同一个 "),_("code",[e._v("ViewModelStoreProvider")]),e._v("；")]),e._v(" "),_("p",[e._v("因此，同一个 Activity 下的 UseCase 可以共享 ViewModel，这样就能实现 UseCase 之间可以获取对方的操作接口，实现上文中的 "),_("strong",[e._v("分机相互拨电话")]),e._v(" 的功能。")]),e._v(" "),_("h2",{attrs:{id:"_4-数据层"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-数据层"}},[e._v("#")]),e._v(" 4. 数据层")]),e._v(" "),_("h3",{attrs:{id:"_4-1-生命周期"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-生命周期"}},[e._v("#")]),e._v(" 4.1 生命周期")]),e._v(" "),_("p",[e._v("从实践中来看，一般来说大而全的 App 都是分为各个模块的，因此对于一个功能模块的数据层来说，它也应该具备自己的生命周期。")]),e._v(" "),_("p",[e._v("这里参照 Activity 的生命周期，对数据层的生命周期设计如下:")]),e._v(" "),_("ol",[_("li",[e._v("onCreate\n"),_("blockquote",[_("p",[e._v("数据层工作的最早阶段，如第一次登陆")])])]),e._v(" "),_("li",[e._v("onStart\n"),_("blockquote",[_("p",[e._v("与数据层业务相关的页面被打开的时候，由 Activity 的 ViewModel 进行通知")])])]),e._v(" "),_("li",[e._v("onResume\n"),_("blockquote",[_("p",[e._v("与数据层相关的界面到达前台的时候")])])]),e._v(" "),_("li",[e._v("onPause\n"),_("blockquote",[_("p",[e._v("与数据层相关的界面进入后台的时候")])])]),e._v(" "),_("li",[e._v("onStop\n"),_("blockquote",[_("p",[e._v("与数据层相关的界面关闭的时候，由 Activity 的 ViewModel 的 "),_("code",[e._v("onCleared()")]),e._v(" 进行通知")])])]),e._v(" "),_("li",[e._v("onDestroy\n"),_("blockquote",[_("p",[e._v("数据层工作的最后阶段，如登出")])])])]),e._v(" "),_("p",[e._v("同时，还应该提供一个登陆的相关周期，处理掉线重连问题，这里设计为：")]),e._v(" "),_("ol",[_("li",[e._v("onLogin")]),e._v(" "),_("li",[e._v("onLogout")])]),e._v(" "),_("p",[e._v("针对数据层的生命周期，还有一个特殊的坑点，就是 "),_("strong",[e._v("界面的开启和关闭不是一定成对执行的")]),e._v("；")]),e._v(" "),_("p",[e._v("如果界面层存在一些卡主线程的东西，就会导致前一个 Activity 实例没有 onStop 的时候，后一个 Activity 实例就执行了 onStart；")]),e._v(" "),_("p",[e._v("因此对数据层的 onStart 和 onStop 的调用中要有 "),_("code",[e._v("runGenreation")]),e._v(" 的概念；")]),e._v(" "),_("p",[e._v("在 onStart 时，生成新的 "),_("code",[e._v("runGenreation")]),e._v(" 给界面层；")]),e._v(" "),_("p",[e._v("在 onStop 时，对比外界传入的 "),_("code",[e._v("runGenreation")]),e._v("，和内部的是否一致，如果不一致则不执行具体的业务流程。")]),e._v(" "),_("h3",{attrs:{id:"_4-2-module-manager"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-module-manager"}},[e._v("#")]),e._v(" 4.2 Module Manager")]),e._v(" "),_("p",[e._v("整体功能块的数据层可以采用一个大 Manager，这里称为 Module Manager。")]),e._v(" "),_("p",[e._v("它可以用单例模式或者使用依赖注入框架进行注入。")]),e._v(" "),_("p",[e._v("主要功能：")]),e._v(" "),_("ol",[_("li",[e._v("处理数据层的生命周期")]),e._v(" "),_("li",[e._v("为各个功能点的 Manager(Function Manager)，提供引用点和 "),_("code",[e._v("CoroutineScope")])])]),e._v(" "),_("h3",{attrs:{id:"_4-2-function-manager"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-function-manager"}},[e._v("#")]),e._v(" 4.2 Function Manager")]),e._v(" "),_("p",[e._v("与各个功能点直接相关的就是 Function Manager，它继承数据层生命周期相关的接口，从而实现在数据层相关的生命周期的数据处理。")]),e._v(" "),_("p",[e._v("主要功能：")]),e._v(" "),_("ol",[_("li",[e._v("实现各个模块的功能点")]),e._v(" "),_("li",[e._v("持有具体数据以及通知的渠道(Flow 或者 LiveData)")]),e._v(" "),_("li",[e._v("处理各种网络回调工作")]),e._v(" "),_("li",[e._v("处理各种生命周期的回调工作")])]),e._v(" "),_("h2",{attrs:{id:"_5-viewmodel-的职责"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-viewmodel-的职责"}},[e._v("#")]),e._v(" 5. ViewModel 的职责")]),e._v(" "),_("p",[e._v("到这一阶段，我们的 MVVM 框架就大体设计完成了，在这里回顾一下 ViewModel 的相关职责：")]),e._v(" "),_("ol",[_("li",[e._v("接收各个 Function Manager 的数据输出渠道，并转成 LiveData")]),e._v(" "),_("li",[e._v("Activity 的 ViewModel 还负责 Manager 的 onStart 和 onStop 的工作，需要记录对应的 runGenreation")])]),e._v(" "),_("h2",{attrs:{id:"_6-架构图"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_6-架构图"}},[e._v("#")]),e._v(" 6. 架构图")]),e._v(" "),_("Mermaid",{attrs:{id:"mermaid-64a55a5a","data-code":"graph%20TB%0A%20%20subgraph%20%E7%95%8C%E9%9D%A2%E5%B1%82%20Activity%0A%20%20%20%20UseCase1%20--%3E%20ViewModel1%0A%20%20%20%20UseCase1%20--%3E%20ViewModel2%0A%20%20%20%20UseCase2%20--%3E%20ViewModel1%0A%20%20%20%20UseCase2%20--%3E%20ViewModel2%0A%20%20end%0A%20%20subgraph%20%E6%95%B0%E6%8D%AE%E5%B1%82%20Module%20Manager%0A%20%20%20%20FunctionManager1%0A%20%20%20%20FunctionManager2%0A%20%20end%0A%20%20ViewModel1%20--%3E%20FunctionManager1%0A%20%20ViewModel2%20--%3E%20FunctionManager2%0A"}})],1)}),[],!1,null,null,null);v.default=i.exports}}]);