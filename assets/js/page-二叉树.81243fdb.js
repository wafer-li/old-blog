(window.webpackJsonp=window.webpackJsonp||[]).push([[157],{840:function(t,a,s){"use strict";s.r(a);var n=s(1),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"_1-二叉树的定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-二叉树的定义"}},[t._v("#")]),t._v(" 1. 二叉树的定义")]),t._v(" "),s("p",[t._v("二叉树是一种每个节点"),s("strong",[t._v("最多")]),t._v("只能有两个子节点的树")]),t._v(" "),s("blockquote",[s("p",[t._v("树是一种没有环的连通图")])]),t._v(" "),s("p",[t._v("在最顶层的节点叫做"),s("strong",[t._v("根节点")]),t._v("\n没有子节点的节点叫叶节点，有子节点的节点叫做"),s("strong",[t._v("内部节点")])]),t._v(" "),s("h2",{attrs:{id:"_2-二叉树的类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-二叉树的类型"}},[t._v("#")]),t._v(" 2. 二叉树的类型")]),t._v(" "),s("h3",{attrs:{id:"_2-1-满二叉树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-满二叉树"}},[t._v("#")]),t._v(" 2.1 满二叉树")]),t._v(" "),s("p",[t._v("国内定义：除了最后一层没有子节点以外，其他每一层的节点都有两个子节点")]),t._v(" "),s("p",[t._v("节点数和深度满足如下关系：")]),t._v(" "),s("p",{staticClass:"katex-block"},[s("span",{staticClass:"katex-display"},[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"}},[s("semantics",[s("mrow",[s("msub",[s("mi",[t._v("N")]),s("mrow",[s("mi",[t._v("l")]),s("mi",[t._v("e")]),s("mi",[t._v("a")]),s("mi",[t._v("f")])],1)],1),s("mo",[t._v("=")]),s("msup",[s("mn",[t._v("2")]),s("mi",[t._v("h")])],1),s("mo",[t._v("−")]),s("mn",[t._v("1")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("N_{leaf} = 2^{h} - 1 \n")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.969438em","vertical-align":"-0.286108em"}}),s("span",{staticClass:"mord"},[s("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.10903em"}},[t._v("N")]),s("span",{staticClass:"msupsub"},[s("span",{staticClass:"vlist-t vlist-t2"},[s("span",{staticClass:"vlist-r"},[s("span",{staticClass:"vlist",staticStyle:{height:"0.3361079999999999em"}},[s("span",{staticStyle:{top:"-2.5500000000000003em","margin-left":"-0.10903em","margin-right":"0.05em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),s("span",{staticClass:"sizing reset-size6 size3 mtight"},[s("span",{staticClass:"mord mtight"},[s("span",{staticClass:"mord mathnormal mtight",staticStyle:{"margin-right":"0.01968em"}},[t._v("l")]),s("span",{staticClass:"mord mathnormal mtight"},[t._v("e")]),s("span",{staticClass:"mord mathnormal mtight"},[t._v("a")]),s("span",{staticClass:"mord mathnormal mtight",staticStyle:{"margin-right":"0.10764em"}},[t._v("f")])])])])]),s("span",{staticClass:"vlist-s"},[t._v("​")])]),s("span",{staticClass:"vlist-r"},[s("span",{staticClass:"vlist",staticStyle:{height:"0.286108em"}},[s("span")])])])])]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),s("span",{staticClass:"mrel"},[t._v("=")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}})]),s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.9824379999999999em","vertical-align":"-0.08333em"}}),s("span",{staticClass:"mord"},[s("span",{staticClass:"mord"},[t._v("2")]),s("span",{staticClass:"msupsub"},[s("span",{staticClass:"vlist-t"},[s("span",{staticClass:"vlist-r"},[s("span",{staticClass:"vlist",staticStyle:{height:"0.8991079999999999em"}},[s("span",{staticStyle:{top:"-3.113em","margin-right":"0.05em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),s("span",{staticClass:"sizing reset-size6 size3 mtight"},[s("span",{staticClass:"mord mtight"},[s("span",{staticClass:"mord mathnormal mtight"},[t._v("h")])])])])])])])])]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),s("span",{staticClass:"mbin"},[t._v("−")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),s("span",{staticClass:"mord"},[t._v("1")])])])])])]),t._v(" "),s("p",[t._v("国外定义 : 只有叶节点和度为 2 的节点的树就叫满二叉树")]),t._v(" "),s("p",[t._v("（在国内一般用国内定义（笑））")]),t._v(" "),s("h3",{attrs:{id:"_2-2-完全二叉树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-完全二叉树"}},[t._v("#")]),t._v(" 2.2 完全二叉树")]),t._v(" "),s("p",[t._v("至多只有最下面的两层上的节点的度数可以小于 2，并且最下层的节点都在最左边的若干位置上。")]),t._v(" "),s("p",[t._v("满二叉树：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://web.cecs.pdx.edu/~sheard/course/Cs163/Graphics/FullBinary.jpg",alt:"Full Binary Tree"}})]),t._v(" "),s("p",[t._v("完全二叉树:")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://web.cecs.pdx.edu/~sheard/course/Cs163/Graphics/CompleteBinary.jpg",alt:"Complete Binary Tree"}})]),t._v(" "),s("h2",{attrs:{id:"_3-实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-实现"}},[t._v("#")]),t._v(" 3. 实现")]),t._v(" "),s("h3",{attrs:{id:"_3-1-数组实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-数组实现"}},[t._v("#")]),t._v(" 3.1 数组实现")]),t._v(" "),s("p",[t._v("这种实现方法就是按照完全二叉树的形式将节点置于相应的数组单元之中。\n所以，如果一个节点的索引是 "),s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[t._v("k")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("k")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.69444em","vertical-align":"0em"}}),s("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.03148em"}},[t._v("k")])])])]),t._v("，那么，\n它的父亲的索引是 "),s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mo",{attrs:{stretchy:"false"}},[t._v("⌊")]),s("mi",[t._v("k")]),s("mo",{attrs:{stretchy:"false"}},[t._v("⌋")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("\\lfloor k \\rfloor")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),s("span",{staticClass:"mopen"},[t._v("⌊")]),s("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.03148em"}},[t._v("k")]),s("span",{staticClass:"mclose"},[t._v("⌋")])])])]),t._v("；\n它的左子结点的索引是 "),s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mn",[t._v("2")]),s("mi",[t._v("k")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("2k")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.69444em","vertical-align":"0em"}}),s("span",{staticClass:"mord"},[t._v("2")]),s("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.03148em"}},[t._v("k")])])])]),t._v("，右子结点的索引是 "),s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mn",[t._v("2")]),s("mi",[t._v("k")]),s("mo",[t._v("+")]),s("mn",[t._v("1")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("2k + 1")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.77777em","vertical-align":"-0.08333em"}}),s("span",{staticClass:"mord"},[t._v("2")]),s("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.03148em"}},[t._v("k")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),s("span",{staticClass:"mbin"},[t._v("+")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),s("span",{staticClass:"mord"},[t._v("1")])])])])]),t._v(" "),s("p",[t._v("这种实现方式最适合于"),s("strong",[t._v("完全二叉树")]),t._v("，如果一个不完全的二叉树使用这种方法实现，会浪费许多的空间。")]),t._v(" "),s("h3",{attrs:{id:"_3-2-链表实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-链表实现"}},[t._v("#")]),t._v(" 3.2 链表实现")]),t._v(" "),s("p",[t._v("相对于数组来说，使用链表实现能节省更多的空间。它的节点由三部分组成：\n数据域，左子结点指针，和右子结点指针")]),t._v(" "),s("p",[t._v("Node:")]),t._v(" "),s("table",{staticStyle:{width:"20em"}},[s("tr",[s("td",{staticStyle:{"text-align":"center","vertical-align":"middle"}},[t._v("leftChild")]),t._v(" "),s("td",{staticStyle:{"text-align":"center","vertical-align":"middle"}},[t._v("data")]),t._v(" "),s("td",{staticStyle:{"text-align":"center","vertical-align":"middle"}},[t._v("rightChild")])])]),t._v(" "),s("h2",{attrs:{id:"_4-遍历算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-遍历算法"}},[t._v("#")]),t._v(" 4. 遍历算法")]),t._v(" "),s("p",[t._v("一般来说，有三种方法可以遍历一个二叉树，它们是：")]),t._v(" "),s("ol",[s("li",[t._v("先序遍历（"),s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[t._v("D")]),s("mi",[t._v("L")]),s("mi",[t._v("R")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("DLR")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),s("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.02778em"}},[t._v("D")]),s("span",{staticClass:"mord mathnormal"},[t._v("L")]),s("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.00773em"}},[t._v("R")])])])]),t._v("）")]),t._v(" "),s("li",[t._v("中序遍历（"),s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[t._v("L")]),s("mi",[t._v("D")]),s("mi",[t._v("R")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("LDR")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),s("span",{staticClass:"mord mathnormal"},[t._v("L")]),s("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.02778em"}},[t._v("D")]),s("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.00773em"}},[t._v("R")])])])]),t._v("）")]),t._v(" "),s("li",[t._v("后序遍历（"),s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[t._v("L")]),s("mi",[t._v("R")]),s("mi",[t._v("D")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("LRD")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),s("span",{staticClass:"mord mathnormal"},[t._v("L")]),s("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.00773em"}},[t._v("R")]),s("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.02778em"}},[t._v("D")])])])]),t._v("）")])]),t._v(" "),s("blockquote",[s("p",[t._v("它们都属于"),s("strong",[t._v("深度优先遍历")]),t._v("方法\n注意，只有三种方法的前提是"),s("strong",[t._v("左子结点比右子结点大")]),t._v("，如果抛弃这个前提，则有至多六种方法")])]),t._v(" "),s("h3",{attrs:{id:"_4-1-深度优先遍历"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-深度优先遍历"}},[t._v("#")]),t._v(" 4.1 深度优先遍历")]),t._v(" "),s("blockquote",[s("p",[t._v("所谓的"),s("strong",[t._v("深度优先")]),t._v("，指的是，"),s("strong",[t._v("优先搜索子孙节点，而不是优先搜索兄弟节点")])])]),t._v(" "),s("h4",{attrs:{id:"_4-1-1-先序遍历"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-1-先序遍历"}},[t._v("#")]),t._v(" 4.1.1  先序遍历")]),t._v(" "),s("ol",[s("li",[t._v("访问根节点")]),t._v(" "),s("li",[t._v("递归访问左子节点")]),t._v(" "),s("li",[t._v("递归访问右子结点")])]),t._v(" "),s("h4",{attrs:{id:"_4-1-2-中序遍历"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-2-中序遍历"}},[t._v("#")]),t._v(" 4.1.2 中序遍历")]),t._v(" "),s("ol",[s("li",[t._v("递归访问左子结点")]),t._v(" "),s("li",[t._v("访问根节点")]),t._v(" "),s("li",[t._v("递归访问右子结点")])]),t._v(" "),s("h4",{attrs:{id:"_4-1-3-后序遍历"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-3-后序遍历"}},[t._v("#")]),t._v(" 4.1.3 后序遍历")]),t._v(" "),s("ol",[s("li",[t._v("递归访问左子结点")]),t._v(" "),s("li",[t._v("递归访问右子结点")]),t._v(" "),s("li",[t._v("访问根节点")])]),t._v(" "),s("h3",{attrs:{id:"_4-2-广度优先"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-广度优先"}},[t._v("#")]),t._v(" 4.2 广度优先")]),t._v(" "),s("p",[t._v("所谓的"),s("strong",[t._v("广度优先")]),t._v("，就是"),s("strong",[t._v("优先访问兄弟节点，而不是子孙节点")]),t._v("\n直到当前层访问完成前，都不进入下一层进行遍历")]),t._v(" "),s("blockquote",[s("p",[t._v("一般使用队列来实现这种访问策略")])]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Visitable")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Item")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("onVisit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Item")]),t._v(" item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BreadthFirst")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Visitable")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" visiter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("breadFirstTraversal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),t._v(" root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Queue")]),t._v(" q "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Queue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        q"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("enQueue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("q"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isEmpty")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),t._v(" node "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" q"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("deQueue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            visiter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("onVisit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lChild "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                q"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("enQueue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lChild"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rChild "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                q"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("enQueue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rChild"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br")])]),s("h2",{attrs:{id:"_5-线索二叉树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-线索二叉树"}},[t._v("#")]),t._v(" 5. 线索二叉树")]),t._v(" "),s("p",[t._v("线索二叉树指的是，当我们使用链表来实现一个二叉树时，\n使用一些节点的空的指针域来储存相应遍历策略的前一个或者后一个节点。")]),t._v(" "),s("p",[t._v("从而起到方便遍历和提高空间利用率的作用。")]),t._v(" "),s("p",[t._v("需要注意的是，一个线索二叉树是和它采用的"),s("strong",[t._v("访问策略")]),t._v("相关的，同一个二叉树采用不同的访问策略，其对应的线索二叉树也会不同。")]),t._v(" "),s("p",[t._v("具体来说，对于两个子节点都为空的情况下，二叉树的左子树指向其遍历的前驱，右子树指向其遍历的后继。")]),t._v(" "),s("h3",{attrs:{id:"_5-0-调整数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-0-调整数据结构"}},[t._v("#")]),t._v(" 5.0 调整数据结构")]),t._v(" "),s("p",[t._v("为了建立一个线索二叉树，我们需要对节点的数据域进行一些调整。")]),t._v(" "),s("blockquote",[s("p",[t._v("增加了两个指示是否是子节点的 flag")])]),t._v(" "),s("p",[t._v("The Threaded Binary Tree Node:\n"),s("table",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("b",[t._v("boolean")]),t._v(" leftFlag")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("leftChild")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Data")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("rightChild")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("b",[t._v("boolean")]),t._v(" rightFlag")])])])]),t._v(" "),s("h3",{attrs:{id:"_5-1-二叉树的中序线索化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-二叉树的中序线索化"}},[t._v("#")]),t._v(" 5.1 二叉树的中序线索化")]),t._v(" "),s("p",[t._v("二叉树的线索化，实际上就是在遍历过程中，修改空链接的过程。")]),t._v(" "),s("p",[t._v("所以二叉树的线索化是和其遍历策略相关的。")]),t._v(" "),s("p",[t._v("对于中序遍历而言，就是在中序遍历过程中，将它的空链接给修改的过程。")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadedBinaryTree")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Data")]),t._v(" data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadedBinaryTree")]),t._v(" leftChild"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" leftFlag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadedBinaryTree")]),t._v(" rightChild"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" rightFlag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用全局变量存储前驱")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadedBinaryTree")]),t._v(" pre"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("threadingBinaryTree")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadedBinaryTree")]),t._v(" root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("threadingBinaryTree")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("leftChild"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("leftChild "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("leftFlag "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("leftChild "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pre"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pre"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rightChild "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        pre"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rightFlag "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        pre"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rightChild "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向后继，即当前节点")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    pre "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("threadingBinaryTree")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rightChild"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br")])]),s("p",[t._v("上面对于右子节点处理的时候要用 "),s("code",[t._v("pre")]),t._v(" 的原因是：右子节点指向 "),s("strong",[t._v("后继")]),t._v("，而后继是需要访问到下一个节点才能获取得到的；")]),t._v(" "),s("p",[t._v("所以对右子节点的处理才会使用 "),s("code",[t._v("pre")]),t._v("，是因为当前节点就是 "),s("code",[t._v("pre")]),t._v(" 的后继。")]),t._v(" "),s("h2",{attrs:{id:"_6-二叉树和森林"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-二叉树和森林"}},[t._v("#")]),t._v(" 6. 二叉树和森林")]),t._v(" "),s("h3",{attrs:{id:"_6-1-森林的定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-森林的定义"}},[t._v("#")]),t._v(" 6.1 森林的定义")]),t._v(" "),s("p",[t._v("森林是由多个独立的二叉树组成的数据结构")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://helloacm.com/wp-images/acm/2012/data-structure/disjoint1.jpg",alt:"Forest"}})]),t._v(" "),s("blockquote",[s("p",[t._v("我们可以通过连接他们的根节点来构造一棵大型的树")])]),t._v(" "),s("h3",{attrs:{id:"_6-2-森林的表示法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-森林的表示法"}},[t._v("#")]),t._v(" 6.2 森林的表示法")]),t._v(" "),s("p",[t._v("为了能在物理上表示一个森林，我们首先会将其变成一棵大型的树，仅仅将它们的根节点连接起来即可。")]),t._v(" "),s("h4",{attrs:{id:"_6-2-1-孩子兄弟表示法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-1-孩子兄弟表示法"}},[t._v("#")]),t._v(" 6.2.1 孩子兄弟表示法")]),t._v(" "),s("p",[t._v("首先这个适用于链表实现的树。\n森林的节点由三部分组成：")]),t._v(" "),s("ol",[s("li",[t._v("数据域")]),t._v(" "),s("li",[t._v("左子结点指针")]),t._v(" "),s("li",[t._v("右边的兄弟节点指针")])]),t._v(" "),s("p",[t._v("Node:\n"),s("table",{staticStyle:{width:"20em"}},[s("tr",[s("td",{staticStyle:{"text-align":"center","vertical-align":"middle"}},[t._v("leftChild")]),t._v(" "),s("td",{staticStyle:{"text-align":"center","vertical-align":"middle"}},[t._v("Data")]),t._v(" "),s("td",{staticStyle:{"text-align":"center","vertical-align":"middle"}},[t._v("brother")])])])]),t._v(" "),s("p",[t._v("既然，这个节点含有的域和一个二叉树的节点含有的域的数目和类型都是相同的。")]),t._v(" "),s("p",[s("strong",[t._v("那么我们就可以在物理结构上将其认为是一个二叉树；")])]),t._v(" "),s("p",[t._v("这为我们提供了很大的便利性，由于森林可以转换为树，而任何的树都可以通过"),s("strong",[t._v("孩子兄弟表示法")]),t._v("来转换为二叉树。")]),t._v(" "),s("p",[t._v("所以我们可以使用二叉树的遍历方法来对任何的树形结构进行遍历。")]),t._v(" "),s("h2",{attrs:{id:"_7-哈夫曼树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-哈夫曼树"}},[t._v("#")]),t._v(" 7. 哈夫曼树")]),t._v(" "),s("p",[t._v("哈夫曼树，也被叫做"),s("strong",[t._v("最优二叉树")]),t._v("，是一种最小边权的加权二叉树")]),t._v(" "),s("h3",{attrs:{id:"_7-1-特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-特点"}},[t._v("#")]),t._v(" 7.1 特点")]),t._v(" "),s("ol",[s("li",[t._v("相同权重的哈夫曼树不是唯一的")]),t._v(" "),s("li",[t._v("哈夫曼树的子树可以随意调换，这个调换并不会影响到它的长度")]),t._v(" "),s("li",[t._v("具有权重的节点都是叶节点，其余节点的权重都是通过叶节点的权重相加得到的")]),t._v(" "),s("li",[t._v("拥有最大权重的节点，最靠近根节点")]),t._v(" "),s("li",[t._v("哈夫曼树没有度为 1 的节点")]),t._v(" "),s("li",[t._v("一个拥有 "),s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[t._v("N")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("N")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),s("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.10903em"}},[t._v("N")])])])]),t._v(" 个叶节点的哈夫曼树，拥有 "),s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mn",[t._v("2")]),s("mi",[t._v("N")]),s("mo",[t._v("−")]),s("mn",[t._v("1")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("2N - 1")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.76666em","vertical-align":"-0.08333em"}}),s("span",{staticClass:"mord"},[t._v("2")]),s("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.10903em"}},[t._v("N")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),s("span",{staticClass:"mbin"},[t._v("−")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),s("span",{staticClass:"mord"},[t._v("1")])])])]),t._v(" 个节点")])]),t._v(" "),s("h3",{attrs:{id:"_7-2-构造"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-构造"}},[t._v("#")]),t._v(" 7.2 构造")]),t._v(" "),s("ol",[s("li",[t._v("将给出的加权节点置于一个集合中")]),t._v(" "),s("li",[t._v("从中选出 2 个最小权重的节点，将他们的权重相加，得到一个新的节点作为它们的根节点。")]),t._v(" "),s("li",[t._v("将这两个节点从集合中去除，同时将那个根节点加入到集合中")]),t._v(" "),s("li",[t._v("重复步骤 2 和 3，直到这个集合为空")])]),t._v(" "),s("p",[t._v("例如，假如我们有 5 个加权的节点")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://ws3.sinaimg.cn/large/006tNc79ly1fnxgv39lwhj306901bgle.jpg",alt:"Huffman Nodes"}})]),t._v(" "),s("p",[t._v("根据上面的步骤，我们可以得到如下的树：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://ws4.sinaimg.cn/large/006tNc79ly1fnxgvuox7kj307706ywed.jpg",alt:""}})]),t._v(" "),s("p",[t._v("或者如下的树：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://ws3.sinaimg.cn/large/006tNc79ly1fnxgw9hmylj307x073wed.jpg",alt:""}})]),t._v(" "),s("p",[t._v("注意，具有相同权重的哈夫曼树不是唯一的。")]),t._v(" "),s("h3",{attrs:{id:"_7-3-应用-哈弗曼编码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-应用-哈弗曼编码"}},[t._v("#")]),t._v(" 7.3 应用：哈弗曼编码")]),t._v(" "),s("p",[t._v("哈夫曼编码是基于字词的使用频率对其赋予权重，使用哈弗曼树来减少编码大小的一种技术。")]),t._v(" "),s("p",[t._v("由于哈夫曼树的权重最大（频率最为频繁）的节点最靠近根节点，所以它能显著减少编码所需要的体积")]),t._v(" "),s("p",[t._v("综上所述，我们定义左斜的边为 "),s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mn",[t._v("0")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("0")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),s("span",{staticClass:"mord"},[t._v("0")])])])]),t._v("，右斜的边为 "),s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mn",[t._v("1")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("1")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),s("span",{staticClass:"mord"},[t._v("1")])])])]),t._v("，\n那么，上面的哈夫曼树对应的编码为：")]),t._v(" "),s("ul",[s("li",[t._v("5 = '11'")]),t._v(" "),s("li",[t._v("4 = '10'")]),t._v(" "),s("li",[t._v("3 = '00'")]),t._v(" "),s("li",[t._v("2 = '011'")]),t._v(" "),s("li",[t._v("1 = '010'")])]),t._v(" "),s("blockquote",[s("p",[t._v("注意，这样的定义是为了不出现识别冲突")])])])}),[],!1,null,null,null);a.default=e.exports}}]);