(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{779:function(a,s,t){"use strict";t.r(s);var e=t(1),n=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"_1-概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述"}},[a._v("#")]),a._v(" 1. 概述")]),a._v(" "),t("table",[t("thead",[t("tr",[t("th",[a._v("C++")]),a._v(" "),t("th",[a._v("Java")])])]),a._v(" "),t("tbody",[t("tr",[t("td",[a._v("基类")]),a._v(" "),t("td",[a._v("父类、超类")])]),a._v(" "),t("tr",[t("td",[a._v("派生类")]),a._v(" "),t("td",[a._v("子类")])])])]),a._v(" "),t("h2",{attrs:{id:"_2-java-只允许一重继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-java-只允许一重继承"}},[a._v("#")]),a._v(" 2. Java 只允许一重继承")]),a._v(" "),t("p",[a._v("※可以有多个继承链，但是不能有多个基类")]),a._v(" "),t("h2",{attrs:{id:"_3-使用-extends-来表明继承关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-使用-extends-来表明继承关系"}},[a._v("#")]),a._v(" 3. 使用 "),t("code",[a._v("extends")]),a._v(" 来表明继承关系")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Derived")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("extends")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Base")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("h2",{attrs:{id:"_4-使用-super-来调用超类方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-使用-super-来调用超类方法"}},[a._v("#")]),a._v(" 4. 使用 "),t("code",[a._v("super")]),a._v(" 来调用超类方法")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Derived")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("extends")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Base")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Derived")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("super")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("h2",{attrs:{id:"_5-构造器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-构造器"}},[a._v("#")]),a._v(" 5. 构造器")]),a._v(" "),t("p",[a._v("可以使用 "),t("code",[a._v("super")]),a._v(" 实现对超类构造器的调用")]),a._v(" "),t("p",[a._v("如果没有显式调用超类构造器，将自动调用超类构造器的隐式版本;")]),a._v(" "),t("p",[a._v("如果没有隐式版本（即超类构造器只定义了显示版本）则报错")]),a._v(" "),t("h2",{attrs:{id:"_6-多态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-多态"}},[a._v("#")]),a._v(" 6. 多态")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("可以将超类引用指向子类对象，但不能反过来")]),a._v(" "),t("blockquote",[t("p",[a._v("基类指针可以指向派生类对象")])])]),a._v(" "),t("li",[t("p",[a._v("数组可以进行相反的赋值，所以必须注意元素类型的监督")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("public")]),a._v(" 方法默认为动态绑定，无需添加 "),t("code",[a._v("vitual")]),a._v(" 或者类似的关键字")]),a._v(" "),t("blockquote",[t("p",[a._v("private、static、final方法为静态绑定")])])]),a._v(" "),t("li",[t("p",[a._v("子类方法覆盖超类方法时，其访问权限不能严格于超类方法")]),a._v(" "),t("blockquote",[t("p",[a._v("※注意不要遗漏public关键字，否则将会被解释成为更严格的访问权限")])])]),a._v(" "),t("li",[t("p",[a._v("覆盖允许返回类型协变（超类可以协变为子类）")])])]),a._v(" "),t("h2",{attrs:{id:"_7-final-阻止继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-final-阻止继承"}},[a._v("#")]),a._v(" 7. "),t("code",[a._v("final")]),a._v(" 阻止继承")]),a._v(" "),t("ol",[t("li",[t("p",[t("code",[a._v("final")]),a._v(" 类")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Excutive")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("extends")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Manager")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("blockquote",[t("p",[a._v("这种类型被称为final类，不允许定义子类，即无法继承")])])]),a._v(" "),t("li",[t("p",[t("code",[a._v("final")]),a._v(" 方法")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("blockquote",[t("p",[a._v("这种方法称为final方法，这种方法不允许子类覆盖它，确保其不会在子类中改变语义")])])])]),a._v(" "),t("p",[t("strong",[a._v("注意 "),t("code",[a._v("final")]),a._v(" 的位置不同")])]),a._v(" "),t("p",[a._v("值得提到的是， "),t("em",[a._v("Effective Java")]),a._v(" 中明确指示，如果不事先设计好一个良好的继承结构模型，那么就 "),t("strong",[a._v("禁止继承")])]),a._v(" "),t("h2",{attrs:{id:"_8-强制类型转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-强制类型转换"}},[a._v("#")]),a._v(" 8. 强制类型转换")]),a._v(" "),t("p",[a._v("在继承链上不允许进行由上到下的转换（超类不能转换成子类）")]),a._v(" "),t("p",[a._v("使用 "),t("code",[a._v("instanceof")]),a._v(" 进行转换检查，返回布尔值，表示是否能够成功转换")]),a._v(" "),t("p",[a._v("语法：(要转换的对象) "),t("code",[a._v("instanceof")]),a._v(" (转换目标)")]),a._v(" "),t("p",[a._v("强制转换语法类似 C 语言，执行过程类似 "),t("code",[a._v("dynamic_cast")]),a._v(" 操作，不成功则抛出一个异常，而不是生成 "),t("code",[a._v("null")]),a._v(" 对象")]),a._v(" "),t("h2",{attrs:{id:"_9-抽象类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-抽象类"}},[a._v("#")]),a._v(" 9. 抽象类")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("abstract")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Person")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 抽象类")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("abstract")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getDescription")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 抽象方法")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])]),t("blockquote",[t("p",[a._v("抽象类不一定要有抽象方法，但是包含抽象方法的类必须声明为抽象类\n抽象类可以包含具体数据和具体方法\n抽象类不能被实例化（即不能创建对象）")])]),a._v(" "),t("h2",{attrs:{id:"_10-谨慎的使用protected"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-谨慎的使用protected"}},[a._v("#")]),a._v(" 10. 谨慎的使用protected")]),a._v(" "),t("p",[t("code",[a._v("protected")]),a._v(" 的可见性是超类和子类之间")]),a._v(" "),t("h2",{attrs:{id:"_11-object类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-object类"}},[a._v("#")]),a._v(" 11. Object类")]),a._v(" "),t("h3",{attrs:{id:"_11-1-equals-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-1-equals-方法"}},[a._v("#")]),a._v(" 11.1 "),t("code",[a._v("equals()")]),a._v("方法")]),a._v(" "),t("ul",[t("li",[a._v("特性\n"),t("ul",[t("li",[a._v("自反："),t("code",[a._v("x.equals(x) return true")])]),a._v(" "),t("li",[a._v("对称："),t("code",[a._v("y.equals(x) = x.equals(y)")])]),a._v(" "),t("li",[a._v("传递："),t("code",[a._v("if (x.equals(y) && y.equals(z)) then x.equals(z);")])]),a._v(" "),t("li",[a._v("一致："),t("code",[a._v("The return value of x.equals(y) should be stable;")])])])])]),a._v(" "),t("p",[a._v("对于非空引用 "),t("code",[a._v("x")]),a._v(", "),t("code",[a._v("x.equals(null) return false;")])]),a._v(" "),t("p",[t("code",[a._v("Object")]),a._v(" 类 "),t("code",[a._v("equals")]),a._v("："),t("strong",[a._v("判断两个对象是否具有相同的引用")])]),a._v(" "),t("h3",{attrs:{id:"_11-2-equals-方法的设计理念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-2-equals-方法的设计理念"}},[a._v("#")]),a._v(" 11.2 "),t("code",[a._v("equals()")]),a._v(" 方法的设计理念")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("接受一个Object类参数（为了覆盖Object类的equals方法）")])]),a._v(" "),t("li",[t("p",[a._v("检测是否为自身\n"),t("code",[a._v("this == otherObject")])])]),a._v(" "),t("li",[t("p",[a._v("检测传参是否为null")])]),a._v(" "),t("li",[t("p",[a._v("比较是否为同一个类")]),a._v(" "),t("blockquote",[t("p",[a._v("如果子类有特有的equals概念，则使用getClass方法\n"),t("code",[a._v("if(getClass() != otherObject.getClass()) return false;")])])]),a._v(" "),t("blockquote",[t("p",[a._v("如果子类没有特有的equals概念，则使用instanceof方法\n"),t("code",[a._v("if(!(otherObject instanceof ClassName)) return false;")])])])]),a._v(" "),t("li",[t("p",[a._v("转换为相应的类变量")]),a._v(" "),t("blockquote",[t("p",[a._v("由于接受的是一个Object变量，所以必须进行强制类型转换才能进行具体实例域的相等判定\n此时已经判别类型相同了，可以进行转换")])])]),a._v(" "),t("li",[t("p",[a._v("判别实例域")]),a._v(" "),t("blockquote",[t("p",[a._v("如果在子类中重新定义equals，则先调用超类的equals")])])])]),a._v(" "),t("h3",{attrs:{id:"_11-2-hashcode-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-2-hashcode-方法"}},[a._v("#")]),a._v(" 11.2 "),t("code",[a._v("hashCode()")]),a._v(" 方法")]),a._v(" "),t("p",[a._v("如果重新定义了 "),t("code",[a._v("equals()")]),a._v(" 方法，则必须重新定义 "),t("code",[a._v("hashCode()")]),a._v(" 方法")]),a._v(" "),t("p",[t("code",[a._v("equals()")]),a._v(" 与 "),t("code",[a._v("hashCode()")]),a._v(" 的定义必须一致；")]),a._v(" "),t("p",[a._v("如果 "),t("code",[a._v("x.equals(y) return true")]),a._v(", 则，"),t("code",[a._v("x.hashCode()")]),a._v(" 就必须与 "),t("code",[a._v("y.hashCode()")]),a._v(" 返回一样的值")]),a._v(" "),t("h3",{attrs:{id:"_11-3-tostring-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-3-tostring-方法"}},[a._v("#")]),a._v(" 11.3 "),t("code",[a._v("toString()")]),a._v(" 方法")]),a._v(" "),t("p",[a._v("一般形式：类名 + 方括号括起来的阈值\n调用 "),t("code",[a._v("x.toString()")]),a._v(" 可以用 "),t("code",[a._v('""+x')]),a._v(" 代替\n应该为每一个自定义类提供 "),t("code",[a._v("toString()")]),a._v(" 方法。")]),a._v(" "),t("h2",{attrs:{id:"_12-泛型数组列表-arraylist"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-泛型数组列表-arraylist"}},[a._v("#")]),a._v(" 12. 泛型数组列表（"),t("code",[a._v("ArrayList<>")]),a._v("）")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("构造")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ArrayList")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" staff "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ArrayList")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])])]),a._v(" "),t("li",[t("p",[a._v("优点：可以实现动态更改数组大小")])]),a._v(" "),t("li",[t("p",[a._v("使用 "),t("code",[a._v("add()")]),a._v(" 方法添加元素，"),t("code",[a._v("remove()")]),a._v(" 方法删除元素")])]),a._v(" "),t("li",[t("p",[a._v("使用 "),t("code",[a._v("get()")]),a._v(" 方法访问元素，"),t("code",[a._v("set()")]),a._v(" 方法设置元素【而不是使用[]语法】")])])]),a._v(" "),t("h2",{attrs:{id:"_13-对象包装器和自动装箱"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-对象包装器和自动装箱"}},[a._v("#")]),a._v(" 13. 对象包装器和自动装箱")]),a._v(" "),t("p",[a._v("一般用于将基本类型转换成类对象")]),a._v(" "),t("p",[a._v("首字母大写即为相应的包装器")]),a._v(" "),t("p",[a._v("包装器的比较应使用 "),t("code",[a._v("equals()")]),a._v("方法，而不是 "),t("code",[a._v("==")]),a._v("\n包装器为 "),t("code",[a._v("final")]),a._v(" 类，不可以用来修改基本数据类型的数值\n应使用 "),t("code",[a._v("holder")]),a._v(" 类型来修改基本数据类型的值")]),a._v(" "),t("h2",{attrs:{id:"_14-不定参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_14-不定参数"}},[a._v("#")]),a._v(" 14. 不定参数")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("double")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("max")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("double")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v(" values"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("其中的 "),t("code",[a._v("double...")]),a._v(" 相同于"),t("code",[a._v("double[]")]),a._v("，其实就是接受了一个 "),t("code",[a._v("double")]),a._v(" 数组\n可以将数组传递给可变参数方法的最后一个参数。")]),a._v(" "),t("h2",{attrs:{id:"_15-枚举类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_15-枚举类"}},[a._v("#")]),a._v(" 15. 枚举类")]),a._v(" "),t("p",[a._v("这里的枚举类是一个类对象，而不是一种类型")]),a._v(" "),t("h2",{attrs:{id:"_16-继承设计的技巧"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_16-继承设计的技巧"}},[a._v("#")]),a._v(" 16. 继承设计的技巧")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("将公共操作和域放在超类")])]),a._v(" "),t("li",[t("p",[a._v("不要使用受保护的域")])]),a._v(" "),t("li",[t("p",[a._v("使用继承实现 "),t("strong",[a._v("“is-a”")]),a._v(" 关系")])]),a._v(" "),t("li",[t("p",[a._v("覆盖方法时，不要改变预期的行为")]),a._v(" "),t("blockquote",[t("p",[a._v("这里说的是不要偏离设计，并不是不能改变基类方法的操作")])])]),a._v(" "),t("li",[t("p",[a._v("能使用多态就使用多态")])]),a._v(" "),t("li",[t("p",[a._v("不要过多的使用反射")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);