(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{754:function(_,v,t){"use strict";t.r(v);var o=t(1),e=Object(o.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h2",{attrs:{id:"_1-概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述"}},[_._v("#")]),_._v(" 1. 概述")]),_._v(" "),t("p",[_._v("C# 提供了两种 "),t("strong",[_._v("常量级别")]),_._v(" 数据，相当于 Kotlin 中的 "),t("code",[_._v("const")]),_._v(" 和 "),t("code",[_._v("lazy value")]),_._v("；")]),_._v(" "),t("p",[_._v("使用 "),t("code",[_._v("const")]),_._v(" 和 "),t("code",[_._v("readonly")]),_._v(" 来进行修饰")]),_._v(" "),t("h2",{attrs:{id:"_2-const"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-const"}},[_._v("#")]),_._v(" 2. Const")]),_._v(" "),t("p",[t("code",[_._v("const")]),_._v(" 类型是 "),t("strong",[_._v("编译时常量")]),_._v("。")]),_._v(" "),t("p",[t("code",[_._v("const")]),_._v(" 必须被初始化！")]),_._v(" "),t("p",[_._v("与 Kotlin 不同的是 C# 中的 "),t("code",[_._v("const")]),_._v(" 除了字面常量以外，还允许使用 "),t("code",[_._v("null")]),_._v(" 应用。")]),_._v(" "),t("p",[_._v("除此之外，C# 的 "),t("code",[_._v("const")]),_._v(" 还允许在局部作用域使用，而 Kotlin 的 "),t("code",[_._v("const")]),_._v(" 只允许在 Top-level 使用")]),_._v(" "),t("h2",{attrs:{id:"_3-readonly-field"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-readonly-field"}},[_._v("#")]),_._v(" 3. Readonly Field")]),_._v(" "),t("p",[_._v("只读字段是一种特殊的 "),t("code",[_._v("lazy")]),_._v(" 常量。")]),_._v(" "),t("p",[_._v("和 Kotlin 的 "),t("code",[_._v("lazy-value")]),_._v(" 不同的是：")]),_._v(" "),t("ol",[t("li",[t("p",[_._v("只读字段可以不被初始化")])]),_._v(" "),t("li",[t("p",[_._v("只读字段 "),t("strong",[_._v("只能被显式初始化，或者构造函数初始化")])])]),_._v(" "),t("li",[t("p",[_._v("如果不被初始化，那么显式字段拥有默认值")])])]),_._v(" "),t("h2",{attrs:{id:"_4-两者区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-两者区别"}},[_._v("#")]),_._v(" 4. 两者区别")]),_._v(" "),t("p",[_._v("C# 中 "),t("code",[_._v("const")]),_._v(" 和 "),t("code",[_._v("readonly")]),_._v(" 的主要区别在于：")]),_._v(" "),t("p",[t("code",[_._v("const")]),_._v(" 是 "),t("strong",[_._v("隐式静态的")]),_._v("，即可以直接通过类名来调用 "),t("code",[_._v("const")])]),_._v(" "),t("p",[_._v("而 "),t("code",[_._v("readonly")]),_._v(" "),t("strong",[_._v("不是隐式静态的")]),_._v("。")])])}),[],!1,null,null,null);v.default=e.exports}}]);