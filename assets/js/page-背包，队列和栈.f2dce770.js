(window.webpackJsonp=window.webpackJsonp||[]).push([[208],{853:function(s,t,a){"use strict";a.r(t);var n=a(1),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("它们都是一些数据对象的集合")]),s._v(" "),a("h2",{attrs:{id:"_1-特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-特点"}},[s._v("#")]),s._v(" 1. 特点")]),s._v(" "),a("h3",{attrs:{id:"_1-1-背包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-背包"}},[s._v("#")]),s._v(" 1.1 背包")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("不支持")]),s._v(" 删除元素")]),s._v(" "),a("li",[s._v("使用其来收集元素，遍历和递归它们")]),s._v(" "),a("li",[s._v("元素的顺序是不确定的")])]),s._v(" "),a("h3",{attrs:{id:"_1-2-队列-先进先出"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-队列-先进先出"}},[s._v("#")]),s._v(" 1.2 队列(先进先出)")]),s._v(" "),a("p",[s._v("这里所说的队列指的是先进先出的队列。")]),s._v(" "),a("ul",[a("li",[s._v("数据元素相对此集合的顺序是"),a("strong",[s._v("先进先出")])]),s._v(" "),a("li",[s._v("队列能收集数据，同时保持它们的相对顺序")])]),s._v(" "),a("h3",{attrs:{id:"_1-3-栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-栈"}},[s._v("#")]),s._v(" 1.3 栈")]),s._v(" "),a("ul",[a("li",[s._v("正好与队列相反，数据元素在栈中是后进先出的。")]),s._v(" "),a("li",[s._v("栈也会保持数据元素的相对顺序")])]),s._v(" "),a("h3",{attrs:{id:"_1-4-例子-算数表达式的表示法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-例子-算数表达式的表示法"}},[s._v("#")]),s._v(" 1.4 例子：算数表达式的表示法")]),s._v(" "),a("p",[s._v("使用两个栈来表达算数表达式")]),s._v(" "),a("p",[s._v("当接收到一个算数表达式的时候：")]),s._v(" "),a("ol",[a("li",[s._v("将数值压入"),a("strong",[s._v("数值栈")])]),s._v(" "),a("li",[s._v("将操作符压入"),a("strong",[s._v("操作符栈")])]),s._v(" "),a("li",[s._v("忽略"),a("strong",[s._v("左括号")])]),s._v(" "),a("li",[s._v("当遇到"),a("strong",[s._v("右括号")]),s._v("的时候，弹出"),a("strong",[s._v("一个操作符")]),s._v("，和"),a("strong",[s._v("所需要的数值")]),s._v("，并且将计算结果压入数值栈")])]),s._v(" "),a("h2",{attrs:{id:"_2-实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-实现"}},[s._v("#")]),s._v(" 2. 实现")]),s._v(" "),a("h3",{attrs:{id:"_2-1-使用数组实现栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-使用数组实现栈"}},[s._v("#")]),s._v(" 2.1 使用数组实现栈")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("push()")]),s._v(" 方法需要检查当前栈是否是满的，如果满，则进行扩容")]),s._v(" "),a("li",[a("code",[s._v("resize()")]),s._v(" 方法会将当前数组的空间加倍（或减半）")]),s._v(" "),a("li",[a("code",[s._v("pop()")]),s._v(" 方法需要检查当前栈的大小是否"),a("strong",[s._v("小于数组的 1/4")]),s._v("，如果成立，则将数组的空间减少为它的一半。")]),s._v(" "),a("li",[s._v("需要防止"),a("strong",[s._v("对象游离")]),s._v("，当数据对象被弹出后，将其声明为 "),a("code",[s._v("null")])]),s._v(" "),a("li",[s._v("缺点\n"),a("ul",[a("li",[s._v("时间复杂度与"),a("strong",[s._v("数组的大小")]),s._v("相关")]),s._v(" "),a("li",[s._v("所需要的空间是不可预知的")])])])]),s._v(" "),a("blockquote",[a("p",[s._v("如果当前栈的大小小于数组的 1/4，那么即使 "),a("code",[s._v("pop()")]),s._v(" 方法使其减少了，它仍然比当前栈的大小还要"),a("strong",[s._v("大一倍")]),s._v("，所以我们依旧有空间储存数据，为了防止空间的浪费，将数组的空间减少。")]),s._v(" "),a("p",[s._v("当一个数据对象被弹出栈后，它就"),a("strong",[s._v("再也不会被栈使用了")]),s._v("，但是数据的引用依旧存在，所以 Java 不会将这块内存回收。这种情况就被叫做"),a("strong",[s._v("对象游离")])])]),s._v(" "),a("h3",{attrs:{id:"_2-2-链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-链表"}},[s._v("#")]),s._v(" 2.2 链表")]),s._v(" "),a("p",[s._v("链表是一个递归的数据结果，它可以是空，或者是一个指向一个节点的引用；\n这个节点储存一个数据元素和一个指向"),a("strong",[s._v("下一个节点或列表")]),s._v("的引用；\n"),a("code",[s._v("Node")]),s._v("（节点）类经常被用于内部类。")]),s._v(" "),a("h4",{attrs:{id:"_2-2-1-创建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-创建"}},[s._v("#")]),s._v(" 2.2.1 创建")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Item")]),s._v(" item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("blockquote",[a("ul",[a("li",[s._v("只要声明一个 "),a("code",[s._v("Node")]),s._v(" 变量，我们就能表示一个链表\n因为 "),a("code",[s._v("Node")]),s._v(" 被用作内部类，所以我们能直接地声明其成员。")])])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" first "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" second "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" thrid "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//Items")]),s._v("\nfirst"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("item "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"to"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nsecond"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("item "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"be"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nthrid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("item "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"or"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//Nexts")]),s._v("\nfirst"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" second"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nsecond"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" thrid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://algs4.cs.princeton.edu/13stacks/images/linked-list.png",alt:"Build linked List"}})]),s._v(" "),a("h4",{attrs:{id:"_2-2-2-在头部插入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-在头部插入"}},[s._v("#")]),s._v(" 2.2.2 在头部插入")]),s._v(" "),a("p",[s._v("使用另一个引用（例如 "),a("code",[s._v("oldfirst")]),s._v("） 来储存头结点，然后建立新节点来储存数据，然后将 "),a("code",[s._v("next")]),s._v(" 指向头结点")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://algs4.cs.princeton.edu/13stacks/images/linked-list-insert-front.png",alt:"Insert at beginning"}})]),s._v(" "),a("h4",{attrs:{id:"_2-2-3-从头部删除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-从头部删除"}},[s._v("#")]),s._v(" 2.2.3 从头部删除")]),s._v(" "),a("p",[s._v("将头指针"),a("code",[s._v("first")]),s._v("直接指向 "),a("code",[s._v("first.next")]),s._v(" 即可\nJava 的 garbage collector 会将内存回收。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://algs4.cs.princeton.edu/13stacks/images/linked-list-remove-first.png",alt:"Remove from the beginning"}})]),s._v(" "),a("h4",{attrs:{id:"_2-2-4-在尾部插入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-4-在尾部插入"}},[s._v("#")]),s._v(" 2.2.4 在尾部插入")]),s._v(" "),a("p",[s._v("就像在头部插入一样，用一个另外的引用 "),a("code",[s._v("oldlast")]),s._v(" 来保存尾部节点，然后建立一个新的节点来储存数据，然后将 "),a("code",[s._v("oldlast.next")]),s._v(" 声明为 "),a("code",[s._v("last")])]),s._v(" "),a("blockquote",[a("p",[s._v("注意，对于单链表，尾部节点的引用可能要通过从头结点的层层遍历才能取到，这也是为什么一般仅使用头节点来作为主要的操作节点。")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://algs4.cs.princeton.edu/13stacks/images/linked-list-insert-end.png",alt:"Insert at the end"}})]),s._v(" "),a("h4",{attrs:{id:"_2-2-5-在其他地方插入和删除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-5-在其他地方插入和删除"}},[s._v("#")]),s._v(" 2.2.5 在其他地方插入和删除")]),s._v(" "),a("p",[s._v("进行这个操作，我们必须要拿到所需要插入位置的前一个节点的信息来辅助我们的插入删除操作，因此我们需要"),a("strong",[s._v("遍历")]),s._v(" 链表来取得指定插入位置的前一个位置。")]),s._v(" "),a("h4",{attrs:{id:"_2-2-6-遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-6-遍历"}},[s._v("#")]),s._v(" 2.2.6 遍历")]),s._v(" "),a("p",[s._v("一般来说，我们使用 "),a("code",[s._v("foreach")]),s._v(" 语句来进行遍历操作。")]),s._v(" "),a("p",[s._v("使用这个语句的类必须要实现 "),a("code",[s._v("Iterable")]),s._v(" 和 "),a("code",[s._v("Iterator")]),s._v(" 接口来返回一个迭代器和定义迭代方法。")]),s._v(" "),a("p",[s._v("但是对于链表这种简单结构来说，我们只需要使用一般的 "),a("code",[s._v("for")]),s._v(" 语句即可。")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" first"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//handle x.item")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"_3-链表的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-链表的使用"}},[s._v("#")]),s._v(" 3. 链表的使用")]),s._v(" "),a("p",[s._v("使用链表可以：")]),s._v(" "),a("ul",[a("li",[s._v("处理任何数据")]),s._v(" "),a("li",[s._v("需求的空间仅仅和集合的大小成正比")]),s._v(" "),a("li",[s._v("时间复杂度和集合的大小"),a("strong",[s._v("无关")])])]),s._v(" "),a("blockquote",[a("p",[s._v("链表的插入和删除操作仅仅是变量的"),a("strong",[s._v("赋值")]),s._v("，以及"),a("strong",[s._v("对象的构建")]),s._v("，它们的时间复杂度都是"),a("strong",[s._v("常数级别")]),s._v(" 的")])]),s._v(" "),a("h3",{attrs:{id:"_3-1-实现栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-实现栈"}},[s._v("#")]),s._v(" 3.1 实现栈")]),s._v(" "),a("p",[s._v("将链表的头部设定为栈顶")]),s._v(" "),a("ul",[a("li",[s._v("当压入数据的时候，我们"),a("strong",[s._v("在头部")]),s._v("插入数据元素")]),s._v(" "),a("li",[s._v("当弹出数据的时候，我们"),a("strong",[s._v("在头部")]),s._v("删除数据元素")])]),s._v(" "),a("blockquote",[a("p",[s._v("选择链表头部而不是尾部进行操作的原因：链表的插入和删除操作都是在一端进行的；")]),s._v(" "),a("p",[s._v("链表的尾部元素一般不好获取，特别是对于单链表而言，如果采用尾部作为栈顶，那么当删除栈顶元素之后，我们无法很快的获取新的栈顶元素的引用（"),a("strong",[s._v("因为要从头部进行遍历，或者维护两个指针，这都是不必要的")]),s._v("）；")]),s._v(" "),a("p",[s._v("而采用头部作为栈的顶部，仅仅需要一句声明语句 "),a("code",[s._v("newTop = top.next;")]),s._v(" 即可获取到新的栈顶元素。")])]),s._v(" "),a("h3",{attrs:{id:"_3-2-实现队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-实现队列"}},[s._v("#")]),s._v(" 3.2 实现队列")]),s._v(" "),a("ul",[a("li",[s._v("设定链表的头部为队列的头部，链表的尾部为队列的尾部。")]),s._v(" "),a("li",[s._v("当插入元素时，在尾部插入数据。")]),s._v(" "),a("li",[s._v("当删除元素时，在头部删除数据。")])]),s._v(" "),a("blockquote",[a("p",[s._v("由于队列插入和删除的位置不同，在尾部删除元素很麻烦，但是相应的插入操作却变得十分简单，仅需要改变其 "),a("code",[s._v("next")]),s._v(" 域即可，而不是类似删除操作还要返回前一个数据的引用。")])]),s._v(" "),a("h3",{attrs:{id:"_3-3-背包的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-背包的实现"}},[s._v("#")]),s._v(" 3.3 背包的实现")]),s._v(" "),a("p",[s._v("将栈或队列的 "),a("code",[s._v("pop()")]),s._v(" 操作去掉，就是一个背包结构。")])])}),[],!1,null,null,null);t.default=e.exports}}]);