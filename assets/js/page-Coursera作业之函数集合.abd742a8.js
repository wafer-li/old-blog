(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{891:function(s,t,a){"use strict";a.r(t);var n=a(1),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("blockquote",[a("p",[s._v("本文源码：\nhttps://github.com/wafer-li/scala-coursera/tree/master/funsets")])]),s._v(" "),a("h2",{attrs:{id:"_1-背景知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-背景知识"}},[s._v("#")]),s._v(" 1. 背景知识")]),s._v(" "),a("p",[s._v("该作业是实现一个函数集合的相关内容。")]),s._v(" "),a("p",[s._v("何为函数集合？")]),s._v(" "),a("p",[s._v("一般来说，编程语言中的集合(Collection)都是有限集合；")]),s._v(" "),a("p",[s._v("但是，在数学上，还有很多的集合是无限集合，比如说 "),a("strong",[s._v("负数集")]),s._v("；")]),s._v(" "),a("p",[s._v("我们有没有一种办法去表示这个集合呢？")]),s._v(" "),a("p",[s._v("当然有的，对于上面的负数集来说，我们如何知道一个数字是不是负数集中的元素呢？")]),s._v(" "),a("p",[s._v("将它与 0 进行比较，如果 x < 0，那么它就是负数集的元素。")]),s._v(" "),a("p",[s._v("此时，"),a("code",[s._v("(x) => x == 0")]),s._v(" 就成为了负数集的判断标准，我们将其作为负数集的 "),a("strong",[s._v("特征函数")]),s._v("，通过特征函数来指代特定的集合。")]),s._v(" "),a("p",[s._v("于是，我们得到了函数集合的定义："),a("code",[s._v("type Set = (Int) => Boolean")])]),s._v(" "),a("p",[s._v("和它的一个基本方法 "),a("code",[s._v("contains()")]),s._v("：")]),s._v(" "),a("div",{staticClass:"language-scala line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-scala"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" contains"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("set"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h2",{attrs:{id:"_2-基本方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-基本方法"}},[s._v("#")]),s._v(" 2. 基本方法")]),s._v(" "),a("p",[s._v("接下来，题目要求我们实现一些集合的基本方法。")]),s._v(" "),a("h3",{attrs:{id:"_2-1-singletonset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-singletonset"}},[s._v("#")]),s._v(" 2.1 "),a("code",[s._v("singletonSet()")])]),s._v(" "),a("p",[s._v("如何返回一个只有一个元素的函数集合呢？")]),s._v(" "),a("p",[s._v("对于我们的特征函数来说，也就是只有给定的元素才能满足这个特征函数，这样的集合就是只存在给定元素的集合。")]),s._v(" "),a("p",[s._v("所以，定义如下：")]),s._v(" "),a("div",{staticClass:"language-scala line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-scala"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" singletonSet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("elem"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Set "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("=>")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" elem\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"_2-2-交、并、补"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-交、并、补"}},[s._v("#")]),s._v(" 2.2 交、并、补")]),s._v(" "),a("p",[s._v("这几个基本的数学集合操作并不难，只需要抓住我们特征函数就是 "),a("code",[s._v("contains()")]),s._v(" 这一点就行了。")]),s._v(" "),a("h3",{attrs:{id:"_2-3-filter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-filter"}},[s._v("#")]),s._v(" 2.3 "),a("code",[s._v("filter()")])]),s._v(" "),a("p",[s._v("这个方法算是在 JVM 函数式语言中经常出现的集合方法；")]),s._v(" "),a("p",[s._v("作用就是返回满足条件的集合内的元素；")]),s._v(" "),a("p",[s._v("其中，一个很有趣的地方在于，"),a("code",[s._v("filter(s, p)")]),s._v(" 的两个参数，虽然其表面上的类型不一样；")]),s._v(" "),a("p",[s._v("但是实际上他们的类型是一样的，也就是说，"),a("code",[s._v("s")]),s._v(" 和 "),a("code",[s._v("p")]),s._v(" 都是集合！")]),s._v(" "),a("p",[s._v("所以，我们只需要返回 "),a("code",[s._v("s")]),s._v(" 和 "),a("code",[s._v("p")]),s._v(" 的交集就行了")]),s._v(" "),a("div",{staticClass:"language-scala line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-scala"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" filter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" p"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("=>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" intersect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h2",{attrs:{id:"_3-forall"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-forall"}},[s._v("#")]),s._v(" 3. "),a("code",[s._v("forAll()")])]),s._v(" "),a("p",[s._v("然后，有趣的地方来了，题目要求我们实现一个 "),a("code",[s._v("forAll()")]),s._v(" 方法，用来检测是否 "),a("strong",[s._v("所有的")]),s._v(" 元素都满足给定的条件。")]),s._v(" "),a("p",[s._v("当然，我们不能遍历全部的无限集元素；")]),s._v(" "),a("p",[s._v("所以，我们就采取一个区间的办法，如果在这个区间内的所有的元素都满足条件，那么我们有信心认为所有的元素都满足了条件。")]),s._v(" "),a("p",[s._v("在这里，同样要注意， "),a("code",[s._v("s")]),s._v(" 和 "),a("code",[s._v("p")]),s._v(" 的类型实际上是一样的！")]),s._v(" "),a("div",{staticClass:"language-scala line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-scala"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" forall"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" p"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("=>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Boolean")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" iter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Boolean")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" bound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("diff"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" iter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  iter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("bound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h2",{attrs:{id:"_4-exists"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-exists"}},[s._v("#")]),s._v(" 4. "),a("code",[s._v("exists()")])]),s._v(" "),a("p",[s._v("本题第二难的地方来了，题目要求实现一个 "),a("code",[s._v("exists()")]),s._v(" 函数，用于检测 "),a("strong",[s._v("是否存在")]),s._v(" 一个元素满足给定的条件。")]),s._v(" "),a("p",[s._v("按说这个还不是很难，但是，题目要求使用 "),a("code",[s._v("forAll()")]),s._v(" 进行实现。")]),s._v(" "),a("p",[s._v("按照我的早就丢给高中老师的逻辑关系知识，『所有』和 『存在』好像并无什么联系。")]),s._v(" "),a("p",[s._v("不过，在论坛上有人提醒了我，可以使用 "),a("strong",[s._v("间接法")]),s._v("；")]),s._v(" "),a("p",[s._v("也就是说，我们可以考虑一下 "),a("strong",[s._v("不存在")]),s._v(" 的情况；")]),s._v(" "),a("p",[s._v("也就是说，对于 "),a("strong",[s._v("所有的")]),s._v(" 元素，都 "),a("strong",[s._v("不满足")]),s._v(" 给定的条件；")]),s._v(" "),a("p",[s._v("到此，我们就可以利用上之前实现的 "),a("code",[s._v("forAll()")]),s._v(" 了。")]),s._v(" "),a("div",{staticClass:"language-scala line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-scala"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" exists"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" p"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("=>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("forAll"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("elem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("=>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("elem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("但是，这显得太长了，能不能缩短到只有一行代码呢？")]),s._v(" "),a("p",[s._v("之前提到，"),a("code",[s._v("s")]),s._v(" 和 "),a("code",[s._v("p")]),s._v(" 的类型实际上是一样的，也就是说，我们可以重用上面的方法来对 "),a("code",[s._v("s")]),s._v(" 和 "),a("code",[s._v("p")]),s._v(" 进行处理。")]),s._v(" "),a("p",[s._v("那么，"),a("code",[s._v("s")]),s._v(" 和 "),a("code",[s._v("p")]),s._v(" 在不存在的情况下，是什么样的关系呢？")]),s._v(" "),a("p",[s._v("我们可以从上面的结论出发继续思考：")]),s._v(" "),a("p",[s._v("对于所有的元素，都不满足给定条件 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mo",[s._v("⇒")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("\\Rightarrow")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.36687em","vertical-align":"0em"}}),a("span",{staticClass:"mrel"},[s._v("⇒")])])])]),s._v(" 对于 "),a("code",[s._v("s")]),s._v(" 的所有元素，都位于「在 "),a("code",[s._v("s")]),s._v(" 且不在 "),a("code",[s._v("p")]),s._v(" 中」这个集合内")]),s._v(" "),a("p",[s._v("所以，我们得到了一个简便的写法：")]),s._v(" "),a("div",{staticClass:"language-scala line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-scala"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" exists"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" p"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("=>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("forAll"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" diff"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h2",{attrs:{id:"_5-map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-map"}},[s._v("#")]),s._v(" 5. "),a("code",[s._v("map()")])]),s._v(" "),a("p",[s._v("本题最难的部分来了，"),a("code",[s._v("map()")]),s._v(" 函数，用于对集合中的元素进行变换操作，返回一个变换过后的新集合。")]),s._v(" "),a("p",[s._v("鉴于我们的集合是一个 "),a("strong",[s._v("函数")]),s._v("，那么 "),a("code",[s._v("map()")]),s._v(" 方法也就是返回一个 "),a("strong",[s._v("新函数")]),s._v("，用来检测参数是否满足新变换过后的条件。")]),s._v(" "),a("p",[s._v("因为 "),a("code",[s._v("map()")]),s._v(" 函数是针对原有集合进行变换，所以，我们应该基于原有集合生成上面的新函数。")]),s._v(" "),a("p",[s._v("也就是说，对于原有集合来说，是否存在一个元素，它变换过后的数值和传入的参数相等：")]),s._v(" "),a("div",{staticClass:"language-scala line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-scala"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" f"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("=>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("\n    x "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("=>")]),s._v(" exists"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" elem "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("=>")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v("f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("elem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])])])}),[],!1,null,null,null);t.default=e.exports}}]);