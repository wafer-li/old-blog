(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{884:function(e,s,t){"use strict";t.r(s);var n=t(1),a=Object(n.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"_1-volley-介绍与基本使用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-volley-介绍与基本使用场景"}},[e._v("#")]),e._v(" 1. Volley 介绍与基本使用场景")]),e._v(" "),t("p",[e._v("Volley 是 Google 在 2013 年 I/O 大会上发布的一个 Android 的网络框架库，用于简化 Android 构建网络连接的步骤，同时提供 "),t("strong",[e._v("缓存")]),e._v("、"),t("strong",[e._v("网络优先级")]),e._v("等功能。")]),e._v(" "),t("p",[e._v("Volley 适用于高频，小流量的网络访问，例如传输 Json 信息，前后端的小流量交互等。")]),e._v(" "),t("p",[e._v("对于上传和下载文件的需求，Volley 不适用。\n这主要是由于 Volley 对请求队列采用的是"),t("strong",[e._v("在内存中的缓存")]),e._v("，决定了 Volley 不适应大文件（二进制流）的传输。")]),e._v(" "),t("h2",{attrs:{id:"_2-volley-的基本使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-volley-的基本使用"}},[e._v("#")]),e._v(" 2. Volley 的基本使用")]),e._v(" "),t("h3",{attrs:{id:"_2-1-添加编译依赖"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-添加编译依赖"}},[e._v("#")]),e._v(" 2.1 添加编译依赖")]),e._v(" "),t("p",[e._v("Volley 在不久前加入了 "),t("code",[e._v("jCenter")]),e._v("，直接使用 "),t("code",[e._v("gradle")]),e._v(" 的 "),t("code",[e._v("compile")]),e._v(" 语句即可。")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("compile 'com.android.volley:volley:1.0.0'\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("blockquote",[t("p",[e._v("如果不使用 compile 语句，则需要从 Git repository 中克隆，添加编译 module")])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("git clone https://android.googlesource.com/platform/frameworks/volley\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("h3",{attrs:{id:"_2-2-添加网络访问权限"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-添加网络访问权限"}},[e._v("#")]),e._v(" 2.2 添加网络访问权限")]),e._v(" "),t("p",[e._v("为了使用 Volley 这一"),t("strong",[e._v("网络")]),e._v("库，需要在 "),t("code",[e._v("Manifest")]),e._v(" 中添加网络访问权限 "),t("code",[e._v("android.permission.INTERNET")])]),e._v(" "),t("h3",{attrs:{id:"_2-3-发起网络请求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-发起网络请求"}},[e._v("#")]),e._v(" 2.3 发起网络请求")]),e._v(" "),t("p",[e._v("Volley 是通过"),t("strong",[e._v("优先队列")]),e._v("来管理多个网络请求的，所以使用 Volley 即构建请求队列和相应的网络请求对象即可。")]),e._v(" "),t("h4",{attrs:{id:"_2-3-1-例子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-1-例子"}},[e._v("#")]),e._v(" 2.3.1 例子")]),e._v(" "),t("p",[e._v("Volley 提供了默认的静态方法用于构建一个请求队列的实例。\n所以构建一个请求对象，设置好监听，并将其加入请求队列即可。")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('final TextView mTextView = (TextView) findViewById(R.id.text);\n...\n\n// Instantiate the RequestQueue.\nRequestQueue queue = Volley.newRequestQueue(this);\nString url ="http://www.google.com";\n\n// Request a string response from the provided URL.\nStringRequest stringRequest = new StringRequest(Request.Method.GET,\nurl,\nnew Response.Listener<String>() {\n    @Override\n    public void onResponse(String response) {\n        // Display the first 500 characters of the response string.\n        mTextView.setText("Response is: "+ response.substring(0,500));\n    }\n}, new Response.ErrorListener() {\n    @Override\n    public void onErrorResponse(VolleyError error) {\n        mTextView.setText("That didn\'t work!");\n    }\n});\n\n// Add the request to the RequestQueue.\nqueue.add(stringRequest);\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br"),t("span",{staticClass:"line-number"},[e._v("23")]),t("br"),t("span",{staticClass:"line-number"},[e._v("24")]),t("br"),t("span",{staticClass:"line-number"},[e._v("25")]),t("br")])]),t("p",[t("code",[e._v("StringRequest")]),e._v(" 的最后两个参数是 "),t("code",[e._v("Response.Listener<T>")]),e._v(" 和 "),t("code",[e._v("Response.ErrorListener")]),e._v("。")]),e._v(" "),t("p",[e._v("通过使用匿名的监听类来分别获得"),t("strong",[e._v("正常的服务器响应")]),e._v("和"),t("strong",[e._v("网络错误时的响应")])]),e._v(" "),t("h4",{attrs:{id:"_2-3-2-基本原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2-基本原理"}},[e._v("#")]),e._v(" 2.3.2 基本原理")]),e._v(" "),t("p",[e._v("当请求被加入到队列后，Volley 会自动运行"),t("strong",[e._v("缓存处理线程")]),e._v("和一个"),t("strong",[e._v("网络通信线程池")]),e._v("。")]),e._v(" "),t("p",[t("strong",[e._v("缓存处理进程")]),e._v("将请求出列，并判断缓存是否命中，如果缓存命中，就直接返回主线程进行结果处理。")]),e._v(" "),t("p",[e._v("如果缓存没有命中，则将请求加入内置的"),t("strong",[e._v("网络通信队列")]),e._v("，网络通信线程池中的第一个可用线程会对请求进行处理，建立 HTTP 连接，解析返回结果并将其写入缓存，随后将结果返回到主线程。")]),e._v(" "),t("p",[e._v("下图是具体的工作流程图解")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://i2.piimg.com/3b76b51675570a97.png",alt:"Volley Request"}})]),e._v(" "),t("h3",{attrs:{id:"_2-4-取消请求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-取消请求"}},[e._v("#")]),e._v(" 2.4 取消请求")]),e._v(" "),t("p",[e._v("如果要取消一个网络请求，只需要调用 "),t("code",[e._v("Request")]),e._v(" 的 "),t("code",[e._v("cancel()")]),e._v(" 方法即可。")]),e._v(" "),t("p",[e._v("一经取消，Volley 会"),t("strong",[e._v("保证")]),e._v("不会调用返回结果的处理器，这也就是说你可以在 "),t("code",[e._v("Activity")]),e._v(" 的 "),t("code",[e._v("onStop()")]),e._v(" 方法中取消所有正在处理的网络请求。")]),e._v(" "),t("p",[e._v("同时，还可以给请求打上 TAG，使用 "),t("code",[e._v("RequestQueue")]),e._v(" 中的 "),t("code",[e._v("cancelAll()")]),e._v(" 方法来取消对应的被打上 TAG 的请求。")]),e._v(" "),t("p",[e._v("TAG 的类型不限，甚至可以是 "),t("code",[e._v("Activty")]),e._v("，可以通过在 "),t("code",[e._v("onStop()")]),e._v(" 中调用 "),t("code",[e._v("cancelAll(this)")]),e._v(" 来取消所有跟这个 "),t("code",[e._v("Activty")]),e._v(" 有关的 "),t("code",[e._v("Request")])]),e._v(" "),t("p",[e._v("下面是一个使用 "),t("code",[e._v("String")]),e._v(" 作为 TAG 的应用例子：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('public static final String TAG = "MyTag";\nStringRequest stringRequest; // Assume this exists.\nRequestQueue mRequestQueue;  // Assume this exists.\n\n// Set the tag on the request.\nstringRequest.setTag(TAG);\n\n// Add the request to the RequestQueue.\nmRequestQueue.add(stringRequest);\n\n@Override\nprotected void onStop () {\n    super.onStop();\n    if (mRequestQueue != null) {\n        mRequestQueue.cancelAll(TAG);\n    }\n}\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br")])]),t("h2",{attrs:{id:"_3-构建队列单例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-构建队列单例"}},[e._v("#")]),e._v(" 3. 构建队列单例")]),e._v(" "),t("p",[e._v("对于 APP 来说，使用多个网络队列是浪费性能的，最好是整个 APP 使用一个队列。")]),e._v(" "),t("p",[e._v("所以，我们使用单例模式来进行 Volley "),t("code",[e._v("RequestQueue")]),e._v(" 的操作。")]),e._v(" "),t("h3",{attrs:{id:"_3-1-自定义队列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-自定义队列"}},[e._v("#")]),e._v(" 3.1 自定义队列")]),e._v(" "),t("p",[t("code",[e._v("RequestQueue")]),e._v(" 除了使用 Volley 的静态方法构建以外，还可以自己构建 "),t("code",[e._v("RequestQueue")]),e._v("。\n这时，就可以对队列的缓存大小进行设定。")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("初始化 "),t("code",[e._v("Cache")]),e._v(" 实例")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// The first is the Context method\n// The second is the SIZE of the queue, described by BYTES\nCache cache = new DiskBasedCache(getCacheDir(), 1024 * 1024);\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])])]),e._v(" "),t("li",[t("p",[e._v("初始化 "),t("code",[e._v("Network")]),e._v(" 实例")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// Using the HttpUrlConnection\nNetwork network = new NetWork(new HurlStack());\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])])]),e._v(" "),t("li",[t("p",[e._v("使用以上两个实例来构建请求队列")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("mRequestQueue = new RequestQueue(cache, network);\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])])]),e._v(" "),t("li",[t("p",[e._v("启动队列")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("mRequestQueue.start();\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])])])]),e._v(" "),t("h3",{attrs:{id:"_3-2-构建单例模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-构建单例模型"}},[e._v("#")]),e._v(" 3.2 构建单例模型")]),e._v(" "),t("p",[e._v("为了节省系统资源，我们构建一个单例模型，整个 App 只使用这一个请求队列。")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public class NetworkSingleton {\n    private static NetworkSingleton mInstance;\n    private static mContext;\n\n    private RequestQueue mRequestQueue;\n\n    // Use private constructor\n    private NetworkSingleton(Context context) {\n        mContext = context;\n        mRequestQueue = getRequestQueue();\n    }\n\n    public static synchronized NetworkSingleton getInstance(\n                                                Context context) {\n        if (mInstance == null) {\n            mInstance = new NetworkSingleton(context);\n        }\n        return mInstance;\n    }\n\n    public RequestQueue getRequestQueue() {\n        if (mRequestQueue == null) {\n\n            // The request queue needs the Application context\n            // if someone pass a Activity context\n            // using the getApplicationContext() could prevent\n            // the wrong paramaters\n            mRequestQueue = Volley.newRequestQueue(\n                            mContext.getApplicationContext());\n        }\n        return mRequestQueue;\n    }\n\n    public <T> void addToRequestQueue(Request<T> request) {\n        getRequestQueue().add(request);\n    }\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br"),t("span",{staticClass:"line-number"},[e._v("23")]),t("br"),t("span",{staticClass:"line-number"},[e._v("24")]),t("br"),t("span",{staticClass:"line-number"},[e._v("25")]),t("br"),t("span",{staticClass:"line-number"},[e._v("26")]),t("br"),t("span",{staticClass:"line-number"},[e._v("27")]),t("br"),t("span",{staticClass:"line-number"},[e._v("28")]),t("br"),t("span",{staticClass:"line-number"},[e._v("29")]),t("br"),t("span",{staticClass:"line-number"},[e._v("30")]),t("br"),t("span",{staticClass:"line-number"},[e._v("31")]),t("br"),t("span",{staticClass:"line-number"},[e._v("32")]),t("br"),t("span",{staticClass:"line-number"},[e._v("33")]),t("br"),t("span",{staticClass:"line-number"},[e._v("34")]),t("br"),t("span",{staticClass:"line-number"},[e._v("35")]),t("br"),t("span",{staticClass:"line-number"},[e._v("36")]),t("br"),t("span",{staticClass:"line-number"},[e._v("37")]),t("br")])]),t("p",[e._v("使用类似 Java Bean 的单例模型，我们在整个应用程序的生命周期中就只需要维护一个队列实例。\n同时，还可以利用单例模型来进行请求的"),t("strong",[e._v("添加和删除")])])])}),[],!1,null,null,null);s.default=a.exports}}]);