(window.webpackJsonp=window.webpackJsonp||[]).push([[139],{827:function(a,s,t){"use strict";t.r(s);var e=t(1),v=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"_1-代换模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-代换模型"}},[a._v("#")]),a._v(" 1. 代换模型")]),a._v(" "),t("p",[a._v("Scala 使用代换模型对函数和表达式进行解析工作；")]),a._v(" "),t("p",[a._v("所谓的代换模型就是类似平常算术的过程；")]),a._v(" "),t("p",[a._v("从左到右地将函数和表达式一步一步转换，最终转换成值。")]),a._v(" "),t("p",[a._v("例如：")]),a._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),a._v(" "),t("p",[a._v("对于上面的式子 Scala 是如何解析的呢？")]),a._v(" "),t("p",[a._v("我们从左到右地解析，首先，我们解析 "),t("code",[a._v("(2 * 2)")]),a._v(" 的内容，将其替换成值 "),t("code",[a._v("4")]),a._v("；")]),a._v(" "),t("p",[a._v("此时，式子变为：")]),a._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("由于有括号，和乘法的算术等级较高，所以我们接下来对 "),t("code",[a._v("(4 * 5)")]),a._v(" 进行解析；")]),a._v(" "),t("p",[a._v("此时，式子变为：")]),a._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("20")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("此时，我们计算上面的值，最后得到 24。")]),a._v(" "),t("p",[a._v("可以看到，Scala 的解析是符合我们通常的算术解析规律的。")]),a._v(" "),t("h2",{attrs:{id:"_2-代换模型的缺陷"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-代换模型的缺陷"}},[a._v("#")]),a._v(" 2. 代换模型的缺陷")]),a._v(" "),t("p",[a._v("使用代换模型最重要的一个要求就是，我们的表达式最终 "),t("strong",[a._v("能够")]),a._v(" 规约到一个 "),t("strong",[a._v("值")]),a._v("；")]),a._v(" "),t("p",[a._v("如果它最终不能够规约到一个值(无限循环，Non-Terminate)；")]),a._v(" "),t("p",[a._v("或者表达式对其外部的变量产生了影响(副作用)；")]),a._v(" "),t("p",[a._v("都会对代换模型造成污染。")]),a._v(" "),t("h2",{attrs:{id:"_3-副作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-副作用"}},[a._v("#")]),a._v(" 3. 副作用")]),a._v(" "),t("p",[a._v("所谓的副作用就是指的是，函数和表达式的执行过程修改了外部的变量。")]),a._v(" "),t("p",[a._v("例如，"),t("code",[a._v("c++")]),a._v(" 这个表达式就具有很明显的副作用；")]),a._v(" "),t("p",[a._v("因为我们不能够直接将这个表达式规约为一个值；")]),a._v(" "),t("p",[a._v("在执行的过程中，我们需要对 "),t("code",[a._v("c")]),a._v(" 这个外部传入的变量进行修改；")]),a._v(" "),t("p",[a._v("这就让这个表达式显得不够纯粹，这时候我们就说它具有 "),t("strong",[a._v("副作用")])]),a._v(" "),t("h2",{attrs:{id:"_4-不能终结的解析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-不能终结的解析"}},[a._v("#")]),a._v(" 4. 不能终结的解析")]),a._v(" "),t("p",[a._v("所谓的不能终结的解析就是指的一个函数返回它自身；")]),a._v(" "),t("p",[a._v("例如：")]),a._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" loop"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" loop\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("这个函数的解析永远也不会完成，这是因为我们如果使用代换模型对其进行解析的话，会发现，它的解析结果一直是其自身；")]),a._v(" "),t("p",[a._v("所以，对它的解析会一直进行下去，无法完成。")]),a._v(" "),t("h2",{attrs:{id:"_5-参数解析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-参数解析"}},[a._v("#")]),a._v(" 5. 参数解析")]),a._v(" "),t("p",[a._v("Scala 有两种参数解析方式，不像其他的指令性语言只有一种解析方式；")]),a._v(" "),t("p",[a._v("其中的一种叫传值调用(call-by-value)，另一种叫传名调用(call-by-name)。")]),a._v(" "),t("h3",{attrs:{id:"_5-1-传值调用-call-by-value"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-传值调用-call-by-value"}},[a._v("#")]),a._v(" 5.1 传值调用(call-by-value)")]),a._v(" "),t("p",[a._v("这是 Scala 的默认的参数解析方式，也是其他指令性语言常用的参数解析方式。")]),a._v(" "),t("p",[a._v("主要的解析步骤如下：")]),a._v(" "),t("ol",[t("li",[a._v("将传入参数的表达式解析为值")]),a._v(" "),t("li",[a._v("将函数使用函数体进行替换")]),a._v(" "),t("li",[a._v("将函数的形参替换为第一步中得到的实参")])]),a._v(" "),t("p",[a._v("例如：")]),a._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" square"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" x\n\nsquare"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("p",[a._v("对于上面的代码，解析步骤如下：")]),a._v(" "),t("ol",[t("li",[a._v("将 "),t("code",[a._v("2 + 2")]),a._v(" 进行计算，得到它的值 "),t("code",[a._v("4")])]),a._v(" "),t("li",[a._v("将 "),t("code",[a._v("square")]),a._v(" 使用它的函数体进行替换，得到 "),t("code",[a._v("x * x")])]),a._v(" "),t("li",[a._v("将 "),t("code",[a._v("x")]),a._v(" 代换为 "),t("code",[a._v("4")])]),a._v(" "),t("li",[a._v("计算出结果 "),t("code",[a._v("16")])])]),a._v(" "),t("h3",{attrs:{id:"_5-2-传名调用-call-by-name"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-传名调用-call-by-name"}},[a._v("#")]),a._v(" 5.2 传名调用(call-by-name)")]),a._v(" "),t("p",[a._v("这是 Scala 的另一种参数解析方式，也是其他指令性语言不具备的。")]),a._v(" "),t("p",[a._v("只要在定义参数时，使用 "),t("code",[a._v("=>")]),a._v(" 就可以定义传名调用的参数")]),a._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" square"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("=>")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" x\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("主要的解析步骤如下：")]),a._v(" "),t("ol",[t("li",[a._v("将函数名替换为函数体")]),a._v(" "),t("li",[a._v("直接将参数的表达式代入形参")]),a._v(" "),t("li",[a._v("对得到的表达式进行解析和计算，得出结果")])]),a._v(" "),t("p",[a._v("还是使用上面的例子，解析步骤如下：")]),a._v(" "),t("ol",[t("li",[a._v("将 "),t("code",[a._v("square")]),a._v("  替换为 "),t("code",[a._v("x * x")])]),a._v(" "),t("li",[a._v("将 "),t("code",[a._v("2 + 2")]),a._v(" 代入 "),t("code",[a._v("x")]),a._v("  中")]),a._v(" "),t("li",[a._v("对得到的式子 "),t("code",[a._v("(2 + 2) * (2 + 2)")]),a._v(" 进行代换模型的计算")]),a._v(" "),t("li",[a._v("得到结果 "),t("code",[a._v("16")])])]),a._v(" "),t("h3",{attrs:{id:"_5-3-区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-区别"}},[a._v("#")]),a._v(" 5.3 区别")]),a._v(" "),t("p",[a._v("那么这两种计算结果有什么区别呢？")]),a._v(" "),t("p",[a._v("首先，传名调用具有懒加载的功能，直到参数 "),t("strong",[a._v("被使用")]),a._v(" 的时候，才进行参数表达式的解析；")]),a._v(" "),t("p",[a._v("例如：")]),a._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" first"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" y"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" x\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" first"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("=>")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" y"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("=>")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" x\n\nfirst"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("p",[a._v("此时，我们忽略了第二个参数，对于传名调用来说，它不需要解析 "),t("code",[a._v("y")]),a._v(" 这个参数，只需要将它传入函数体即可；")]),a._v(" "),t("p",[a._v("而对于传值调用，则需要先解析出 "),t("code",[a._v("x")]),a._v("  和 "),t("code",[a._v("y")]),a._v(" 的值，即使 "),t("code",[a._v("y")]),a._v(" 的值不会在函数体内使用到。")]),a._v(" "),t("p",[a._v("其次，传名调用可以避免无限循环问题；")]),a._v(" "),t("p",[a._v("对于上面的例子来说，我们可以这么调用：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("first(1, loop)\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("对于传名调用来说，由于它是直接传入函数体，然后，函数体并没有使用 "),t("code",[a._v("y")]),a._v(" 这个参数；")]),a._v(" "),t("p",[a._v("此时，我们就避免了对 "),t("code",[a._v("loop")]),a._v(" 的解析工作；")]),a._v(" "),t("p",[a._v("但是对于传值调用则不然，我们还是要对 "),t("code",[a._v("loop")]),a._v(" 进行解析，从而出现无限循环问题。")]),a._v(" "),t("h3",{attrs:{id:"_5-4-默认传值调用的原因"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-默认传值调用的原因"}},[a._v("#")]),a._v(" 5.4 默认传值调用的原因")]),a._v(" "),t("p",[a._v("既然传名调用具有那么多的好处，但是为什么还要默认使用传值调用呢？")]),a._v(" "),t("p",[a._v("这是因为传值调用在具体实践过程中，比传名调用的执行要快；")]),a._v(" "),t("p",[a._v("其次，由于 Scala 并不是纯函数式语言，实际上，它的函数还是允许有副作用的；")]),a._v(" "),t("p",[a._v("并且同时还要支持和 Java 的互调用，而 Java 是指令式语言，采用传值调用显然会更好些。")])])}),[],!1,null,null,null);s.default=v.exports}}]);