(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{788:function(t,a,s){"use strict";s.r(a);var e=s(1),_=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"_1-介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-介绍"}},[t._v("#")]),t._v(" 1. 介绍")]),t._v(" "),s("p",[t._v("任何语言都会提供一套基础的数据结构的库；")]),t._v(" "),s("p",[t._v("Java 也不例外，而且提供了一个庞大的数据结构库，有时对于它们之间的选择让人很困惑。")]),t._v(" "),s("p",[t._v("这里就来简单说明一下 Java 的 Collection 和基本的 Collection 数据结构")]),t._v(" "),s("h2",{attrs:{id:"_2-接口关系图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-接口关系图"}},[t._v("#")]),t._v(" 2. 接口关系图")]),t._v(" "),s("p",[t._v("和现代的数据结构类库一样，Java 采用了 Collection 接口和实现相分离的策略。")]),t._v(" "),s("p",[t._v("通过这样，来做到使用一个统一的接口，对某种数据结构的不同实现进行多态调用。")]),t._v(" "),s("p",[t._v("基本的 "),s("code",[t._v("Collection")]),t._v(" 接口继承关系如下：")]),t._v(" "),s("Mermaid",{attrs:{id:"mermaid-382ee169","data-code":"classDiagram%0A%20%20%20%20class%20Collection%0A%20%20%20%20%3C%3Cinterface%3E%3E%20Collection%0A%0A%20%20%20%20class%20Set%0A%20%20%20%20%3C%3Cinterface%3E%3E%20Set%0A%20%20%20%20class%20List%0A%20%20%20%20%3C%3Cinterface%3E%3E%20List%0A%20%20%20%20class%20Queue%0A%20%20%20%20%3C%3Cinterface%3E%3E%20Queue%0A%20%20%20%20class%20Deque%0A%20%20%20%20%3C%3Cinterface%3E%3E%20Deque%0A%0A%20%20%20%20class%20SortedSet%0A%20%20%20%20%3C%3Cinterface%3E%3E%20SortedSet%0A%0A%20%20%20%20Collection%20%3C%7C--%20Set%0A%20%20%20%20Collection%20%3C%7C--%20List%0A%20%20%20%20Collection%20%3C%7C--%20Queue%0A%20%20%20%20Collection%20%3C%7C--%20Deque%0A%20%20%20%20Collection%20%3C%7C--%20Set%0A%0A%20%20%20%20Set%20%3C%7C--%20SortedSet%0A%0A%20%20%20%20class%20Map%0A%20%20%20%20%3C%3Cinterface%3E%3E%20Map%0A%0A%20%20%20%20class%20SortedMap%0A%20%20%20%20%3C%3Cinterface%3E%3E%20SortedMap%0A%0A%20%20%20%20Map%20%3C%7C--%20SortedMap%0A"}}),s("p",[t._v("需要注意的是，"),s("code",[t._v("Map")]),t._v(" 并非 "),s("code",[t._v("Collection")]),t._v(" 的子类，而是自成一派。")]),t._v(" "),s("p",[t._v("同时，这些接口都是 "),s("strong",[t._v("泛型接口")]),t._v("，可以使用它们定义泛型方法。")]),t._v(" "),s("h2",{attrs:{id:"_3-接口具体含义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-接口具体含义"}},[t._v("#")]),t._v(" 3. 接口具体含义")]),t._v(" "),s("p",[t._v("这些接口的具体含义如下：")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("Collection")])]),t._v(" "),s("blockquote",[s("p",[t._v("Collection 类结构的根，一个 Collection 代表了一堆对象的集合体，对象通常被称作 "),s("em",[t._v("元素")])])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("Set")])]),t._v(" "),s("blockquote",[s("p",[t._v("一个 "),s("strong",[t._v("不能拥有重复元素")]),t._v(" 的 Collection，类似数学意义上的集合")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("List")])]),t._v(" "),s("blockquote",[s("p",[t._v("一个 "),s("strong",[t._v("有序的")]),t._v("  Collection，有时也被称作 "),s("strong",[t._v("序列")]),t._v("(sequence)\n一般来说，"),s("code",[t._v("List")]),t._v(" 的用户对于 "),s("code",[t._v("List")]),t._v(" 有着比较精确地控制\n用户可以使用索引来进行元素的查找和插入操作")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("Queue")])]),t._v(" "),s("blockquote",[s("p",[t._v("一个存储着即将进行处理的元素的 Collection\n相比 Collection，它提供了特别的加入、删除和查找操作")]),t._v(" "),s("p",[t._v("比较特别的是，队列一般来说具有 "),s("strong",[t._v("先进先出")]),t._v("(FIFO) 的插入和删除次序\n队列的新元素位于队列末尾，旧元素位于队列头部")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("Deque")])]),t._v(" "),s("blockquote",[s("p",[t._v("双端队列，在队列两头都可以进行插入和删除操作\n同时，双端队列也同时支持 "),s("strong",[t._v("先进先出")]),t._v("(FIFO) 和 "),s("strong",[t._v("后进先出")]),t._v("(LIFO) 的插入和删除策略")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("Map")])]),t._v(" "),s("blockquote",[s("p",[t._v("一个存储键值对的对象\n"),s("code",[t._v("Map")]),t._v(" 不能包含重复键，每个键可以被映射到最多一个值上")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("SortedSet")])]),t._v(" "),s("blockquote",[s("p",[t._v("一个它的元素按照 "),s("strong",[t._v("升序排列")]),t._v(" 的 "),s("code",[t._v("Set")])])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("SortedMap")])]),t._v(" "),s("blockquote",[s("p",[t._v("一个它的键按照 "),s("strong",[t._v("升序排列")]),t._v(" 的 "),s("code",[t._v("Map")])])])])]),t._v(" "),s("h2",{attrs:{id:"_4-abstract-类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-abstract-类"}},[t._v("#")]),t._v(" 4. Abstract 类")]),t._v(" "),s("p",[t._v("集合框架中，除了接口和具体实现，还提供了一系列的 "),s("code",[t._v("Abstract*")]),t._v("  类；")]),t._v(" "),s("p",[t._v("它是 "),s("code",[t._v("Collection")]),t._v(" 和 "),s("code",[t._v("Map")]),t._v(" 以及其子接口的简单实现形式，利用泛型来提供了一些通用的方法；")]),t._v(" "),s("p",[t._v("比如 "),s("code",[t._v("contains()")]),t._v(" 方法，就是利用了泛型的 "),s("code",[t._v("Iterator")]),t._v(" 实现的。")]),t._v(" "),s("p",[s("code",[t._v("Abstract")]),t._v(" 类是用于进行具体集合类实现的，通过继承 "),s("code",[t._v("Abstract")]),t._v(" 类，可以极大减轻")]),t._v(" "),s("h2",{attrs:{id:"_5-视图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-视图"}},[t._v("#")]),t._v(" 5. 视图")]),t._v(" "),s("p",[t._v("在通常情况下，我们需要将一个具体的 "),s("code",[t._v("Collection")]),t._v(" 或者 "),s("code",[t._v("Map")]),t._v(" 对象转换成另一种集合框架内的具体对象进行操作；")]),t._v(" "),s("p",[t._v("所以，集合框架提供了一种很有用的视图技术；")]),t._v(" "),s("p",[t._v("视图(views) 指的就是返回一个实现了 "),s("strong",[t._v("其他接口")]),t._v(" 的 "),s("strong",[t._v("引用")]),t._v("，通过这个引用，来进行 "),s("strong",[t._v("原有集合")]),t._v(" 的操作，这个对象引用就是视图。")]),t._v(" "),s("h3",{attrs:{id:"_5-1-array-aslist"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-array-aslist"}},[t._v("#")]),t._v(" 5.1 "),s("code",[t._v("Array.asList()")])]),t._v(" "),s("p",[t._v("不仅集合框架中存在包装器，"),s("code",[t._v("Array")]),t._v(" 类中也存在可以包装成一个 "),s("code",[t._v("List")]),t._v(" 的方法；")]),t._v(" "),s("p",[t._v("它返回一个 "),s("code",[t._v("List")]),t._v(" 的视图，可以通过它来使用 "),s("code",[t._v("List")]),t._v(" 中的访问方法（包括 "),s("code",[t._v("get")]),t._v(" 和 "),s("code",[t._v("set")]),t._v("）对 "),s("strong",[t._v("原数组")]),t._v(" 进行访问和元素的修改；")]),t._v(" "),s("p",[t._v("但是，不能调用 "),s("code",[t._v("add()")]),t._v(" 和 "),s("code",[t._v("remove()")]),t._v(" 这种能够对数组大小产生影响的方法；")]),t._v(" "),s("p",[t._v("注意，视图对象始终是在 "),s("strong",[t._v("原对象")]),t._v(" 进行操作的。")]),t._v(" "),s("blockquote",[s("p",[t._v("有趣的是，"),s("code",[t._v("asList()")]),t._v(" 返回的也是 "),s("code",[t._v("ArrayList")]),t._v(" 对象\n不过，不是 "),s("code",[t._v("java.util.ArrayList")]),t._v("，而是 "),s("code",[t._v("java.util.Arrays.ArrayList")]),t._v("，是其自身的一个子类")])]),t._v(" "),s("p",[t._v("Java 5 之后，"),s("code",[t._v("asList()")]),t._v(" 方法声明为了不定参数，可以直接传入元素进行转换操作。")]),t._v(" "),s("h3",{attrs:{id:"_5-2-子范围"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-子范围"}},[t._v("#")]),t._v(" 5.2 子范围")]),t._v(" "),s("p",[t._v("可以使用诸如 "),s("code",[t._v("subXXX()")]),t._v(" 和 "),s("code",[t._v("headXXX()")]),t._v(" 和 "),s("code",[t._v("tailXXX()")]),t._v(" 方法返回 Collection 的一个子范围；")]),t._v(" "),s("p",[t._v("可以通过这个子范围视图对集合的一部分进行操作。")]),t._v(" "),s("h3",{attrs:{id:"_5-3-不可变的视图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-不可变的视图"}},[t._v("#")]),t._v(" 5.3 不可变的视图")]),t._v(" "),s("p",[t._v("通过 "),s("code",[t._v("unmodifiableXXX()")]),t._v(" 可以获取一个不可修改的视图；")]),t._v(" "),s("p",[t._v("这个视图中的所有的更改器方法都会返回 "),s("code",[t._v("UnsupportedOperationException")]),t._v("；")]),t._v(" "),s("p",[t._v("当然，这不意味着其原始集合不能被更改，只是视图对象不能更改原有集合，但是通过原始集合的引用，同样可以更改原始的集合。")]),t._v(" "),s("p",[t._v("需要注意的是，"),s("code",[t._v("unmodifiableCollection()")]),t._v(" 返回的集合是通过原始的 "),s("code",[t._v("Object.equals()")]),t._v("  方法进行相等性判断的；")]),t._v(" "),s("p",[t._v("也就是说，不能通过 "),s("code",[t._v("Collection")]),t._v(" 视图进行相等性判定。")]),t._v(" "),s("h3",{attrs:{id:"_5-4-同步视图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-同步视图"}},[t._v("#")]),t._v(" 5.4 同步视图")]),t._v(" "),s("p",[t._v("集合框架还提供了一个同步视图，用来进行一系列的多线程同步工作。")]),t._v(" "),s("p",[t._v("通过 "),s("code",[t._v("synchronizedXXX()")]),t._v(" 可以获取到一个线程安全的 "),s("code",[t._v("Collection")]),t._v(" 或者 "),s("code",[t._v("Map")]),t._v("；")]),t._v(" "),s("p",[t._v("不过，这个线程安全仅限于一些基本的方法；")]),t._v(" "),s("p",[t._v("对于遍历方法，包括使用迭代器和 "),s("code",[t._v("Stream")]),t._v("，都需要 "),s("strong",[t._v("手动进行同步")])]),t._v(" "),s("h3",{attrs:{id:"_5-5-检查视图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-检查视图"}},[t._v("#")]),t._v(" 5.5 检查视图")]),t._v(" "),s("p",[t._v("在 Java 5 引入泛型之后，集合框架提供了一个检查视图；")]),t._v(" "),s("p",[t._v("它专门用于检查是否有其他类型的对象混入了集合之中。")]),t._v(" "),s("p",[t._v("例如：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" strings "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" strings"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("由于使用了原始类型，编译器无法发现这一泛型错误。")]),t._v(" "),s("p",[t._v("使用检查视图，我们就可以发现这一错误：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" checkedStrings "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Colllections")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("checkedList")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("strings"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("当发现类型不符合时，它会立即抛出一个 "),s("code",[t._v("ClassCastException")]),t._v("；")]),t._v(" "),s("p",[t._v("不过，它也有缺陷，它是依赖于虚拟机的泛型安全机制；")]),t._v(" "),s("p",[t._v("当向 "),s("code",[t._v("ArrayList<Pair<String>>")]),t._v(" 中插入 "),s("code",[t._v("Pair<Date>")]),t._v(" 时，就不能检测出这种错误。")])],1)}),[],!1,null,null,null);a.default=_.exports}}]);