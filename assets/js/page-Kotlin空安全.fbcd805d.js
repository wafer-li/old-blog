(window.webpackJsonp=window.webpackJsonp||[]).push([[96],{807:function(s,t,a){"use strict";a.r(t);var e=a(1),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"_1-概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述"}},[s._v("#")]),s._v(" 1. 概述")]),s._v(" "),a("p",[s._v("Kotlin 对于 Java 的一个很大的改进在于，Kotlin 的类型系统目标在于要**消除 "),a("code",[s._v("NullPointerException")]),s._v("**或者 NPE。")]),s._v(" "),a("p",[s._v("所以 Kotlin 提供了一个健壮的 Null 检查系统。")]),s._v(" "),a("h2",{attrs:{id:"_2-产生-npe-的原因"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-产生-npe-的原因"}},[s._v("#")]),s._v(" 2. 产生 NPE 的原因")]),s._v(" "),a("p",[s._v("可能产生 NPE 的原因如下：")]),s._v(" "),a("ul",[a("li",[s._v("显式调用 "),a("code",[s._v("throw NullPointerException()")])]),s._v(" "),a("li",[s._v("使用 "),a("code",[s._v("!!")]),s._v(" 操作符")]),s._v(" "),a("li",[s._v("Java 代码造成的")]),s._v(" "),a("li",[s._v("一些前后矛盾的初始化（在构造函数中没有初始化的 "),a("code",[s._v("this")]),s._v(" 在其他地方使用）")])]),s._v(" "),a("h2",{attrs:{id:"_3-kotlin-类型系统"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-kotlin-类型系统"}},[s._v("#")]),s._v(" 3. Kotlin 类型系统")]),s._v(" "),a("p",[s._v("在 Kotlin 中，类型系统将变量引用分成了"),a("strong",[s._v("两种类型")]),s._v("：可以为 "),a("code",[s._v("null")]),s._v(" 的类型（nullable），和不能为 "),a("code",[s._v("null")]),s._v(" 的类型（non-null）")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" String "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"abc"')]),s._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// compilation error")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("在类型后添加一个问号("),a("code",[s._v("?")]),s._v(")来表明它是可以为空的。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" String"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"abc"')]),s._v("\nb "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ok")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("此时，对于 "),a("code",[s._v("a")]),s._v("，由于它不会产生 NPE，你可以安全的访问它的成员。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" l "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("但是对于 "),a("code",[s._v("b")]),s._v("，由于它可能为空，所以直接访问它，编译器会报错")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" l "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// error: variable 'b' can be null")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("但是我们依旧需要访问 "),a("code",[s._v("b")]),s._v(" 啊！")]),s._v(" "),a("h2",{attrs:{id:"_4-访问可能为空变量的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-访问可能为空变量的方法"}},[s._v("#")]),s._v(" 4. 访问可能为空变量的方法")]),s._v(" "),a("p",[s._v("下面就介绍几种方法来进行 "),a("code",[s._v("b")]),s._v(" 的安全访问。")]),s._v(" "),a("h3",{attrs:{id:"_4-1-显式检查"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-显式检查"}},[s._v("#")]),s._v(" 4.1 显式检查")]),s._v(" "),a("p",[s._v("首先你可以直接对 "),a("code",[s._v("b")]),s._v(" 进行空检查")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" l "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("由于 Kotlin 具有智能造型特性，还可以直接在 "),a("code",[s._v("if")]),s._v(" 语句中访问 "),a("code",[s._v("b")]),s._v(" 的成员。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"String of length '),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter variable"}},[s._v("${")]),s._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),a("span",{pre:!0,attrs:{class:"token delimiter variable"}},[s._v("}")])]),s._v('"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Empty string"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("当然，这只适用于当 "),a("code",[s._v("b")]),s._v(" 符合智能造型条件的情景，否则，"),a("code",[s._v("b")]),s._v(" 有可能在检查之后再次变为空。")]),s._v(" "),a("h3",{attrs:{id:"_4-2-使用安全访问"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-使用安全访问"}},[s._v("#")]),s._v(" 4.2 使用安全访问")]),s._v(" "),a("p",[s._v("第二个方法是采用安全访问操作符("),a("code",[s._v("?.")]),s._v(")，即在点号("),a("code",[s._v(".")]),s._v(")前加一个问号("),a("code",[s._v("?")]),s._v(")")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[s._v("b"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("这个表达式当 "),a("code",[s._v("b")]),s._v(" 不为空时返回 "),a("code",[s._v("b.length")]),s._v("；\n当 "),a("code",[s._v("b")]),s._v(" 为空时，返回 "),a("code",[s._v("null")]),s._v("。")]),s._v(" "),a("p",[s._v("表达式的返回结果是 "),a("code",[s._v("Int?")])]),s._v(" "),a("p",[s._v("安全访问在链式操作中很有用。\n比如说，"),a("code",[s._v("bob")]),s._v(" 是一个 "),a("code",[s._v("Employee")]),s._v("，他有可能被派往一个 "),a("code",[s._v("Department")]),s._v("，这个部门也许会存在一个主管。\n那么我们通过以下调用链来获取 "),a("code",[s._v("bob")]),s._v(" 所在部门主管的名字。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[s._v("bob"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("department"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("head"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("当调用链上的任何一个值为 "),a("code",[s._v("null")]),s._v(" 时，表达式的返回值都为 "),a("code",[s._v("null")]),s._v("。")]),s._v(" "),a("p",[s._v("如果你想对集合中的非空元素进行某种操作，可以结合安全访问和 "),a("code",[s._v("let()")])]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" listWithNulls"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" List"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("String"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("listOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"A"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("item "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" listWithNulls"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     item"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("let")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("it"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// prints A and ignores null")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("blockquote",[a("p",[a("code",[s._v("let")]),s._v(" 操作接受一个 lambda 表达式，并返回 lambda 表达式的值。"),a("a",{attrs:{href:"https://github.com/JetBrains/kotlin/blob/1.0.3/libraries/stdlib/src/kotlin/util/Standard.kt#L55",target:"_blank",rel:"noopener noreferrer"}},[s._v("源代码"),a("OutboundLink")],1)])]),s._v(" "),a("h3",{attrs:{id:"_4-3-elvis-表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-elvis-表达式"}},[s._v("#")]),s._v(" 4.3 Elvis 表达式")]),s._v(" "),a("p",[s._v("如果对于一个引用 "),a("code",[s._v("r")]),s._v("，我们需要：\n当 "),a("code",[s._v("r")]),s._v(" 不为空时，使用它；否则我们就使用一个其他的值("),a("code",[s._v("x")]),s._v(")")]),s._v(" "),a("p",[s._v("我们可以使用如下的语句：")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" l"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Int "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("一个更为简单的方法是使用 Elvis 表达式("),a("code",[s._v("?:")]),s._v(")")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" l "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?:")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("如果在 "),a("code",[s._v("?:")]),s._v(" 的左边的值不为空，那么 Elvis 操作符就返回这个值，否则就返回右边的值。")]),s._v(" "),a("p",[s._v("与 Java 中的条件操作符不同的是，只有当 "),a("code",[s._v("?:")]),s._v(" 的左边的值"),a("strong",[s._v("为空")]),s._v("时，才会执行右边的语句；\n所以这个操作符不能像条件操作符一样执行一般的判断。")]),s._v(" "),a("blockquote",[a("p",[s._v("想要实现条件操作符的功能，请使用单行的 "),a("code",[s._v("if-else")]),s._v(" 表达式。")])]),s._v(" "),a("h3",{attrs:{id:"_4-4-操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-操作符"}},[s._v("#")]),s._v(" 4.4 "),a("code",[s._v("!!")]),s._v(" 操作符")]),s._v(" "),a("p",[s._v("第三个方法是给 NPE 爱好者们使用的，我们可以使用 "),a("code",[s._v("b!!")]),s._v("，使用它来进行调用，结果就会和 Java 一样，会抛出 NPE。")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" l "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("也就是说，如果你需要 NPE，就使用这个操作符。")]),s._v(" "),a("h2",{attrs:{id:"_5-安全的造型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-安全的造型"}},[s._v("#")]),s._v(" 5. 安全的造型")]),s._v(" "),a("p",[s._v("一般的造型 "),a("code",[s._v("as")]),s._v(" 在对象不相符的时候，会产生一个 "),a("code",[s._v("ClassCastException")]),s._v("。")]),s._v(" "),a("p",[s._v("一个更好的选择是使用 "),a("code",[s._v("as?")]),s._v("，一种更为安全的造型，当造型失败时，将会返回 "),a("code",[s._v("null")])]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" aInt"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Int"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" Int  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// return null if failure")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h2",{attrs:{id:"_6-空类型的集合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-空类型的集合"}},[s._v("#")]),s._v(" 6. 空类型的集合")]),s._v(" "),a("p",[s._v("如果你拥有一个可空类型的集合，想要过滤出非空类型。只需要写如下语句：")]),s._v(" "),a("div",{staticClass:"language-kotlin line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" nullableList"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" List"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("Int"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("listOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" intList"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" List"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("Int"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" nullableList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("filterNotNull")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// non-null")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])])])}),[],!1,null,null,null);t.default=n.exports}}]);