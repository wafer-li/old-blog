(window.webpackJsonp=window.webpackJsonp||[]).push([[161],{855:function(t,s,a){"use strict";a.r(s);var e=a(1),v=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("之前提到枚举实现是单例的最佳实现，这毋庸置疑；")]),t._v(" "),a("p",[t._v("不过，对比枚举和静态内部类，好像它们的区别就在于防止了反射攻击；")]),t._v(" "),a("p",[t._v("那么，都『攻击』了，为啥偏偏没事去改你的单例呢？直接获取更有意思的信息不是更好吗？")]),t._v(" "),a("h2",{attrs:{id:"_1-『反射攻击』不是攻击"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-『反射攻击』不是攻击"}},[t._v("#")]),t._v(" 1. 『反射攻击』不是攻击")]),t._v(" "),a("p",[t._v("这里所提到的『反射攻击』的概念，实际上并不是信息安全领域的 『攻击』 的概念；")]),t._v(" "),a("p",[t._v("而是， "),a("strong",[t._v("通过反射的合理利用，可以令单例失效")]),t._v("；")]),t._v(" "),a("p",[t._v("那么在日常开发中，最常遇到的反射攻击就是 "),a("strong",[t._v("对象的序列化")]),t._v("。")]),t._v(" "),a("p",[t._v("当单例需要实现序列化的时候，反序列化过程实际上就是使用 "),a("strong",[t._v("反射")]),t._v(" 来生成了新的实例。")]),t._v(" "),a("p",[t._v("那么在序列化和反序列化的过程中，单例模式就被破坏掉了。")]),t._v(" "),a("p",[t._v("这时，有人提出可以利用 "),a("code",[t._v("readResolve()")]),t._v(" 方法来防止这种事情的发生；")]),t._v(" "),a("p",[t._v("而实际上， "),a("strong",[t._v("单纯利用")]),t._v(" "),a("code",[t._v("readResolve()")]),t._v(" 也并不能防止单例被破坏；")]),t._v(" "),a("p",[t._v("《Effective Java 第二版》在 77 条提出：")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("如果依赖 "),a("code",[t._v("readResolve()")]),t._v(" 方法来进行实例控制，带有对象引用类型的所有实例域都必须声明为 "),a("code",[t._v("transient")]),t._v(" 的。")])]),t._v(" "),a("p",[t._v("否则，那种破釜沉舟式的攻击者，就有可能在 "),a("code",[t._v("readResolve()")]),t._v(" 方法运行之前，保护指向反序列化对象的引用。")])]),t._v(" "),a("p",[t._v("此时，枚举类型就派上用场了，枚举为了防止这种事情的发生，单独实现了一套序列化和反序列化的机制；")]),t._v(" "),a("p",[t._v("大体就是利用 "),a("code",[t._v("valueOf()")]),t._v(" 来进行反序列化，而不是使用普通的序列化机制；")]),t._v(" "),a("p",[t._v("同时，也禁止声明 "),a("code",[t._v("readResolve()")]),t._v(" 和 "),a("code",[t._v("readObject()")]),t._v(" 这类方法。")]),t._v(" "),a("h2",{attrs:{id:"_2-kotlin-单例是懒加载的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-kotlin-单例是懒加载的"}},[t._v("#")]),t._v(" 2. Kotlin 单例是懒加载的")]),t._v(" "),a("p",[t._v("下面是 Kotlin 单例的反编译 Java 代码")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Test")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Test")]),t._v(" INSTANCE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      INSTANCE "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br")])]),a("p",[t._v("虽然它和所谓的饿汉式 Java 单例很类似，但是在实际使用中，它是 "),a("strong",[t._v("懒加载")]),t._v(" 的。")]),t._v(" "),a("p",[t._v("为什么呢？")]),t._v(" "),a("p",[t._v("原因就在于 JVM 类的加载时机；")]),t._v(" "),a("p",[t._v("JVM Specification 中在 "),a("a",{attrs:{href:"https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-5.html#jvms-5.4.2",target:"_blank",rel:"noopener noreferrer"}},[t._v("准备阶段"),a("OutboundLink")],1),t._v(" 中提出：")]),t._v(" "),a("blockquote",[a("p",[t._v("explicit initializers for static fields are executed as part of initialization (§5.5), not preparation.")])]),t._v(" "),a("p",[t._v("所以，上面的 "),a("code",[t._v("INSTANCE")]),t._v(" 的实例化，即 "),a("code",[t._v("static")]),t._v(" 块是在类加载的 "),a("strong",[t._v("初始化阶段")]),t._v(" 进行的；")]),t._v(" "),a("p",[t._v("而对于初始化阶段，JVM Specification 强制规定了有且仅有 "),a("a",{attrs:{href:"https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-5.html#jvms-5.5",target:"_blank",rel:"noopener noreferrer"}},[t._v("5 种情况"),a("OutboundLink")],1),t._v(" 可以触发初始化阶段；")]),t._v(" "),a("p",[t._v("而这 5 种情况，都是你真正使用到类的实例的时候才会出现的；")]),t._v(" "),a("p",[t._v("根据这 5 种情况，再结合 Kotlin "),a("code",[t._v("object")]),t._v(" 的单例语法和使用，可以得出有且仅有 2 种情况会导致 "),a("code",[t._v("object")]),t._v(" 单例提前进行初始化：")]),t._v(" "),a("ol",[a("li",[t._v("反射")]),t._v(" "),a("li",[t._v("调用类中其他的静态变量")])]),t._v(" "),a("p",[t._v("对于反射，一个很典型的应用场景就是使用 classpath scanner 进行注解扫描；")]),t._v(" "),a("p",[t._v("不过，JB 的工程师提出，classpath scanner 并不需要反射来实现注解扫描"),a("sup",{staticClass:"footnote-ref"},[a("a",{attrs:{href:"#footnote1"}},[t._v("[1]")]),a("a",{staticClass:"footnote-anchor",attrs:{id:"footnote-ref1"}})]),t._v("；")]),t._v(" "),a("p",[t._v("于是我随便找了一个 classpath scanner: "),a("a",{attrs:{href:"https://github.com/lukehutch/fast-classpath-scanner",target:"_blank",rel:"noopener noreferrer"}},[t._v("fast-classpath-scanner"),a("OutboundLink")],1),t._v("；")]),t._v(" "),a("p",[t._v("经过使用之后，发现即使打印出了单例的信息，但是 JVM 只加载了 "),a("code",[t._v("main")]),t._v(" 方法的类，而并没有加载单例。")]),t._v(" "),a("p",[t._v("相关的结果在 "),a("a",{attrs:{href:"https://gist.github.com/wafer-li/1931170fd79c0ec1567f5737454f61ab",target:"_blank",rel:"noopener noreferrer"}},[t._v("这个 gist"),a("OutboundLink")],1),t._v(" 中。")]),t._v(" "),a("blockquote",[a("p",[t._v("单例的名字叫 "),a("code",[t._v("Test")]),t._v("，而 "),a("code",[t._v("main()")]),t._v(" 方法类的名字叫 "),a("code",[t._v("SingletonTest")])])]),t._v(" "),a("p",[t._v("对于第二种情况，在 Kotlin 中是不存在的。为什么呢？")]),t._v(" "),a("p",[t._v("因为对于 Kotlin "),a("code",[t._v("object")]),t._v(" 中，声明值的方法只有 "),a("code",[t._v("var")]),t._v(" "),a("code",[t._v("val")]),t._v(" 和 "),a("code",[t._v("const val")]),t._v(" 三种；")]),t._v(" "),a("p",[t._v("对于前两种，虽然反编译出来的代码指明这样的确定义了两个静态的值；")]),t._v(" "),a("p",[a("code",[t._v("var")]),t._v(" 的情况：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ws3.sinaimg.cn/large/006tNbRwgy1ffzakmwghkj30rc0uotax.jpg",alt:""}})]),t._v(" "),a("p",[a("code",[t._v("val")]),t._v(" 的情况：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ws4.sinaimg.cn/large/006tNbRwgy1ffzalhmszqj30rs0ty40u.jpg",alt:""}})]),t._v(" "),a("p",[t._v("但是，当你使用的时候，却是通过 "),a("code",[t._v("INSTANCE")]),t._v(" 来引用的。")]),t._v(" "),a("p",[t._v("这样无论如何都会导致单例的实例化。")]),t._v(" "),a("p",[t._v("而使用 "),a("code",[t._v("const val")]),t._v(" 的确得到了一个 "),a("code",[t._v("public static")]),t._v(" 的值；")]),t._v(" "),a("p",[t._v("但是，当你使用的时候，编译器会自动替换为 "),a("strong",[t._v("字面量")]),t._v("，不会导致单例加载；")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ws1.sinaimg.cn/large/006tNbRwgy1ffzamh0h4pj30tc0q276e.jpg",alt:""}})]),t._v(" "),a("p",[t._v("所以，综上所述，Kotlin 中 "),a("code",[t._v("object")]),t._v(" 单例是懒加载的。")]),t._v(" "),a("hr",{staticClass:"footnotes-sep"}),t._v(" "),a("section",{staticClass:"footnotes"},[a("ol",{staticClass:"footnotes-list"},[a("li",{staticClass:"footnote-item",attrs:{id:"footnote1"}},[a("p",[t._v("https://discuss.kotlinlang.org/t/kotlin-singleton-implementation/2853/6?u=omysho "),a("a",{staticClass:"footnote-backref",attrs:{href:"#footnote-ref1"}},[t._v("↩︎")])])])])])])}),[],!1,null,null,null);s.default=v.exports}}]);